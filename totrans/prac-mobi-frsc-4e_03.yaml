- en: Understanding the Internals of iOS Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to Apple, there were 1.4 billion active Apple devices in 2019, 900
    million of which were running on iOS. While iOS is the leading **operating system**
    (**OS**) for tablets worldwide, Android continues to be the leading OS for smartphones.
    Regardless of the statistics, if you are a forensic examiner, the chances are
    that you will need to conduct an examination of an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: In order to perform a forensic examination of an iOS device, you as the examiner
    must understand the internal components and inner workings of that device. Developing
    an understanding of the underlying components of a mobile device will help you
    understand the criticalities involved in the forensic process, including what
    data can be acquired, where the data is stored, and what methods can be used to
    access the data from that device. So, before we delve into the examination of
    iOS devices, it is necessary to gain an understanding of the different models
    that exist and their internal components. Throughout this book, we will perform
    forensic acquisition and analysis on iOS devices, including the iPhone, iPad,
    and Apple Watch.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to introduce you to iOS device technology. We will
    cover details that may often get overlooked but will help you during your forensic
    investigation. You must understand the different iOS devices and how data is stored
    on these devices before you can successfully extract it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: iPhone models and hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad models and hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Hierarchical File System** (**HFS**) Plus and **Apple File System** (**APFS**)
    filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iPhone OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone models and hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iPhone is among the most popular smartphones on the market. Apple released
    the first-generation iPhone in June 2007\. Since the first release, the iPhone
    became extremely popular due to its many groundbreaking features and usability.
    The introduction of the iPhone has since redefined the entire world of mobile
    computing. Consumers have started looking for faster and more efficient phones.
    Various iPhone models now exist, with different features and storage capabilities
    to serve consumer requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The iPhones released since the third edition of *Practical Mobile Forensics—*the
    iPhone XR, XS, XS Max, 11, and 11 Pro—can be challenging when it comes to dealing
    with filesystem forensic acquisition methods. Just like the devices released since
    the iPhone 5, there is no method or tool available to physically recover data
    from these devices, unless they are jailbroken. However, logical acquisition can
    be obtained if the iPhone is unlocked. Acquisition methods for data extraction
    are available and will be discussed in [Chapter 3](6bdeccbc-e651-43f3-b5ed-4e6d071adec6.xhtml),
    *Data Acquisition from iOS Devi**ces*, and [Chapter 4](f082adcc-6892-4e66-80cc-49b9752cb56a.xhtml),
    *Data Acquisition from iOS Backups*. Now, let's learn how to identify the correct
    hardware model.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the correct hardware model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before examining an iPhone, it is necessary to identify the correct hardware
    model and the firmware version installed on the device. Knowing the iPhone's details
    helps you to understand the criticalities and possibilities of obtaining evidence
    from an iPhone. For example, in many cases, the device passcode is required in
    order to obtain a logical image. Depending on the iOS version, device model, and
    passcode complexity, it may be possible to obtain the device passcode using a
    brute-force attack.
  prefs: []
  type: TYPE_NORMAL
- en: There are various ways to identify the hardware of a device. The easiest way
    to identify the hardware of some devices is to observe the model number displayed
    on the back of the device. To make this task even simpler, you can use Apple's
    Knowledge Base articles. More information on iPhone models can be found at [https://support.apple.com/en-in/HT201296](https://support.apple.com/en-in/HT201296).
  prefs: []
  type: TYPE_NORMAL
- en: 'The firmware version of an iPhone can be found by accessing the Settings option
    and then navigating to General | About | Software Version, as shown in the following
    screenshot. The purpose of the firmware is to enable certain features and assist
    with the general functioning of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc3b21fd-b272-4a8a-8982-08baade4747f.png)'
  prefs: []
  type: TYPE_IMG
- en: The iPhone About screen, displaying the software version 13.2
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the `ideviceinfo` command-line tool that is available in the
    `libimobiledevice` software library ([http://www.libimobiledevice.org/](http://www.libimobiledevice.org/))
    can be used to identify the iPhone model and its iOS version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain the iPhone model and its iOS version information on a Windows 10
    workstation, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest binaries from the following link: [https://dev.azure.com/libimobiledevice-win32/imobiledevice-net/_build/results?buildId=419 ](https://dev.azure.com/libimobiledevice-win32/imobiledevice-net/_build/results?buildId=419)(click
    on Artifacts | Binaries to start downloading).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the archive with x86 or x64 binaries, depending on your workstation's
    version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Command Prompt and change the directory to the one with binaries (use the
    `cd` command for this).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the iPhone to your workstation using a **Universal Serial Bus** (**USB**)
    cable (for the latest iOS versions, the passcode is also required), and run the
    `ideviceinfo` command with the `-s` option, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `ideviceinfo` command displays the iPhone identifier, its
    internal name, and the iOS version, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8642f4eb-7700-451f-ace7-986d9a784c55.png)'
  prefs: []
  type: TYPE_IMG
- en: The output from ideviceinfo displaying firmware version 13.2
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other tools, such as iExplorer, will provide access to similar iOS device
    information, as shown in the following screenshot. The methods for recovering
    iPhone device information will work on iPad devices as well. Here, iExplorer is
    being used to obtain device information from an iPhone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf7c4110-5f8a-40c6-b0ad-efe2a81a3b9d.png)'
  prefs: []
  type: TYPE_IMG
- en: iExplorer displaying device info
  prefs: []
  type: TYPE_NORMAL
- en: Every release of the iPhone comes with improved or newly added features. As
    previously stated in this chapter, knowing the iPhone's details helps you to understand
    the criticalities and possibilities of obtaining evidence from it. You must know
    the model of the device to ensure that the tools and methodologies being deployed
    support that particular iPhone. Additionally, the internal storage size of the
    iPhone must be determined to ensure that the evidence container is large enough
    for the entire forensic image. Most tools will not alert you if there is not enough
    disk space on the evidence drive until space has run out. This will waste time
    and force you to acquire the device a second time. Finally, the network capabilities
    of the device must also be noted so that you can properly isolate the device to
    prevent remote accessing or wiping during the examination. This will be discussed
    further in [Chapter 3](6bdeccbc-e651-43f3-b5ed-4e6d071adec6.xhtml), *Data Acquisition
    from iOS Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: Again, some familiarity with iPhone device hardware will aid you in determining
    how to handle the device during a forensic investigation. Certain models enforce
    full-disk encryption, while older models do not. Encrypted devices require additional
    steps during an acquisition—if access is even possible. You must be prepared for
    all hurdles you may be required to clear during the acquisition and analytical
    stages of the investigation. In addition to this, knowing the capabilities that
    the iPhone has—and the initial and current iOS version—makes a difference in the
    data you will be able to recover from the device. Apple is not consistent with
    data storage locations across iOS versions. Therefore, you must know the original
    version installed when the phone was first in use to ensure that the forensic
    tools do not overlook data that could aid in the investigation.
  prefs: []
  type: TYPE_NORMAL
- en: More information about identifying iPhone models can be found at [https://support.apple.com/en-us/HT201296](https://support.apple.com/en-us/HT201296).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the iPhone hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iPhone is a collection of modules, chips, and electronic components from
    different manufacturers. Due to the complexities of the iPhone, the list of hardware
    components is extensive, and each device should be researched for internal components.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the iPhone 11 has an A13 Bionic processor; 64 GB, 128 GB, or 256
    GB storage; 4 GB of RAM; a 6.1-inch Liquid Retina **liquid-crystal display** (**LCD**);
    and a dual-lens 12 MP rear camera array.
  prefs: []
  type: TYPE_NORMAL
- en: Internal images for all iPhones can be found in the teardown section of [https://www.ifixit.com/Device/iPhone](https://www.ifixit.com/Device/iPhone).
  prefs: []
  type: TYPE_NORMAL
- en: iPad models and hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Apple iPhone changed the way cell phones are produced and used. Similarly,
    the iPad, a version of the tablet computer introduced in January 2010, quashed
    the sales of notebooks. With the iPad, individuals can shoot videos, take photos,
    play music, read books, browse the internet, and do much more. Various iPad models
    now exist—for example, iPad Air 3 and iPad Pro—with different features and storage
    capabilities. More information on identifying iPad models can be found at [https://support.apple.com/en-in/HT201471](https://support.apple.com/en-in/HT201471).
  prefs: []
  type: TYPE_NORMAL
- en: As with the iPhone, not all versions of the iPad are supported for filesystem
    acquisition. Additionally, Apple changes data storage locations in iOS versions,
    which affects iPad devices as well. You must be aware of the different models,
    the released and currently installed iOS version, the storage capability, the
    network access vectors, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the iPad hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key factors of the success of Apple iOS devices is the proper selection
    of their hardware components. Just like the iPhone, the iPad is also a collection
    of modules, chips, and electronic components from different manufacturers. Internal
    images for all iPads can be found in the teardown section of [https://www.ifixit.com/Device/iPad](https://www.ifixit.com/Device/iPad).
  prefs: []
  type: TYPE_NORMAL
- en: The HFS Plus and APFS filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To better understand the forensic process of an iOS device, it is useful to
    know about the filesystem that is used. Originally, the filesystem used in the
    iPhone and other Apple iOS devices was HFSX. This is a variation of HFS Plus,
    with one major difference. HFSX is case-sensitive, whereas HFS Plus is case-insensitive.
    Other differences will be discussed later in this chapter. APFS was introduced
    in June 2016 as a replacement for HFS Plus and became the default filesystem for
    iOS devices with the release of iOS 10.3, and for macOS devices with the release
    of macOS 10.13.
  prefs: []
  type: TYPE_NORMAL
- en: The HFS Plus filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 1996, Apple developed a new filesystem, HFS, to accommodate the storage of
    large datasets. In an HFS filesystem, the storage medium is represented as volumes.
    HFS volumes are divided into logical blocks of 512 bytes. The logical blocks are
    numbered from first to last on a given volume and will remain static with the
    same size as physical blocks—that is, 512 bytes. These logical blocks are grouped
    together into allocation blocks, which are used by the HFS filesystem to track
    data in a more efficient way. HFS uses a 16-bit value to address allocation blocks,
    which limits the number of allocation blocks to 65,535\. To overcome the inefficient
    allocation of disk space and some of the limitations of HFS, Apple introduced
    the HFS Plus filesystem ([http://dubeiko.com/development/FileSystems/HFSPLUS/tn1150.html](http://dubeiko.com/development/FileSystems/HFSPLUS/tn1150.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The HFS Plus filesystem was designed to support larger file sizes. Sectors
    on HFS volumes are usually 512 bytes in size. These sectors form allocation blocks.
    The number of such blocks depends on the size of the volume. HFS Plus uses block
    addresses of 32 bits to address allocation blocks. HFS Plus uses *journaling*
    by default. Journaling is the process of logging every transaction to the disk,
    which helps prevent filesystem corruption. The key characteristics of the HFS
    Plus filesystem include the following: efficient use of disk space, Unicode support
    for filenames, support for name forks, file compression, journaling, dynamic resizing,
    dynamic defragmentation, and an ability to boot on OSes other than macOS.'
  prefs: []
  type: TYPE_NORMAL
- en: The HFS Plus volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The HFS Plus volume contains a number of internal structures to manage the
    organization of data. These structures include a header, an alternate header,
    and five special files: an allocation file, an extents overflow file, a catalog
    file, an attributes file, and a startup file. Among the five files, three files
    (the extents overflow file, the catalog file, and the attributes file) use a B-Tree
    structure. This is a data structure that allows data to be efficiently searched,
    viewed, modified, or removed. The HFS Plus volume structure is shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e433c31a-7e4d-40b6-a58a-756e53a09081.png)'
  prefs: []
  type: TYPE_IMG
- en: The HFS Plus volume structure
  prefs: []
  type: TYPE_NORMAL
- en: 'The volume structure is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reserved (1024 bytes): This is reserved for bootloader information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volume Header**: This stores volume information, such as the size of allocation
    blocks, a timestamp of when the volume was created, and metadata about each of
    the five special files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allocation File**: This file is used to track which allocation blocks are
    in use by the system. The file format consists of 1 bit for every allocation block.
    If the bit is set, the block is in use. If it is not set, the block is free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extents Overflow File**: This file records the allocation blocks that are
    allocated when the file size exceeds eight blocks, which helps in locating the
    actual data when referred. Bad blocks are also recorded in the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Catalog File**: This file contains information about the hierarchy of files
    and folders, which is used to locate any file and folder within the volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attributes File**: This file contains inline data attribute records, fork
    data attribute records, and extension attribute records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Startup File**: This file contains the information needed to assist in booting
    a system that does not have HFS Plus support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternate Volume Header: This is a backup of the volume header, and it''s mainly
    used for disk repairing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reserved (512 bytes): This is reserved for use by Apple, and it is used during
    the manufacturing process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's look at the APFS filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: The APFS filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'APFS is a new filesystem for iOS, macOS, tvOS, and watchOS. It is a 64-bit
    filesystem and supports over 9 quintillion files on a single volume. The following
    is a list of its main features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clones**: These are instantaneous copies of files or directories. Modifications
    are written elsewhere and continue to share the unmodified blocks; the changes
    are saved as deltas of the cloned file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snapshots**: **Point-in-Time** (**PIT**) read-only instances of the filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Space sharing**: This allows multiple filesystems to share the same underlying
    free space on a physical volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encryption**: There are three modes, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No encryption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-key encryption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-key encryption with per-file keys for file data and a separate key for
    sensitive metadata
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the hardware, the **Advanced Encryption Standard-XEX-based tweaked
    codebook mode with ciphertext stealing** (**AES-XTS**) or the **Advanced Encryption
    Standard****-Cipher Blocker Chaining** (**AES-CBC**) encryption mode is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Crash protection**: This is a novel copy-on-write metadata scheme; it''s
    used to ensure that filesystem updates are crash-protected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sparse files**: These allow the logical size of files to be greater than
    the physical space they occupy on the disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast directory sizing**: This quickly computes the total space used by a
    directory hierarchy, allowing it to be updated as the hierarchy evolves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The APFS structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, APFS is structured in a single container that may contain one or more volumes.
    The APFS structure is presented in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99f50f83-528f-4476-b8d0-6a5291f5f114.png)'
  prefs: []
  type: TYPE_IMG
- en: Overview of the APFS structure
  prefs: []
  type: TYPE_NORMAL
- en: Each filesystem structure in APFS starts with a block header. The block header
    starts with a checksum (Fletcher's checksum algorithm is used) for the whole block
    and also contains the copy-on-write version of the block, the block ID, and the
    block type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The APFS structure can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The Container Superblock contains information on the block size, the number
    of blocks and pointers to the space manager for this task, the block IDs of all
    volumes, and a pointer to a block map B-Tree (which contains entries for each
    volume, along with its ID and offset).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nodes** are used for storing different kinds of entries. They can be part
    of a B-Tree or exist on their own and can contain either flexible or fixed-sized
    entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Space Man(ager) manages the allocated blocks in the APFS container, and
    stores the number of free blocks and a pointer to the Allocation Info File.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **A****llocation Info File** stores the allocation file's length, version,
    and the offset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **B-Trees** manage multiple nodes and contain the offset of the root node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Volume Superblock** contains the name of the volume, its ID, and a timestamp.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As for allocation files, they are simple bitmaps and do not have a block header
    and type ID.
  prefs: []
  type: TYPE_NORMAL
- en: Disk layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the filesystem is configured as two logical disk partitions: the
    system (root or firmware) partition and the user data partition.'
  prefs: []
  type: TYPE_NORMAL
- en: The system partition contains the OS and all of the preloaded applications used
    with the iPhone. The system partition is mounted as read-only unless an OS upgrade
    is in progress or the device is jailbroken. The partition is updated only when
    a firmware upgrade is performed on the device. During this process, the entire
    partition is formatted by iTunes without affecting any of the user data. The system
    partition takes only a small portion of storage space, normally between 0.8 GB
    and 4 GB, depending on the size of the NAND drive. As the system partition was
    designed to remain in a factory state for the entire lifetime of the iPhone, there
    is typically little useful evidentiary information that can be obtained from it.
    If the iOS device is jailbroken, the files containing information regarding the
    jailbreak and user data may be resident on the system partition. Jailbreaking
    an iOS device allows the user root access to the device, but voids the manufacturer
    warranty. Jailbreaking will be discussed later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The user data partition contains all the user-created data, ranging from music
    and contacts to third-party application data. The user data partition occupies
    most of the NAND memory and is mounted to the `/private/var` directory on the
    device. Most of the evidentiary information can be found in this partition. During
    a filesystem acquisition, the user data partition contents should be captured
    and saved as a `.tar` file. Acquired data can be easily extracted and parsed by
    most commercial mobile forensic tools.
  prefs: []
  type: TYPE_NORMAL
- en: The iPhone OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iOS is Apple's most advanced and feature-rich proprietary mobile OS. It was
    released with the first generation of the iPhone. When introduced, it was named
    iPhone OS, and it was later renamed iOS to reflect the unified nature of the OS
    that powers all Apple iOS devices, such as the iPhone, iPod touch, iPad, and Apple
    TV. iOS is derived from core OS X technologies and is streamlined to be compact
    and efficient for mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: It utilizes a multi-touch interface, where simple gestures are used to operate
    and control the device, such as swiping your finger across the screen to move
    to the successive page or pinching your fingers to zoom. In simple terms, iOS
    assists with the general functioning of the device.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iOS is an intermediary between the device hardware components and the applications
    on the screen. The applications don't interact with the underlying hardware directly.
    Instead, they do it through a well-defined system interface that protects them
    from hardware changes. This abstraction makes it easy to build applications that
    work on devices with different hardware capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The iOS architecture consists of four layers: the Cocoa Touch layer, the Media
    layer, the Core Services layer, and the Core OS layer. Each layer consists of
    several frameworks that help to build an application, as illustrated in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea1ddfbe-6b37-485c-ac05-f340e04262a9.png)'
  prefs: []
  type: TYPE_IMG
- en: The iOS layers
  prefs: []
  type: TYPE_NORMAL
- en: 'These layers can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cocoa Touch**: This layer contains the key frameworks required to develop
    the visual interface for iOS applications. Frameworks in this layer provide the
    basic application infrastructure and support key technologies, such as touch-based
    input, multitasking, and many high-level system services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Media**: This layer provides the graphics, audio, and video frameworks to
    create the best multimedia experience available on a mobile device. The technologies
    in this layer help developers to build applications that look and sound great.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core Services**: This layer provides the fundamental system services that
    are required for the applications. Not all of these services are used by developers,
    though many parts of the system are built on top of them. This layer contains
    technologies that enable support for location services, iCloud, and social media.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core OS**: This layer is the base layer and sits directly on top of the device
    hardware. This layer deals with low-level functionalities and provides services
    such as networking (**Berkeley Software Distribution** (**BSD**) sockets), memory
    management, threading (**Portable Operating System Interface** (**POSIX**) threads),
    filesystem handling, external accessories access, and **Inter Process Communication**
    (**IPC**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have learned about the iOS architecture, let's have a look at iOS
    security.
  prefs: []
  type: TYPE_NORMAL
- en: iOS security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Newer versions of iOS have been designed with security at their core. At the
    highest level, the iOS security architecture is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c38cd4a8-438d-4f8d-9ebb-602e4b1483c9.png)'
  prefs: []
  type: TYPE_IMG
- en: The iOS security architecture
  prefs: []
  type: TYPE_NORMAL
- en: Apple iOS devices such as iPhone, iPad, and iPod Touch are designed with layers
    of security. Low-level hardware features safeguard from malware attacks, and the
    high-level OS features prevent unauthorized use. A brief overview of the iOS security
    features is provided in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Passcodes, Touch ID, and Face ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passcodes restrict unauthorized access to the device. Once a passcode is set,
    each time you turn on or wake up the device, it will ask for the passcode to access
    the device. iOS devices support simple as well as complex passcodes. iOS 9 released
    the option to use a six-digit simple passcode instead of the legacy four-digit
    option. The iPhone 5S and later also supports Touch ID fingerprints as a passcode,
    which are backed up with a simple or complex passcode. The iPhone X and later
    support a new biometric way of locking the device—Face ID—so that users can use
    their faces as the passcodes. And it's even more secure, as the chance that a
    stranger will unlock your iPhone with Touch ID is 1 in 50,000, but with Face ID
    it is 1 in 1,000,000.
  prefs: []
  type: TYPE_NORMAL
- en: Code signing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code signing prevents users from downloading and installing unauthorized applications
    on the device. Apple says the following about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Code Signing is the process by which your compiled iOS application is sealed
    and identified as yours. Also, iOS devices won''t run an application or load a
    library unless it is signed by a trusted party. To ensure that all apps come from
    a known and approved source and have not been tampered with, iOS requires that
    all executable code be signed using an Apple-issued certificate."*'
  prefs: []
  type: TYPE_NORMAL
- en: Sandboxing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sandboxing mitigates post-code-execution exploitation by placing the application
    into a tightly restricted area. Applications installed on the iOS device are sandboxed,
    and one application cannot access the data stored by another. Essentially, a sandbox
    is a mechanism that enforces fine-grained controls that limit an application's
    access to files, network resources, hardware, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On iOS devices (starting with the iPhone 4), the entire filesystem is encrypted
    with a filesystem key, which is computed from the device's unique hardware key.
    This key is stored in effaceable storage, which exists between the OS and hardware
    levels of the device. This is the reason that **Joint Test Action Group** (**JTAG**)
    and chip-off methods are not useful acquisition methods, as the entire data dump
    will be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Data protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data protection is designed to protect data at rest and to make offline attacks
    difficult. It allows applications to leverage the user's device passcode, in concert
    with the device hardware encryption, to generate a strong encryption key. Later,
    the strong encryption key is used to encrypt the data stored on the disk. This
    key protects data from unauthorized access when the device is locked, so critical
    information is secured even if the device is compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Address Space Layout Randomization (ASLR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASLR is an exploit mitigation technique introduced with iOS 4.3\. ASLR randomizes
    the application object's location in the memory, making it difficult to exploit
    the memory corruption vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege separation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'iOS runs with the **principle of least privilege** (**PoLP**). It contains
    two user roles: *root* and *mobile*. The most important processes in the system
    run with root user privileges. All other applications to which the user has direct
    access, such as the browser and third-party applications, run with mobile user
    privileges.'
  prefs: []
  type: TYPE_NORMAL
- en: Stack-smashing protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stack-smashing protection is an exploit mitigation mechanism. It protects the
    device against buffer overflow attacks by placing a random and known value (called
    a stack canary) between a buffer and the control data on the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Data Execution Prevention (DEP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DEP is an exploit mitigation technique mechanism through which a processor can
    distinguish the portions of memory that are executable code from data. For example,
    in a code injection attack, an attacker tries to inject a vector and execute it.
    But DEP prevents this because it recognizes the injected part as data and not
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Data wiping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iOS provides the Erase All Content and Settings option to wipe the data on an
    iPhone. This type of data wipe erases user settings and information by removing
    the encryption keys that protect the data. As the encryption keys are erased from
    the device, it is not possible to recover the deleted data, not even during forensic
    investigations. Other wiping methods are available that overwrite the data in
    the device memory. More information on wiping can be found at [https://support.apple.com/en-in/HT201274](https://support.apple.com/en-in/HT201274).
  prefs: []
  type: TYPE_NORMAL
- en: Activation Lock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Activation Lock, introduced with iOS 7, is a theft deterrent that works by leveraging
    Find My iPhone. When Find My iPhone is enabled, it enables Activation Lock, and
    a user's Apple ID and password will be required to turn off Find My iPhone, to
    erase the device, and to reactivate it.
  prefs: []
  type: TYPE_NORMAL
- en: The App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The App Store is an application distribution platform for iOS, developed and
    maintained by Apple. It is a centralized online store where users can browse and
    download both free and paid apps. These apps expand the functionality of a mobile
    device. As of the first quarter of 2019, there were 2.2 million applications in
    the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Apps available in the App Store are generally written by third-party developers.
    Developers use Xcode and the iOS **software development kit** (**SDK**) to develop
    applications. Later, they submit the app to Apple for approval. Apple follows
    an extensive review process to check the app against the company's guidelines.
    If Apple approves the app, it is published to the App Store, where users can download
    or buy it. The strict review process makes the App Store less prone to malware,
    but not 100% secure.
  prefs: []
  type: TYPE_NORMAL
- en: XcodeGhost, the Apple malware that infected 50 applications within the Apple
    App Store, was detected in September 2015\. This malware was built into Xcode,
    which made it harder to detect, and was reported to affect more than 500 million
    users worldwide. Once detected, Apple immediately removed the infected applications.
  prefs: []
  type: TYPE_NORMAL
- en: Jailbreaking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jailbreaking is the process of removing limitations imposed by Apple's mobile OS
    through the use of software and hardware exploits. Jailbreaking permits unsigned
    code to run and gain root access on the OS. The most common reason for jailbreaking
    is to expand the limited feature set imposed by Apple's App Store and to install
    unapproved apps. Jailbreaking can aid in forensic acquisition but will void the
    user's warranty, potentially *brick* the device, and may not support being restored
    to the factory settings.
  prefs: []
  type: TYPE_NORMAL
- en: If you jailbreak a device, it's best to assume that it will forever be jailbroken
    and the warranty is no longer valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many publicly available jailbreaking tools add an unofficial application installer
    to the device, such as Cydia, which allows users to install many third-party applications,
    tools, tweaks, and apps from an online file repository. The software downloaded
    from Cydia opens up endless possibilities on a device that a non-jailbroken device
    would never be able to do. The most popular jailbreaking tools are Pangu, TaiG,
    Electra, and Unc0ver. Not all iOS versions are jailbreakable. The following table
    will help you to choose the appropriate jailbreak tool according to the device
    you have and its iOS version:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Version** | **Release date** | **Tool** |'
  prefs: []
  type: TYPE_TB
- en: '| iPhone OS 1.0 | June 29, 2007 | (no name) |'
  prefs: []
  type: TYPE_TB
- en: '| iPhone OS 2.0 | July 11, 2008 | PwnageTool |'
  prefs: []
  type: TYPE_TB
- en: '| iPhone OS 3.0 | June 17, 2009 | PwnageTool |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 4.0 | June 21, 2010 | PwnageTool |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 5.0 | October 12, 2011 | redsn0w |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 6.0 | September 19, 2012 | redsn0w |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 7.0 - 7.0.6 | September 18, 2013 | evasi0n7 |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 7.1 - 7.1.2 | May 29, 2014 | Pangu |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 8.0 - 8.1 | September 17, 2014 | Pangu8 |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 8.1.1 - 8.4 | November 17, 2014 | TaiG, PP Jailbreak |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 8.4.1 | August 13, 2015 |  EtasonJB |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 9.0  | September 16, 2015 | Pangu9 |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 9.1 | October 21, 2015 | Pangu9 |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 9.3.5 | August 25, 2016 | Phoenix |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 10.0 - 10.1.1 | September 13, 2016 | Yalu |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 11.0 - 11.1.2 | September 19, 2017 | LiberiOS |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 11.0 - 11.1.2 | September 19, 2017 | Electra1112 |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 11.0 - 11.4.1 | July 7, 2018 | Electra1131 |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 11.0 - 11.4.1 | October 14, 2018 | Unc0ver |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 12.0 - 12.2, 12.4 - 12.4.2 | September 17, 2019 | Chimera, Unc0ver |'
  prefs: []
  type: TYPE_TB
- en: '| iOS 12.3 - 13.2.3 | November 10, 2019 | checkra1n |'
  prefs: []
  type: TYPE_TB
- en: We have now learned about the jailbreaking process and have had a look at the
    different jailbreaking tools currently available.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in the forensic examination of an iOS device should be identifying
    the device model. The model of an iOS device can be used to help you as the examiner
    develop an understanding of the underlying components and capabilities of the
    device, which can be used to drive the methods for acquisition and examination.
    Legacy iOS devices should not be disregarded, because they may surface as part
    of an investigation. You must be aware of all iOS devices, as old devices are
    sometimes still in use and may be tied to a criminal investigation.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will provide tools that will aid in obtaining data from iOS
    devices to later forensically examine. Not all tools are created equal, so it's
    important to know the best tools to get the job done properly.
  prefs: []
  type: TYPE_NORMAL
