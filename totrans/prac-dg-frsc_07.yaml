- en: Chapter 7. Windows and Other Operating Systems as Sources of Evidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of laptop, desktop, and network-based computers use Windows operating
    systems, and this chapter will describe this in some detail and provide a brief
    description of other operating systems that are commonly examined. The chapter
    will provide you with an understanding of the complexity and nature of information
    processed on computers that assists forensic examinations and facilitates the
    recreation of key events relating to the presence of digital evidence stored in
    a range of operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will look at:'
  prefs: []
  type: TYPE_NORMAL
- en: The Windows Registry and system files and logs as a resource of digital evidence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple and other operating system structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote-access and malware attacks and the prevalence and challenge posed by
    anti-forensics to the recovery of digital evidence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A case study relating to Windows Registry analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Windows Registry and system files and logs as resources of digital evidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows-based systems have a central repository of settings called the **Windows
    Registry**. The registry is often a valuable source of information that can be
    used to clarify and corroborate other information of relevance to an investigation
    recovered from the filesystem. The Windows Registry is a vital part of the Windows
    operating system and maintains the configuration of the system and supported application
    programs as well as the users accessing the system and attached devices and networks.
  prefs: []
  type: TYPE_NORMAL
- en: The registry consists of a directory structure containing folders or "hives"
    that contain files or keys that contain values and, sometimes, sub-keys. Each
    key contains specific values that are used by the operating system or an application
    that relies on the value, for instance, the time zone used by the computer, the
    status of remote access settings, or details of a storage device attached.
  prefs: []
  type: TYPE_NORMAL
- en: The **Registry Explorer** allows the practitioner to explore the content of
    registry hives that must be processed before they can be viewed. Depending on
    the purpose of the examination taking place, the registry can hold valuable information.
    The Registry keys have an associated value called the **Last Write** time, which
    records the last modification time of the key. The last modification time may
    disclose what was changed in the key. Some Registry keys contain several values,
    which also makes it difficult to determine which of the values was changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows samples of **Registry Hives** viewed using ILookIX
    Registry Explorer, which contains all of the processed registry hives, along with
    a viewer to review selected keys and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Windows Registry and system files and logs as resources of digital evidence](img/B04931_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking at Registry Hives using ILookIX Registry Explorer
  prefs: []
  type: TYPE_NORMAL
- en: It is important that the practitioner have some knowledge of the workings and
    layout of the Registry and what corroboration it may provide. Knowing where to
    look and the sort of information required is covered in the following sub-sections.
  prefs: []
  type: TYPE_NORMAL
- en: Seeking useful leads within the Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Registry Explorer has two sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The upper section displays the hives, keys, and sub-keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lower section shows the names and properties of registry values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of the hives is displayed in the top panel, shown in the following
    screenshot. Clicking on any key in a hive displays the values for that key in
    the lower panel. Clicking on a value in the lower panel reveals the data for that
    value, which is displayed in the viewer panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Seeking useful leads within the Registry](img/B04931_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Registry Viewer showing Registry hives and keys
  prefs: []
  type: TYPE_NORMAL
- en: 'Registry Explorer has functions not present or poorly implemented in other
    forensic tools, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search**: It searches the loaded hives'' value data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List**: This is used to list all of the values under the key you have currently
    selected in the top panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key structure report**: This function creates a report of the structure as
    it is currently viewable in the upper panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hive value report**: This function creates a report of the values currently
    shown in the lower panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value name find**: This function allows you to search for value names'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hidden value list**: This is used to list all of the hidden values (if any)
    under the key you have currently selected in the top panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registry Explorer flags some hives, keys, and values that may be hidden from
    normal view in the Registry. Hidden keys and values, often used to store virus
    and Trojan data, may have additional data. ILookIX will allow the practitioner
    to view this extra data if it is present. Programs in Windows, including viruses
    and Trojans, have the ability to read and write values to the Registry by writing
    directly to the Registry, which programs using the standard **Win32 Application
    Programming Interface** (**Win32 API**) cannot detect. These values are referred
    to as hidden values.
  prefs: []
  type: TYPE_NORMAL
- en: There are also programs available that do not rely on the Win32 API and are
    capable of writing hidden values to the Registry. This could be used to conceal
    data. Hidden values should not automatically be interpreted as malicious, as Windows
    XP, for example, came with about 27 hidden values.
  prefs: []
  type: TYPE_NORMAL
- en: 'By selecting a key or sub-key or using either of the **Generate List** buttons,
    a list of values will be transferred to the **Value List** box in the lower portion
    of Registry Explorer. The list in the lower window will display relevant information
    about the value, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Seeking useful leads within the Registry](img/B04931_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Registry Viewer showing some values of keys
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the hex editor view of the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Seeking useful leads within the Registry](img/B04931_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hex view of key values
  prefs: []
  type: TYPE_NORMAL
- en: 'The search function shown in the following screenshot uses an index search
    to identify useful data such as a word search in the appropriate field:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registry Key**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry Value**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry Data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Seeking useful leads within the Registry](img/B04931_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching for information in the Registry
  prefs: []
  type: TYPE_NORMAL
- en: Mapping devices through the Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By mapping a device to determine partitions and mounted and attached storage
    devices, the practitioner will gain a deeper insight into the usage of the device.
    For example, consider an instance where an internal hard drive detached from a
    computer was recovered and contained some probative evidence.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following should be considered:'
  prefs: []
  type: TYPE_NORMAL
- en: Can it be linked to the device?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If so, does it increase the likelihood that a relationship exists between users
    of the device and the drive?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, does this affect the strength of the link between the suspect and the
    evidence contained on the device?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ILookIX will identify device partitions and extract data from them. However,
    the examination of other artifacts may provide more specific details about the
    antecedents of the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows makes a record of various internal and external drives attached to
    the device as well as details of other peripherals, such as printers, optical
    drives, and thumb drives. The previous connection of an external device that is
    no longer connected may be shown through this device logging. In Registry, the
    `SYSTEM\MountedDevices` key records previously mounted devices. It can provide
    the actual serial number of many attached USB devices—a most useful attribute
    for the practitioner to use in reconstructing key events. The following screenshot
    shows a collection of devices attached to a desktop computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mapping devices through the Registry](img/B04931_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing system-mounted devices in the Registry
  prefs: []
  type: TYPE_NORMAL
- en: Detecting USB removable storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To reiterate, details of external devices, most notably, USB devices, mobile
    phones, and digital cameras, that have been connected to the computer are stored
    in the Registry. The Registry records some basic information about attached peripheral
    devices, such as the internal hard drive, monitor, keyboard, and mouse, but it
    also keeps information about other devices that may have been temporarily attached
    to the computer, such as external drives, thumb drives, cell phones, and digital
    cameras.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows a record of an attached USB thumb drive stored
    in the registry, showing the manufacturer's name. Often, the unique serial number
    of the device can be recovered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting USB removable storage](img/B04931_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Registry showing a record of an attached USB device
  prefs: []
  type: TYPE_NORMAL
- en: Not all USB thumb drives have serial numbers. This may be determined by the
    second character of the device ID being `&` and not a number. When examining each
    attached device, it can be seen that various values are displayed, including `ParentIdPrefix`,
    but there is very little else to assist the practitioner in determining the origin
    of the value or its use by the system. However, the Registry does hold other information
    that may assist, such as the `HKEY_LOCAL_MACHINE\System\MountedDevices` key, which
    is, in effect, a database of mounted volumes. The database records persistent
    volume names associated with unique identifiers for these volumes. By examining
    this additional data, it can often be shown that names assigned to the volumes,
    such as the drive letter `F`, will be associated with the `ParentIdPrefix` value
    for an attached thumb drive. If the thumb drive has been given a specific name
    by the user, this may also be recorded in the Registry.
  prefs: []
  type: TYPE_NORMAL
- en: User activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Registry holds various files, such as the `NTUSER.DAT` file, for each user
    granted permission to use the device, and stores the settings specific to that
    user. The contents of these files are mapped to the `HKEY_USERS\SID` hive so that
    it records users logging in. The process creates and updates the `HKEY_CURRENT_USER`
    hive, which can provide useful information regarding the actions taken by users
    after logging in to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Most Recently Used and Jump List activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The registry maintains **Most Recently Used** (**MRU**) lists and **Jump Lists**,
    which were introduced in [Chapter 6](ch06.html "Chapter 6. Selecting and Analyzing
    Digital Evidence"), *Selecting and Analyzing Digital Evidence*. This facility
    is intended to assist users to keep track of recent activities, such as providing
    quick access to word processing documents or pictures and videos that were viewed.
    However, from a forensic perspective, they act as a burglar's "footprints in the
    flowerbed," which are useful for recreating some history of entries made due to
    specific actions taken by the user. They are stored to keep track of items the
    user may return to in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Registry maintains a list of commands that the user types into the **Start**
    | **Run** box in this key:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU`'
  prefs: []
  type: TYPE_NORMAL
- en: When an entry is made in the **Run** box, this action is recorded to this key
    and a list of the most recently used value is maintained, although this data may
    correlate with file and application metadata. It would be prudent to check this
    data as a matter of course to ensure there are no unexplained anomalies that might
    bring the fidelity of the evidence into doubt.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting wireless connectivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Network connections on Windows machines provide **Service Set Identifiers**
    (**SSID**) data confirming the existing and previous wireless network or networks
    connected to the desktop or laptop computer. This often useful data is stored
    in the Registry in the `HKEY_LOCAL_MACHINE\ Software\Microsoft\WZCSVC\Parameters\Interfaces`
    hive. This repository can provide details of the network settings, including the
    IP address, from the `KEY_LOCAL_MACHINE\System\CurrentControlSet\Services\TCPIP\Interfaces\GUID`
    key. The value of linking an IP address to recovered evidence from the computer
    may be assisted by this data.
  prefs: []
  type: TYPE_NORMAL
- en: Observing Windows Event Viewer logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Event Viewer logs maintained in Windows 7 onward record additional information
    to that contained in the Registry. It can, for example, corroborate the connection
    of a USB device, which may or may not be retained in Registry logs. It can record
    the frequency of usage of some programs, such as virtual networks, that may have
    been operating and can corroborate logging recorded by the application.
  prefs: []
  type: TYPE_NORMAL
- en: A portion of the text formatting, shown in the following screenshot, contains
    some of the same information about a USB device that can be found in the `System`
    hive. The registry should also show the date the device driver was installed,
    and this is typically recorded in Event Viewer logs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Observing Windows Event Viewer logs](img/B04931_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Windows Event Viewer showing a record of an attached USB device
  prefs: []
  type: TYPE_NORMAL
- en: Disconnected USB devices generate logs that can justify a more detailed examination
    of the circumstances surrounding the disconnection of an external device and may
    provide a timestamp of the time of the disconnection. This information may be
    located in the `System` hive `CurrentControlSet\Enum\DeviceType\DeviceID\InstanceID\
    \Properties\xxxx`.
  prefs: []
  type: TYPE_NORMAL
- en: Recovery of hidden data from a VSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recall from [Chapter 5](ch05.html "Chapter 5. The Need for Enhanced Forensic
    Tools"), *The Need for Enhanced Forensic Tools*, that the recovery of additional
    data can be achieved from Windows systems that have the VSS feature enabled. In
    the case study in the previous chapter, files important to the victim organization
    were recovered from Dropbox accounts in one of the VSS folders. In the instance
    shown in the following screenshot, ILookIX''s **Differential XFR-VSS records**
    feature was used to recover only those VSS folders that contain differences in
    the file content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recovery of hidden data from a VSS](img/B04931_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Recovery options for VSS folders
  prefs: []
  type: TYPE_NORMAL
- en: 'In this laboratory simulation, seven VSS folders were recovered, as can be
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recovery of hidden data from a VSS](img/B04931_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Various instances of the VSS recovered from a simulation image
  prefs: []
  type: TYPE_NORMAL
- en: Not only may deleted files be recovered that otherwise may have remained obscured,
    but system information and logs that assist in the reconstruction of a transgression
    may also be recovered. The previous iterations of Registry keys and hives and
    Event Viewer logging records are shown in the following screenshot. These records
    may reveal various activities of potential relevance, including remote access,
    changes to clock and desktop settings, and malicious intrusion exploits of the
    Registry.
  prefs: []
  type: TYPE_NORMAL
- en: '![Recovery of hidden data from a VSS](img/B04931_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Various instances of Registry hives and keys recovered from VSS folders
  prefs: []
  type: TYPE_NORMAL
- en: 'The recovery of additional information such as archive stores, including zipped
    files, is also possible. The following screenshot highlights some additional ZIP
    files extant in various VSS folders, shown with different dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recovery of hidden data from a VSS](img/B04931_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Archive stores recovered from VSS in the ILookIX Container Category
  prefs: []
  type: TYPE_NORMAL
- en: 'The additional recovery of e-mail stores from VSS folders, shown in the following
    screenshot, reflects e-mail messages during different periods. In the simulation,
    one of the `VSS` folders surrendered a deleted e-mail that was not located in
    the current view of the drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recovery of hidden data from a VSS](img/B04931_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: E-mail recovered from a VSS folder
  prefs: []
  type: TYPE_NORMAL
- en: Examining prefetch files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of booting a Windows system results in a range of files being read
    to RAM, which can be a lengthy process, so Windows creates prefetch files whenever
    a program is first run. This information may provide the practitioner with information
    about the history of various programs of relevance to an investigation running
    on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Application execution may indicate that an anti-forensic program, for example,
    was used to obfuscate a transgression. In the event that a program has been deleted,
    it may be possible to locate a prefetch file that confirms the use of the program
    prior to its deletion—much more helpful than a bland statement that the program
    was installed, but whether it had been executed was unknown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware activity can sometimes be established by examining a prefetch file
    that can provide some history of its download and execution. The `prefetch` folder
    and `ReadyBoot` folder are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining prefetch files](img/B04931_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: View of the Prefetch folder and subfolder
  prefs: []
  type: TYPE_NORMAL
- en: 'Application prefetching uses a similar process, but it is localized to a single
    application''s startup and typically stores its trace files in `C:\Windows\Prefetch`.
    Prefetch data is reflected in a file called `Layout.ini` that keeps a catalogue
    in sequential order. It holds the details of files and folders active in the boot
    process as part of system housekeeping:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining prefetch files](img/B04931_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: View of the Layout.ini file
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch file analysis is uncomplicated, and it is really not difficult to confirm
    that the files contain details about the frequency of application runs, volume
    details, and timestamps of applications' first and last runs. Windows 10 records
    up to eight timestamps for each occasion an application was run and stores them
    in the `ROOT/Windows/Prefetch` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Pagefiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows uses `pagefile.sys` to store frames of memory that do not currently
    fit into physical memory. Windows supports 16 pagefiles, but typically, only one
    hidden file is used and is stored in `%SystemDrive%\pagefile.sys`. Acting in effect
    as virtual memory files, the hidden `pagefile.sys` file runs when RAM is pushed
    to its limit, and it becomes a virtual memory file. When the system is running
    out of RAM, it places memory dumps on the hard drive as a pagefile to supplement
    scarce memory. This can result in the system slowing down, which often occurs
    when too many applications are running.
  prefs: []
  type: TYPE_NORMAL
- en: This operation is not dissimilar to the functioning of `hiberfil.sys`, as it
    stores processes running at a specific time. However, it should be noted that
    `pagefile.sys` does not record all RAM activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pagefile.sys` file is essential for the sound performance of the system
    and undergoes constant changes as the device is being used. The following screenshot
    shows duplicate copies of a large-sized `pagefile.sys` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pagefiles](img/B04931_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Locating pagefile.sys files
  prefs: []
  type: TYPE_NORMAL
- en: Hibernation and sleep files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `hiberfil.sys` file is the default file used by Windows to save the machine's
    state as part of the hibernation process. As the operating system keeps the file
    open, it is not possible to read the file while the system is running. Internet
    artifacts are commonly found in memory and typically remain in the form of the
    pagefile or hibernation file. Recovering the deleted hibernation data can assist
    in determining what was in memory prior to hibernation.
  prefs: []
  type: TYPE_NORMAL
- en: Sleep mode does not provide much useful information as RAM is still working
    in the background and dissipates once the device restarts. Hibernation mode may
    provide more useful data from laptop computers because during hibernation, a snapshot
    of all the data in RAM is captured, and this is written to the hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a search for hibernation files to search for
    information that may assist the practitioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hibernation and sleep files](img/B04931_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching for hiberfile.sys instances
  prefs: []
  type: TYPE_NORMAL
- en: Detecting steganography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Steganography** is the process of concealing data in a communication so that
    only the sender and receiver know of its existence and are able to access the
    concealed information. It is common to encrypt data hidden in digital files or
    images whenever possible. The detection of steganographically encoded files is
    referred to as **steganalysis**. Steganalysis is limited to the detection of an
    embedded message, which may identify the embedding process. When the application
    or method of concealment has been identified, it might be possible to extract
    the message.'
  prefs: []
  type: TYPE_NORMAL
- en: Unusual patterns in the steganographic image are obvious and create suspicion
    but can be hard to detect initially. A number of disk analysis utilities, such
    as ILookIX, are available, which can report on and filter hidden information in
    unused clusters or partitions in storage devices. By identifying repetitive patterns,
    it may be possible to detect hidden information in what appear to be innocuous
    files. Such repetition might reveal the presence of a steganography tool as well
    as hidden information. Comparing an authentic original file with one suspected
    of containing hidden information is a viable process, but that is contingent on
    having two samples for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Watermarking is often used to legitimately identify and protect copyrighted
    material. Although watermarks are often concealed, they are sometimes identified
    by forgers and subject to illicit removal to thwart the investigator.
  prefs: []
  type: TYPE_NORMAL
- en: To assist in the detection of hidden information with various tools, practitioners
    must identify and match the hash value of each suspected file. Doing so involves
    the importing or building of a library of hash sets, notably steganography software,
    as part of a comparison library.
  prefs: []
  type: TYPE_NORMAL
- en: Apple and other operating system structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Microsoft dominates the household market and many network systems, other
    popular operation systems such as Apple and Linux are also very much in use and
    likely to have to be examined by the forensic practitioner. The following subsections
    provide a brief introduction to these systems.
  prefs: []
  type: TYPE_NORMAL
- en: Examining Apple operating systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple Macintosh devices use a different operating system (currently called OS
    X), which, unlike Microsoft's systems, enables applications to run independently
    of users, who do not have direct access to the filesystem. Simplicity and convenience
    is the general convention, which is based on the Unix filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Applications installed on an Apple machine have limited interaction with the
    filesystem, being restricted from doing so from within directories inside the
    application's sandbox. The sandbox protects systems and users from malware attacks.
    In effect, it limits the access privileges of each application to tighten the
    security of the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'When applications are installed, a number of containers are created with specific
    roles. Typically, the application''s operating files are held in a bundle container
    and the data files are held in data containers and subdirectories. Users access
    files through the **Finder** facility. The filesystem consists of four main domains,
    separating resources from files for ease of access and use and sound security
    protection. These consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The user domain**: This has user-specific resources restricting each user''s
    access and control to only their own home directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The local domain**: This is concerned with applications installed on the
    current computer and shared among all users, consisting of several directories
    on the local boot volume, which is managed by the system. Users with administrative
    privileges may add, remove, or modify this domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The network domain**: This contains applications and documents shared among
    all users of a local area network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The system domain**: This contains Apple system software installed by Apple,
    which prevents users from adding, removing, or modifying items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As part of its attempt to simplify the use of applications, the Finder function
    and several other functions, such as the **Open** and **Save** panels, conceal
    files and directories that do not require user access or intervention. A typical
    directory structure viewed through a forensic tool is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining Apple operating systems](img/B04931_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Apple file hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'The various categories of files held on Apple desktops and laptops are available
    to the practitioner and shown cataloged in the following screenshot of ILookIX
    **Category Explorer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining Apple operating systems](img/B04931_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File categories and signatures cataloged from an Apple computer
  prefs: []
  type: TYPE_NORMAL
- en: 'File metadata, including timestamps, EXIF data for picture images, and file
    locations, may also be recovered from iOS, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining Apple operating systems](img/B04931_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File metadata collated from an Apple computer
  prefs: []
  type: TYPE_NORMAL
- en: The Linux operating system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linux operating system, a variant of Unix, relays instructions from an application
    to the computer's central processing unit and processor. The processor performs
    the instructed task and then sends the results back to the application via the
    operating system. Although Linux has many features common to Windows and OS X,
    it is an open source operating system, developed in collaboration with users,
    companies, and partners. This has resulted in economic research and development
    endeavors to produce an innovative and, many say, superior operating system. Linux
    has become an important desktop system as well as the foundational operating system
    for networks and many devices, such as mobile phones.
  prefs: []
  type: TYPE_NORMAL
- en: Because Linux is on the system BIOS of laptop and notebook computers and cellphones,
    it dramatically increases the speed of booting up these devices. Linux increasingly
    runs a significant number of web servers, including Amazon's cloud service. Twitter,
    LinkedIn, YouTube, and Google use Linux as their operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems' architectures have kernels that contain a set of coded instructions
    that make the computer hardware respond to the operating system and, by default,
    application-level programs. Unlike the Microsoft Windows kernel, which many regard
    as cumbersome and inaccessible to all but a few of its own programmers, the flexibility
    and modular structure of the Linux kernel offers a number of advantages to developers.
    In particular, the size of the kernel can be increased or decreased to meet the
    requirements of developers wishing to redesign the system for different operating
    environments and devices. This is especially helpful in system miniaturization
    for smaller-sized handheld devices.
  prefs: []
  type: TYPE_NORMAL
- en: A collective set of tools embedded in the Linux kernel is, in effect, its operating
    system, which also has the advantage of being modular in form. Linux provides
    users with a range of choices in the way they may wish to make use of its system,
    including the windows-and-desktop functionality that most users are familiar with
    in Windows and OS X.
  prefs: []
  type: TYPE_NORMAL
- en: 'A system of users, groups, and privileges is embedded in Linux to keep the
    security of the operating system as secure as possible. It does provide self-contained
    user accounts in much the same way as other operating systems. For example, personal
    files are held within the user''s `home` directory and are readily available for
    use. However, a typical Linux filesystem can contain a confusing array of local
    and remote files and running processes and, unlike Windows, there is no `Program
    Files` directory. The following screenshot shows a menu view of a Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Linux operating system](img/B04931_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu view in a Linux system
  prefs: []
  type: TYPE_NORMAL
- en: 'The archive view of a sample Linux operating system is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Linux operating system](img/B04931_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Archive view of a Linux system
  prefs: []
  type: TYPE_NORMAL
- en: Remote access and malware threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The prevalence of malware and other exploits through hacker attacks, often through
    remote-access exploits, remains a significant threat to computers and network
    systems that are vulnerable because of poor security management. These issues
    are discussed in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Remote access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The "Trojan defense" has been used by guilty as well as innocent computer users
    to support claims of their innocence by blaming the presence of illegal activities
    on their computers on remote attackers. While this is plausible, there seems to
    be a reversal of the onus of proving innocence, with the defendant instead of
    the prosecutor taking on the role. The big bugbear in all digital forensic examinations
    is linking the suspect to incriminating events. It would be fairer, but obviously
    too time-consuming on occasion, for the practitioner to clarify the possibility
    or likelihood of a remote-access exploit.
  prefs: []
  type: TYPE_NORMAL
- en: Windows operating systems permit remote access for legitimate purposes, but
    it is quite common for Windows updates needed to resolve vulnerability in the
    feature in including its Remote Desktop Protocol service, which is inherently
    unsecure and vulnerable to exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Remote access can also be gained through a malware attack that assists hackers
    in gaining access to the target device or network. This is especially problematic
    if there is an absence or only a low level of security protection.
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi connections, while convenient, often allow the snooping of sensitive network
    traffic to take place, potentially providing easy access to accounts held on computers
    and handheld devices. A lack of sound encryption of these communications will
    enable a cyberattack to be mounted against online banking and other accounts that
    involve financial transactions, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting malware attacks and other exploits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The registry stores autostart keys at various locations, which launch applications
    without direct user intervention. One of the keys that hackers most commonly exploit
    is the run key that allows many of these exploits to remain on the system: `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run`.
    The startup key will launch programs when the system starts up, when a user logs
    in to the system, or the user undertakes some other specified action.'
  prefs: []
  type: TYPE_NORMAL
- en: The `HKEY_LOCAL_MACHINE \SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image
    File` Registry entry is intended for the administrator to debug various executive
    options, but it is vulnerable to outside attackers who can use it to redirect
    an application to a hijacked copy of the application. The addition of an autostart
    key for Word can direct the process to a copy of Word containing malicious code
    that allows access to the computer whenever the program is launched. These autostart
    keys often leave some electronic fingerprint of such intrusions that may clarify
    whether the computer user or an intruder is responsible for events of interest.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Recovering and Preserving Digital Evidence"),
    *Recovering and Preserving Digital Evidence*, mention was made of reading and
    recovering the contents of RAM for analyzing malware that antivirus programs do
    not detect. IXImager can reboot fast enough to enable capture of the system's
    RAM so that running programs, passwords, and so on can be captures. This is achieved
    by inserting the USB, CD, or SD card into the computer port, rebooting the computer
    and commencing the imaging process, and recovering and storing the captured RAM
    data for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ISeekDiscovery automaton provides a novel and highly effective means of
    searching for bogus files. If, for example, the practitioner wants to find all
    Word and Excel files on a machine that are misnamed or spelled wrong or have no
    extensions by type, all that is needed is to use the **auto capture** feature
    by signature for Excel and Word, but to also use the **Search Exclusions** tab,
    shown in the following screenshot, and add in the following file extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*.xls`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*.xlsx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*.doc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*.docx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Detecting malware attacks and other exploits](img/B04931_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Excluding file extensions using ISeekDesigner
  prefs: []
  type: TYPE_NORMAL
- en: When this routine is run, it will remove the files with legitimate names, leaving
    only the ones that have bogus names. This should be helpful for intrusion detection
    because of the large number of security breaches caused by hidden hacker-executable
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The prevalence of anti-forensics processes and tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obscuring and destroying evidence is not a new phenomenon and has emerged alongside
    digital forensics to challenge and frustrate evidence recovery. It consists of
    a broad range of software tools that obfuscate events linked to transgressions
    as well as deleting or modifying data. Anti-forensics may also be intended to
    delay the time it takes to complete an examination. Sometimes, it may cast doubt
    on the validity of the evidence later relied on in court. These tools often hide
    their existence and may persist on a device after it has been seized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specific uses of this illicit practice include:'
  prefs: []
  type: TYPE_NORMAL
- en: Overwriting or altering data and metadata, including timestamps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding and encrypting data and steganography (mentioned previously)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting folders, partitions, and network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using external devices that enable computers to be booted up but leave no trace
    of activities on the host machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting anti-forensics activity is not necessarily an intuitive process, but
    the fact that it may have been done on a device being examined should always be
    considered. Tools that detect and even prevent anti-forensics activity seem in
    short supply, and there is certainly a case for further research into the problem.
  prefs: []
  type: TYPE_NORMAL
- en: This book will not promote or provide any information about these toolkits that
    are freely available on the Internet, but I acknowledge that they are already
    bringing into disrepute digital forensic tools that continue to be heavily relied
    upon. Of concern is the use of these tools to protect the guilty and possibly
    implicate the innocent. [Chapter 8](ch08.html "Chapter 8. Examining Browsers,
    E-mails, Messaging Systems, and Mobile Phones"), *Examining Browsers, E-mails,
    Messaging Systems, and Mobile Phones*, describes the Dark Web and the use of such
    anti-forensic tools to encrypt and hide information, such as Tor and 12P.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – corroborating evidence using Windows Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This case study exemplifies how digital evidence should always be corroborated
    and verified whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: The case is related to downloading illegal child exploitation pictures and movie
    files. One of the potentially damaging files recovered was a pornographic picture
    of an underage child. The prosecution contended that this file had previously
    been displayed as the computer's desktop wallpaper, clearly visible on startup
    of the computer. It contended, not unreasonably, that it could hardly not have
    been noticed by the users of the computer, thus implicating the user's complicity
    in handling illegal, obscene material.
  prefs: []
  type: TYPE_NORMAL
- en: When seized, the computer desktop displayed an innocuous blank picture that
    raised no immediate interest. However, later examination of the computer located
    a `.jpg` file depicting an obscene image of an underage child. This disturbing
    image was located at `C:\Documents and Settings\xyz\Application Data\Opera\Opera\xxx.jpg`.
    The prosecution's practitioner demonstrated that on a confirmed date and time,
    `xxx.jpg` was converted to be used as the desktop wallpaper. A picture file of
    that name was located at `C:\Documents and Settings\xyz`, which was confirmed
    to be the default directory containing files and folders associated with the user
    account `xyz`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing by the practitioner suggested that this entry is not created until a
    non-Windows-standard picture is applied as the desktop wallpaper. If the desktop
    is changed to another nonstandard picture, the Registry key is altered to reflect
    the new picture without maintaining a list of the old files. When a standard Windows
    picture is selected for the desktop, this key will remain to show the last used
    nonstandard picture.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis of Registry entries relating to the `xyz` user account revealed that
    non-human intervention to create the desktop wallpaper and place the illegal image
    file in the user account was not evident but could not be entirely discounted,
    as traces of such events are not easily identifiable for further examination.
    In this instance, the system stored the usual background wallpaper bitmap in the
    wallpaper registry hotkey located at the `HKEY_CURRENT_USER\Control Panel\Desktop\Wallpaper`
    Registry key. Windows Registry does not record a history of the use of previous
    standard Windows files.
  prefs: []
  type: TYPE_NORMAL
- en: The metadata for `xxx.jpg` revealed creation, modified, and last-accessed dates,
    which correlated with Internet usage identified during the reconstruction of the
    offense timeline. Examination indicated that the file existed in another location
    on the computer, but no record of whether it was downloaded from the Internet
    or copied from an external device could be confirmed.
  prefs: []
  type: TYPE_NORMAL
- en: It is unlikely that the user would make the image the desktop wallpaper by manually
    installing it through a directory search through `C:\Documents and Settings\xyz
    \Application Data\Opera\Opera\`. What is more usual, and therefore more likely,
    is that the image was viewed through Opera and then set as the wallpaper by a
    user using the right mouse button. The file was also saved to the `xyz` folder,
    which suggests two manual processes that imply deliberate actions on the part
    of a user or users. These actions could be effected by the presence of malware
    such as a Trojan horse, but that seemed highly unlikely considering other testimony
    in the case.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, no data was available to show when the image was removed as wallpaper
    when some user reverted to a blank (black) screen choosing the default setting,
    **None**, or no image in the desktop frame. This information would have provided
    a more precise time of the manipulation of at least one illegal file. VSS was
    not present on the Windows XP operating system, which, had it been, may have provided
    some clarification of such Registry changes.
  prefs: []
  type: TYPE_NORMAL
- en: While Registry can be helpful in many cases, in this instance, it left some
    uncertainty. This was most unhelpful when it was presumed that the users of the
    computer, tenants in the defendant's home as distinct from the actual owner who
    was charged with possession of child exploitation material, became aware of the
    law enforcement interest in the computer 14 hours before its seizure. It is suspected
    they removed the incriminating wallpaper in haste along with some other incriminating
    files, when it was later proven that the owner (defendant) had no access to the
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: The owner had a cast-iron alibi showing he was in a different suburb at the
    time these deletions to the computer files were made. Had this been heeded at
    the time charges against the defendant were being prepared, it is unlikely that
    the case would have progressed to trial. On reflection, it seems that the investigating
    detectives and forensic practitioner did not see this glaring conflict in user
    access and did not attempt to determine the involvement of others with access
    to the computer. This is again a prime example of suspect-led investigation.
  prefs: []
  type: TYPE_NORMAL
- en: As the forensic examination of the device proceeded, it became clear that more
    than one local user had access to it. It was thought sound practice to determine
    whether a remote attack may have occurred and an outsider may have been responsible
    for the presence of the illegal files. The computer settings showed that the facility
    for an external user to access the computer was disabled at the time of seizure
    but not necessarily at the time of the relevant events.
  prefs: []
  type: TYPE_NORMAL
- en: The practitioner claimed that the computer was searched for malicious applications
    with no results. However, the defense practitioner located the `ZLOB.JN` Trojan
    horse downloader at `C:\Documents and Settings\xyz\My Documents\setup.exe`. The
    file was removed and quarantined by the defense practitioner pending further examination.
  prefs: []
  type: TYPE_NORMAL
- en: Unsubstantiated information about this malware ranges from describing it as
    a serious threat to a nuisance that slows down the computer and launches pop-up
    commands. Some observers claim that it can be used as a means of gaining access
    to a computer, allowing hackers to gain remote access. Some versions of Zlob automatically
    load on bootup and hide their presence by hijacking the Windows Explorer program.
    The Trojan has been claimed to have the ability to take complete control of the
    computer, but that claim was never substantiated.
  prefs: []
  type: TYPE_NORMAL
- en: Some commentary suggests that a Zlob infection will begin to take over the computer
    browser, causing constant popups, the redirection of a URL to other sites, the
    erasing of documents and images, and even invasion into personal information that
    can be erased or distributed to other websites. Manual Zlob removal requires some
    knowledge of the technical aspects of the target computer. It is difficult to
    remove because it is known for replicating itself under different names. Even
    if removed, it may have replicated and reinstalled itself on the computer.
  prefs: []
  type: TYPE_NORMAL
- en: Examination of the suspect Zlob file, `setup.exe`, showed it was created prior
    to the illegal activity recorded on the computer and it had not been identified
    or removed by the antivirus program. The Trojan horse reportedly creates a number
    of files in the system, including `stdole3.tlb`, and registry entries are created
    in an attempt to run `Troj/Zlob-JN` on startup, including `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\explorer\run
    wininet.dll` and `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\explorer\run
    regperf.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: However, examination of the computer failed to locate these three files inside
    Windows Registry or on the computer. It seemed unlikely that an external attack
    had occurred, leaving the possibility that one or more of the local users were
    responsible for the illegal activity. Although this extra work by the defense
    practitioner to examine the possibility of an external attack proved fruitless,
    it had to be done, but why not by those laying the charges? The defendant was
    acquitted by the jury of the charge, but no further charges were laid against
    those others users implicated in using the computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reiterate, ad nauseam, this case highlights the benefits of a counterargument
    forming an essential part of an examination, which then lends itself to search
    for exculpatory evidence, which, if it exists, may modify or refute an argument,
    for, to recall the simple yet powerful catchphrase of practitioner and academic
    *Dardick* (2010): "here is nothing more deceptive than an obvious fact."'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dardick, G. S. 2010\. "*Cyber Forensics Assurance*." 8th Australian Digital
    Forensics Conference, Perth, Western Australia. SECAU: 57–64.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter described the Windows operating system in some detail as well as
    other operating systems that are commonly examined, including Apple and Linux.
    Windows Registry, system files and logs, and some additional benefits of VSS recovery
    were introduced as a valuable resource for digital evidence recovery and analysis.
    The chapter also touched on remote access and malware attacks and the prevalence
    and challenges of anti-forensics that hamper the recovery and identification of
    evidence.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Examining Browsers, E-mails, Messaging Systems,
    and Mobile Phones"), *Examining Browsers, E-mails, Messaging Systems, and Mobile
    Phones*, will describe the processes of locating and recovering digital evidence
    relating to records of personal communications, including e-mails and browsing
    records stored in computer devices and telephonic communications retained on mobile
    phones. It will look specifically at the recovery of Internet browsing and search
    records and other messaging systems, including Skype and virtual private networks
    as well as e-mail analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile phone forensics will be introduced and its importance in forensic examinations
    will be discussed, along with the growing challenge of evidence acquisition from
    personal computing and GPS devices. The chapter will provide you with an appreciation
    of the value of locating, extracting, and examining records of communications
    between persons of interest stored on computers and mobile phones.
  prefs: []
  type: TYPE_NORMAL
