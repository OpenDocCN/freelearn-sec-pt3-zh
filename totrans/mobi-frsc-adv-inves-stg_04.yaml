- en: Chapter 4\. Practical Steps to Android Acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When approaching an Android smartphone, there is no straightforward route to
    acquisition. Due to extremely high fragmentation of the Android platform, your
    approach to acquiring an Android smartphone will vary greatly between devices.
    Your approach will depend on who made the device and what chipset was used; what
    version of Android it is running and what version of Android it was originally
    released with; whether or not the device has an unlocked (or unlockable) bootloader,
    and whether it was or can be rooted. If that's not enough, you'll have different
    options depending on the encryption status of the device (which also depends on
    the device's make, model, and version of Android).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter offers detailed discussion and demonstration of the various physical
    acquisition methods available for a wide range of Android devices. We'll discuss
    how to use manufacturer-specific low-level service modes (LG, Qualcomm, and Mediatek),
    how to use custom recoveries (**ClockworkMod** (**CWM**) and **Team Win Recovery
    Project** (**TWRP**)) for dumping the data partition, and how to make NANDroid
    backups and use command-line tools such as **dd** for live-imaging the device.
    We'll talk about encryption and its effect on physical acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Android physical acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When approaching an Android smartphone, there is no straightforward route to
    physical acquisition. Is the device encrypted? Do you happen to know the passcode?
    Do you have a bootloader that is unlocked (or at least semi-unlocked)? Does the
    device have root access installed, or do you have the means to root it? Is a service
    backdoor available on a particular model? Depending on these factors, you may
    be able to pursue one or another acquisition method.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we go on discussing the various physical acquisition methods, let''s
    make one thing clear: device encryption may affect your ability to access user
    data. There may be a possibility to extract decryption keys, which in turn, depends
    on the version of Android and whether or not the phone was made by Samsung.'
  prefs: []
  type: TYPE_NORMAL
- en: Prior to Android 5.0 *Lollipop*, Google used to utilize (and push to **Android
    Open Source Project** (**AOSP**)) a seriously flawed encryption method. This method
    was compromised as experts were able to extract decryption keys from the device
    and use it to decrypt user data. Decryption metadata was kept unencrypted, thus
    extracting the metadata made it possible to decrypt the data partition.
  prefs: []
  type: TYPE_NORMAL
- en: Samsung knew of this vulnerability and designed its own proprietary encryption
    scheme that encrypted the decryption metadata. As a result, encrypted Samsung
    smartphones are a tough call even if they are running an early version of Android
    (pre-Lollipop).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Samsung devices running Android 4.0 and earlier used open decryption metadata,
    and can be acquired even if encrypted. Samsung Galaxy Nexus running stock Android
    used Google's standard encryption implementation (with open decryption metadata)
    and can also be decrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android 5.0, Google adopted a much more secure encryption scheme, similar
    to the one developed by Samsung. In Android 5.x and 6.x, decryption metadata is
    no longer stored in an open form. Instead, the decryption metadata is securely
    encrypted. While decryption metadata can be extracted via physical imaging, JTAG,
    or chip-off, it is impossible to use it to decrypt the data partition since the
    required metadata itself is encrypted. At this time, no method exists to decrypt
    the required metadata off-device. Samsung is now using this encryption standard
    in devices running Android 5.x and newer. When acquiring an encrypted Android
    device, the following compatibility matrix applies:'
  prefs: []
  type: TYPE_NORMAL
- en: For **encrypted non-Samsung devices running Android 4.4 KitKat** or earlier,
    you may be able to recover the decryption key and use it to decrypt the user data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **encrypted Samsung smartphones running Android 4.0 through 4.4**, you may
    be unable to extract or recover the decryption key. As a result, you may be unable
    to decrypt the user data. If this is the case, you can still try live imaging,
    logical acquisition, or cloud extraction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **encrypted devices running Android 5.x or newer**, you are unlikely to
    discover the decryption key. Lower-level acquisition techniques (JTAG, ISP, or
    chip-off) will be equally useless. Attempt live imaging, logical acquisition,
    or cloud extraction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have this clear, let's move on to actual acquisition techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching physical acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When approaching a device, you may want to consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Some manufacturers ship their devices with fully or partially unlocked bootloaders.
    Imaging such devices usually presents no problem (unless data is encrypted).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some manufacturers ship their devices with locked bootloaders, officially allowing
    users to unlock them (for example, Samsung, Motorola, SONY, Nexus devices, and
    many others). If the user unlocked the bootloader, there is a high probability
    of successful imaging (unless an anti-forensic technique was employed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In many cases, manufacturers and/or carriers restrict bootloader unlocks. In
    some cases, it is possible to bypass these restrictions in some models (the chipset
    and manufacturer of the device are important). Some chipset makers and device
    OEMs have backdoors (used for service-level access), while some can be exploited
    to bypass bootloader lock and boot into a custom recovery (which does not necessarily
    mean that you can permanently flash one). These devices are also relatively easy
    to acquire.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, some devices are really tough. Locked bootloaders, no service mode,
    and no known exploits make them difficult to acquire. You can still try live imaging
    or alternative acquisition methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Cellebrite UFED, you may find it useful to install their free
    mobile app (onto your own smartphone or tablet) to help you identify the extraction
    capabilities of a given mobile device. **UFED Phone Detective** is available for
    iOS and Android devices, and offers an easy way to view forensic extraction and
    decoding capabilities, as well as connectivity methods, for mobile devices supported
    by Cellebrite UFED 4PC/Touch/Classic. While the app can be downloaded free of
    charge, you will need to provide your **My Cellebrite** credentials to log in.
    If you don''t have a My Cellebrite account, you will be able to register free
    of charge from within the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Approaching physical acquisition](img/0020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: UFED Phone Detective mobile app complements Cellebrite's mobile extraction suite
    by enabling experts to look up mobile devices by vendor name, mobile device name,
    or model number. Once the device is identified, the app displays specific support
    information, including whether the extraction can bypass the device's lock.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about UFED Phone Detective and the download links is available
    at [http://www.cellebrite.com/](http://www.cellebrite.com/).
  prefs: []
  type: TYPE_NORMAL
- en: We compiled a short acquisition walkthrough for your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption status â€“ Is the data partition encrypted?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Yes**: If you''re imaging a Samsung device, and if that device runs Android
    4.0 to 4.4, or if you''re imaging a Samsung or non-Samsung device that runs Android
    5 or newer, try live imaging. In order to perform live imaging, you will need
    to unlock the device with the correct passcode (plenty of solutions are available
    on the market). If you are imaging an older *non-Samsung* device that runs a version
    of Android 4.4 or earlier, proceed to physical acquisition as you have a good
    chance of recovering the decryption key.'
  prefs: []
  type: TYPE_NORMAL
- en: '**No**: Proceed to physical acquisition.'
  prefs: []
  type: TYPE_NORMAL
- en: Service mode available
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to trying other acquisition methods, let's discover whether a service
    backdoor is available for the device being imaged.
  prefs: []
  type: TYPE_NORMAL
- en: LG smartphones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LG smartphones ship with a proprietary service access mode called **LAF**. In
    LG smartphones, this proprietary mode completely replaces similar low-level access
    modes provided by chipset makers, such as Qualcomm or MediaTek. This bears an
    important consequence. If you are imaging an LG smartphone, make sure that you
    use the LG service mode instead of attempting to boot the device into Qualcomm
    9006 or MTK service mode.
  prefs: []
  type: TYPE_NORMAL
- en: LG service mode works both ways (for reading and writing data onto the raw physical
    storage). As a result, you can image the complete physical storage regardless
    of the bootloader lock status. LG uses a proprietary protocol, so your acquisition
    tool must support that in order to be able to read the data. You will need to
    install the latest LG drivers as well. Tools that support LAF include Cellebrite
    UFED and Oxygen Forensic Suite. More on this method will be discussed in the *LG
    smartphones' LAF mode* section.
  prefs: []
  type: TYPE_NORMAL
- en: Devices based on the Qualcomm reference platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of vendors build devices based on reference platforms supplied by chipset
    manufacturers. Using a reference platform greatly streamlines development. Manufacturers
    receive a ready-to-use PCB design complete with pre-selected components and drivers.
    In addition to this, some reference platforms expose service-access backdoors.
    The reference platform provided by Qualcomm, one of the largest chipset manufacturers,
    includes several service modes. One of these modes, **HS-USB 9006** or **mode
    9006**, provides system-level access to device partitions regardless of whether
    the device ships with a locked or unlocked bootloader.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, switching into this mode is activated by turning the device
    off, connecting it to the computer via a USB cord while holding the volume up
    key, and powering on the device while still holding the volume up key (details
    on entering mode 9006 may vary slightly between devices). Once the device boots
    into the service mode, the Windows **Disk Management** console will display a
    list of available partitions. Note that a dedicated Qualcomm Download Mode HS-USB
    9006 driver must be installed on the expert's computer for the partitions to appear.
    Once you see the list of partitions, you'll be able to image these partitions
    with a mobile forensic tool of your choice. Some flash imaging tools are also
    available. More on this method will be discussed in *The Qualcomm 9006 mode* section.
  prefs: []
  type: TYPE_NORMAL
- en: Mediatek-based Chinese phones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another chipset manufacturer providing a special service backdoor is **MediaTek**
    (**MTK**). MTK chipsets are used by most Chinese smartphone makers and include
    models built by Xiaomi, Meizu, Oppo, Vivo, OnePlus, Cubot, Zoppo, ZTE, No. 1,
    and hundreds of B-brands and C-brands. Unlike Qualcomm, MediaTek only allows accessing
    data via this service mode if the bootloader is unlocked. Many Chinese manufacturers
    ship their smartphones with unlocked bootloaders, presumably for easier servicing,
    which allows users of mobile forensic tools to easily image these devices by exploiting
    the MTK service mode. Later in this book, we'll discuss more about one of the
    tools, Oxygen Forensic Toolkit. More on this method is discussed in the *MediaTek
    smartphones* section.
  prefs: []
  type: TYPE_NORMAL
- en: Bootloaded status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Is the bootloader locked?* When it comes to acquiring Android devices, this
    is a major question. Major brands ship their Android devices with locked bootloaders.
    Some vendors allow users to unlock bootloaders on some models and carrier combinations,
    while other vendors (models and carriers) opt for permanently locked bootloaders.'
  prefs: []
  type: TYPE_NORMAL
- en: The majority of Android devices sold in the US and Europe ship with locked bootloaders;
    in China, the opposite is true. Some devices come with semi-locked bootloaders,
    allowing to boot into (but not permanently flash) a custom boot image. If you
    are able to boot into a custom recovery, you may be able to create a Nandroid
    backup or image the data partition. However, note that booting into a custom bootloader
    on a semi-unlocked bootloader may (InFocus m810t) or may not (ASUS ZenPad S 8.0)
    trigger a security reset.
  prefs: []
  type: TYPE_NORMAL
- en: Root status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Is the device rooted?* Unlike iOS jailbreak, rooting the device is not a necessary
    prerequisite for imaging many Android devices. Whether or not the device has been
    rooted only affects your ability to perform live imaging of the device. However,
    if the device has been already rooted, you will be able to perform live imaging
    without attempting to root the device first, which can be iffy.'
  prefs: []
  type: TYPE_NORMAL
- en: LG smartphones' LAF mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For service purposes, LG developed a low-level protocol enabling LG smartphones
    to accept firmware updates over a USB connection even if the device is not otherwise
    accessible (*bricked*). Initially only available to authorized service centers,
    details of this protocol and the actual drivers and flashing tools soon became
    available to the general public, and made it into some mobile forensic tools such
    as Cellebrite UFED and Oxygen Forensic Suite (refer to the *Live imaging using
    Oxygen Forensic Suite* section for more information).
  prefs: []
  type: TYPE_NORMAL
- en: 'This service mode (LAF mode) is generally activated by powering down the device,
    holding the volume up key and attaching it to the PC via a USB cable. The phone
    will automatically boot into the download mode, ready to accept firmware updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this mode, an imaging tool can extract the complete physical image of the
    device's physical storage. This is one of the cleanest, easiest, and most forensically
    sound acquisition methods available.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using this method, select **Physical data acquisition** | **LG Android
    dump**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be prompted to download and install LG drivers, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the drivers are installed, carry out the instructions appearing in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the LG device is connected, wait while Windows installs the corresponding
    driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Shortly after this, you''ll be able to see that your device is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Next** to begin imaging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LG smartphones'' LAF mode](img/0028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the process is finished, you will get a single binary file (stored at the
    path you specified earlier) representing a dump of the device's entire physical
    storage. You'll be able to open and analyze the dump in Oxygen Forensic Suite
    or a mobile forensic tool of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: MediaTek smartphones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MediaTek is a Chinese manufacturer supplying a large number of phone makers
    with cost-effective mobile chipsets. Mostly used in low-end and mid-range devices,
    MTK chipsets can be found in smartphones and tablets produced by major manufacturers
    (LG, SONY, HTC, and so on), as well as a countless number of B-brand and C-brand
    manufacturers.
  prefs: []
  type: TYPE_NORMAL
- en: C-brand devices sold in Mainland China and available from numerous online outlets
    are almost always equipped with one or another chipset offered by MTK. Such devices
    rarely come with locked bootloaders, allowing for clean acquisition via the MTK
    firmware update mode. Note that only devices with unlocked bootloaders can be
    acquired via this method, so it won't work on bootloader-locked devices produced
    by, for example, SONY, HTC, or LG.
  prefs: []
  type: TYPE_NORMAL
- en: Technically, MTK service mode works by installing a virtual serial (COM) port
    into the system. While dedicated MTK drivers are available, in practice, these
    are generic Windows drivers for virtual COM ports with a custom `.inf` file. Once
    the driver is installed, an MTK-supplied DLL allows booting into a service bootloader,
    reading the device info, and extracting the storage content. This method can access
    both NAND and eMMC memory. New models require updated versions of the MTK service
    DLL and bootloader. Note that support is added for entire SoC (chipset) families
    as opposed to individual smartphone models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to extract a device via MTK physical imaging, select the corresponding
    option in Oxygen Forensic Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MediaTek smartphones](img/0029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be prompted to download the driver and turn off the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MediaTek smartphones](img/0030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the drivers are installed, turn on the device and follow the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MediaTek smartphones](img/0031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the device is connected, you'll be able to proceed to extracting its storage.
  prefs: []
  type: TYPE_NORMAL
- en: Qualcomm bootloader exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Physical acquisition options are limited for locked devices featuring the locked
    bootloader, no root, and disabled ADB Debugging option. A bootloader-level exploit
    exists for some Qualcomm devices, and can be used by tools such as Cellebrite
    UFED to boot the device with a patched boot image to allow the tool to extract
    device image.
  prefs: []
  type: TYPE_NORMAL
- en: The exploit is based on a critical security vulnerability discovered in certain
    versions of the kernel bootloader used in Qualcomm reference devices and implemented
    by multiple OEMs. When processing the boot command in the fastboot mode, the affected
    kernel bootloader will not verify the unlock status of the device or whether the
    kernel is properly signed. If the device is using an affected kernel, it can be
    booted with a patched kernel image without verification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Experts can use this vulnerability to boot Android devices with arbitrary kernel
    images via fastboot even when the target uses a signed kernel and the bootloader
    is locked. (Source: *Fastboot boot command bypasses signature verification (CVE-2014-4325)*
    at [https://www.codeaurora.org/projects/security-advisories/fastboot-boot-command-bypasses-signature-verification-cve-2014-4325](https://www.codeaurora.org/projects/security-advisories/fastboot-boot-command-bypasses-signature-verification-cve-2014-4325)).'
  prefs: []
  type: TYPE_NORMAL
- en: Bootloader exploits are device-specific and involve using a custom boot image,
    built specifically for target devices. Manually building a patched boot image
    for a particular device being investigated is not feasible as it would require
    a high level of skill and a lot of time. The Cellebrite acquisition kit implements
    bootloader runtime exploits for multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: Bootloader attacks are tethered. They don't write anything into the device while
    using a patched boot image that only modifies the content of the device volatile
    memory (RAM) but does not alter the content of the device storage. For this reason,
    bootloader-level acquisition is forensically sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since bootloader exploits are device-specific, they are only available for
    some devices (Cellebrite claims support for most Motorola Android devices, selected
    Samsung, Qualcomm, and LG GSM and CDMA devices). No universal bootloader exploit
    exists. Bootloader exploits should be used with caution as some devices are known
    to wipe data partition when booting into a custom recovery. At the time of writing,
    bootloader acquisition is exclusive to Cellebrite UFED:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Qualcomm bootloader exploit](img/0032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to bootloader exploits, a few Qualcomm-based devices are susceptible
    to some of the cleanest acquisition techniques via Qualcomm 9006 mode.
  prefs: []
  type: TYPE_NORMAL
- en: Qualcomm-based smartphones â€“ HS-USB 9006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method is applicable to certain smartphones and tablets based on one of
    the recent Qualcomm SoC. Bootloader status is irrelevant; devices with locked
    bootloaders can be successfully imaged with this method. The limiting factors
    are as follows: the ability to switch the device into Qualcomm Download Mode 9006,
    and having the correct Qualcomm HS-USB 9006 drivers for a given device.'
  prefs: []
  type: TYPE_NORMAL
- en: This method is considered to be physical acquisition. It returns the full dump
    of either the entire eMMC storage or just the data partition. The complete raw
    dump is captured, including unallocated space, which makes it possible to recover
    the deleted files. This method is clean, safe, forensically sound (it leaves no
    traces anywhere in the device), and requires no specific technical expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this mode, you are capturing the raw image of either the entire eMMC card
    or selected partitions. If the data partition is encrypted, you will not be prompted
    for a passcode. The data will be captured encrypted. You may or may not be able
    to decrypt it afterwards, even if you know the correct passcode. The ability to
    decrypt encrypted data depends on many factors, such as the version of Android
    the device is running, the version of Android it was initially released with,
    and the manufacturer of the device. For example, Samsung used particularly strong
    versions of custom encryption in some versions of Android. Devices that were initially
    released with Android 5.x Lollipop use a similarly strong encryption scheme. Devices
    released with Android 4.2 Jellybean can often be decrypted.
  prefs: []
  type: TYPE_NORMAL
- en: The Qualcomm 9006 mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qualcomm is known to provide OEMs with a number of reference platforms. Manufacturers
    can use these platforms, complete with low-level firmware and drivers, to quickly
    build smartphones and tables without spending much time on research and development.
  prefs: []
  type: TYPE_NORMAL
- en: Since Qualcomm reference platforms are implemented across a variety of devices
    made by dozens of different manufacturers, security exploits that are applicable
    to a certain reference platform can often be applied to other devices built on
    the same platform. Cellebrite, for one, developed bootloader-level exploits, allowing
    the company's acquisition tool, UFED, to successfully acquire information from
    smartphones with locked bootloaders. Importantly, this is applicable to devices
    across different platforms (Android, Windows Phone 8.x, and Windows 10 Mobile)
    and regardless of whether or not the device being acquired has its bootloader
    locked or unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: Yet another low-level exploit exists, which allows downloading the entire content
    of the device internal storage (eMMC) by using Qualcomm Download Mode (firmware
    recovery mode 9006, Qualcomm MMC Storage (Diag 9006), Qualcomm HS-USB Diagnostics
    9006, HS-USB QDLoader 9006, Qualcomm HS-USB 9006, or simply qhsusb 9006, depending
    on the device). This mode is engaged automatically if the device has a corrupt
    bootloader. On many devices, it can be possible to manually engage this mode by
    turning the device off and holding the volume down key while connecting it to
    a PC via a USB port. On some devices, a different sequence is required. For example,
    LG G Flex 2 requires holding the volume up button while connecting to the PC.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a notable difference between this 9006 diagnostic mode and Qualcomm
    HS-USB QDLoader 9008 mode. While it is easy to switch the device into the 9008
    mode using Qualcomm QPST, additional files are required to boot into the 9006
    mode. Imaging the device is not possible from the 9008 mode. More information
    is available at [http://forum.xda-developers.com/general/help/how-to-enter-qualcomm-mmc-storage-diag-t3253478](http://forum.xda-developers.com/general/help/how-to-enter-qualcomm-mmc-storage-diag-t3253478).
    Also note that sometimes using QPST's eMMC Software Download Tool can help get
    the device from 9008 to 9006 by using additional files.
  prefs: []
  type: TYPE_NORMAL
- en: By connecting compatible devices in Qualcomm Download Mode 9006 and using specific
    software, it may be possible to acquire the entire content of the phone's eMMC
    chip without rooting the device or unlocking its bootloader. Please note that
    this technique may not work for all manufacturers as some of them (HTC, LG, Motorola,
    Sony, and so on) may tweak the reference platform to remove user access to the
    9006 mode.
  prefs: []
  type: TYPE_NORMAL
- en: In Qualcomm Download Mode 9006 (provided that the correct drivers are installed
    and assuming you're using a Windows PC), available partitions may appear in the
    **Windows Disk Management** console. If this is the case, acquiring the content
    of the device is as simple as using an imaging tool, such as **HDD Raw Copy Tool**
    ([http://hddguru.com/software/HDD-Raw-Copy-Tool/](http://hddguru.com/software/HDD-Raw-Copy-Tool/)).
  prefs: []
  type: TYPE_NORMAL
- en: However, Qualcomm-specific software exists, allowing you to identify and acquire
    individual partitions.
  prefs: []
  type: TYPE_NORMAL
- en: Tools for imaging via Qualcomm Download Mode 9006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A variety of tools are available for programming/reading devices via the diagnostic
    port. One such tool is **eMMC RAW Tool**. The tool is developed by Albie Cervice,
    and is available as a free download at [http://www.na2nkhape.com/2015/02/download-emmc-raw-tool.html](http://www.na2nkhape.com/2015/02/download-emmc-raw-tool.html).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Video**: A quick video tutorial on using eMMC RAW Tool is available at [https://www.youtube.com/watch?v=0ESQqVqCODY](https://www.youtube.com/watch?v=0ESQqVqCODY)
    (video by [http://www.unbrickandroid.com/](http://www.unbrickandroid.com/)).'
  prefs: []
  type: TYPE_NORMAL
- en: The tool can read the content of the device's eMMC storage via low-level firmware
    recovery mode Qualcomm HS-USB 9006\. Alternatively, it can mount an Android smartphone
    as a generic mass storage device.
  prefs: []
  type: TYPE_NORMAL
- en: 'eMMC RAW Tool features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Read full image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read partition structure from the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read partition structure from a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read selected partition from the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read by address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that eMMC RAW Tool is a powerful tool that can also write to Android devices.
    This same tool is used to revive (unbrick) devices with corrupted bootloaders.
    It goes without saying that writing anything onto a phone being imaged is not
    our intention.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use eMMC RAW Tool, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and unzip the tool from the developer's website ([http://www.na2nkhape.com/2015/02/download-emmc-raw-tool.html](http://www.na2nkhape.com/2015/02/download-emmc-raw-tool.html))
    or from [http://4pda.ru/forum/index.php?showtopic=655617](http://4pda.ru/forum/index.php?showtopic=655617).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and unzip Qualcomm drivers (the correct drivers for Qualcomm 9006 mode
    must be installed).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the correct driver for your version of Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch your device into Qualcomm Download Mode 9006\. This is the iffy part.
    To do this, you may attempt the following sequence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch the device off (wait while it shuts down completely).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Press and hold the hardware volume down key (on some devices, press and hold
    the volume up key).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: While holding the key, connect the device to your computer via a USB cable.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until the device displays **Download mode** or **Updating firmware 0%**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the key and wait while the drivers are installed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the device is not switching to the 9006 mode, you can try researching the
    correct sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this time, Windows will attempt to install the Qualcomm HS-USB 9006 driver.
    When prompted, choose the correct driver and wait until it finishes installing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, run eMMC RAW Tool, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Tools for imaging via Qualcomm Download Mode 9006](img/0033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to image the device, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Refresh**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list of physical drives will appear. Select the appropriate device from
    the **Drive** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Read Partition Structure**. The list of available partitions will
    appear in the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all partitions by clicking the check box on the top left-hand side of
    the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Read Selected Partitions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you may only select the **USERDATA**, **DATA**, or **SDCARD**
    partition during Step 4\. This will only read the content of that single partition
    containing your user data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tools for imaging via Qualcomm Download Mode 9006](img/0034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Imaging an Android Smartphone in the Qualcomm 9006 Mode
  prefs: []
  type: TYPE_NORMAL
- en: For example, the **USERDATA** partition in the preceding screenshot (partition
    number **20**) would be the correct partition to image using the **Read Selected
    Partitions** function. Alternatively, the complete device image can be read by
    using **Read Full Image**.
  prefs: []
  type: TYPE_NORMAL
- en: That's it, you have successfully imaged the device. You can now proceed to the
    actual recovery. If, however, this technique did not work for you (for example,
    your phone does not support the Qualcomm HS-USB 9006 mode), you can try imaging
    the device using a different method.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom recoveries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is more than one way of using a custom recovery to image an Android device.
    The first method is the easiest and involves simply booting into a custom recovery
    (via `fastboot boot twrp.img` or `fastboot boot cwm.img`) and using on-screen
    controls to produce a Nandroid backup of the data partition. The second method
    (via the `dd` command) is more complex and requires opening two separate terminal
    windows; however, this method returns the full raw image of the data partition.
    The following is a quick comparison of the two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nandroid backup**: This is quick, easy, and done via graphical user interface
    (touch-based or controlled with the phone''s hardware keys). It only dumps filesystem;
    no access to unallocated space makes recovering deleted files impossible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Imaging via dd**: This requires extra tools and two terminal windows. It
    requires a much higher level of expertise to use and returns the complete raw
    dump of the data partition with full access to unallocated space, making it possible
    to recover deleted files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book is not about rooting Android or installing custom recoveries. Refer
    to the end of this book for recommended reading on Android forensics.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll give a brief overview of what a custom recovery can and
    cannot do for you and what are the limitations and dangers in imaging the device
    with a custom recovery.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**: If the device bootloader is locked, unlocking it may (and probably
    will) cause a full factory reset, which results in complete loss of data. Only
    proceed if your bootloader is already unlocked or if you know for sure that your
    device can boot into a custom recovery without wiping data.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom recovery is risky. The Android platform is highly fragmented.
    Different manufacturers employ different security policies across the many devices
    they carry within their range. Booting into a custom recovery can succeed, fail,
    trigger a full factory reset, or succeed and then trigger a full factory reset.
    Therefore, using a custom recovery, in general, is not considered a forensically
    sound way of imaging the device.
  prefs: []
  type: TYPE_NORMAL
- en: '**Encryption**'
  prefs: []
  type: TYPE_NORMAL
- en: Custom recoveries may or may not be able to deal with encrypted partitions,
    even if you know the correct passcode. In addition, if the data partition is captured
    encrypted, you may or may not be able to decrypt it afterwardsâ€”even if you know
    the passcode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just a few examples from some recent cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Motorola Nexus 6** (and possibly other Nexus devices): Flashing or booting
    into a custom recovery is possible. However, unlocking bootloader causes factory
    reset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motorola Moto X (2014)**: Once the bootloader is unlocked, flashing or booting
    a custom recovery succeeds (all Android versions from 4.4 to 6.0). Unlocking bootloader
    causes factory reset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SONY Xperia Z series**: Unlocking bootloader causes factory reset. After
    that, booting or flashing custom recovery succeeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASUS MeMo Pad 7**: Unlocking is not possible. Attempts to boot into custom
    recovery fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASUS ZenPad S 8.0** (all versions): Unlocking bootloader not possible. However,
    booting into a custom recovery is available via exploit ([http://forum.xda-developers.com/android/development/zenpad-s-root-achieved-t3160422](http://forum.xda-developers.com/android/development/zenpad-s-root-achieved-t3160422))
    and causes no untoward consequences (tested on all firmware versions up to, and
    including, the current 4.5.0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASUS ZenPhone**: Same exploit as for ZenPad S.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InFocus M810t**: Unlocking bootloader is possible via exploit; the exploit
    does not trigger a wipe per se. Booting into custom recovery is possible even
    while the bootloader is locked. However, booting into custom recovery triggers
    data wipe on the next reboot. Interestingly, once booted into custom recovery,
    one can dump partitions before the wipe occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When analyzing the device, you can attempt to install or boot into a custom
    recovery mode. The two popular custom recoveries are **ClockworkMod** (**CWM**)
    ([http://www.clockworkmod.com/](http://www.clockworkmod.com/)) and **Team Win
    Recovery Project** (**TWRP**) ([http://teamw.in/Devices/](http://teamw.in/Devices/)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Important**: Installing or booting into a custom recovery requires the device
    bootloader to be fully or partially unlocked. Partially unlocked bootloader may
    allow booting into a custom recovery; however, the system may wipe data partition
    afterward. Proceed with extreme caution!'
  prefs: []
  type: TYPE_NORMAL
- en: Custom recoveries are nothing but bootable, slimmed-down versions of the Linux
    OS. Custom recoveries are therefore device-specific, as they need to come with
    the necessary drivers for each particular device model. As such, custom recoveries
    can seamlessly bypass Android's standard security measures such as access restrictions
    (but not data encryption).
  prefs: []
  type: TYPE_NORMAL
- en: Imaging via custom recovery â€“ making a Nandroid backup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Technically, there is nothing preventing custom recoveries from dumping a raw
    image of the data partition. At this time, neither TWRP nor CWM offer the ability
    to make raw dumps of the data partition from the user interface (however, boot
    and system partitions are captured as raw images). As a result, the UI of neither
    TWRP nor CWM can be used for accessing data stored in unallocated space.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Important**: Making a complete raw dump of the data partition is possible
    with custom recoveries. However, the process is significantly more complicated
    compared to making a Nandroid backup. The *Imaging the device* section explains
    the process of physically imaging Android devices via custom recoveries.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom recovery UI, however, is a feasible way of making a full backup
    of the filesystem, including all application data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the device being examined has an unlocked bootloader, you can install (or,
    better yet, boot into) a custom recovery. From there, you can easily back up the
    entire data partition of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: If no custom recovery is installed, download the custom recovery image specific
    to your device from either TWRP or CWM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Boot the device into bootloader (the fastboot mode):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch the phone off.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold down the volume down key and press the power button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The phone should boot into bootloader (the fastboot mode). If it does not, determine
    the correct way of booting into bootloader (fastboot) for your device and follow
    the instructions specific for that device.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain adb and fastboot executables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place fastboot files and the custom recovery image into a single folder. Open
    the command line in this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install fastboot drivers for the device being investigated (drivers
    can be manufacturer-specific, device-specific, or chipset-specific, depending
    on the model).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the phone to the PC via a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run either the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `twrp.img` or `cwm.img` are the names of TWRP or CWM recoveries. Use the
    correct filename or simply rename the downloaded recovery image into a shorter
    filename.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the custom recovery, back up data partition (only the data partition is
    needed). Make sure that the destination is either an external SD card or in **on-the-go**
    (**OTG**) USB drive. Do not use the phone's internal storage to back up the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this time, you've successfully acquired the complete filesystem of the device
    in the form of a **Nandroid backup**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nandroid backups files created via custom recoveries are usually saved in the
    form of EXT4, F2FS, or YAFFS TAR images. These are generally easy to extract with
    a free archive tool such as 7Zip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Imaging via custom recovery â€“ making a Nandroid backup](img/0035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Files produced by TWRP Nandroid backup
  prefs: []
  type: TYPE_NORMAL
- en: '7Zip can open multi-volume backups without the need to rename or join files.
    Simply launch 7Zip and open the `data.f2fs.win000` file (or similar) to extract
    files from the data partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Imaging via custom recovery â€“ making a Nandroid backup](img/0036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The content of a TWRP backup
  prefs: []
  type: TYPE_NORMAL
- en: TWRP can create YAFFS filesystem images. Extracting files from a TWRP Nandroid
    backup can be performed with one of the many forensic tools available on the market.
    There is also an open source utility called **unyaffs**. Its source code is available
    at [https://code.google.com/p/unyaffs/downloads/list](https://code.google.com/p/unyaffs/downloads/list).
  prefs: []
  type: TYPE_NORMAL
- en: 'The compiled version of this tool can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, `data.img` is the Nandroid backup file.
  prefs: []
  type: TYPE_NORMAL
- en: Imaging via custom recovery â€“ physical imaging via dd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Acquisition via the user interface of most popular custom recoveries (TWRP and
    CWM) does not allow for imaging the complete data partition in raw mode. In order
    to be able to investigate unallocated space, you may want to extract the entire
    user data partition to a raw image.
  prefs: []
  type: TYPE_NORMAL
- en: In unencrypted Android devices, extracting unallocated areas is only possible
    by accessing the storage directly. Android built-in security measures prevent
    such access from within the app framework, making it impossible to scan unallocated
    areas with any user-level application. Root access is required in order to be
    able to access storage in low level.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning:** Rooting the device is unsafe. It may render the device unstable
    or inaccessible. It may also wipe the device. However, the `dd` extraction method
    does not require a rooted device. All you need is a flashed or booted (recommended)
    custom recovery. A custom recovery is a slimmed down version of this OS that comes
    with root access by default.'
  prefs: []
  type: TYPE_NORMAL
- en: This advanced physical acquisition method uses the `dd` command to image the
    device. The dd command allows dumping either the entire physical storage or any
    number of individual partitions. For the purpose of digital forensics, only the
    data partition is required.
  prefs: []
  type: TYPE_NORMAL
- en: In order to transfer the data from the Android device to the PC over the USB
    interface, we'll use the `netcat` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prerequisites for this include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unlocked or semi-unlocked bootloader (to allow booting into a custom recovery)**:
    Rooting the device is not required, as custom recoveries come with full root access
    built in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BusyBox**: This comes pre-installed with custom recoveries (TWRP and CWM).
    To verify, type any BusyBox command, such as `busybox nc`, once you''re booted
    into the custom recovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Debug Bridge** (**ADB**): This is required to run shell commands
    on the Android device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fastboot**: This is part of the ADB package. It should be installed on your
    PC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ADB drivers**: ADB drivers are device-specific. They must be installed for
    this acquisition method to work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have all the required tools installed and configured, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the name of the user data partition on your Android device. If you
    can't identify the data partition, you will be imaging the entire device (physical
    storage).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the bootloader is unlocked or semi-unlocked (allowing you to boot
    into a custom recovery without wiping the data).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot the phone into the recovery mode. If the device is turned off, do this
    by holding the volume down key while powering on the device. If the device is
    turned on, and you have an active ADB connection, use `adb -d reboot recovery`
    to reboot into recovery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device to the computer via a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that fastboot is operational by running `fastboot devices`. A list of
    devices should appear. An empty string means something is wrong.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** Some devices require specifying the correct vendor ID in the command
    line. For example, for booting a Lenovo ZUK into a custom recovery, one would
    use `fastboot -i 0x2b4c boot recovery.img`. The correct vendor ID can usually
    be discovered online. In addition, in certain cases `fastboot devices` returns
    empty while actually booting into a custom recovery works.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Boot the device into the custom recovery by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `recovery.img` is your custom recovery image specific to the device being
    acquired.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ensure that Netcat is operational in your custom recovery by running the ADB
    shell (`adb shell`) and executing the `busybox nc` command. You may need to configure
    your computer's firewall to allow connecting to local ports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are now ready to image the device. The following steps describe how to
    capture an image of the data partition using the `netcat` command. You''ll be
    running two different shell sessions at the same time: one to the device and one
    to your computer.'
  prefs: []
  type: TYPE_NORMAL
- en: Imaging the device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run `cmd.exe` or use a different terminal (for example, Cygwin). This will be
    the first shell session that works with the Android device. Run `adb shell`. You
    will receive the root privileges by default, so running `su` is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Launch another instance of `cmd.exe` or your favorite terminal. This session
    opens as a shell on your computer, and will be used to receive the data from the
    Android device. Navigate to the folder that will receive the user partition (`cd
    c:\path`). Make sure that you're using an NTFS- or exFAT-formatted hard drive
    to receive the data; FAT32 volumes will be unable to save images of more than
    4 GB, which is less than the typical storage of most phones today. In this shell,
    run `adb forward tcp:5555 tcp:5555` (you may use a different port number if needed).
    This command enables ADB to communicate via Netcat on port 5555.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, once the connection is established, go back to the first shell that goes
    to your phone. Type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command images the contents of `/dev/block/mmcblk0` and writes it via port
    5555 across ADB using Netcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you may use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command acquires the `mmcblk0p12` data block. Note that you will need to
    figure out the name of the data block on the device being acquired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, go back to the second shell (that goes to your computer) and type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `nc` (Netcat) command saves the output of the first shell to your computer
    across port 5555\. The file will be stored in the same folder where you launched
    the second shell from. You can change this folder by navigating to the correct
    place via `cd disk:\path`. Note that some Windows folders (for example, `C:\Program
    Files\` and its subfolders) are not write-accessible.
  prefs: []
  type: TYPE_NORMAL
- en: If all goes well, the window will freeze while it's capturing the image. Once
    the process is finished, you'll be able to mount the newly captured image in a
    forensic tool of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** Custom recoveries do not decrypt encrypted devices. As a result,
    if the data partition was encrypted, you will receive an encrypted image that
    you may or may not be able to decrypt later on. If the device is encrypted, your
    only option is performing **live imaging** of the device (refer to the *Live imaging*
    section for more information), which requires the device to be rooted and have
    BusyBox installed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on imaging Android devices via custom recoveries:'
  prefs: []
  type: TYPE_NORMAL
- en: Why not load ClockworkMod or TWRP to image a device? Alternate recovery modes
    are useful, but maybe not for imaging a device ([http://freeandroidforensics.blogspot.com/2015/04/why-not-load-clockworkmod-or-twrp-to.html](http://freeandroidforensics.blogspot.com/2015/04/why-not-load-clockworkmod-or-twrp-to.html)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NANDroid backups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This acquisition method is applicable to smartphones and tablets that are either
    rooted or have a custom recovery installed. It is also applicable to devices with
    fully or partially unlocked bootloaders (allowing the expert to boot the device
    into a custom recovery).
  prefs: []
  type: TYPE_NORMAL
- en: If a custom recovery is installed, or can be booted into, a different acquisition
    method (via the `dd` command) is available, allowing to capture the complete raw
    image of the data partition (refer to the *Imaging via custom recovery â€“ physical
    imaging via dd* section for more information). The `dd` method returns a full
    dump of either the entire eMMC storage or just the data partition. A Nandroid
    backup contains the full filesystem of the data partition; unallocated space is
    not included, which makes recovering deleted files impossible. This method is
    relatively easy to use, but requires some technical expertise. Nandroid backups
    are *not* considered a forensically sound acquisition method; however, a Nandroid
    backup will still contain significantly more information than available via ADB.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike pretty much every other smartphone OS, Android does not come with the
    ability to produce full backups of the device. The platform provides no stock
    tools for making or restoring such backups. Moreover, the platform in its stock
    state does not even allow third-party developers to make such backup tools as
    their use would require an elevated level of privileges (*root* rights).
  prefs: []
  type: TYPE_NORMAL
- en: Individual manufacturers implement proprietary tools for making and restoring
    backups (for example, Sony PC Companion for Xperia phones and tablets). However,
    these tools are used by relatively few smartphone owners as (again, unlike iOS)
    they aren't required to perform other routine tasks such as transferring files
    to and from the device.
  prefs: []
  type: TYPE_NORMAL
- en: The need for creating and restoring full filesystem backups is there, especially
    among the more active Android users who like to experiment with their devices
    and want to be able to restore their device to its previous working state, should
    something go wrong. Full filesystem backup tools are available for these users,
    but only work on rooted devices, devices with custom recoveries, or devices that
    can be flashed via fastboot.
  prefs: []
  type: TYPE_NORMAL
- en: Examiners analyzing certain Android devices have yet another venue for extracting
    the full image of the filesystem (but generally *not* a raw dump of the data partition)
    by generating a NANDroid backup. NANDroid backups contain the full image of the
    filesystem for all partitions selected at the time of making the backup. Nandroid
    backups can be produced by booting the device into a custom recovery, such as
    CWM or TWRP (by either issuing an ADB command or, if **USB debugging** is not
    enabled, by holding the volume down and power keys on the device) and selecting
    the corresponding menu item from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** The name *NANDroid* is derived from the words *NAND* and *Android*.
    As such, the correct name is *NANDroid*, which is often written as *Nandroid*
    for simplicity.'
  prefs: []
  type: TYPE_NORMAL
- en: Is unlocked bootloader required?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While most sources say that you need either root privileges or unlocked bootloader
    (or both) in order to make Nandroid backups, this is not completely true. Technically
    speaking, all you need to make a Nandroid backup is a custom recovery, such as
    CWM or TWRP. Granted, many devices require root access for the user to install
    custom recovery, and the bootloader must be unlocked in order to be able to install
    the custom recovery. However, the user may safely relock bootloader after installing
    custom recovery, which will not affect the ability to produce Nandroid backups.
    In addition, many devices can safely boot into a custom recovery (via `fastboot
    boot recovery.img`) as opposed to permanently installing one, even if the bootloader
    is officially locked. For the purpose of mobile forensics, booting into a custom
    recovery is a much cleaner and more forensically sound method of imaging the device.
  prefs: []
  type: TYPE_NORMAL
- en: Is root access required?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contrary to popular belief, root access is not an absolute requirement for making
    Nandroid backups. In order to produce a Nandroid backup, you can either boot into
    a custom recovery (root status is irrelevant) or use an app (root privileges and
    BusyBox package required).
  prefs: []
  type: TYPE_NORMAL
- en: Producing a Nandroid backup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following two ways are available for making Nandroid backups:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlocked or partially unlocked bootloader, custom recovery (for example, CWM
    or TWRP) specific to the device available: note that unlocked bootloader is normally
    required in order to install custom recovery. In addition to this, some devices
    must be rooted in order to install custom recovery. Unlocking bootloader during
    the investigation is not normally possible as this operation initiates a full
    wipe of the data partition. However, bootloader may be relocked after having the
    custom recovery installed, so technically speaking, unlocked bootloader is not
    required for making Nandroid backups via custom recovery. For the purpose of making
    Nandroid backups through custom recovery, root status of the device is irrelevant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rooted device, BusyBox installed, a Nandroid backup app is used: You may be
    able to make a Nandroid backup even if the bootloader is unlocked. For this, you
    will be using one of the many Nandroid backup apps. You can sideload an app like
    that onto the phone. Note that you may need to have BusyBox installed (unless
    the tool uses its own mechanism for imaging the data partition). Root is required
    to use such apps; however, root is not required if the operation is performed
    through a custom recovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a custom recovery, which is basically a standalone version of the OS,
    helps tremendously in bypassing most security restrictions (except encryption).
    If you can boot into a custom recovery (or if you can manage to install it without
    wiping the device), you can easily dump the entire content of the eMMC storage,
    or just image the data partition onto an external SD card or OTG flash drive (if
    either device is supported by the phone).
  prefs: []
  type: TYPE_NORMAL
- en: In some situations, you may encounter relocked bootloaders (the user unlocks
    the bootloader, installs a custom recovery, and then relocks the bootloader).
    While this, in general, is not an issue, some users may protect access to custom
    recovery with a password. A combination of a locked bootloader and a password-protected
    custom recovery is extremely tough to break.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Nandroid backups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NANDroid backups are standardized between different recoveries. NANDrpod is
    a de-facto standard format for storing Android system backups. Nandroid backups
    can be parsed and analyzed by forensic tools such as Oxygen Forensic Suite ([http://www.oxygen-forensic.com/en/compare](http://www.oxygen-forensic.com/en/compare))
    or Belkasoft Evidence Center (version 7.3 or newer).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Oxygen Forensic Suite, a Nandroid backup can be imported via **Android backup/image**
    | **Android backup**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing Nandroid backups](img/0037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose a backup type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing Nandroid backups](img/0038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify a backup location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing Nandroid backups](img/0039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify options and click on **Finish**. The data will be processed and imported
    into the analytic suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing Nandroid backups](img/0040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the process is finished, you''ll be able to access information stored
    in the backup you have just imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing Nandroid backups](img/0041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Live imaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Live imaging may be your last resort when acquiring an encrypted device. Since
    neither bootloader exploits nor custom recoveries can decrypt encrypted partitions,
    you may need to start and unlock the device with the correct PIN code in order
    to gain access to the encrypted data partition.
  prefs: []
  type: TYPE_NORMAL
- en: Live imaging of an Android device is similar to the process described in the
    *Imaging via custom recovery â€“ physical imaging via dd* section.
  prefs: []
  type: TYPE_NORMAL
- en: Live imaging with root (via dd)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Live imaging is considered to be a less forensically-sound method compared to
    using a custom recovery or other acquisition methods. This method requires a rooted
    device with BusyBox installed. Rooting an Android device in general is not always
    safe or possible. Depending on the version of Android and the method used to obtain
    root access, rooting may modify the device boot image and/or its system and data
    partitions. Installing BusyBox may or may not modify the system partition. Rooting
    and installing BusyBox may also alter the content of the user's data partition.
    With the recent development of *systemless root*, it is now technically possible
    to achieve root access and install BusyBox without modifying the system partition.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions on how to root and install BusyBox on Android devices are widely
    available, so we won't cover them here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prerequisites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Root access**: Your device must be rooted. Unlocked bootloader is not required
    for this acquisition method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BusyBox**: This must be installed on your Android device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cmd.exe** or another terminal (for example, Cygwin).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ADB executable**: Android Debug Bridge (`adb.exe`) will be required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ADB drivers**: ADB drivers specific to the device being acquired must be
    installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**USB debugging**: This must be enabled on the Android device in ****Developer**
    options**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the device is rooted, you''ll be using two shellsâ€”one that goes to the
    Android device and one that goes to your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the name of the data partition being acquired. If you can't identify
    the data partition, you can image the entire device (physical storage).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on and unlock the device. If it is locked with a passcode, enter the passcode.
    If not known, use one of the many passcode recovery techniques to obtain it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Android ****Developer** options**, enable **USB debugging**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device to your computer via a USB cable. Unlock the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The device will prompt to authorize the debug interface. Tap **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your computer, open the command line and type `adb devices`. Your device
    should appear in the list of connected devices. If the returned list is empty,
    or your phone is listed as offline, troubleshoot the ADB connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the first of the two shells. This will be the connection to the device
    being imaged. Run `cmd.exe` or open a different shell (for example, Cygwin). Type
    `adb shell` followed by `su`. On the device, confirm superuser access if prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check whether you successfully received root access by attempting to list `/data`.
    Type `ls /data`. If you can see the content of this directory, you successfully
    obtained root access. If not, troubleshoot the root access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes well, you are ready to image the device.
  prefs: []
  type: TYPE_NORMAL
- en: Launch another instance of `cmd.exe` or your favorite terminal. This session
    opens as a shell to your computer, and will be used to receive the data from the
    Android device. Navigate to the folder that will receive the user partition (`cd
    c:\path`). Make sure that you're using an NTFS- or exFAT-formatted hard drive
    to receive the data; FAT32 volumes will be unable to save images of more than
    4 GB, which is less than the typical storage of most today's phones. In this shell,
    run `adb forward tcp:5555 tcp:5555` (you may use a different port number if needed).
    This command enables ADB to communicate via Netcat on port 5555.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, once the connection is established, go back to the first shell that goes
    to your phone. Type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command images the contents of /dev/block/mmcblk0 and writes it via port
    555 across ADB using Netcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you may use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This command acquires the `mmcblk0p12` data block. Note that you will need to
    figure out the name of the data block on the device being acquired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, go back to the second shell (that goes to your computer) and type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `nc` (Netcat) command saves the output of the first shell to your computer
    across port 5555\. The file will be stored in the same folder where you launched
    the second shell from. You can change this folder by navigating to the correct
    place via `cd disk:\path`. Note that some Windows folders (for example, `C:\Program
    Files\` and its subfolders) are not write-accessible.
  prefs: []
  type: TYPE_NORMAL
- en: If all goes well, the window will freeze while it's capturing the image. Once
    the process is finished, you'll be able to mount the newly captured image in a
    forensic tool of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** Unlike the previous acquisition method operating via a custom recovery,
    live imaging of an Android device can successfully acquire encrypted partitions.
    Encrypted data will be decrypted on-the-fly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on imaging Android devices is available as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Live imaging an Android device: Not as hard as it sounds if you break it downâ€”[http://freeandroidforensics.blogspot.com/2014/08/live-imaging-android-device.html](http://freeandroidforensics.blogspot.com/2014/08/live-imaging-android-device.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live imaging without root (via ADB backup)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On some devices, root access may not be available. If this is the case, the
    only remaining imaging option besides **Google Account** acquisition is attempting
    to make an ADB backup. This method is 100% logical acquisition; we only discuss
    this here as it is the last acquisition method available if all other methods
    fail.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to realize the limitations of this method. Unlike Apple iOS
    or BlackBerry 10, a non-rooted backup on Android devices only extracts a very
    limited amount of information. Application developers may disable backups in their
    app's Manifest file; ADB will not back up data from these apps. However, if no
    other acquisition options are available, an ADB backup may still be better than
    nothing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirements for this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**USB debugging** enabled, or device unlocked/lock screen bypassed in order
    to enable **USB debugging**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If data partition is encrypted, the device must be unlocked (bypassing the lock
    screen is not enough)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ADB installed and working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start imaging the device, turn it on and wait until it is fully booted.
    Unlock the device (or bypass the screen lock) and make sure that **USB debugging**
    is enabled in **Developer options**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging without root (via ADB backup)](img/0042.jpeg)![Live imaging
    without root (via ADB backup)](img/0043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, connect the device to the PC via a USB cable. Launch `cmd.exe` in the
    folder where ADB is installed. Type `adb devices` to verify connectivity. On the
    phone, you should be prompted to authorize debugging from the connected PC; tap
    to confirm the prompt. If all goes well, you should see the device listed under
    the **adb devices** prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging without root (via ADB backup)](img/0044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you''ll be using the ADB backup command. The command has the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to back up the entire content of the device, use the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Android device being imaged, you will see the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging without root (via ADB backup)](img/0045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tap **Back up my data** and wait till the process completes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: On some devices, ADB backup may not work if the data partition is
    encryptedâ€”even if you unlock the device with the correct passcode. Currently,
    there is no known workaround.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use Oxygen Forensic Extractor to automatically produce an ADB
    backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging without root (via ADB backup)](img/0046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The resulting `backup.ab` file may be opened in one of the many mobile forensic
    suites on the market. For example, in Oxygen Forensic Suite, use the following
    sequence to import this backup: **Import File** | **Import Android backup/image**
    | **Import Android backup...**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging without root (via ADB backup)](img/0047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the import completes, you will see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging without root (via ADB backup)](img/0048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Live imaging using Oxygen Forensic Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Oxygen Forensic Suite comes with the ability to live-image many types of Android
    devices. Its acquisition methods range from manufacturer-specific raw dumps to
    the physical acquisition of rooted devices and the logical acquisition of Android
    devices that have no root access available. For many models, Oxygen Forensic Suite
    can bypass bootloader lock and screen lock completely. For certain devices, the
    tool can automatically acquire root access.
  prefs: []
  type: TYPE_NORMAL
- en: 'For live imaging Android devices, you''ll be using Oxygen Forensic Extractor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Connect the device via a USB cable. Unlock and ensure that **ADB Debugging**
    is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If it is not, enable **USB debugging** in the device''s **Developer options**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to authorize **USB debugging** on the device's screen once it's connected
    to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything goes well, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Troubleshooting connectivity**: On some occasions, USB debugging will not
    be available after the device is connected to the PC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If that''s the case, check whether USB connectivity is set to something other
    than **Charging** by pulling the notification panel from the top of the screen.
    We recommend that you choose the **Photo transfer (PTP)** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Reconnect** in Oxygen Forensic Extractor to make another attempt.
  prefs: []
  type: TYPE_NORMAL
- en: 'After connecting the device, Oxygen Forensic Extractor will probe it for root
    access. If the Android device is already rooted, the device will prompt you to
    allow root access. Confirm the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If root was not available on the Android device, Oxygen Forensic Extractor
    will attempt a range of different exploits to obtain root access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If root access is successfully obtained, the imaging process will begin automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If Oxygen Forensic Extractor is unable to obtain root access, physical extraction
    will fail. You can attempt a different extraction method, such as over-the-air
    (refer to the *Google Account acquisition â€“ over-the-air* section for more information)
    or via ADB backup (refer to the *Live imaging without root (via ADB backup)* section
    for more information):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live imaging using Oxygen Forensic Suite](img/0058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Google Account acquisition â€“ over-the-air
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android is a Google OS. Relying heavily on cloud services, most of which are
    provided by Google, Android devices inevitably leave traces on Google's servers.
    Extracting information from Google's servers is a great way to complement information
    available in the device itself. While over-the-air acquisition can be used when
    all other acquisition methods fail, it is not limited to acquiring Android devices.
    Instead, acquisition of Google Accounts can provide a much deeper insight into
    user activities than what's available in a single Android smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all Android devices come with Google Mobile Services; we'll discuss
    this in detail later on. In particular, Amazon devices (Fire tablets and Amazon
    Fire Phone) do not come with any Google services preinstalled. However, end users
    may add Google services later on.
  prefs: []
  type: TYPE_NORMAL
- en: Why Google Account?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android backups are limited at best. In the world of Android, cloud backups
    are still new and (as of Android 6.0) incomplete. However, a lot of interesting
    data can be obtained directly from the user's Google Account as opposed to Android
    backups.
  prefs: []
  type: TYPE_NORMAL
- en: Google is known to collect massive amounts of information about everyone who
    has a Google Account. If you are able to log in with the user's Google credentials,
    you will be able to acquire that data regardless of whether you have the actual
    Android device available. Knowing what Google knows about the suspect can be essential
    for an investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Google offers the ability to extract some of this data via its own service,
    called Google Takeout. Unfortunately, Google Takeout lacks transparency and does
    not offer full access to available information. The data is stored in a number
    of different formats, and Google is known for declining requests to help investigators
    analyze the data.
  prefs: []
  type: TYPE_NORMAL
- en: Google Account â€“ what's inside?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google provides a diverse range of services, most of which are free of charge.
    The company offers Google Mail (Gmail), Google Drive, the ubiquitous Google Search,
    Google Chrome (with cloud sync), Google Maps, and dozens of other services that
    automatically sync across devices with the help of a single Google Account.
  prefs: []
  type: TYPE_NORMAL
- en: Google Account is a single-stop aggregation of information about the user's
    online behavior and offline activities. Google analyzes search queries and communications,
    and recommends places to visit and things to read. Google collects and maintains
    a comprehensive location history; stores all Google searches performed on registered
    desktop and mobile devices; syncs Chrome tabs, bookmarks, passwords, and history;
    keeps notes; annotates pictures; syncs contacts; and does a lot more.
  prefs: []
  type: TYPE_NORMAL
- en: All this data is collected by different services and is stored in different
    places across Google servers. The data is available in a range of different formats,
    and requires using vastly different protocols to access. However, the entirety
    of this data is accessible with a single authentication via Google Account.
  prefs: []
  type: TYPE_NORMAL
- en: 'What can you expect when extracting data from a Google Account? Nearly everyone
    has a Gmail account, which means messages and contacts. Google Chrome accounts
    for nearly half of all Web requests, which means tabs, bookmarks, and search history,
    as well as Web forms and logins. Google Maps is a major player, and Google Drive
    offers cloud storage for pretty much everything. Here''s what you can expect to
    see when acquiring data from a Google Account:'
  prefs: []
  type: TYPE_NORMAL
- en: User profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location history (very comprehensive)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail messages and settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contacts and calendars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about connected devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about devices, apps, and browsers that requested access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Advertising settings (including age, gender, interests, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Keep notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Photos (albums, detected people, EXIF, location data, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hangouts messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Fit data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following bits are additionally available from Google Chrome synced data
    (Google Chrome data may be additionally protected with a password):'
  prefs: []
  type: TYPE_NORMAL
- en: Bookmarks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome synced passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autofill data for Web forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google search queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube search queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each entry from the search and browsing history contains the following additional
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Original IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page transitions (search results that were opened)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions on ads (tracks clicks and purchases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Takeout does not export the search and browsing history.
  prefs: []
  type: TYPE_NORMAL
- en: A word on Android backups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cloud backups are new to Android. Automatic backup of third-party application
    data was only made available in Android 6.0\. However, even in earlier versions
    of Android, some bits of data were still exported into the cloud and restored
    when the user initialized a new device with their Google credentials. Particularly,
    we''ve seen the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: Installed apps (from Google Play only, no data on sideloaded apps)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Home settings, including wallpaper, folders, and icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Calendar settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of Wi-Fi networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wi-Fi passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language and input settings, including custom dictionaries for Google Keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and time settings (for example, 12/24 hr, time zone, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android 6.0 introduced support for cloud backups, allowing third-party apps
    to have automatic backup and restore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A word on Android backups](img/0059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: However, Android cloud backups are still severely limited compared to iOS and
    Windows Phone counterparts. While prerelease versions of Android 6.0 allowed third-party
    apps to *opt-out* from data backups (the default behavior was *backups enabled
    for all apps that did not opt out via manifest*), the release version of Android
    6.0 did not retain this change.
  prefs: []
  type: TYPE_NORMAL
- en: The final version of Android 6.0 uses the *opt-in* method, allowing application
    developers to explicitly allow backups for their apps through the manifest file.
    The default behavior is *no data backups*. As of today, very few apps have made
    use of this feature. This includes Google's own apps, which don't use the new
    backup feature of Android 6.0\. Instead, they use Google Drive to back up their
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: At this time, WhatsApp messenger does not use the default backup
    mechanism provided by Android 6.0\. Instead, WhatsApp offers the ability to back
    up its content directly to Google Drive. WhatsApp backups can be acquired from
    Google Drive; however, in order to decrypt the backup, one will need to extract
    the decryption key, which is only accessible if the device is rooted. Oxygen Forensic
    Suite can accomplish this goal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on this subject is available in the Ars Technica''s excellent
    write-up: *Android 6.0 has a great auto-backup system that no one is using (yet)*
    ([http://arstechnica.com/gadgets/2015/10/android-6-0s-auto-backup-for-apps-perfect-data-backup-for-the-1-5/](http://arstechnica.com/gadgets/2015/10/android-6-0s-auto-backup-for-apps-perfect-data-backup-for-the-1-5/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pictures available in the user''s Google Photos space are also stored in the
    cloud. The Google Photos service contains much more information compared to Google
    Drive:'
  prefs: []
  type: TYPE_NORMAL
- en: Albums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geolocation tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View counters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People (faces) tagged on the photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain bits of data (for example, location history, dashboard items, and Hangout
    conversations) can be acquired without making Google alert the user by e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Google Takeout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When acquiring information from Google, the first and obvious choice is using
    Google's own data exporting service, Google Takeout. This service is available
    at [https://takeout.google.com/settings/takeout](https://takeout.google.com/settings/takeout).
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Takeout allows users to download their data. However, Takeout is not
    a good forensic solution for several reasons. Takeout uses a plethora of formats
    such as OPML (RSS), CSV, plain text, JSON (GeoJSON for map data), vCard, PDF,
    and HTML, as well as several others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Takeout](img/0060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: While Google Takeout exports a lot of data, it fails to provide some important
    bits. Google Takeout leaves traces in the user's account and notifies the user
    via an e-mail alert that their data was accessed. The resulting file produced
    by Google Takeout is not immediately usable, as the data is stored in numerous
    formats and cannot be used for searching and analyzing as-is.
  prefs: []
  type: TYPE_NORMAL
- en: Google Account acquisition and analysis using Elcomsoft Cloud Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Takeout does not provide full access to some bits of data, which includes
    stored passwords, search queries on connected devices, Chrome page transitions,
    and the browsing history. This data remains available elsewhere in Google and
    can be extracted manually. However, manual extraction can be labor-intensive and
    time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to automate the extraction, you can use Elcomsoft Cloud Explorer.
    The tool authenticates into the Google Account and automatically downloads all
    available information from Google servers. The built-in viewer displays information
    in human-readable form and enables fast searching and filtering. Elcomsoft Cloud
    Explorer attempts to minimize the traces it leaves in the account being acquired.
    In particular, it does not cause an e-mail alert during the acquisition. As an
    example, the tool can display links the user clicked on after firing up a search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Account acquisition and analysis using Elcomsoft Cloud Explorer](img/0061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Elcomsoft Cloud Explorer offers investigators access to Google Accounts and
    allows downloading all available information. The tool leaves fewer traces compared
    to Google Takeout while pulling more data than the Google''s service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Account acquisition and analysis using Elcomsoft Cloud Explorer](img/0062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that Google may alert the user once someone accesses the user's Google
    Account from a different device or IP address. While using Google Takeout is a
    certain way to trigger such an alert, using Elcomsoft Cloud Explorer reduces (but
    does not completely eliminate) such probability. At this time, we don't know what
    types of data might trigger such alerts. Just be aware of the possibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can extract the following:'
  prefs: []
  type: TYPE_NORMAL
- en: User profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hangouts messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contacts (including synced contacts from other devices)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Photos, including EXIF data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Keep notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search history and transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome data (bookmarks, forms, stored credentials, and page transitions
    from all synced devices)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chrome synced data may be protected with an additional password. Elcomsoft Cloud
    Explorer can decrypt the data if you enter the correct password.
  prefs: []
  type: TYPE_NORMAL
- en: Calendars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Elcomsoft Cloud Explorer includes a built-in viewer for all of the data formats
    available in the Google Account, including a built-in viewer for synced passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Account acquisition and analysis using Elcomsoft Cloud Explorer](img/0063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Elcomsoft Phone Viewer: viewing stored passwords'
  prefs: []
  type: TYPE_NORMAL
- en: Two-factor authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some Google accounts may be protected with two-factor authentication, requiring
    experts to provide an extra code in addition to the user's Google ID and password.
    If you are using Google Takeout or Elcomsoft Cloud Explorer, you will be prompted
    to enter the additional six-digit code if two-factor authentication is enabled
    on a given account.
  prefs: []
  type: TYPE_NORMAL
- en: User alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is essential to realize that Google alerts users on Takeout acquisition by
    sending them an e-mail to their registered address. This only happens when Google
    Takeout is used. If you use Elcomsoft Cloud Explorer, you will not trigger an
    alert and will leave traces in the user's Google Account (this may change in the
    future, but currently this is the case). Note that, in some rare cases, accessing
    certain types of data may still trigger a notification from Google. At this time,
    we don't know what exactly triggers this notification. Consider this being the
    risk associated with cloud acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing, searching, and analyzing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using Google Takeout, prepare to face many cumbersome data formats. On
    the other hand, Elcomsoft Cloud Explorer automatically decodes these data formats.
    The tool displays the data in human-readable form, allowing viewing and analyzing
    information obtained from the suspect''s Google Account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing, searching, and analyzing data](img/0064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Elcomsoft Phone Viewer: viewing and analyzing information'
  prefs: []
  type: TYPE_NORMAL
- en: The built-in viewer recognizes data formats used by Google and is available
    in the Google Account. The data is parsed and displayed automatically. The viewer
    offers instant filtering and quick search. Locating contacts, messages, or authentication
    credentials (login and password) requires typing a part of the word you are looking
    for into the search box.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the tools, methods, and practical steps to perform
    the acquisition of various Android devices. We covered low-level acquisition techniques
    via device service modes, and talked about physical acquisition via root exploits
    and bootloader-level exploits. We also covered logical acquisition and discussed
    its limitations on the Android platform. In the next chapter, we'll move over
    to the other mobile platform, and learn about acquisition techniques applicable
    to Apple iOS.
  prefs: []
  type: TYPE_NORMAL
