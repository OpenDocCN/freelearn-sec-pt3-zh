- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have now reached the *Appendix* chapter. Here, we will cover several custom
    Wazuh rules. Wazuh has already built thousands of rules to enhance its detection
    capabilities. However, we will write some important custom Wazuh rules to detect
    PowerShell, Linux Auditd, Kaspersky, and Symon-related alerts. This chapter covers
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom PowerShell rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Auditd rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Kaspersky Endpoint Security rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Sysmon rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom PowerShell rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enhance the Wazuh detection capabilities for Windows machines, we need to
    integrate some custom PowerShell Wazuh rules. Each rule can be created with specific
    conditions, severity levels, and other optional configurations. We will cover
    the following types of rules in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell event information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell error logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell warning logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell critical logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell event information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create a custom PowerShell rule to get event information, as shown in
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>60009</if_sid>`: This represents the list of rule IDs. It will match
    when a rule ID on the list has previously matched. Rule ID `60009` is a pre-built
    Wazuh rule for Windows informational events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.system.providerName">^PowerShell$</field>`: The `<field>`
    tag is used as a requisite to trigger the rule. It will check for a match in the
    content of a field extracted by the decoder. In this case, it will check whether
    the `win.system.providerName` log field has the `PowerShell` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<group>windows_powershell,</group>`: This enforces that the alert will be
    categorized under a specific group. In this case, it is `windows_powershell`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell error logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell error logs typically contain information related to errors, warnings,
    and other events. To detect such PowerShell error logs, we can create custom Wazuh
    rules, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>60011</if_sid>`: This represents the list of rule IDs. It will match
    when a rule ID on the list has previously matched. Rule ID `60011` is a pre-built
    Wazuh rule for Windows error events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.system.providerName">^Microsoft-Windows-PowerShell$</field>`:
    The `<field>` tag is used as a requisite to trigger the rule. It will check for
    a match in the content of a field extracted by the decoder. In this case, it will
    check whether the `win.system.providerName` log field has the `Microsoft-Windows-PowerShell`
    keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<group>windows_powershell,</group>`: This enforces that the alert will be
    categorized under a specific group. In this case, it is `windows_powershell`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell warning logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell also generates non-critical alerts during script execution. This
    is helpful for security investigation. To detect such alerts on the Wazuh manager,
    we can create custom Wazuh rules, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field name="win.system.providerName">^Microsoft-Windows-PowerShell$</field>`:
    The `<field>` tag is used as a requisite to trigger the rule. It will check for
    a match in the content of a field extracted by the decoder. In this case, it will
    check whether the `win.system.providerName` log field has the `Microsoft-Windows-PowerShell`
    keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.system.severityValue">^WARNING$</field>`: It will check whether
    the `win.system.severityValue` log field has the `WARNING` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<group>windows_powershell,</group>`: This enforces that the alert will be
    categorized under a specific group. In this case, it is `windows_powershell`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell critical logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell generates critical alerts where there are some severe errors during
    execution. To detect such alerts, we can create custom Wazuh rules, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field name="win.system.severityValue">^WARNING$</field>`: It will check whether
    the `win.system.severityValue` log field has the `WARNING` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<group>windows_powershell,</group>`: This enforces that the alert will be
    categorized under a specific group. In this case, it is `windows_powershell`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This completes some of the important custom PowerShell rules. In the next section,
    we will cover Wazuh rules for Linux Auditd modules.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Wazuh rules for Auditd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom Wazuh rules for Auditd provide a tailored method to enhance Wazuh’s capabilities
    to detect Linux command executions. This will also help the security team to detect
    critical security events, track user activities, and ensure regulatory compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Auditd syscall rule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create a Wazuh rule to detect any system call (syscall) events, as written
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<decoded_as>auditd-syscall</decoded_as>`: This represents a requisite to trigger
    the rule. It will be triggered only if the event has been decoded by a specific
    `decoder`. In this case, it is `auditd-syscall`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditd path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux Auditd generates an event for every path record. We will create a Wazuh
    rule to capture the event for Auditd path messages, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<decoded_as>auditd-syscall</decoded_as>`: This represents a requisite to trigger
    the rule. It will be triggered only if the event has been decoded by a specific
    `decoder`. In this case, it is `auditd-path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting a change in the user environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect any changes in the user environment, we can create a custom Wazuh
    rule to detect changes in `bash_profile`, as written here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<list field="audit.directory.name" lookup="address_match_key">etc/lists/bash_profile</list>`:
    The `<list>` tag performs a CDB lookup, and the `field` attribute is used as a
    key in the CBD list. In this case, the CDB list `audit.directory.name` is used
    and `address_match_key` is used to search for the IP address and key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve learned how to build custom Wazuh rules for Linux Auditd modules. In the
    next section, we will build Wazuh rules for Kaspersky Endpoint Security solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Wazuh rules for Kaspersky Endpoint Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Kaspersky Endpoint Security** is a leading security provider, delivering
    cloud security, embedded security, threat management, and industrial security.
    To enhance Wazuh’s capability to detect Kaspersky endpoint alerts, we need to
    create custom Wazuh rules. In this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Kaspersky’s general rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules to detect events when a Kaspersky agent restarts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules for quarantine alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaspersky’s general rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kaspersky Endpoint Security generates some general alerts. To detect those
    alerts, the following Wazuh rule needs to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field name="win.system.channel">^Kaspersky Event Log$</field>`: It will check
    whether the `win.system.channel` log field has the `Kaspersky Event` `Log` keyword'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules to detect events when the Kaspersky agent restarts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect events when the Kaspersky agent restarts, a custom Wazuh rule needs
    to be created, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field name="win.system.providerName">klnagent</field>`: It will check whether
    the `win.system.providerName` log field has the `klnagent<field name="win.system.eventID">1</field>`
    keyword. This represents another field within the Windows event log. This rule
    triggers if the value of `eventID` is `1`. In Windows event logging, `eventID`
    1 often represents system startup or the start of a logging session or a restart
    of the Windows Time service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules for quarantine alert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect whether a suspicious file has been quarantined, we can a custom Wazuh
    rule to trigger the alert, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field name="win.system.message" type="pcre2">(?i)^"Quarantine</field>`: It
    will check whether the `win.system.message` log field has the `Quarantine.<field
    name="win.system.message" type="pcre2">(?i)^"Quarantine</field>` keyword. This
    specifies another field within the Windows event log; this time it is the `message`
    field. This rule triggers if the message contains the `Quarantine` keyword. This
    is done by using a regular expression library called **Perl Compatible Regular**
    **Expressions** (**PCRE2**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have learned how to build custom Wazuh rules to detect Kaspersky Endpoint
    Security events. In the next section, we will build custom rules to detect Sysmon
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Wazuh rules for Sysmon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sysmon** – a Windows Sysinternals tool – provides an in-depth view into system-related
    activities. Sysmon helps us detect a wide range of activities, such as process
    creation, file creation and modification, registry changes, driver loading, DLL
    loading, named pipe creation, process access, and DNS query logging. In order
    to expand Wazuh’s detection capability, we need to build a custom Wazuh rule to
    generate alerts. There is a total of 30 Sysmon events, as explained on the official
    Microsoft website ([https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon](https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon)).
    However, we will cover the most important Sysmon events that are mapped with some
    specific MITRE ATT&CK techniques. These rules are developed by taking reference
    from the official GitHub account of SOCFortress – a SaaS-based cybersecurity platform.
    You can also refer to the list of all the Wazuh rules mapped with MITRE techn[iques
    against Sysmon events here: https://github.com/socfortress/Wa](https://github.com/socfortress/Wazuh-Rules/tree/main/Windows_Sysmon)zuh-Rules/tree/main/Windows_Sysmon.
    In this section, we will cover some of the important Sysmon events, as mentioned
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sysmon Event 1: Process Creation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 2: Process changed a File Creation Time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 3: Network Connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 7: Image loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 10: Process Access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 11: File Creation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 12: Registry Event (Object create and delete)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 13: Registry Event (Value Set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 14: Registry Event (Key and Value Rename)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 15: File Creation StreamHash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 17: Pipe Creation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 18: Pipe Event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 22: DNS Request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 1: Process Creation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Wazuh rule for the detection of a *Process Creation* event allows the security
    team to monitor suspicious unauthorized processes being executed and is written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61603</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200401` will be triggered only when the parent rule
    `61603` matches. Rule ID `61603` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 2: Process changed a File Creation Time'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The File Creation event of the Sysmon module detects the creation of potentially
    infected files or unexpected file changes, providing insights into file-based
    malware threats. The custom Wazuh rule for Sysmon Event 2 can be created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61604</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200402` will be triggered only when the parent rule
    `61604` matches. Rule ID `61604` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 3: Network Connection'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 3 is generated when it detects any unusual or unauthorized network
    connections. To detect such a network connection, we can create a custom Wazuh
    rule, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61605</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200403` will be triggered only when the parent rule
    `61605` matches. Rule ID `61605` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 7: Image loaded'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Image Loaded event is generated when malicious code is injected into a
    normal process. The Wazuh rule to detect such events is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61609</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200404` will be triggered only when the parent rule
    `61609` matches. Rule ID `61609` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 10: Process Access'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Process Access event helps the security team to detect suspicious activities
    such as process memory modification or injection, often linked to an advanced
    attack chain. To visualize such events, the following Wazuh rule needs to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61612</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200405` will be triggered only when the parent rule
    `61612` matches. Rule ID `61612` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 11: File Creation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The File Creation event provides redundancy for file creation monitoring and
    helps provide maximum coverage for file-based malware threats. A Wazuh rule to
    detect such events can be created, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61613</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200406` will be triggered only when the parent rule
    `61613` matches. Rule ID `61609` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 12: Registry Event (Object create and delete)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 12 captures logs when a new registry key or subkey is created
    or an existing one is deleted. This is useful for detecting unauthorized changes
    to the registry, which may indicate the presence of file-less malware. A Wazuh
    rule can be created to detect such events, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have the following
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61614</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200407` will be triggered only when the parent rule
    `61614` matches. Rule ID `61614` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 13: Registry Event(Value Set)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 13 is triggered when a new value is set, or an existing value
    is modified within a registry key. This event is important to detect changes related
    to malware persistence or privilege escalation techniques. A Wazuh rule can be
    created to detect such an event, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61615</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200408` will be triggered only when the parent rule
    `61615` matches. Rule ID `61615` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.eventdata.RuleName">^technique_id=T1546.011,technique_name=Application
    Shimming$</field>`: The `<field>` tag is used as a requisite to trigger the rule.
    It will check for a match in the content of a field extracted by the decoder.
    In this case, it will check whether the `win.eventdata.RuleName` log field has
    the `technique_id=T1546.011,technique_name=Application Shimming` `l` keywords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 14: Registry Event(Key and Value Rename)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 14 is triggered when a registry key or value is renamed. These
    techniques can be used by advanced attackers to evade anti-malware detection or
    disrupt the system. A Wazuh rule can be created to detect such events, as written
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61616</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200409` will be triggered only when the parent rule
    `61615` matches. Rule ID `61615` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.eventdata.RuleName">^technique_id=T1546.011,technique_name=Application
    Shimming$</field>`: The `<field>` tag is used as a requisite to trigger the rule.
    It will check for a match in the content of a field extracted by the decoder.
    In this case, it will check whether the `win.eventdata.RuleName` log field has
    the `technique_id=T1546.011,technique_name=Application Shimming` `l` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 15: File Creation StreamHash'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 15 captures the file creation activities with the hash of the
    file. To create a Wazuh rule to detect such events, we can create a custom rule,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61617</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200410` will be triggered only when the parent rule
    `61617` matches. Rule ID `61617` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.eventdata.RuleName">^technique_id=T1089,technique_name=Drive-by
    Compromise$</field>`: The `<field>` tag is used as a requisite to trigger the
    rule. It will check for a match in the content of a field extracted by the decoder.
    In this case, it will check whether the `win.eventdata.RuleName` log field has
    the `technique_id=T1089,technique_name=Drive-by Compromise` `l` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 17: Pipe Creation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 17 records the creation of named pipes, which allows for inter-process
    communication on a system. This helps to identify any suspicious activities related
    to the setting up of named pipes. A custom Wazuh rule can be built to detect such
    events, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61646</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200411` will be triggered only when the parent rule
    `61646` matches. Rule ID `61646` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.eventdata.RuleName">^technique_id=T1021.002,technique_name=SMB/Windows
    Admin Shares$</field>`: The `<field>` tag is used as a requisite to trigger the
    rule. It will check for a match in the content of a field extracted by the decoder.
    In this case, it will check whether the `win.eventdata.RuleName` log field has
    the `"technique_id=T1021.002,technique_name=SMB/Windows Admin` `Shares` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 18: Pipe Event'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 18 captures additional information about pipes, such as opening,
    closing, or reading to named pipes, and helps in detecting anomalous behavior
    in the system. A Wazuh rule can be created to detect such events, as written here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have the following
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61647</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200412` will be triggered only when the parent rule
    `61647` matches. Rule ID `61646` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="win.eventdata.RuleName">^technique_id=T1021.002,technique_name=SMB/Windows
    Admin Shares$</field>`: The `<field>` tag is used as a requisite to trigger the
    rule. It will check for a match in the content of a field extracted by the decoder.
    In this case, it will check whether the `win.eventdata.RuleName` log field has
    the `technique_id=T1021.002,technique_name=SMB/Windows Admin` `Shares` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sysmon Event 22: DNS Request'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sysmon Event 22 records DNS requests initiated by processes on the machine.
    This helps us to monitor requests to potentially malicious servers or commands
    and control centers. A Wazuh rule to detect such DNS requests can created, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>61644</if_sid>`: The `<if_sid>` tag is used as a requisite to trigger
    the rule. In this case, rule `200412` will be triggered only when the parent rule
    `61644` matches. Rule ID `61644` is already created in the Wazuh manager under
    the filename `0595-win-sysmon_rules.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ve learned how to create custom Sysmon rules for Wazuh. We can create multiple
    granular rules under each category of Sysmon events. To explore a list of all
    the custom Sysmon rules for Wazuh, you can visit the official SOCFotress GitHub
    repository here: [https://github.com/socfortress/Wazuh-Rules/tree/main/Windows_Sysmon](https://github.com/socfortress/Wazuh-Rules/tree/main/Windows_Sysmon).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered some of the important custom Wazuh rules for
    different types of events, such as PowerShell events, Linux Auditd events, Kaspersky
    endpoint protection events, and Sysmon events. In the next chapter, we will cover
    a list of important terms related to the Wazuh platform.
  prefs: []
  type: TYPE_NORMAL
