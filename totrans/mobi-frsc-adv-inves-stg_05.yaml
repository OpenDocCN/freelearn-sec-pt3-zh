- en: Chapter 5\. iOS – Introduction and Physical Acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It was in January 2007 that Apple released the first version of the iPhone.
    Since then, the global smartphone market has never been the same.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of Android devices, the relative share of iOS-based mobile phones
    has been declining steadily over the years. With iPhone accounting for nearly
    14% of all smartphones sold in Q2 2015 (according to [http://www.idc.com/prodserv/smartphone-os-market-share.jsp](http://www.idc.com/prodserv/smartphone-os-market-share.jsp)),
    the rest of the market is dominated by Android.
  prefs: []
  type: TYPE_NORMAL
- en: In absolute terms, there are still a lot of old iOS devices around. Approximately
    74.4 million iPhones were sold during Q1 2015 alone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the U.S., iPhones account for 35.58% of the subscriber base in Q3 2015 (source:
    [http://bgr.com/2015/10/01/iphone-market-share-q3-2015-android/](http://bgr.com/2015/10/01/iphone-market-share-q3-2015-android/)).
    With that many iOS smartphones used throughout the U.S., the need for iOS forensics
    remains strong.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the options available for acquiring information
    from iOS devices. We will also discuss physical acquisition in detail, discussing
    the tools and practical steps required to perform physical acquisition. In this
    chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Security implications of Apple iOS and how they affect available acquisition
    options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generations of Apple hardware and the difference between legacy, recent 32-bit,
    and modern 64-bit devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The need for jailbreak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different iOS acquisition methods and when to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical acquisition in detail—tools, techniques, and practical steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS forensics – introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Different devices require different acquisition techniques. The different versions
    of iOS require different acquisition paths, each having its own vector of attack.
    While in Apple's sector, we don't nearly see such a wide diversity of devices
    and heavily-customized versions of the operating system (each with its own vulnerabilities),
    there are still a lot of devices available.
  prefs: []
  type: TYPE_NORMAL
- en: Generations of Apple hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iOS is a closed operating system that's only supported on Apple-manufactured
    hardware. As a result, we don't have to deal with a dozen different manufacturers
    and thousands of models. By Q2 2015, Apple had released ten iPhone models, five
    models of iPod Touch, six full-size iPads, and three models of iPad mini.
  prefs: []
  type: TYPE_NORMAL
- en: While general information and up-to-date specifications of Apple hardware can
    be viewed at [https://en.wikipedia.org/wiki/List_of_iOS_devices](https://en.wikipedia.org/wiki/List_of_iOS_devices)
    , there are several things not mentioned in the official specs that can make the
    device more or less susceptible to physical acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Early generations of Apple devices had a vulnerability in Trusted Boot, allowing
    attackers to bypass signature verification while booting in the DFU mode. As the
    signature-verification code was located in device's read-only memory, Apple was
    never able to patch this vulnerability in existing devices. This vulnerability
    allowed mobile forensic specialists to create tools for unconditional, always-working
    physical acquisition of susceptible iOS devices (for example, Elcomsoft iOS Forensic
    Toolkit at [https://www.elcomsoft.com/eift.html](https://www.elcomsoft.com/eift.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unconditional physical acquisition regardless of iOS version and jailbreak status
    is available on iPhone 3G, 3GS, and 4; iPod Touch 1st through 4th gen; and the
    original iPad.
  prefs: []
  type: TYPE_NORMAL
- en: In newer generations of hardware, Apple fixed the vulnerability, making physical
    acquisition a much more complicated process.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, devices using 32-bit processors, including iPhone 4S, iPhone 5,
    iPhone 5C, iPad 2+, iPad Mini, and iPod Touch 5th gen can only be acquired if
    jailbroken (either by the user or by the investigator, if the passcode is known).
  prefs: []
  type: TYPE_NORMAL
- en: What about Apple's newest generation devices using 64-bit chipsets? Physical
    acquisition is available for all 64-bit Apple devices, such as iPhone 5S, iPhone
    6, and iPhone 6 Plus; iPad 2 and newer; iPad Air and Air 2; and iPad Mini 2 and
    3, using Elcomsoft iOS Forensic Toolkit. The acquisition process requires a jailbroken
    device; the passcode must be known and must be removed in the device's **Security**
    settings prior to the acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: How likely are you to encounter a 32-bit Apple device? While there are no direct
    statistics about how many devices of each generation are still in active use,
    we can estimate these numbers by looking at the official iOS version stats. While
    Apple is known to deliver updates to the latest iOS and even to the old versions
    of their products, these devices have limited capabilities and timeframe during
    which they may receive updates. As a result, the latest version of iOS supported
    on iPhone 4, for example, was iOS 7.1.2; while all newer devices support iOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: By February 2016, Apple claimed ([https://developer.apple.com/support/appstore/](https://developer.apple.com/support/app-store/))
    that around 76% of its users will have already upgraded to iOS 9\. Approximately
    17% of Apple users use iOS 8, while earlier versions represent only 7% of Apple's
    user base.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of hardware, this means that early generation devices such as iPhone,
    iPhone 3G, and 3GS are only marginally represented (2% market share). Since iPhone
    4 supports iOS 7.x, it can be counted as part of the 7% group (using iOS 7). Most
    iPhones, however, are using iOS 9 (76%) or iOS 8 (17%), which means that they
    are iPhone 4S, 5, 5C, 5S, 6, and 6 Plus.
  prefs: []
  type: TYPE_NORMAL
- en: Is jailbreak required?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As physical acquisition requires low-level access to the data partition, physical
    acquisition is only possible on jailbroken iOS devices. Other acquisition methods,
    for example, logical and over-the-air acquisition do not require a jailbreak.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s no news that iOS devices equipped with cellular modules periodically
    collect and store geolocation information. iOS devices are capable of capturing
    information about nearby cellular towers and Wi-Fi access points in range, even
    if the device is not connected to them. This information is stored in plain unencrypted
    form in a `cache_encryptedA.db` file. The file keeps tracking information about
    cellular towers and Wi-Fi networks in range for up to 45 days. The official Apple
    statement says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The iPhone is not logging your location. Rather, it''s maintaining a database
    of Wi-Fi hotspots and cell towers around your current location, some of which
    may be located more than one hundred miles away from your iPhone, to help your
    iPhone rapidly and accurately calculate its location when requested. Calculating
    a phone''s location using just GPS satellite data can take up to several minutes.
    iPhone can reduce this time to just a few seconds by using Wi-Fi hotspot and cell
    tower data to quickly find GPS satellites, and even triangulate its location using
    just Wi-Fi hotspot and cell tower data when GPS is not available (such as indoors
    or in basements). These calculations are performed live on the iPhone using a
    crowd-sourced database of Wi-Fi hotspot and cell tower data that is generated
    by tens of millions of iPhones sending the geo-tagged locations of nearby Wi-Fi
    hotspots and cell towers in an anonymous and encrypted form to Apple.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Notably, the `cache_encryptedA.db` file is not stored in device backups, either
    cloud or made with iTunes. Since there is no end-user access to system files in
    Apple iOS, the device must be jailbroken in order to retrieve the file. Naturally,
    the `cache_encryptedA.db` is always retrieved as part of the physical acquisition
    process. Mobile forensic tools (for example, Oxygen Forensic Toolkit) can parse
    the file and display the user''s tracking information as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Geolocation information](img/0065.jpeg)![Geolocation information](img/0066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Geolocation information
  prefs: []
  type: TYPE_NORMAL
- en: The ability to extract geolocation information is one of the major benefits
    of physical acquisition over logical extraction. If physical acquisition is not
    available for a particular device, attempting a jailbreak and manually pulling
    `cache_encryptedA.db` will be worth the effort if you need access to the suspect's
    location history.
  prefs: []
  type: TYPE_NORMAL
- en: Additional sources of geolocation history may also be available, including photo
    EXIF tags and application data (if geolocation was enabled and allowed by the
    user).
  prefs: []
  type: TYPE_NORMAL
- en: Where is the information stored?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obviously, the phone itself is viewed as a primary source of data, and rightfully
    so. However, what if the phone is locked and the passcode is unknown? Also, what
    if you don't have the phone?
  prefs: []
  type: TYPE_NORMAL
- en: Information collected by a smartphone is stored in (and can be retrieved from)
    numerous places. An Apple phone can back up its data to a PC via iTunes or to
    Apple's own cloud service (iCloud/iCloud Drive) via Wi-Fi. As a result, you may
    be dealing with a set of backup files (with or without a password), or just have
    a computer that does not have a single backup file, but was used to sync with
    iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you''ll have it all: a phone, set of offline backups, and computer
    in sync with iCloud. More often than not, you''re going to need information right
    away, or *the sooner the better*. What is the optimal route for getting as much
    information as possible in the shortest time? The answer depends on what exactly
    do you have on your hands.'
  prefs: []
  type: TYPE_NORMAL
- en: iOS acquisition methods overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While different methods exist to help extract the content of mobile devices,
    the choice of one or another method will usually depend on what you have available.
    Do you have a working iPhone? You can try physical acquisition, but only if the
    device falls within the compatibility matrix. Do you have access to the computer
    that was used to sync with the phone? Search for mobile backups. If you can find
    an iTunes backup, you can use logical acquisition to break into the backup and
    extract information. Was that computer used to sync with iCloud? Look for the
    iCloud authentication token. If found, the token can be used to connect to the
    user's iCloud account on bypassing the login and password. Do you happen to know
    the user's Apple ID, BlackBerry ID, or Windows Live account and password? Cloud
    forensics will help you download data from the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'To choose an acquisition method, refer to the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **I have...** | **Physical acquisition** | **Logical acquisition (backup
    analysis)** | **Cloud forensics** |'
  prefs: []
  type: TYPE_TB
- en: '| Physical device (iPhone, iPad, or iPod Touch) | YES* | MAYBE | MAYBE |'
  prefs: []
  type: TYPE_TB
- en: '| Computer that was synced with (or trusted by) the phone/tablet | N/A | N/A
    | MAYBE |'
  prefs: []
  type: TYPE_TB
- en: '| The iOS device and the computer that it was synced with (or trusted by) |
    N/A | MAYBE***** | MAYBE |'
  prefs: []
  type: TYPE_TB
- en: '| iTunes backup | N/A | YES** | MAYBE |'
  prefs: []
  type: TYPE_TB
- en: '| Apple ID login and password | N/A | N/A | YES*** |'
  prefs: []
  type: TYPE_TB
- en: '| iCloud authentication token | N/A | N/A | YES**** |'
  prefs: []
  type: TYPE_TB
- en: '*Physical acquisition is only available for certain devices. Refer to [Chapter
    6](ch06.html "Chapter 6\. iOS Logical and Cloud Acquisition"), *iOS Logical and
    Cloud Acquisition* for detailed compatibility matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Certain backups may be protected with long, complex passwords. There is no
    guaranteed recovery timeframe or successful password recovery guarantee on password-protected
    backups.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Apple''s two-factor authentication complicates things a little bit. If two-factor
    authentication is activated for a certain Apple ID, access to the secondary authentication
    unit (such as a trusted device, recovery key, or app-specific password) is required.
    Microsoft takes a similar approach to two-factor authentication. At this time,
    Elcomsoft products only support two-factor authentication for Apple devices.'
  prefs: []
  type: TYPE_NORMAL
- en: '****Authentication tokens may have an expiration (depending on the iOS version).
    Their exact lifespan is currently not known. While we experienced some tokens
    extracted with the ATEX tool from the **Control Panel** to expire in one hour
    (iOS 8.x, for cloud backups only), we did not have this experience in other cases.
    We are continuing extensive testing to find out. Notably, authentication tokens
    *live* longer for cloud files. iOS 9 moved cloud backups to iCloud Drive; its
    authentication tokens currently don''t have an expiration date (or have a very
    long lifespan). Finally, authentication tokens are invalidated when the user changes
    their account password or explicitly logs out from the cloud on a given computer.'
  prefs: []
  type: TYPE_NORMAL
- en: '*****If you have a computer that was synced with the device and the iOS device
    itself, you may be able to extract the decryption key and force the device to
    make a backup, without even knowing the password. However, this is only possible
    if the iOS device was not rebooted after the last time it synced with the computer.
    Interestingly, even if automatic synchronization is not enabled on the iOS device,
    the device prompts whether to trust the computer after you plug it in. If the
    answer is *yes*, a pair of cryptographic keys will be created (on the device and
    on the computer).'
  prefs: []
  type: TYPE_NORMAL
- en: iOS acquisition methods compared
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In an unlikely event, if you possess the physical device, a copy of its offline
    backup, and the user's Apple ID/password (or a binary authentication token collected
    from the user's PC), which acquisition method should you choose?
  prefs: []
  type: TYPE_NORMAL
- en: The answer depends on how quickly you need the data, and whether or not you
    require access to deleted files and the keychain. Physical acquisition is by far
    the best acquisition method—if your device is supported. Cloud acquisition can
    return current and past data, while the offline backup can be the easiest (if
    not password-protected) or the slowest (if password-protected) to recover.
  prefs: []
  type: TYPE_NORMAL
- en: The different acquisition methods offer various benefits over one another.
  prefs: []
  type: TYPE_NORMAL
- en: 'For iOS devices, physical acquisition is the method of choice if available
    (refer to the *Compatibility matrix* section in the next chapter). Physical acquisition
    offers the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to complete information stored in the mobile device (if passcode is known
    or recovered)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guaranteed timeframe (if passcode is known or a four-digit passcode is used)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extremely high acquisition speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential access to certain deleted data (for example, contacts and messages)
    stored in SQLite databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to keychain information (if passcode is known or can be recovered)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to up to 45 days of geolocation tracking data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Logical acquisition of iOS devices involves the analysis of offline backups
    produced by Apple iTunes. Logical acquisition offers the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to most information stored in the mobile device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No guaranteed recovery timeframe for password-protected backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential access to certain deleted data (for example, contacts and messages)
    stored in SQLite databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to keychain information is possible (if a decryption key was extracted
    from the device via physical acquisition)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keychain data can be retrieved from password-protected backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long complex password may altogether prevent the recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cloud acquisition is available for mobile devices running Apple iOS, BlackBerry,
    and Windows Phone 8/8.1\. Cloud acquisition offers the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to most information stored in the mobile device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to certain files accessed from the device (but not actually stored in
    the device)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovery time highly dependent on connection speed and available cloud throughput
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential access to certain deleted data (for example, contacts and messages)
    stored in SQLite databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'iOS: Access to keychain information is possible if a decryption key was extracted
    from the device via physical acquisition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'iOS: Two-factor authentication may disallow cloud access even if login and
    password are known (can be bypassed if a valid, non-expired authentication token
    is available)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, it is possible to perform chip-off acquisition by extracting data
    directly from the memory chips (special hardware and skills are required). Chip-off
    acquisition has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: On older devices, it is possible to extract all information except encrypted
    (keychain).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recent generation iOS devices rely extensively on encrypted storage. As a result,
    most user data will remain encrypted with strong, non-extractable encryption keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guaranteed timeframe, but limited amount of accessible data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extremely high acquisition speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No access to keychain information or historical location data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table summarizes the possible outcome of the various acquisition
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Physical acquisition** | **Logical acquisition** | **Cloud forensics**
    | **Chip-off** |'
  prefs: []
  type: TYPE_TB
- en: '| Approximate timeframe | 35-50 minutes (depending on device model) |'
  prefs: []
  type: TYPE_TB
- en: Instant (unprotected backups)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unknown (password-protected)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| 0-4 hours (depending on connection speed and data volume) | 1-4 hours (depending
    on skill level) |'
  prefs: []
  type: TYPE_TB
- en: '| Keychain recovery | Yes |'
  prefs: []
  type: TYPE_TB
- en: No (unprotected backups), unless **securityd** is available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yes (password-protected)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| No (unless securityd is available) | No |'
  prefs: []
  type: TYPE_TB
- en: '| Access to deleted files | No* | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Access to deleted SQLite records | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Up to 45 days of geolocation tracking data | Yes | No | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Possible issues | Last-generation devices must be jailbroken (refer to *Compatibility
    matrix*) | Long and complex passwords may prevent the recovery |'
  prefs: []
  type: TYPE_TB
- en: Apple ID/password or authentication token required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-factor authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notification e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Only for iOS 1 through 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recent devices use complete hardware encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypted data non-recoverable and non-decryptable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chip-off acquisition is *not available* for recent iOS devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '*Accessing deleted files is possible for iOS 1.x through 3.x. However, the
    chances of encountering an iOS version that old are close to none.'
  prefs: []
  type: TYPE_NORMAL
- en: iOS advanced logical acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A while ago, a so-called advanced logical acquisition method was introduced
    by Jonathan Zdziarski. It was a very popular acquisition method while it lasted.
    The examiner still had to possess an unlocked device, but if this was the case,
    it was possible to obtain more information compared to pure logical acquisition
    (backup analysis).
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to pure logical acquisition, advanced logical acquisition offered
    the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: iTunes backup password could not stop accessing personal data such as contacts
    or text messages that were not protected with any password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More application data, including log files, could be extracted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method was short-lived as Apple patched the vulnerability used by this acquisition
    method by hiding the corresponding service. Since iOS 8, only app-shared documents
    (for example, documents edited by an office app or videos watched with a media
    player) can be extracted with this method.
  prefs: []
  type: TYPE_NORMAL
- en: iOS physical acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Physical acquisition is the most comprehensive acquisition method available
    for iOS devices. Other platforms (for example, Android, BlackBerry OS, BlackBerry
    10, and Windows-based devices) can be acquired by one of the lower-level techniques,
    such as JTAG, ISP, or chip-off. These acquisition techniques are not available
    for iOS devices due to mandatory full-disk encryption that is enforced out of
    the box, regardless of whether the user sets up additional security. Physical
    acquisition returns significantly more information compared to any other method,
    such as logical acquisition or backup analysis. Data stored in Apple's protected
    storage, the keychain, is exclusively available via the physical process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Physical acquisition is very decisive: it either works or it doesn''t. If it
    works, you can expect to image the entire device in under 40 minutes, even a 32-GB
    iPhone 4, which is among the slowest. Devices with larger storage can take longer;
    however, there is no uncertainty as in attempting to attack backup passwords.
    ElcomSoft developed a physical acquisition toolkit for iOS devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iOS physical acquisition](img/0067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Starting with the release of iPhone 4S, featuring stronger security compared
    to all legacy devices, physical acquisition became increasingly difficult for
    each new generation of iOS devices. Up to this day, physical acquisition support
    of newer iOS devices is only available in Elcomsoft iOS Forensic Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that unrestricted, unlimited, and guaranteed physical
    acquisition is only available for older Apple devices (refer to the *Compatibility
    matrix* section in the following chapter). Starting with iPhone 4S (or iPad 2),
    a successful physical acquisition requires the examiner to either know the user's
    original passcode (in order to install jailbreak) or have a jailbroken device.
    If a device is locked with a passcode, installing jailbreak is not possible, and
    the device cannot be acquired. In addition to jailbreak, an OpenSSH tool from
    Cydia must be installed.
  prefs: []
  type: TYPE_NORMAL
- en: On jailbroken devices, Elcomsoft iOS Forensic Toolkit can break the original
    passcode with brute force or dictionary attack. Passcode recovery speed on jailbroken
    iPhone 5 and 5C devices is approximately 15.5 passcodes per second, allowing iOS
    Forensic Toolkit to break typical four-digit passcodes in about 10 minutes. However,
    one can easily dump the device even without the passcode; as a result, downloaded
    mail and keychain data will remain encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: On iOS devices equipped with a 64-bit platform and Secure Enclave, physical
    acquisition is even more limited. On such devices, one must know the passcode
    and be able to remove it from device settings (that's in addition to jailbreaking
    the device). Even then, keychain can be extracted, but it cannot be decrypted
    on 64-bit devices.
  prefs: []
  type: TYPE_NORMAL
- en: Physical acquisition benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Physical acquisition offers numerous benefits over other acquisition methods.
    Fixed timeframe and guaranteed delivery are just a few things to be mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Physical acquisition offers the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Acquires complete bit-precise device images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unallocated space is extracted, but cannot be decrypted on recent versions of
    iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrypts keychain items and extracts device keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Guaranteed timeframe: 20 to 50 minutes for 32 GB models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero footprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passcode not required (for older devices or if jailbreak is installed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple four-digit passcodes recovered in 10-40 minutes (for older or jailbroken
    devices)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Physical is the only acquisition method that can extract the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cached (downloaded) mail**: Regardless of the type of e-mail account, cached
    mail is not available in offline or online backups. Downloaded mail can be also
    acquired via so-called *advanced logical acquisition*, which exploits some undocumented
    iOS services and requires either a passcode or a pairing record from a trusted
    computer. Additionally, cached mail can be obtained via the 64-bit physical acquisition
    process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geolocation data**: While iTunes and iCloud backups contain only limited
    geolocation data (for example, extracted from geotagged images), physical acquisition
    can extract significantly more detail about the user''s location. This includes
    frequent locations and location data requested by applications and system services
    on the device. Location data is requested (and stored) on certain events, such
    as using maps, calibrating the compass, ad tracking, browsing web pages, requesting
    the user''s location, looking up wireless networks, and so on. By extracting location
    data with physical acquisition, one can reconstruct the suspect''s whereabouts
    with a great deal of precision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System logs and crash logs**: This shows the applications launched or installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cached application data**: This provides cached web pages, typed addresses,
    and any Web data that is cached by third-party apps. Many iOS apps are Web-based,
    so the amount of cached data available via physical acquisition can be overwhelming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certain types of deleted data**: This includes deleted contacts, text messages,
    and iMessages (can be also extracted from SQLite databases with logical acquisition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keychain**: In Apple devices, this protected storage is used to store highly
    sensitive information, such as passwords to websites and online accounts, financial
    information, and any data written to protected storage by third-party applications.
    With different classes of protection, only some keychain items can be decrypted
    when processing a backup. Physical acquisition allows decrypting the entire keychain,
    extracting all available information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extended keychain acquisition**: Apple changed the keychain format in iOS
    7\. In iOS 8, Apple moved a lot more data into the keychain. Since iOS 7, devices
    registered to a certain Apple ID may contain a cached copy of the iCloud keychain
    for that Apple account (subject to user authorization). If iCloud keychain is
    available, its extraction may enable access to passwords and credit card information
    stored in other Apple devices sharing the same Apple ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's unique about physical acquisition?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Is physical acquisition still worth the effort? Jailbroken iOS devices are
    rare in the wild. However, the possibility to jailbreak iOS devices is still there,
    especially considering the number of devices that have been collected as evidence
    are waiting for a long time. We still believe that physical is the way to go if
    it''s available for a given device. Here are the reasons why:'
  prefs: []
  type: TYPE_NORMAL
- en: Apple has a new policy to **turn down** government information requests for
    devices running iOS 8 or 9, Secure Enclave or not. Apple fiercely defends its
    policy. Handing over the device to Apple will no longer result in receiving its
    full image if the device is running iOS 8 and newer, even if Apple faces legal
    action ([https://www.apple.com/privacy/government-information-requests/](https://www.apple.com/privacy/government-information-requests/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some regions, Apple runs certified refurbished programs, still selling refurbished
    32-bit phones at a cheaper price. For example, refurbished iPhone 4S and 5 units
    accounted for as much as 46% of all iPhones sold through retail channels in Russia
    in Q1 2015.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical acquisition still returns significantly more information compared to
    any other acquisition method (remember, chip-off is not available for Apple devices).
    E-mail messages, application data, logs, location, and a lot of other data never
    makes it into backups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full keychain extraction is exclusive to physical acquisition (32-bit devices
    only). Decrypting the keychain is only possible on devices without Secure Enclave.
    This includes records encrypted with device-specific keys. While some keychain
    items can be extracted from password-protected iTunes backups, many items cannot
    be decrypted without a device-specific key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical acquisition (32-bit process) can help extract the securityd (0x835)
    key from the device. This key can be used for complete keychain decryption. Additionally,
    this very key can be used to decrypt keychain items from iCloud backups and local
    iTunes backups that are not encrypted with a password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical acquisition of 32-bit devices returns a standard DMG disk image (HFS+
    filesystem), while the same process on 64-bit devices returns a TAR archive that
    contains the complete directory structure of the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As far as we know, Elcomsoft iOS Forensic Toolkit is the only non-Apple tool
    that can do physical acquisition of iPhone 4S, 5, and 5C, and especially the newer
    64-bit devices.
  prefs: []
  type: TYPE_NORMAL
- en: The future of physical acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unconditional physical acquisition is only supported for legacy devices. With
    every new iteration of iOS, and with every new hardware revision starting with
    iPhone 4S, Apple has been improving security, making physical acquisition increasingly
    difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'The release of iOS 8 was an important benchmark, making physical acquisition
    even tougher. The following two major things have changed with iOS 8:'
  prefs: []
  type: TYPE_NORMAL
- en: All user data is now stored in a container encrypted with passcode-dependent
    keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hardware-level five-second delay is added for passcode attempts (newer hardware
    only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 8 moved most user data under the stricter controls. Messages, photos, contacts,
    call logs, and many other things are now stored inside a passcode-protected container.
    Once the phone is rebooted, the decryption key is lost, and the data becomes unavailable
    until the user enters the correct passcode. However, if the device is unlocked
    at least once, most data (except for the keychain) is decrypted and remains decrypted
    until the device is powered off. This is exactly what's used by the 64-bit acquisition
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'What about brute forcing the passcode? With A7- and A8-based devices (iPhone
    5S, 6, and 6 Plus), Apple introduced a hardware-level five-second delay for passcode
    attempts. Here''s what Apple has to say:'
  prefs: []
  type: TYPE_NORMAL
- en: '*On a device with an A7 processor, the key operations are performed by the
    Secure Enclave, which also enforces a 5-second delay between repeated failed unlocking
    requests. This provides a governor against brute-force attacks in addition to
    safeguards enforced by iOS. (Source: [https://www.apple.com/br/ipad/business/docs/iOS_Security_EN_Feb14.pdf](https://www.apple.com/br/ipad/business/docs/iOS_Security_EN_Feb14.pdf).)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While it is not exactly known whether the delay is hardcoded or can be disabled
    with software, third-party acquisition tools can no longer try more than one passcode
    every five seconds. This means that there are about 14 hours to try all possible
    combinations of a four-digit passcode. With longer and stronger numeric or alphanumeric
    passcodes, brute-force attacks are no longer feasible.
  prefs: []
  type: TYPE_NORMAL
- en: At this time, physical acquisition is available for all existing devices equipped
    with 32-bit and 64-bit chipsets. A working jailbreak is mandatory to perform physical
    acquisition. Additionally, the passcode must be known (and removed for 64-bit
    devices) in order to acquire the maximum amount of information.
  prefs: []
  type: TYPE_NORMAL
- en: Physical acquisition compatibility matrix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Physical acquisition is a great technique. Unfortunately, at this time, physical
    acquisition has limited availability. Newer Apple devices (starting with iPhone
    4S and iPad 2) have stronger security, which limits our ability to perform physical
    acquisition. Today, the following devices can be acquired with this method:'
  prefs: []
  type: TYPE_NORMAL
- en: iPhone 3G, 3GS, and 4 (GSM and CDMA models)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone 4S, 5, and 5C***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPod Touch (1st through 4th generations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPod Touch 5th gen ***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad (1st generation only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad 2***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad with Retina display (3rd and 4th generations)***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad Mini***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These devices can run any of the following operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: iOS 1 through 3 (up to 3.1.3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 4.x—up to iOS 4.3.5 (up to iOS 4.2.10 for iPhone 4 CDMA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 5.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 6.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 7.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 7.1 (with Pangu 1.2+ jailbreak)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 8.x and 9.x****
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Physical acquisition compatibility matrix](img/0068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '*Devices running iOS versions prior to 3.0 do not have Data Protection enabled,
    and their user partition is not encrypted.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Devices originally shipped with iOS 3.x, including those running iOS 4/5
    that were upgraded from iOS 3.x without performing `erase install` (that is, using
    the **Update** option in iTunes as opposed to **Restore**), do not have Data Protection
    enabled, and user partitions are not encrypted. Therefore, the decryption is not
    required.'
  prefs: []
  type: TYPE_NORMAL
- en: '***iPhone 4S, iPhone 5, iPhone 5C, iPad 2+, iPad Mini, and iPod Touch 5th gen
    can be recovered if the passcode is known or if the device is jailbroken (iOS
    5 through 9).'
  prefs: []
  type: TYPE_NORMAL
- en: '****Physical acquisition of newer devices (iPhone 4S and newer) remains subject
    to jailbreak availability. Jailbreaking the device and recovering (and in some
    cases, removing) the passcode is mandatory as all user data is now encrypted with
    passcode-dependent keys (as a comparison, iOS 7 used encryption this strong exclusively
    for keychain and mail protection).'
  prefs: []
  type: TYPE_NORMAL
- en: '*****Physical acquisition for 64-bit models (iPhone 5S/6/6S/Plus, iPad mini
    2/3/4, iPad Air / Air 2, and iPad Pro) is available via a different acquisition
    process referred to specifically as **physical acquisition for 64-bit devices**.
    Jailbreaking the device and removing passcode protection in iOS settings is mandatory.
    Acquisition of 64-bit iOS devices is covered in a separate chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Unallocated space – unavailable since iOS 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unallocated space is only available via physical acquisition if you are acquiring
    a device running iOS 3.x or older. Since these are very old versions of iOS, you
    are extremely unlikely to ever encounter one in real life. If you do, you'll be
    able to use Elcomsoft iOS Forensic Toolkit to bypass passcode protection and extract
    the complete image of the device along with unallocated space.
  prefs: []
  type: TYPE_NORMAL
- en: Since iOS 4, Apple uses passcode-dependent encryption of the filesystem. iOS
    does not keep encryption keys to areas that are not occupied by files. After a
    file is deleted, the system destroys encryption keys for corresponding data blocks.
    As a result, decrypting these unallocated areas is not possible at the time of
    physical acquisition. In the case of in-house physical acquisition performed with
    Elcomsoft iOS Forensic Toolkit or any other third-party tool, unallocated disk
    space will be extracted, but not decrypted.
  prefs: []
  type: TYPE_NORMAL
- en: What *can* be recovered is SQLite records that contain deleted text messages,
    call log, and chat entries. However, the process is far from simple and requires
    the use of specialized software or SQLite-specific expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Sending device to Apple
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In its privacy policy ([https://www.apple.com/privacy/government-information-requests/](https://www.apple.com/privacy/government-information-requests/)),
    Apple clearly states the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*On devices running iOS 8, your personal data such as photos, messages (including
    attachments), email, contacts, call history, iTunes content, notes, and reminders
    is placed under the protection of your passcode. Unlike our competitors, Apple
    cannot bypass your passcode and therefore cannot access this data. So it''s not
    technically feasible for us to respond to government warrants for the extraction
    of this data from devices in their possession running iOS 8.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Analyzing the way the system works on newer 64-bit devices, we tend to believe
    that the preceding statement is true.
  prefs: []
  type: TYPE_NORMAL
- en: While it is not currently possible to request a decrypted device image from
    Apple due to their new policy based on the technical features of iOS 8, law enforcement
    agencies can still send Apple devices running an older version of iOS in order
    to obtain their unencrypted images. In such cases, Apple provides a full decrypted
    image of the device (with keychains being a possible exception if the passcode
    is not known).
  prefs: []
  type: TYPE_NORMAL
- en: The role of passcode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Passcode is key to iOS security. Even if it's just a simple PIN number consisting
    of only four digits, in reality, a passcode is key to some of the strongest security
    models in the mobile world. This passcode, combined with a unique and very long
    string of binary data (hardware encryption key), is used to generate a unique
    and extremely strong encryption key. The device then encrypts the device's sensitive
    data, including text messages, e-mail, photos, and so on, using this encryption
    key and a government-standard AES encryption algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that it is impossible to generate the encryption key
    without having access to the device's hardware encryption key, and it is impossible
    to get access to that hardware encryption key even after disassembling the device
    to small bits. Without the correct passcode, passcode-encrypted data will remain
    encrypted, even if the complete image is extracted.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, some parts of the iOS device are likely to remain encrypted
    unless the original passcode is known (this is especially true with the latest
    iOS releases). Recovering the original passcode is only possible on the device
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Older versions of iOS did not encrypt all user data using the passcode. We could
    break into those devices and retrieve almost everything even without a passcode.
    This is no longer the case with iOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chart summarizes whether you require a passcode for successful
    acquisition:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iOS 1.x through 3.x**: Here, the passcode is not required. All data is accessible.
    The passcode is instantly recovered and displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS 4.0 through 7.x**: The passcode is not required, but highly recommended.
    Some data is protected with passcode-dependent keys:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keychain items
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain third-party application data if the app requested secure access
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS 8 and 9**: The passcode is mandatory for successful acquisition. Most
    user information is protected with passcode-based keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical acquisition of iOS 8 and 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'iOS 9 is the latest and most secure version of Apple''s mobile operating system.
    According to Apple, by February 2016, approximately 76% of Apple customers already
    upgraded to the latest iOS, while 17% of users still used iOS 8\. Only 7% of devices
    were running iOS 7 or earlier (source: [https://developer.apple.com/support/app-store/](https://developer.apple.com/support/app-store/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In iOS 8, Apple further strengthened the security of iOS devices. The 8th and
    9th generations of Apple''s mobile operating system encrypt more information than
    ever. Data encryption is not new on Apple devices. It''s been in place for a number
    of years. What is new is the amount of data the phone will store in the encrypted
    form. In iOS 8, Apple moved things such as e-mails, messages, photos, and videos
    into the encrypted part of the phone. Once again, a lot of information that was
    previously accessible (and highly valuable for investigations) is moved into passcode-protected
    part of the phone, making physical acquisition of a device without knowing the
    correct passcode nearly useless. Apple claims iOS 8 and newer to be so secure
    that the company is to deny government requests to extract information even if
    provided with a working device (source: [https://www.apple.com/privacy/government-information-requests/](https://www.apple.com/privacy/government-information-requests/)).'
  prefs: []
  type: TYPE_NORMAL
- en: From a practical standpoint, this means that you must break a passcode in order
    to properly image a device running iOS 8 or 9\. In order to break a passcode on
    one of the newer devices (iPhone 4S, iPad 2, and their newer generations), you'll
    need to have the device jailbroken or unlocked. Breaking a passcode is still possible
    on non-jailbroken devices earlier than iPhone 4S and on the original iPad. At
    this time (February 2016), the only forensic tool providing physical acquisition
    support for iOS 8 and 9 devices is Elcomsoft iOS Forensic Toolkit. The tool supports
    32-bit and 64-bit devices that are either jailbroken or can be jailbroken by the
    investigator. Without a jailbreak (and not knowing the passcode), the ONLY information
    that remains accessible via physical acquisition is call log and text message
    history. In addition, when performing physical acquisition of 64-bit devices,
    the passcode must be removed in device Security settings prior to acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on how Apple encrypts information and what''s changed in iOS
    8 is available at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.slate.com/articles/technology/future_tense/2014/09/ios_8_encryption_why_apple_won_t_unlock_your_iphone_for_the_police.html](http://www.slate.com/articles/technology/future_tense/2014/09/ios_8_encryption_why_apple_won_t_unlock_your_iphone_for_the_police.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://blog.cryptographyengineering.com/2014/10/why-cant-apple-decrypt-your-iphone.html?m=1](http://blog.cryptographyengineering.com/2014/10/why-cant-apple-decrypt-your-iphone.html?m=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Physical acquisition of iOS 8 and 9](img/0069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tools for iOS physical acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Physical acquisition of iOS devices requires the use of a dedicated acquisition
    tool. Elcomsoft offers iOS Forensic Toolkit ([http://www.elcomsoft.com/eift.html](http://www.elcomsoft.com/eift.html)),
    a tool offering physical-acquisition support for more models than any competing
    product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the following page contains videos demonstrating how to use the toolkit
    to acquire an iPhone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.elcomsoft.com/ios_forensic_toolkit_video.html](http://www.elcomsoft.com/ios_forensic_toolkit_video.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial – physical acquisition with Elcomsoft iOS Forensic Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's use iOS Forensic Toolkit to extract the content of an iPhone. However,
    first let's take a look at what actually happens at the time the tool performs
    physical acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: What the does the tool do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step of the acquisition process involves putting the device into a
    so-called **DFU** mode (**Debug and Firmware Upgrade**) with a combination of
    Home and Power buttons. Elcomsoft iOS Forensic Toolkit displays tips on how to
    put the device to this mode.
  prefs: []
  type: TYPE_NORMAL
- en: Once the device is in its DFU mode, we can use its *F* function, emulating a
    firmware upgrade. However, instead of Apple's original firmware, the Toolkit attempts
    to load an altered one. The device will verify the new firmware by checking its
    digital signature via bootrom functions (these are read-only and can't be switched
    off). Now, if we're acquiring an iPhone 4 or earlier, the Toolkit can use a bootrom
    exploit that allows skipping the check and sideloading the altered firmware into
    device volatile memory (RAM). In this case, device storage remains unaltered as
    all operations are performed exclusively in the device's volatile memory.
  prefs: []
  type: TYPE_NORMAL
- en: If we are acquiring an iPhone 4S, the bootrom exploit that we could use with
    earlier iPhones is not available. As a result, the Toolkit uses a different method
    that only works if the device is jailbroken. With this method, the Toolkit connects
    to the device via OpenSSH and installs and launches acquisition tools. This method
    alters the content of the device by installing acquisition tools. This must be
    taken into account and documented appropriately in order to keep the process forensically
    sound.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll need a working iOS device, a compatible cable to connect it to your computer,
    and a copy of Elcomsoft iOS Forensic Toolkit (which requires a USB dongle to operate).
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The imaging tool must be installed in order to acquire the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no jailbreak is installed, you'll have to enter the device into the DFU mode
    (Device Firmware Upgrade mode) with a combination of Home and Power keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical acquisition for Apple's 64-bit devices is available via a separate
    process (refer to *Acquiring 64-bit Apple devices*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passcodes can only be recovered in the DFU mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 0 - connecting the device**: Connect the Apple device to your computer
    using the appropriate USB cable. Launch iOS Forensic Toolkit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1 - entering the DFU mode**: If you are imaging a device for which there
    is a known way to enter the DFU mode, consider it luck. In iOS Forensic Toolkit,
    enter `1`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are imaging a newer device, such as iPhone 4S, iPhone 5, iPhone 5C,
    iPad 2, iPad 3, iPad 4, and newer), physical acquisition will only be available
    if you either know the correct passcode or if the device is jailbroken. To acquire
    such a device, skip directly to step 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll see interactive instructions on how to enter your device into the DFU
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0072.jpeg)![Prerequisites](img/0073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's a bit tricky to master this in the first try. Take your time and make several
    attempts until you succeed. When you have your device in the DFU mode, go to step
    2.
  prefs: []
  type: TYPE_NORMAL
- en: Note that having the device in the DFU mode or having a jailbroken/unlocked
    unit is essential to recover the original passcode.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2 - loading RAM disk**: During this step, you''ll be loading the acquisition
    code into the Apple device. The code will be loaded into the device''s volatile
    memory (RAM) and will not modify any of its content. To load the RAM disk, perform
    either of the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Agree to load RAM disk when prompted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Press `2` on the main screen and follow the instructions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The device will display the Elcomsoft logo when RAM disk is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, starting with iOS 4, loading RAM disk is a mandatory prerequisite
    for recovering the passcode.
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 3 - recovering the passcode**: This step used to be optional a year
    ago. Today, making an attempt to recover a passcode is mandatory to obtain any
    meaningful information. If you already have the correct passcode, skip to the
    next step.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you need to recover the passcode to acquire the user data depends on
    the version of iOS used in the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iOS 1.x through 3.x**: The passcode is not required. All data is accessible.
    The passcode is instantly recovered and displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS 4.0 through 7.x**: The passcode is not required, but highly recommended.
    Some data is protected with passcode-dependent keys:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keychain items
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain third-party application data if the app requested secure access
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS 8 and 9**: The passcode is mandatory for successful acquisition. Most
    user information is protected with passcode-based keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you read the earlier chapters, you will know that the passcode is key to
    Apple's security. In older devices and early versions of iOS, the passcode was
    used to generate a secure encryption key protecting the information stored in
    Apple's secure storage, the keychain. Even in older devices and early releases
    of iOS, protected data included bits such as account passwords, credit card data,
    Wi-Fi passwords, and a lot of other information essential to an investigation.
  prefs: []
  type: TYPE_NORMAL
- en: With the release of iOS 7 and subsequent upgrade to iOS 8 (and iOS 9 later on),
    the role of the passcode has increased dramatically. In modern devices running
    iOS 8 or 9, passcode-protected partition now stores more information than ever.
    In fact, pretty much everything of interest is now stored on a passcode-protected
    disk. E-mail and text messages, passwords, picture and video captures with the
    phone's camera, and a lot of other information is now encrypted. As a result,
    imaging the device without having a passcode today will return much less information
    than it did a year ago. In order to decrypt information stored in the protected
    area, one must first recover the passcode.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the way Apple has designed and implemented its security model, recovering
    passcodes is only possible using the original device. While using a computer or
    a cluster of GPU-accelerated workstations to recover passcodes sounds tempting,
    it is impossible even in theory.
  prefs: []
  type: TYPE_NORMAL
- en: Apple devices can use standard numeric (four-digit PIN), long numeric, and full
    alphanumeric passcodes. These types of passcodes can be recovered with iOS Forensic
    Toolkit by either brute forcing or using a dictionary attack (if breaking an alphanumeric
    passcode).
  prefs: []
  type: TYPE_NORMAL
- en: Note that you'll need to load the RAM disk first (as described in the previous
    step) to recover passcodes for devices running iOS 4 or later.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to note is the speed of breaking the passcode. Passcode recovery
    is slow! It's slow on purpose, by design. Apple carefully balanced algorithms
    used in its various devices, apparently targeting the time required to verify
    a passcode at approximately 80 ms per passcode. As a result, recovering a four-digit
    passcode may take around 35 minutes; brute forcing will take a little longer,
    and alphanumeric passcode may take forever.
  prefs: []
  type: TYPE_NORMAL
- en: 'With iOS Forensic Toolkit, recovering a passcode is engaged by entering the
    `3` (**Get Passcode**) command on the home screen. You''ll see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You'll have the option to (**1**) view the type of passcode (numeric four-digit,
    numeric long, alphanumeric), (**2**) brute force a four-digit PIN, (**3**) perform
    a dictionary attack on an alphanumeric passcode, or (**4**) use the fully manual
    option.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we''ve seen some limited success in recovering longer alphanumeric passcodes,
    majority of iPhone users opt for simple four-digit passcodes. Brute forcing such
    passcodes by enumerating all of the possible combinations takes approximately
    35 minutes on iPhone 4S. After entering `2`, you''ll see the progress report window.
    The currently tried passcode will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the correct passcode is discovered, it will be displayed. Write it down
    and press *Enter* to continue to extract device keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 4 - extracting device keys**: In order to be able to decrypt information
    stored on the encrypted partition (as a reminder, this includes user passwords,
    e-mail, messages, and so on), you will need to obtain device keys and keychain
    data. In iOS Forensic Toolkit, use the `4` (`GET KEYS)` command. This action is
    mandatory, you cannot skip it. Without the keys, neither the keychain nor the
    device image can be decrypted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To obtain device keys and keychain, enter `4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to successfully obtain device keys and keychain data, you will need
    to provide the device passcode (if non-empty):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0080.jpeg)![Prerequisites](img/0081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 5 - decrypting keychain items**: Some of the most valuable information
    stored in the iPhone, iPod Touch, or iPad is kept in the system''s protected storage
    called keychain. Secured information is protected with strong passcode-dependent
    encryption keys (that''s why you need to recover the passcode in order to obtain
    these keys and decrypt the keychain). With every iOS release, Apple moves more
    data to keychain storage. Depending on the iOS version, protected information
    may include e-mail account passwords, messages, Wi-Fi passwords, passwords entered
    into websites and certain third-party apps, financial information, documents,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keychain decryption is instant. To decrypt the keychain, enter `5` on the tools''
    main screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 6 - performing acquisition**: When capturing an iOS device via a physical
    link, you will have two distinct options:'
  prefs: []
  type: TYPE_NORMAL
- en: In option 1, you can capture the entire image of the device (the `IMAGE DISK`
    command, `6`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In option 2, you can download user's files as a UNIX-style tarball (the `TAR
    FILES` command, `8`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The option to download individual files is sometimes referred to as **logical
    acquisition**, yet we prefer using that term for the acquisition method involving
    the analysis of offline backup produced with Apple iTunes. Downloading individual
    files is a faster option with on-the-fly decryption. However, if you opt to download
    the files, you'll be missing any information that might be stored in unallocated
    disk space.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the `IMAGE DISK` command performs the complete physical imaging
    of the device. When we talk about *physical acquisition*, we usually mean this
    option. With disk imaging, you'll be downloading a bit-precise copy of the device;
    no on-the-fly decryption is performed. As a result, you'll need to decrypt the
    disk later by using the `DECRYPT DISK` tool (command `7`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what happens when you enter `6` (`IMAGE DISK`). First, you''ll see
    the list of available partitions. Typically, you''ll see the **System** partition
    (which is normally unencrypted, and contains system files and applications) and
    the **User** partition (which would be normally encrypted). To select a partition
    to image, enter its number in the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you''ve selected a partition to image, the acquisition process will begin
    immediately. It may take around 35 to 90 minutes to image the device, depending
    on the model and storage capacity. If you opt for filesystem-level acquisition
    as in the `8` command, the time required to acquire the device will depend on
    the amount of user data actually stored in the device. If the user does not have
    a lot of data, the acquisition in that mode can be really fast:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 7 - decrypting the disk**: After acquiring the disk image in the previous
    step, you''ll end up with one unencrypted (system) and most probably an encrypted
    (user) partition. In order to be able to analyze user data, you''ll need to decrypt
    the partition first. The decryption is performed by choosing the `7` command (`DECRYPT
    DISK`) from the main window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/0085.jpeg)![Prerequisites](img/0086.jpeg)![Prerequisites](img/0087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! You just acquired an iOS device and have the data ready for analysis.
    The data is saved in a standard DMG image. To analyze information, you can use
    one of the many third-party forensic tools. If you are using a Mac PC, in order
    to manually access information contained in the DMG image, you can simply mount
    the image into the system (read-only). If you are using a Windows PC, you will
    need to install an HFS+ driver, such as Paragon HFS+, available at [http://www.paragon-software.com/home/hfs-windows/](http://www.paragon-software.com/home/hfs-windows/)
    . Either way, after mounting the image, you will be able to access the individual
    files and databases available in the device.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring 64-bit Apple devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elcomsoft iOS Forensic Toolkit is the only tool on the market (as of December
    2015) that allows physical acquisition of Apple's 64-bit devices. The tool comes
    with the ability of acquiring information from jailbroken 64-bit iPhones, such
    as Apple iPhone 5S, 6/6S/Plus, and 64-bit iPads, including iPad mini 2-4, iPad
    Air/Air2, and iPad Pro.
  prefs: []
  type: TYPE_NORMAL
- en: The 64-bit acquisition process differs significantly from the old methods that
    were used to extract data from 32-bit devices. The new method is backward compatible
    with 32-bit iPhones and iPads; however, if you have a choice, we recommend sticking
    with the old and proven acquisition routine if you've got a 32-bit iPhone to extract.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a working jailbreak is absolutely mandatory for the new acquisition
    process to work.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to read the theory, you can skip directly to the *Performing
    physical acquisition on a 64-bit iOS device* section.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing 64-bit process and traditional physical acquisition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to successfully operate on Apple's 64-bit devices, the new acquisition
    process must work within the limits of the target platform. Apple's 64-bit platform
    implements much stricter security compared to legacy devices based on older hardware;
    as a result, there are certain limitations to 64-bit acquisition that one never
    has to deal with when acquiring 32-bit hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The first difference between the two acquisition methods lies in the output
    data format. The 32-bit physical acquisition process returns the complete bit-precise
    image of the device by accessing the data in raw mode. The 64-bit platform implements
    stronger protection, making it possible to dump a disk image, but it never releases
    the encryption keys required to decrypt files. For this reason, the 64-bit acquisition
    process is limited to using higher-level access for capturing the filesystem in
    the form of a Unix-style TAR archive. Mind you, the archive contains the same
    data as a raw dump produced by the traditional process. However, keychain items
    cannot be decrypted. Analyzing the filesystem image is also a bit more complicated
    compared to processing the full DMG image, as DMG images are supported by virtually
    all mobile forensic tools, while filesystem dumps are not as widely supported.
  prefs: []
  type: TYPE_NORMAL
- en: Here comes the second difference between the two acquisition methods. The 64-bit
    process can *extract* the keychain database from the device. However, with no
    access to the securityd device key, the new process cannot *decrypt* the keychain.
    Therefore, stored Web forms and passwords, as well as other data put into keychain,
    will remain inaccessible (at least for the time being).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you must unlock the device with the correct passcode and remove passcode
    protection in iOS settings before the extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the 64-bit acquisition process is significantly more invasive, compared
    to the old 32-bit process. This means that every step of the acquisition process
    and every modification done to the content of the device must be carefully documented;
    otherwise, extracted evidence may not be admissible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum it up, the 64-bit process has the following limitations compared to
    physical acquisition for 32-bit devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Keychain extracted, but *not* decrypted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HFS+ filesystem image (64-bit) versus bit-precise image (32-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passcode must be removed in iOS settings prior to acquisition (64-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly invasive, requires careful documentation for evidence to remain admissible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported devices and iOS versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hardware wise, the 64-bit acquisition process supports all of the following
    devices regardless of the version of iOS they are running (assuming that a working
    jailbreak exists for this version of iOS):'
  prefs: []
  type: TYPE_NORMAL
- en: iPhone 5S, 6, 6 Plus, 6S, and 6S Plus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad Air, Air 2, and Pro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPad mini Retina and iPad mini 3 and 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPod Touch 6th gen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new acquisition process requires unrestricted access to the filesystem,
    and therefore, it relies heavily on a device being jailbroken. Since new versions
    of iOS are a constant challenge for jailbreakers, you may be out of luck (at least
    for a while) if you encounter a device running the latest version of iOS that
    does not have a jailbreak so far. At this time (December 2015), iOS 9.1 and 9.2
    Beta still don't have a working jailbreak, so you will be unable to use the new
    acquisition process on any of these devices.
  prefs: []
  type: TYPE_NORMAL
- en: Performing physical acquisition on a 64-bit iOS device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The internals of the 64-bit acquisition process differ significantly from how
    it works on 32-bit devices. As a result, an extra step is required to perform
    physical acquisition on an iPhone 5S, 6/6S, or any of the Plus versions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1 - on your iOS device**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ensure that the device is jailbroken**: Physical acquisition for 64-bit devices
    is exclusive to jailbroken iPhones, iPads, and iPods. If it is not jailbroken,
    proceed to *Install jailbreak*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If OpenSSH is not installed, install it from Cydia ([https://cydia.saurik.com/openssh.html](https://cydia.saurik.com/openssh.html))
    or by following the instructions at [http://www.cydiaos.com/install-openssh-on-iphone-ipod-without-cydia/](http://www.cydiaos.com/install-openssh-on-iphone-ipod-without-cydia/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlock the device by supplying the correct passcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the passcode is empty, go to iOS Forensic Toolkit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable passcode protection in iOS Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'iOS 8 (no Touch ID): **Settings** | **Passcode Lock** | **Turn Passcode Off**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Performing physical acquisition on a 64-bit iOS device](img/0088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 2 - install jailbreak**'
  prefs: []
  type: TYPE_NORMAL
- en: Jailbreaking iOS 8 and 9 is a cumbersome process without guaranteed outcome.
    Depending on the version of iOS, you may need to follow different steps and use
    different tools to jailbreak.
  prefs: []
  type: TYPE_NORMAL
- en: For example, installing a Pangu jailbreak on iOS 9.0.1-9.0.2 may get stuck at
    85% with an error message. If that happens, you will need to open the Photos app
    after the first reboot (and before putting the device into the **Airplane mode**)
    to ensure that at least one photo exists on the device. Opening (and leaving)
    the Photos app may be enough to carry on; however, there can be other numerous
    obstacles in installing jailbreak.
  prefs: []
  type: TYPE_NORMAL
- en: '**What you need to know**'
  prefs: []
  type: TYPE_NORMAL
- en: In order to jailbreak an iOS device, you'll need to disable several protection
    layers. In order to do this, you may need to specify the correct Apple ID password
    and enter the correct passcode (if either or both protection layers are enabled).
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing for jailbreak**'
  prefs: []
  type: TYPE_NORMAL
- en: Before jailbreaking, you will need to unlock the iOS device using the correct
    passcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check whether **Find My Phone** is enabled. If it is, in iOS Settings, disable
    **Find My Phone** (Apple ID password required):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Performing physical acquisition on a 64-bit iOS device](img/0089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'TaiG and Pangu jailbreaks require disabling Touch ID and passcode protection.
    If you haven''t disabled them during the previous step, do it now. Check whether
    passcode protection is enabled (if you had to enter a passcode in order to unlock
    the device, it is.) If enabled, disable **Touch ID** and **Passcode** in iOS **Settings**
    (original passcode required):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing physical acquisition on a 64-bit iOS device](img/0090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Install jailbreak**'
  prefs: []
  type: TYPE_NORMAL
- en: For iOS 8.x (all versions), use TaiG jailbreak and follow the instructions at
    [http://www.taig.com/en/](http://www.taig.com/en/) .
  prefs: []
  type: TYPE_NORMAL
- en: For iOS 9 through 9.0.2, use Pangu jailbreak and follow the instructions at
    [http://en.pangu.io/](http://en.pangu.io/).
  prefs: []
  type: TYPE_NORMAL
- en: For iOS 9.1 and 9.2, at this time, no jailbreak is available (may change in
    the future).
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3 - connect the device**'
  prefs: []
  type: TYPE_NORMAL
- en: Once your device is jailbroken, you may connect it to your computer via the
    Lightning cable. Launch iOS Forensic Toolkit. The majority of options are unavailable
    for 64-bit devices. The 64-bit acquisition process is available under the `TAR
    FILES` command.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 4 - use iOS Forensic Toolkit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Launch the Toolkit**:![Performing physical acquisition on a 64-bit iOS device](img/0091.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Use the **TAR FILES** command (item 8) from the main menu**: This will return
    a Unix-style TAR archive of the filesystem, complete with all application data.
    The keychain database will also be extracted; however, it won''t be decrypted
    as keychain decryption keys are not accessible on 64-bit devices:![Performing
    physical acquisition on a 64-bit iOS device](img/0092.jpeg)![Performing physical
    acquisition on a 64-bit iOS device](img/0093.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If prompted, enter the root password. By default, the root password is `alpine`.
    You will need to enter the password twice.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Re-enter the root password:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Performing physical acquisition on a 64-bit iOS device](img/0094.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Specify the file name**: The path is relative to the home directory:![Performing
    physical acquisition on a 64-bit iOS device](img/0095.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Wait while the filesystem is being extracted**: This can be a lengthy process,
    especially when acquiring devices with a large amount of data (in our lab, it
    took us about 10 minutes to pull 7.5 GB of data):![Performing physical acquisition
    on a 64-bit iOS device](img/0096.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**When the process is finished, disconnect the device and proceed to analyze
    the data**:![Performing physical acquisition on a 64-bit iOS device](img/0097.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is available via 64-bit physical acquisition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The 64-bit acquisition process returns the full filesystem of the device, including
    the keychain (which, unfortunately, cannot be decrypted). We were able to access
    all the following data that is *not* available in either iTunes or iCloud backups:'
  prefs: []
  type: TYPE_NORMAL
- en: Location data (`/private/var/root/Library/Caches/locationd`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloaded mail (`/private/var/mobile/Library/Mail`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Health data (`/private/var/mobile/Library/Health`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Music (`/private/var/mobile/Media/iTunes_Control/Music`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed battery usage (`/private/var/mobile/Library/BatteryLife`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data and caches (`/private/var/mobile/Containers/Data/Application/<application
    id="">, /private/var/mobile/Library/Caches</application>`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Safari cache—history, recent searches, and more (`/private/var/mobile/Containers/Data/Application/4FF7BF97-4B3B-4964-ACD8-974AADB8D4F8/Library/Safari`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lockdown certificate info (`/private/var/root/Library/Lockdown`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU usage data (`/private/var/mobile/Library/CoreDuet`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push notifications (`/private/var/mobile/Library/ApplePushService`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Battery usage (`/private/var/mobile/Library/BatteryLife`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files (`/private/var/mobile/Library/Preferences`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network and data usage (`/private/var/networkd, /private/var/wireless/Library/Databases`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various log files (`/private/var/log, /private/var/logs, /private/var/wireless/Library/Logs,
    /private/var/mobile/Library/Logs`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHM and WAL files for all SQLite databases (delayed transactions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications activity (`/private/var/mobile/Library/AggregateDictionary`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spotlight data (`/private/var/mobile/Library/Spotlight`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard cache (`/private/var/mobile/Library/Keyboard`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The logs include information on application install/uninstall, restoring from
    backup, syncing and pairing, application crashes, GSM network connections, iCloud
    access (by app), iOS updates, application crash logs, info on device on/off, diagnostics
    and security logs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Caches include a lot more than just the application cache. In addition to this,
    you'll get cache of the data downloaded over the Internet, screenshots of applications'
    recent state (at the time they were suspended), information stored in the clipboard
    of the device, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: There is quite more data to analyze, especially in the `/private/var/mobile/Library`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, some of this data is also available when performing acquisition
    of a locked device, even if you don't know the passcode.
  prefs: []
  type: TYPE_NORMAL
- en: Locked device with unknown passcode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new acquisition process can be used to pull some information from 32-bit
    and 64-bit devices that are locked with an unknown passcode (jailbreak required).
    This includes devices that were powered on (or rebooted) and never unlocked. Jailbreak
    is absolutely mandatory; we cannot pull anything from a non-jailbroken device
    with an unknown passcode!
  prefs: []
  type: TYPE_NORMAL
- en: The amount of information that can be extracted varies depending on whether
    the device was unlocked at least once after it powered on or rebooted. If the
    device was never unlocked after a reboot, only a very limited dataset is available.
    However, if the user entered the correct passcode at least once, a lot of information
    (such as the SMS database, contacts database, Wi-Fi password, and so on) is decrypted
    and can be extracted later on, even after the device is subsequently locked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following data can be pulled from jailbroken, passcode-locked devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Some geolocation data (cellular tower and compass calibration data, including
    coordinates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incoming calls (numbers only) and text messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App and system logs (installs and updates, net access logs, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite temp files, including **write-ahead logs** (**WAL**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What exactly may or may not be available from a locked device depends, in particular,
    on whether or not the device was unlocked at least once after booting up. For
    example, incoming text messages will be placed in a temporary, unencrypted database
    if the device was never unlocked after booting up. However, if the device was
    unlocked at least once, all text messages will be transferred into the encrypted
    database even if they were received while the device was subsequently locked.
    As a result, if a device was unlocked at least once and it has a jailbreak installed,
    it may be possible to pull a lot more data compared to devices that were never
    unlocked after the boot. This is one of the reasons why you should do your best
    to prevent seized devices from switching off (using the Faraday bag and charger
    routine).
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and analyzing the image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The 64-bit acquisition process returns an archived (`.TAR`) image of the device''s
    filesystem. If you are using Windows, simply extracting the files and folders
    from the TAR archive may not return the complete content of the archive as some
    files and folders may contain characters that are not allowed in NTFS or exFAT.
    You can either allow the archiver to rename these files or extract information
    onto a mounted HFS/HFS+ volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing and analyzing the image](img/0098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you are using a macOS X computer, you could simply mount the DMG image (extracted
    via the 32-bit process) as a virtual disk. However, the 64-bit process does not
    return a DMG image, meaning that you'll have to manually extract the filesystem
    from the TAR archive and analyze the files individually. Converting a TAR image
    of the filesystem into a mountable DMG image is possible; we are currently working
    on a tool to perform the conversion on-the-fly during acquisition. Stay tuned
    for iOS Forensic Toolkit 2.1!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Windows PC to analyze the extracted dataset, you may need
    to install a third-party tool in order to mount the HFS+ volume. We assembled
    the following list of tools to help you mount the HFS+ volume on a Windows PC:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HFSExplorer**: [http://www.catacombae.org/hfsexplorer/](http://www.catacombae.org/hfsexplorer/)
    (free)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paragon HFS+ for Windows**: [https://www.paragon-software.com/home/hfs-windows/](https://www.paragon-software.com/home/hfs-windows/)
    (free or $19.95)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mediafour MacDrive**: [http://www.mediafour.com/software/macdrive/](http://www.mediafour.com/software/macdrive/)
    ($49.99)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also try using BootCamp drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://forums.macrumors.com/threads/apple-hfs-windows-driver-download.1368010/](http://forums.macrumors.com/threads/apple-hfs-windows-driver-download.1368010/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://lpmv.epfl.ch/page-109141-en.html](http://lpmv.epfl.ch/page-109141-en.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Analyzing the extracted dataset is available with many forensic tools. We found
    BlackLight by BlackBag Technologies to work great on both macOS X and Windows
    platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.blackbagtech.com/software-products/blacklight.html](https://www.blackbagtech.com/software-products/blacklight.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Potential legal implications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Physical acquisition for 64-bit devices is a more invasive process compared
    to acquisition methods available for old hardware. It involves modifying system
    settings (removing passcode protection), and it does write files onto the phone
    (OpenSSH must be installed on the device for the process to work). If the device
    does not have a jailbreak installed, it must be jailbroken prior to acquisition,
    which once again, modifies the system and data partitions.
  prefs: []
  type: TYPE_NORMAL
- en: With all that in mind, evidence obtained with the new extraction process may
    not be admissible in court unless every step is properly documented. Producing
    and obtaining device backups (making the device produce an offline backup via
    iTunes or an online one via iCloud) prior to attempting physical acquisition is
    highly recommended. You can use Elcomsoft Phone Breaker ([https://www.elcomsoft.com/eppb.html](https://www.elcomsoft.com/eppb.html))
    to decrypt the local backup or download one from iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced iOS forensics, detailing available acquisition options
    for different generations of Apple iOS devices. We reviewed the various acquisition
    options and learned how to perform physical acquisition of an iOS device using
    Elcomsoft iOS Forensic Toolkit. We also took a brief look at other acquisition
    techniques, which will be detailed in the next chapter.
  prefs: []
  type: TYPE_NORMAL
