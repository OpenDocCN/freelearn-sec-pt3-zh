- en: '*Chapter 3*: Ghidra Debug Mode'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce Ghidra debug mode. By using the Eclipse IDE,
    you will be able to develop and debug, in a professional way, any feature of Ghidra,
    including plugins, which were covered in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We choose to use the Eclipse IDE (https://ghidra-sre.org/InstallationGuide.html)
    because it is the only one officially supported by Ghidra. It is technically possible
    to use other ones, but they are not officially supported. There is a severe security
    issue in the Ghidra debug mode functionality that affects Ghidra 9.0, so please
    use any later version of the program to deploy your development environment. The
    current safe and stable version at the time of writing this book is 9.1.2.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will learn how to exploit the **remote code execution** (**RCE**)
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Ghidra development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the Ghidra code and Ghidra scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ghidra RCE vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GitHub repository containing all the necessary code for this chapter can
    be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/37EfC5a](https://bit.ly/37EfC5a)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Ghidra development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purpose of this chapter, you will need to install the following software
    requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Java JDK 11 for x86_64 (available here: [https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot](https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Eclipse IDE for Java developers (any version supporting JDK 11, available
    here: [https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/))
    as it is the IDE that is officially integrated and supported by Ghidra.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PyDev 6.3.1 (available here: [https://netix.dl.sourceforge.net/project/pydev/pydev/PyDev%206.3.1/PyDev%206.3.1.zip](https://netix.dl.sourceforge.net/project/pydev/pydev/PyDev%206.3.1/PyDev%206.3.1.zip)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The GhidraDev plugin (available here: [https://github.com/NationalSecurityAgency/ghidra/tree/f33e2c129633d4de544e14bc163ea95a4b52bac5/GhidraBuild/EclipsePlugins/GhidraDev](https://github.com/NationalSecurityAgency/ghidra/tree/f33e2c129633d4de544e14bc163ea95a4b52bac5/GhidraBuild/EclipsePlugins/GhidraDev)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overviewing the software requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need the **Java Development Kit** (**JDK**) and PyDev because they allow
    us to work with the Java and Python programming languages, respectively. Eclipse
    is the officially supported and integrated IDE for Ghidra development.
  prefs: []
  type: TYPE_NORMAL
- en: Although Eclipse is the only officially supported IDE, it is technically possible
    to integrate IntelliJ with Ghidra ([https://reversing.technology/2019/11/18/ghidra-dev-pt3-dbg.html](https://reversing.technology/2019/11/18/ghidra-dev-pt3-dbg.html))
    or any other IDE for advanced purposes and to deeply investigate how integration
    works.
  prefs: []
  type: TYPE_NORMAL
- en: You can install more dependencies if you want. In fact, more dependencies could
    eventually be required to debug and/or develop specific components.
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra DevGuide documentation
  prefs: []
  type: TYPE_NORMAL
- en: If you want to install all the necessary dependencies for a full Ghidra development
    environment, then you can refer to **Catalog of Dependencies** in the documentation,
    which is also useful for answering specific questions when setting up the environment.
    You can find the documentation at https://github.com/NationalSecurityAgency/ghidra/blob/master/DevGuide.md.
    The documentation currently explicitly says that you can install these dependencies
    in no particular order but, in this case, it is recommended to install the Java
    JDK first because it will be required later by Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Java JDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation of the JDK is straightforward. First, you have to decompress
    the ZIP file and set the `JAVA_HOME` environment variable to the JDK decompressed
    location, and then add the path of its `bin` directory to the `PATH` environment
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether the installation of the JDK was successful by printing
    the `JAVA_HOME` content and the Java version. To do that, use the following two
    commands and check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The previous output indicates that JDK 11.0.6 was successfully installed and
    configured.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Eclipse IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the Java JDK is installed, let''s go ahead and install **Eclipse IDE for
    Java Developers** (other Eclipse installations might have problems) by downloading
    it from the **packages** section of its official website (https://www.eclipse.org/downloads/packages/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Downloading Eclipse IDE for Java Developers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Downloading Eclipse IDE for Java Developers
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to install PyDev from Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyDev
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After installing Eclipse, extract or decompress the contents of the `PyDev
    6.3.1` ZIP file we downloaded earlier when setting up the lab to a folder by right-clicking
    on it and choosing **Extract All…**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Decompressing PyDev to a folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Decompressing PyDev to a folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Decompress all the contents of `PyDev 6.3.1.zip` to a folder named `PyDev 6.3.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Decompressing the contents of the PyDev 6.3.1.zip file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Decompressing the contents of the PyDev 6.3.1.zip file
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it from Eclipse by clicking on the **Install New Software…** option
    of the **Help** menu and add the folder path of the decompressed PyDev archive
    file as the local repository (the **Local…** option in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Adding PyDev as the Eclipse local repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Adding PyDev as the Eclipse local repository
  prefs: []
  type: TYPE_NORMAL
- en: 'It is quite common to get stuck at this point. As you can see in the following
    screenshot, no categorized items exist. Please, uncheck the **Group items by category**
    option to avoid this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – ThePyDev plugin installer is NOT visible because installers
    are grouped by category'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – ThePyDev plugin installer is NOT visible because installers are
    grouped by category
  prefs: []
  type: TYPE_NORMAL
- en: 'After unchecking **Group items by category**, you will be able to select the
    **PyDev for Eclipse** option in order to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Checking PyDev to be installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Checking PyDev to be installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Next >** to continue the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Reviewing the items to be installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Reviewing the items to be installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Before installing PyDev, you must accept the license:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Accepting the PyDev license'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Accepting the PyDev license
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing PyDev, you will need to restart Eclipse to let the changes
    in the software take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Restarting Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Restarting Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: 'After this step, you will get Python support for Eclipse. You can check it
    by clicking on **Help** | **About Eclipse IDE** | **Installation Details**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Verifying that PyDev was successfully installed in Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – Verifying that PyDev was successfully installed in Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: This Eclipse menu is also useful for updating, uninstalling, and seeing the
    properties of any installed Eclipse IDE extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GhidraDev
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to how we installed PyDev, for Ghidra/Eclipse synchronization, you
    need to install the GhidraDev plugin, available in Ghidra''s installation directory
    at `Extensions\Eclipse\GhidraDev\GhidraDev-2.1.0.zip`, but this time, do not decompress
    it but use the **Archive…** option instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Adding GhidraDev as an Eclipse local repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – Adding GhidraDev as an Eclipse local repository
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, click on **Add**. In this case, you don''t need to worry about
    the **Group items by category** option because a **Ghidra** category exists containing
    the **GhidraDev** plugin we are interested in. Just make sure that the **GhidraDev**
    option is marked and click on the **Next >** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Installing the GhidraDev plugin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Installing the GhidraDev plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can take the opportunity to review the installation details.
    Click on **Next >** again to continue installing GhidraDev:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Reviewing the items to be installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – Reviewing the items to be installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept the GhidraDev license terms and click on **Finish**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Accepting the GhidraDev license terms'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Accepting the GhidraDev license terms
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, a security warning will appear. Don''t worry about it. The authenticity
    of the plugin cannot be verified because it is not signed. Click on **Install
    anyway** to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Accepting the security warning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Accepting the security warning
  prefs: []
  type: TYPE_NORMAL
- en: 'To let the changes take effect, click on **Restart Now** to restart the Eclipse
    IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Restarting the Eclipse IDE'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_016.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – Restarting the Eclipse IDE
  prefs: []
  type: TYPE_NORMAL
- en: 'As you know, you can check whether GhidraDev is installed via **Help** | **About
    Eclipse IDE** | **Installation Details**. But in this case, the plugin is incorporated
    into the menu bar of Eclipse, so you can easily notice whether the installation
    was successful by checking the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – GhidraDev plugin installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – GhidraDev plugin installed
  prefs: []
  type: TYPE_NORMAL
- en: After that, the GhidraDev plugin will be installed and you will also be able
    to specify where Ghidra installations are located in order to link them to your
    development projects. Use **GhidraDev** | **Preferences** | **Ghidra Installations…**
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, I have two Ghidra installations (**Ghidra_9.1.1_PUBLIC** and
    **Ghidra_9.1.1_PUBLIC - other**), where **Ghidra_9.1.1_PUBLIC** is checked as
    default. Ghidra installations can be added by clicking on the **Add…** button
    and removed by selecting the installation row on the table and clicking on **Remove**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Adding Ghidra installation directories to GhidraDev'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – Adding Ghidra installation directories to GhidraDev
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover Ghidra debugging, which enables us not only
    to identify and fix programming errors in scripts but also to follow the execution
    of Ghidra step by step. The ability to debug will be very useful because it opens
    up to you all the low-level internal details of Ghidra for fun and advanced development.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the Ghidra code and Ghidra scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore how to debug Ghidra features from Eclipse.
    We will start by reviewing how to develop scripts and how to debug them, and then
    we will conclude by showing how to debug any Ghidra component from the source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Ghidra scripts from Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and debug a Ghidra script. First, we will need to create a
    new Ghidra project using the `GhidraScripts`, which is the default or suggested
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Creating a Ghidra script project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_019.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.19 – Creating a Ghidra script project
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on `C:\Users\virusito\ghidra_scripts`) and the scripts included
    with your Ghidra installation with checkboxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Configuring the new Ghidra script project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_020.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.20 – Configuring the new Ghidra script project
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be able to choose a Ghidra installation previously configured via
    **GhidraDev** | **Preferences** | **Ghidra Installations…**, and you can also
    open the Ghidra installation window in order to add/remove Ghidra installation
    directories via the **+** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Linking a Ghidra installation to the Ghidra script project
    being created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_021.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.21 – Linking a Ghidra installation to the Ghidra script project being
    created
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on **Next >**, you will be able to enable Python support through
    Jython. You can add the Jython interpreter that comes with Ghidra or download
    your own interpreter (available here: [https://www.jython.org/download](https://www.jython.org/download))
    by clicking on the **+** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Adding Python support to the Ghidra script project via Jython'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_022.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.22 – Adding Python support to the Ghidra script project via Jython
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the interpreter that comes with Ghidra (available in the
    following directory: `\Ghidra\Features\Python\lib\jython-standalone-2.7.1.jar`)
    and you already have Ghidra linked to the project, you are presented with this
    option, which avoids having to manually look for it yourself. Answer affirmatively
    to the dialog window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Automatically adding the Jython interpreter that comes with
    Ghidra'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_023.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.23 – Automatically adding the Jython interpreter that comes with Ghidra
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you will have a Jython interpreter available and it is sufficient
    for general purposes. But if at any time you have the need to link your own interpreter,
    click on **+** | **New…** | **Browse** and, after adding your Jython interpreter,
    click **OK**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Adding your own Jython interpreter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_024.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.24 – Adding your own Jython interpreter
  prefs: []
  type: TYPE_NORMAL
- en: 'If you receive the following message, click on **Proceed anyways**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Adding the Python standard library to PYTHONPATH in Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_025.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.25 – Adding the Python standard library to PYTHONPATH in Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to retrieve the `/Lib` folder path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add that folder to `PYTHONPATH` using **New Folder** and, after checking that
    it was added, as shown in the following screenshot, click on **Apply and Close**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Applying the changes in PYTHONPATH'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_026.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.26 – Applying the changes in PYTHONPATH
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can choose your own interpreter or the other one included with Ghidra.
    Make your choice and click on **Finish**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Choosing an available Jython interpreter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_027.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.27 – Choosing an available Jython interpreter
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on to actually debugging, let's first see how our environment
    looks and notice the following.
  prefs: []
  type: TYPE_NORMAL
- en: The Ghidra script project we created consists of some folders containing existing
    scripts available in your Ghidra installation directory (you can check the path
    of any of these folders when selected by pressing the *Alt* + *Enter* hotkey combination
    in Eclipse) and also your home scripts by default, located in the `%userprofile%\ghidra_scripts\`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '`JUnit 4`, the JDK (`JRE System Library`), and `Referenced Libraries` (including
    Ghidra libraries) are also linked to the project, as well as the entire Ghidra
    installation folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Ghidra script project structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_028.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.28 – Ghidra script project structure
  prefs: []
  type: TYPE_NORMAL
- en: By right-clicking on the project and choosing **Run As** or **Debug As**, you
    will notice that two running and debugging modes, respectively, were automatically
    created when installing the GhidraDev plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one, **Ghidra** running mode, allows you to run Ghidra in a GUI environment,
    while the second one, **Ghidra Headless**, allows you to execute Ghidra in non-GUI
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Project running modes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_029.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.29 – Project running modes
  prefs: []
  type: TYPE_NORMAL
- en: Let's debug the `NopScript.java` Ghidra script code developed in [*Chapter 2*](B16207_02_Final_SK_ePub.xhtml#_idTextAnchor031),
    *Automating RE Tasks with Ghidra Scripts*, by pasting it into Eclipse, which is
    now integrated with Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a new script, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **GhidraDev** | **New** | **Ghidra Script...**:![Figure 3.30 – Creating
    a new Ghidra script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_03_030.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.30 – Creating a new Ghidra script
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fill in the required fields, as follows:![Figure 3.31 – Creating the NopScript.java
    Ghidra script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_03_031.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.31 – Creating the NopScript.java Ghidra script
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let GhidraDev generate the corresponding script skeleton. Fill the script body
    by pasting the `NopScript.java` Ghidra script code written in [*Chapter 2*](B16207_02_Final_SK_ePub.xhtml#_idTextAnchor031),
    *Automating RE Tasks with Ghidra Scripts*:![Figure 3.32 – Overwriting the skeleton
    code with the NopScript.java code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_03_032.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.32 – Overwriting the skeleton code with the NopScript.java code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can let the program break in some lines of the script by adding a breakpoint
    to it. Breakpoints can be established by right-clicking on the line number you
    want to break on and choosing **Toggle Breakpoint**. Alternatively, double-clicking
    on the line number or pressing the *Ctrl* + *Shift* + *B* combination while keeping
    the mouse focus on the line will also work:![Figure 3.33 – Setting a breakpoint
    in the script on line 17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_03_033.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.33 – Setting a breakpoint in the script on line 17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you can debug this code by right-clicking on it and choosing **Debug As**
    | **Ghidra**:![Figure 3.34 – Debugging a Ghidra script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_03_034.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.34 – Debugging a Ghidra script
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To force Ghidra to reach the line where the breakpoint is established, you
    will need to run the plugin over a chosen byte of a file in Ghidra, which is now
    synchronized with Eclipse using GhidraDev. As this script has associated the *Ctrl*
    + *Alt* + *Shift* + *N* hotkeys, you can use them in order to execute it over
    a byte of a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.35 – Debugging NopScript.java in Ghidra'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_035.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.35 – Debugging NopScript.java in Ghidra
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, Ghidra Python scripts can be also debugged from Eclipse using
    PyDev integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.36 – Debugging NopScript.py in Ghidra'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_036.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.36 – Debugging NopScript.py in Ghidra
  prefs: []
  type: TYPE_NORMAL
- en: The same procedure can be applied not only to home scripts but also to any other
    plugin available in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging any Ghidra component from Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can debug not only plugins but also any features in Ghidra. For instance,
    if you want to debug the `Graph.jar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.37 – Adding the Graph.jar file to the build path'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_037.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.37 – Adding the Graph.jar file to the build path
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can link the JAR file (now available in the build path) to its own
    source code. The source code is located in the same folder, named `Grahp-src.zip`.
    To link the source code, you need to open the `Graph.jar` properties by right-clicking
    on the JAR file, and then attach the ZIP file in the **Workspace location** field
    of the **Java Source Attachment** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.38 – Linking the Graph.jar file to its own source code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_038.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.38 – Linking the Graph.jar file to its own source code
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you will be able to expand the `Graph.jar` file, showing the included
    `*.class` files. You will be able to see the source code because it is linked
    now. You will be also able to add breakpoints to it, which will be hit when the
    corresponding line is reached during a debugging session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.39 – Debugging the Function Graph feature'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_03_039.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.39 – Debugging the Function Graph feature
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to integrate Eclipse and Ghidra using the GhidraDev
    plugin. We saw how to develop and debug Ghidra plugins from the IDE and, finally,
    how to debug any feature of Ghidra of your choice, which allows you to master
    Ghidra internals on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra RCE vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how the RCE vulnerability found in Ghidra 9.0
    works, how to exploit it, and how to fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining the Ghidra RCE vulnerability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The vulnerability was due to a line located in `launch.bat` when running Ghidra
    on Windows platforms and `launch.sh` when running it on Linux or macOS. The following
    is the line involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The vulnerability was fixed in the second version of Ghidra 9.0.1 by replacing
    the asterisk (`*`), which indicates all addresses are allowed to attach the debugger
    to Ghidra, and limiting it to `localhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the vulnerability is so evident that, paradoxically, it is likely
    that it went unnoticed for the same reason.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the Ghidra RCE vulnerability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To exploit this RCE vulnerability, we set up a vulnerable machine by executing
    Ghidra 9.0 in debug mode. This can be done by executing the `ghidraDebug.bat`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we retrieve the `3828`, as shown in the following listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we list the active connections associated with it using `netstat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the previous listing, a listening connection is opened to
    the world as indicated with `0.0.0.0:0`. Then, we can establish a connection to
    it from anywhere. Use the following code, replacing `VICTIM_IP_HERE` with the
    victim''s IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, look for a runnable class that will probably soon hit a breakpoint if
    established:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`javax.swing.RepaintManager$ProcessingRunnable` will be hit when repainting
    the window. It is a pretty good candidate. Let''s add a breakpoint to it by using
    the `stop` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the breakpoint is quickly hit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Given this situation, you can execute any arbitrary command. I will execute
    a calculator via `calc.exe`, but you can replace it with any command injection
    payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the Windows calculator program was executed on the hacked computer.
    We know the attack was successful because we obtained feedback indicating that
    a new process identified by PID `9268` was created on the victim's machine.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the Ghidra RCE vulnerability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To fix the vulnerability, the `DEBUG_ADDRESS` variable is set to `127.0.0.1:18001`,
    which restricts the incoming debugging connections to `localhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Manually reviewing these lines allows you to check on your own whether a given
    Ghidra version is vulnerable to this attack.
  prefs: []
  type: TYPE_NORMAL
- en: Looking for vulnerable computers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Ghidra RCE vulnerability was a small but extremely important mistake because
    vulnerable computers can be located in a straightforward way; for example, by
    querying Shodan (you will need a Shodan account and must be logged in; otherwise,
    the results of this link will be not available for you): [https://www.shodan.io/search?query=port:18001](https://www.shodan.io/search?query=port:18001).'
  prefs: []
  type: TYPE_NORMAL
- en: As you know, this vulnerability is probably not an **National Security Agency**
    (**NSA**) backdoor into the program. The NSA has its own zero-day exploits to
    hack computers and, for sure, doesn't need to introduce backdoors into its own
    programs to hack the computers of people around the world. In fact, to do so would
    be a terrible move in terms of reputation.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Be sure you're using a patched version of Ghidra when using debug mode, as using
    a vulnerable version of Ghidra poses a high risk of being hacked.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to synchronize Eclipse and Ghidra for development
    and debugging purposes using the GhidraDev plugin. You learned skills not only
    for debugging scripts but also for debugging any Ghidra source code line, allowing
    you to explore the internals of this awesome framework on your own.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how the Ghidra RCE vulnerability works, how to patch it, how
    to exploit it, and why it is probably not an NSA backdoor. In the next chapter,
    we will cover Ghidra extensions that are used to freely extend Ghidra from the
    source code.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is it possible to debug a compiled version of Ghidra using the source code instead
    of bytecode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to debug Ghidra using an IDE other than Eclipse? Are other IDEs
    supported?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does it seem likely to you that the NSA is spying on Ghidra users? Do you think
    this likely includes backdoors?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following links for more information on the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Introduction to JVM Languages*, *Vincent van der Leun*, June 2017:[https://subscription.packtpub.com/book/application_development/9781787127944](https://subscription.packtpub.com/book/application_development/9781787127944)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ghidra Dev without Eclipse: [https://reversing.technology/2019/11/18/ghidra-dev-pt1.html](https://reversing.technology/2019/11/18/ghidra-dev-pt1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Complete Metasploit Guide*, *Sagar Rahalkar and Nipun Jaswal*, June 2019:
    [https://subscription.packtpub.com/book/security/9781838822477](https://subscription.packtpub.com/book/security/9781838822477)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
