- en: '*Chapter 11*: Secure Development and Deployment on the Cloud'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Cybersecurity is key for our work supporting Cloud and Service Management.
    In fact, the ability to act with efficiency and speed against cyberthreats are
    vital and a key differentiator."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Dario Sarmiento, Manager, Infrastructure Services for Gulf and Levant region
    - Kyndryl*'
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, most companies have their IT environments hosted on the cloud, because
    that normally means better uptime, more resilience, faster deployment, lower risk,
    and even better security standards.
  prefs: []
  type: TYPE_NORMAL
- en: However, this migration to the cloud also brings a plurality of risks and vulnerabilities
    that need to be assessed to keep your infrastructure secure.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in this chapter, we are going to start by discussing the different
    types of clouds and data (and how to keep them secure).
  prefs: []
  type: TYPE_NORMAL
- en: Then, we are going to get even more technical by reviewing how to make your
    **Kubernetes** implementation more secure.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we are going to go over some best practices to harden your cloud
    databases and also discuss the best systems to monitor your cloud infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the main topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure deployment and implementation of cloud applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing Kubernetes and APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardening database services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your cloud security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements for this chapter, however, you can create
    free accounts to test some of the tools that we will review. Also, most of the
    cloud services offer free trials (tiers) that you can leverage to put the concepts
    into practice.
  prefs: []
  type: TYPE_NORMAL
- en: Secure deployment and implementation of cloud applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all companies have at least a portion of their business on the cloud.
    However, each company is unique, and their implementation of cloud services could
    be a blend of the different cloud models available, as explained next.
  prefs: []
  type: TYPE_NORMAL
- en: Security by cloud models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three types of cloud models: **Software as a Service** (**SaaS)**,
    **Platform as a Service** (**PaaS**), and **Infrastructure as a Service** (**IaaS**).
    Each of these models is very different from the others and therefore the security
    measurements that need to be applied vary for each of them. Therefore, let''s
    start by doing a quick introduction to the three types of cloud environments to
    better understand what we are aiming to protect.'
  prefs: []
  type: TYPE_NORMAL
- en: Software as a Service (SaaS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is basically a piece of software loaded on the cloud that can be easily
    accessed by the user through a web interface. Some examples are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Web-based emails such as **Gmail** and **Outlook**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web tools such as web-based billing systems or ticketing systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web-based productivity applications such as **Office 365** or **Google Workspace**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform as a Service (PaaS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This provides a platform for developers to create their own apps. Some examples
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Containers such as **Docker** and **Kubernetes**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software development repositories and versioning control systems such as **GitHub**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-based platforms such as **Windows** **Azure**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure as a Service (IaaS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This provides the base architecture for system administrators to create their
    own systems and infrastructure. Some examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DigitalOcean**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rackspace**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these cloud environments, security responsibilities are shared between the
    cloud users and the cloud provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure highlights who is responsible for the implementation of
    some security mechanisms based on the type of cloud in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Cloud security responsibilities'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Cloud security responsibilities
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's have a look at how data security should be managed in cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Data security in the cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three types (or states) of data in cloud environments: **data at
    rest**, **data in transit**, and **data in use** (**memory**). Therefore, you
    need to ensure that your data is always secure, regardless of the state. So, let''s
    see the best practices to secure your data in all the different states.'
  prefs: []
  type: TYPE_NORMAL
- en: Securing data at rest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data at rest is basically all the data stored in your cloud or cloud systems.
    The best way to secure data at rest is by using encryption, however, the application
    of encryption varies between the types of cloud as illustrated in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Encryption implementations based on the type of cloud'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Encryption implementations based on the type of cloud
  prefs: []
  type: TYPE_NORMAL
- en: Notice that for **PaaS** and **SaaS**, encryption of data at rest is mostly
    managed by the provider. Therefore, before selecting a cloud provider, you *must*
    check with them whether they offer some kind of encryption for data at rest (remember
    that this also includes backups).
  prefs: []
  type: TYPE_NORMAL
- en: Securing data in transit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data in transit is basically all the flow of data between endpoints (from your
    machine to the cloud and vice versa). Securing this data is a bit more complex
    because it often requires some coordination between the cloud provider and the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, *securing data in transit for SaaS* is normally achieved by using
    a secure protocol of transmission such as **SSL** (**HTTPS**). As illustrated
    in the following figure, HTTPS prevents man-in-the-middle attacks by encrypting
    data in transit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Secure SSL connections versus HTTP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Secure SSL connections versus HTTP
  prefs: []
  type: TYPE_NORMAL
- en: '*Securing data in transit for PaaS* normally requires the user to perform some
    configuration on the cloud side, plus using some secure settings on the computer
    as well (for example, using a secure API to transfer data between the endpoint
    and the cloud). As seen in the following figure, using an API key ensures end-to-end
    encryption between endpoint devices and the PaaS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Example of secure API key implementation in cloud'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – Example of secure API key implementation in cloud
  prefs: []
  type: TYPE_NORMAL
- en: '*Securing data in transit for IaaS* is mostly done by the user by setting up
    secure channels to connect to their systems and infrastructure in the cloud, for
    example, using **SSH**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the GUI of PuTTY, which is the most famous **SSH
    client** that you can use to ensure that the communication with your cloud server
    is secure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – PuTTY SSH client'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – PuTTY SSH client
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the data state that is normally overlooked but is super
    important to secure: *data in use*.'
  prefs: []
  type: TYPE_NORMAL
- en: Securing data in use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data in use is basically the information in **Random Access Memory (RAM)**.
    In the past, this data was not considered as vulnerable, however, attackers discovered
    ways to retrieve information from memory, so it is important to ensure that mechanisms
    are in place to protect this data.
  prefs: []
  type: TYPE_NORMAL
- en: The main way to protect this type of data is at the OS level by ensuring the
    server and applications are patched with the latest security updates to prevent
    any memory leak.
  prefs: []
  type: TYPE_NORMAL
- en: 'SaaS users can apply some mechanisms to reduce the risks of these attacks,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Close the cloud session when not in use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log out from the web tool (instead of just closing the browser).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PaaS users can apply the same best practices as SaaS users, plus also ensure
    that they use the latest version of the platform available and avoid the use of
    platforms with known vulnerabilities that can lead to a memory leak.
  prefs: []
  type: TYPE_NORMAL
- en: 'IaaS users need to go a step further by following these best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the latest version of the OS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform regular patching of the OS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep all software up to date (especially with security updates).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove any vulnerable software from the servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We just covered the basics of cloud security. Now, it's time to move to a deeper
    topic to understand how we can enhance security when working with Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Securing Kubernetes and APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes is one of the most used platforms to deploy cloud applications. Due
    to its popularity, it is important that you understand the basics of securing
    Kubernetes to enhance the protection of your cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To better understand how Kubernetes security relates to cloud security, let''s
    look at the following figure, which explains the layered model of the **four Cs**
    of **cloud-native systems**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – The four Cs of cloud-native security'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – The four Cs of cloud-native security
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding figure, this is a layered model based on the **Defense
    in Depth** (**DiD**) model, designed to enhance the security of cloud-based developments.
  prefs: []
  type: TYPE_NORMAL
- en: The first line of defense is the cloud itself (a topic that we just covered),
    however, there are some specific aspects that you may take into consideration
    that are related to each cloud provider, so the best practice here is to check
    the page of your cloud provider to better understand their security capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a bonus, the following figure provides links to the security pages of the
    main cloud providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Security links for cloud providers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – Security links for cloud providers
  prefs: []
  type: TYPE_NORMAL
- en: You can find these links in the *Further reading* section, too. Now, the next
    layer is the cluster (in this case Kubernetes), so let's take a deep dive into
    the best practices to secure our Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling access to the Kubernetes API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, the recommendation is to use **Transport Layer Security (TLS)** for all
    **Application Programming Interface (API)** traffic and make sure that authentication,
    authorization, and admission controls are properly enabled and configured.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling access to kubelet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Requests to the **kubelet** HTTPS endpoint (that are not rejected by other configured
    authentication methods) *are treated as anonymous requests by default*.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the best practice here is to *enable authentication and authorization*
    on production clusters to prevent any security risk.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing containers from loading unwanted kernel modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attackers can load kernel modules by creating a socket of the appropriate type
    that will enable the attacker to exploit a vulnerability on a kernel mode that
    the administrator assumed was not in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent this, you can uninstall the modules from the node, or blacklist
    them, by creating a file such as `/etc/modprobe.d/kubernetes-blacklist.conf` with
    contents such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you want more information about this command, visit the following site:[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/blacklisting_a_module](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/blacklisting_a_module).
  prefs: []
  type: TYPE_NORMAL
- en: Restricting access to etcd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access to **etcd** must be restricted because it is like giving root permissions
    in the cluster. Therefore, here are two recommendations to prevent unauthorized
    access to etcd:'
  prefs: []
  type: TYPE_NORMAL
- en: Use strong credentials from the API servers to the etcd server. And by strong
    password we mean a super long and crazy password that you can create and manage
    with a password vault. I've seen many people creating 12-digit passwords for this,
    which makes sense because they will be stored in a password vault, so go wild
    and create the biggest and strongest password possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a separate etcd instance for non-master components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, considering the sensitivity of etcd, another best security practice
    is that *only the API* should have access to it, and only grant permissions to
    those nodes that must have access to the etcd.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding the use of alpha or beta features in production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may find very cool features for Kubernetes that are in an alpha or beta
    stage. In those cases, the recommendation is to wait until they are final before
    using them.
  prefs: []
  type: TYPE_NORMAL
- en: Alpha or beta features may have unresolved security flaws that may put your
    entire cluster in danger. It is important to mention that this tip in fact applies
    to all software and hardware (not just Kubernetes).
  prefs: []
  type: TYPE_NORMAL
- en: Third-party integrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a similar way to the previous tip, third-party integrations may sound very
    cool and give you the feature that you were looking to implement, however, as
    with any other integration, you need to test those integrations before installing
    them in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember to always do a search about that integration on the internet
    to see what others say about them. Compatibility issues, vulnerabilities, and
    even crashes are some of the things that you will be glad to discover on the internet
    before they happen to you.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the other two components of the four Cs of cloud-native system security
    are **Code** and **Containers**, which are normally the responsibility of the
    *developers*. However, as a cybersecurity professional, it would be good to ensure
    that the development teams are following at least some sort of framework for secure
    code development to reduce the risks in your cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening database services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting access to the databases is probably the most wanted treasure for an
    attacker.
  prefs: []
  type: TYPE_NORMAL
- en: And this is not just because of the data they can access, but because by getting
    access to those databases, the attacker may gain access to other systems, create
    new users, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you have to consider that when talking about databases, we are talking
    about a huge field in which each system and technology may have its own hardening
    steps. Therefore, it is better for you to understand agnostic best practices that
    apply to most databases, as presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic security settings such as encryption and auditing must always be *on*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use advanced tools to monitor, detect, and deny access to data (if possible,
    look for new solutions that include AI components to enhance the detection of
    intrusions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrative accounts (such as **DBA** accounts) must use a stronger password
    criteria (when possible, 60+-character passwords and a password manager).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always apply basic security policies such as **principle of least privilege
    (PoLP)** and segregation of duties (they are explained in detail in [*Chapter
    3*](B16290_03_Final_JC_ePub.xhtml#_idTextAnchor068), *Comprehending Policies,
    Procedures, Compliance, and Audits*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database segregation may help you better control the data and the associated
    controls. For example, segregate databases based on regulatory controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always determine whether the data will be accessed internally or externally
    and apply the controls appropriately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze and, if possible, leverage the security features provided by the cloud
    provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze and, if possible, leverage the security features provided by the database
    developer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage compliance standards to improve the security of your databases even
    if you don't need to comply with them (for example, **PCI-DSS**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid the use of customer data in test environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When possible, use a policy manager to enforce your security policies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use enhanced solutions (such as **Google Secret Manager**) to store sensitive
    information such as API keys, passwords, certificates, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, here are some links in case you want to find more information
    about hardening some specific database engines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Securing MySQL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/doc/refman/5.7/en/security-against-attack.html](https://dev.mysql.com/doc/refman/5.7/en/security-against-attack.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Security on Postgres:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.postgresql.org/docs/7.0/security.htm](https://www.postgresql.org/docs/7.0/security.htm)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Securing SQL Server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/sql/relational-databases/security/securing-sql-server?view=sql-server-ver15](https://docs.microsoft.com/en-us/sql/relational-databases/security/securing-sql-server?view=sql-server-ver15
    )'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Keeping Your Oracle Database Secure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.oracle.com/cd/B28359_01/network.111/b28531/guidelines.htm#DBSEG009](https://docs.oracle.com/cd/B28359_01/network.111/b28531/guidelines.htm#DBSEG009)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'MongoDB Security Checklist:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.mongodb.com/manual/administration/security-checklist/](https://docs.mongodb.com/manual/administration/security-checklist/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Redis security:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://redis.io/topics/security](https://redis.io/topics/security)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Google Cloud Storage best practices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/storage/docs/best-practices#security](https://cloud.google.com/storage/docs/best-practices#security)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you know how to secure your cloud, it's time to have a look at some
    tools that you can leverage to test the security of your cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your cloud security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you must know already, all defensive security measurements *must* be tested
    to confirm whether the implemented controls are effective, but also to detect
    whether there is any potential hole that can be exploited by attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in this section, we will explore the best tools that you can use
    to monitor your cloud in terms of availability and vulnerabilities to confirm
    that your controls are effective, but also to determine whether they are in compliance
    with a given regulation.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Security Center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Azure Security Center** is a must if you have your cloud hosted with Microsoft,
    as it allows you to assess the security state of all your cloud resources, including
    servers, storage, SQL, networks, applications, and workloads.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, here, you can visualize your security state
    and even improve it by using Azure **secure score** recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Azure Security Center'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – Azure Security Center
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Azure Security Center enables you to view your compliance against
    a wide variety of regulatory requirements and perform ongoing assessments and
    reports to simplify compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Amazon CloudWatch** monitors cloud applications and converts the data into
    metrics and events to provide better visibility of AWS resources, applications,
    and services.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can also detect anomalous behaviors, configure alarms, execute
    automatic actions, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Features of Amazon CloudWatch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.9 – Features of Amazon CloudWatch
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding figure, Amazon CloudWatch is a great tool to enhance
    the monitoring and availability of your AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: AppDynamics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Acquired by **Cisco** in 2017, **AppDynamics** offers cloud-based monitoring
    to assess application performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, this tool was created to support even complex
    environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – AppDynamics'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.10 – AppDynamics
  prefs: []
  type: TYPE_NORMAL
- en: This tool also has application security monitoring that helps you to catch exploits
    and vulnerabilities faster.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus vulnerability scanner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**The Nessus vulnerability scanner** is considered by many as the most complete
    vulnerability scanner available. As seen in the following figure, Nessus enables
    you to run a plurality of preconfigured scans to make your life easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Nessus Scan Templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Nessus Scan Templates
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can also configure your own advanced scan to look for a particular
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: There is even a limited free version that you can use to test the power of this
    scan.
  prefs: []
  type: TYPE_NORMAL
- en: To get more information, you can visit their site:[https://es-la.tenable.com/products/nessus](https://es-la.tenable.com/products/nessus).
  prefs: []
  type: TYPE_NORMAL
- en: InsightVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**InsightVM** is a tool developed by **Rapid7** and enables the assessment
    of cloud and virtual infrastructures to find vulnerabilities and perform an accurate
    risk assessment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, the **default d****ashboard** provides you
    with a lot of information to keep you informed about your current vulnerabilities.
    For example, the dashboard serves as a visual reminder of the unsupported servers
    in your infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – InsightVM Default Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – InsightVM Default Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of this tool is that you can also use it to monitor other
    systems beyond your cloud, enabling you to have an all-in-one security dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Intruder** is a vulnerability scanner that helps you to check the status
    of your cloud by checking more than 10,000 vulnerabilities and security checks.
    As seen in the following figure, the GUI is very intuitive and presents all the
    useful data in a single dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it offers an option to sort the vulnerabilities based on criticality
    so you can always keep them in sight.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Intruder GUI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.13 – Intruder GUI
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many more performance monitors as well as vulnerability scanners
    that you can check, which have their own unique characteristics and features:
    **OpenVAS**, **Qualys** **Cloud Platform**, **AlienVault USM**, **Alibaba** **Website
    Threat Inspector**, **Amazon** **Inspector**, **Orca** **Security**, **Trend Micro**
    **Cloud One**, and many more.'
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, this chapter is already over, but the good news is that if you want to
    know more about **OpenVAS**, you can jump to [*Chapter 13*](B16290_13_Final_JC_ePub.xhtml#_idTextAnchor308),
    *Vulnerability Assessment Tools*, in which you will have an entire section dedicated
    to better understanding how to use this great tool.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of useful information to help you better understand
    all the aspects related to a secure cloud implementation.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the different types of cloud and their associated security
    and we also saw how to secure Kubernetes. We finished by showing you some basics
    about database security and all the different tools available to assess the security
    of your cloud (before the bad guys do).
  prefs: []
  type: TYPE_NORMAL
- en: But we are not done yet. In the next chapter, we are going even deeper into
    this topic by learning how to master the implementation of security using web
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the links to the best security practices provided by each cloud provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/security/](https://aws.amazon.com/security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.alibabacloud.com/trust-center](https://www.alibabacloud.com/trust-center)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/security/](https://cloud.google.com/security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ibm.com/cloud/security](https://www.ibm.com/cloud/security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/security/azure-security](https://docs.microsoft.com/en-us/azure/security/azure-security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
