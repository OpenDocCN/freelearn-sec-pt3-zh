- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Incident Response with Wazuh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is of utmost importance to have a rapid and efficient response plan in place
    to handle any security events that may arise in the ever-changing world of cybersecurity.
    For example, a sales employee opened up a malicious file with a name attached
    to an email pretending to be from an authorized business partner. This can result
    in a ransomware attack and bring down many mission-critical services. When such
    an incident happens, responding promptly can help to minimize the overall damage
    to the network. An efficient **incident response** (**IR**) can help businesses
    to promptly resume normal operations, thereby reducing the amount of downtime
    that occurs and the expenses connected with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to leverage the Wazuh platform and other
    Wazuh-supported third-party tools to build an effective IR system. We will cover
    the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to incident response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Wazuh active response?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocking unauthorized SSH access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolating an infected Windows machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocking RDP brute-force attack attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to incident response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IR is the process by which an organization handles situations such as data breaches,
    **distributed denial of service** (**DDoS**), and ransomware attacks. It is an
    effort to immediately identify an attack, mitigate the impacts of the attack,
    contain any damage caused by the attack, and fix the cause in order to reduce
    the risk of future attacks. In practice, IR refers to a collection of information
    security rules, processes, and tools that can be used to detect, contain, and
    remove intrusions. Let’s discuss the two most popular IR frameworks, the **National
    Institute of Standards and Technology** (**NIST**) and SANS, as shown in the following
    diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – NIST and SANS IR](img/B19549_5_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – NIST and SANS IR
  prefs: []
  type: TYPE_NORMAL
- en: Different methods of incident response process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various methods for developing a structured IR process. There are
    two IR frameworks and processes that are most popular: NIST and SANS. Let us see
    each of them in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: SANS six-step procedure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The SANS Institute recommends six processes for IR: *preparation*, *identification*,
    *containment*, *eradication*, *recovery*, and *lessons learned*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s elaborate on the SANS six-step procedure. SANS defines IR as having six
    stages. When an incident occurs, these six processes are repeated in a cycle.
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparation of systems and procedures
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identification of incidents
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Containment of attack
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eradication of intrusion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recovery from accidents, including system restoration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lessons gained and feedback applied to the next stage of planning
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let us understand each of the processes step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparation**: During the first step of preparation, you evaluate the efficiency
    of existing security measures and regulations. This entails doing a risk assessment
    to identify current vulnerabilities and the priority of your assets. Some of the
    important action items are listed here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a policy and plan for IR
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an IR team
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine and categorize important assets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquire the tools and technology required for incident detection and response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identification of incidents**: The emphasis is on the constant monitoring
    and identification of potential security issues using techniques such as **intrusion
    detection systems** (**IDSs**), **security incident and event management** (**SIEM**),
    **endpoint detection and response** (**EDR**), and log analysis. Some of the important
    steps are listed here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous surveillance for indications of security incidents
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use host-based and network-based IDSs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gather and examine logs from various sources
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of threat intelligence streams
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containment of attack**: When an incident occurs, this phase focuses on immediately
    isolating compromised systems, implementing temporary solutions or workarounds,
    and updating access restrictions and firewall rules to avoid additional compromise.
    This is where digital forensics plays a critical role.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Eradication of intrusion**: The incident’s root cause is recognized and treated
    here. Vulnerabilities that allowed the incident to occur are remedied, and policies
    and configurations are modified to prevent the same occurrence from occurring
    again.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Recovery from accidents, including system restoration**: This phase focuses
    on resuming the normal operation of affected systems, certifying their integrity,
    and ensuring that the incident has been thoroughly resolved. It also entails analyzing
    and upgrading IR processes depending on the incident’s lessons gained.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Lessons learned phase**: During this phase, organizations undertake a post-event
    review, documenting the incident, the reaction, and the lessons learned. The purpose
    is to develop IR plans and policies, as well as to offer IR team members additional
    training.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NIST four-step procedure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NIST defines IR as having four steps: *preparation*, *detection and analysis*,
    *containment, eradication, and recovery*, and *post-incident activity*. Let us
    understand each of these processes in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparation**: The NIST framework for IR emphasizes preparation as a critical
    component, much like the SANS framework does. During this phase, systems, procedures,
    and plans must be put in place in order to get ready for incidents. Organizations
    should have the following in place to be ready for incidents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A precise IR strategy
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearly defined roles and duties
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A successful communication strategy
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting plan
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the vital systems and resources
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing and updating the IR plan on a regular basis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detection and analysis**: During this phase, companies identify and examine
    occurrences to comprehend their extent and consequences. Making decisions regarding
    how to respond to an incident at this time is crucial. The following should be
    in place inside businesses in order to recognize and analyze occurrences effectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping an eye on escalation processes and mechanisms
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prompt incident detection and analysis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containment, eradication, and recovery**: The containment, eradication, and
    recovery stages in the NIST framework are similar to those in the SANS framework.
    The following should be in place inside organizations in order to contain, eliminate,
    and recover from incidents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Isolating the impacted systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminating the incident’s cause
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning to regular operations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post-incident activity**: In the NIST system, post-incident activity is the
    last phase. Organizations evaluate their IR procedure and evaluate the effects
    of incidents at this point. The following should be in place for organizations
    to examine and enhance the IR process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A procedure to evaluate the IR methodology
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A process for recording the lessons discovered
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A plan for bringing enhancements to the IR procedure into practice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Objectives of the NIST and SANS procedures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The objectives of the NIST and SANS IR frameworks are similar and offer an
    organized method for handling incidents. Nonetheless, the two frameworks differ
    in a few significant ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Both frameworks emphasize the significance of having a precise IR plan, defined
    roles and duties, and efficient communication when it comes to the preparation
    stage. On the other hand, having a reporting plan in place and identifying key
    systems and assets are given more weight in the NIST framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both frameworks concentrate on the prompt detection and examination of occurrences
    in terms of detection and analysis. But whereas the NIST framework is more concerned
    with monitoring systems and escalation protocols, the SANS approach prioritizes
    triage and prioritizing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will discuss the importance of automating IR activities.
  prefs: []
  type: TYPE_NORMAL
- en: Incident response automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Effective IR is time-sensitive and requires teams to identify threats and initiate
    an **incident response plan** (**IRP**) as soon as possible. A security team receives
    thousands of security alerts from security tools every day and hence it is difficult
    to manually analyze events or assess every alarm that security tools generate.
    These constraints are addressed via automated IR. In [*Chapter 4*](B19549_04.xhtml#_idTextAnchor116),
    *Security Automation and Orchestration Using Shuffle*, we learned how shuffle
    SOAR makes this possible by creating workflows, helping the security team with
    automated incident enrichment, automated observable analysis with TheHive tool
    integration, automating Wazuh activities, and many more. In this chapter, our
    focus will be on using Wazuh’s in-built capability called active response to perform
    IR. In general, IR automation can help the security team with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Immediate containment**: Once compromised systems are identified, automated
    IR systems should isolate them to stop threats from spreading'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic firewall rules**: In response to certain risks, the IR automation
    system can dynamically develop and deploy firewall rules that block malicious
    traffic or isolate vulnerable systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated account disabling**: Automated reaction steps can quickly disable
    compromised user accounts in the case of a security incident, blocking future
    unauthorized access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User access restrictions**: To improve the security posture, the IR automation
    system can impose access controls, such as removing users who indicate suspicious
    behavior or restricting access privileges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GeoIP blocking**: To strengthen defense against targeted attacks, automated
    IR can use GeoIP blocking rules to limit access from particular geographic regions
    known for malicious activity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can create tons of different use cases for automating IR. In the next section,
    we will practically deploy and test some of the automated IR using Wazuh’s active
    response capability.
  prefs: []
  type: TYPE_NORMAL
- en: Wazuh active response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main components of the Wazuh platform that enables automatic responses
    to security events and incidents is called active response. Security analysts
    can respond quickly to specific security threats or triggers identified by the
    Wazuh system by utilizing active response. By utilizing active response features,
    Wazuh enables organizations to respond to security incidents quickly and aggressively.
    With Wazuh active response, you may develop and execute automated responses against
    most security alerts. These responses may include executing custom scripts, banning
    IP addresses, or deactivating user accounts. Automating response actions makes
    sure that incidents with a high significance are dealt with and mitigated in a
    timely and consistent way. This is especially helpful when security teams don’t
    have a lot of resources and have to decide how to respond first.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Active response scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring active response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The working of Wazuh active response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active response scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wazuh provides pre-built Active response scripts for Linux, Windows, and macOS
    systems. Additionally, it also helps security professionals to write custom active
    response scripts based on specific requirements. The default active response scripts
    are stored in the following folders/directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Endpoint** | **Location (Directory/Folder)** |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | `C:\Program` `Files (x86)\ossec-agent\active-response\bin` |'
  prefs: []
  type: TYPE_TB
- en: '| Linux | `/``var/ossec/active-response/bin` |'
  prefs: []
  type: TYPE_TB
- en: '| macOS | `/``Library/ossec/active-response/bin` |'
  prefs: []
  type: TYPE_TB
- en: Table 5.1 – Location of active response scripts
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wazuh team and the entire community have done a brilliant job in building
    powerful active response scripts. Some of the popular scripts are mentioned in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operating System** | **Scripts** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Windows |'
  prefs: []
  type: TYPE_TB
- en: '`Netsh.exe`: Blocks an IP address using `netsh`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Restart-wazuh.exe`: Restarts the Wazuh agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Route-null.exe`: Adds an IP address to the null route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Ubuntu |'
  prefs: []
  type: TYPE_TB
- en: '`firewall-drop`: Adds an IP address to the IP tables deny list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start.sh`: Restarts the Wazuh agent or manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Route-null`: Adds an IP address to a null route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Table 5.2 – List of default active response scripts
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn how to set up active response on the monitored endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring active response
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Active response configuration needs to be done only on the Wazuh server. However,
    both the server and agent must have an active response script. Wazuh requires
    three things to execute an active response, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Active response script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<``command>` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<``active-response>` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active response script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Wazuh manager and agents have out-of-the-box active response scripts, supporting
    Linux, macOS, and Windows endpoints. We can also create custom active response
    scripts that run when an alert of a specific rule ID, rule group, or alert level
    triggers. All the default active response scripts are stored in the /var/ossec/active-response/bin
    directory. If you create a custom script, make sure you save them in the same
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: The <command> tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `<command>` tag specifies which script should be executed when a certain
    rule is triggered. The `<command>` elements for out-of-the-box active response
    scripts are automatically included in the Wazuh server `/var/ossec/etc/ossec.conf`
    instance type; therefore, it is not required to add them. Let me share an example
    of the `<``command>` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<name>`: Name of the command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<executable>`: Defines the script or executable that must be executed in response
    to a trigger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<timeout_allowed>`: Enables a timeout following a specified duration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The <active-response> tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Insert an `<active-response>` tag within the `<ossec_config>` element in the
    `/var/ossec/etc/ossec.conf` file of the same Wazuh server. The `<active-response>`
    block specifies the location and condition of command execution, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<command>`: It provides the configuration command. In our case, we have used
    `firewall-drop`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<location>`: It indicates the location where the command must be executed.
    We have three types of locations: `Local`, `Server`, or `Defined-agent`. The purpose
    of these options is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Server`: It executes the script on the Wazuh server.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Defined-agent`: It runs the script on a predefined agent. We require the `<agent-id>`
    tag to specify the ID of the Wazuh agent.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How Wazuh active response works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These active response scripts (hosted at `/var/ossec/active-response/bin`) are
    run on monitored endpoints by Wazuh in response to alerts triggered by a particular
    rule ID, level, or rule group. You can write a variety of scripts to start in
    response to a trigger, but you need to carefully plan these actions. Inadequate
    execution of rules and replies may make an endpoint more vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s talk about how Wazuh active response works:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event generated**: The Wazuh agent pushes the events to the manager. The
    Wazuh manager analyzes and triggers alerts based on the matched rule.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Event generated](img/B19549_5_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Event generated
  prefs: []
  type: TYPE_NORMAL
- en: '`<active-response>` block within the `<ossec_config>` tag in the Wazuh server
    with the `<rule_id>` tag and there is a matching security alert, it will trigger
    our newly created `<active-response>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<command>` block. Wazuh agents will have the default active response scripts;
    however, if you want to implement any custom active response, you need to write
    and save the code in the Wazuh agent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/var/ossec/active-response/bin` location. You can troubleshoot or verify the
    Wazuh active response by checking the logs present at `/var/ossec/active-response/active-response.log`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Executing active response on Wazuh agent](img/B19549_5_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Executing active response on Wazuh agent
  prefs: []
  type: TYPE_NORMAL
- en: '**Active response alert**: Once the active response script is executed, our
    Wazuh manager will take that alert from the Wazuh agent and show it to us on the
    security alert dashboard.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Active response log](img/B19549_5_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Active response log
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how Wazuh active response works and how to configure
    it, let’s cover some practical use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking unauthorized SSH access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SSH attacks** are among the most prevalent types of attacks against servers
    accessible via the internet. Automated bots that regularly monitor the internet
    for SSH servers with inadequate security setups carry out the major share of SSH
    attacks. Because attack sources are frequently scattered globally, with no single
    country dominating, it is a global cybersecurity threat. Organizational losses,
    data breaches, and compromised servers are all possible outcomes of successful
    SSH attacks. In this section, we will learn how to automatically block unauthorized
    SSH access to a victim’s machine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up active response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this lab setup, we require three things: an Ubuntu Server with a Wazuh agent
    installed, an attacker machine (Kali Linux), and, finally, our Wazuh server (we
    have used a Virtual Machine OVA file for Lab purposes only). The lab is designed
    as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Lab setup: Blocking unauthorized SSH access using Wazuh active
    response](img/B19549_5_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5 – Lab setup: Blocking unauthorized SSH access using Wazuh active
    response'
  prefs: []
  type: TYPE_NORMAL
- en: In this lab, we are going to use the `firewall-drop` scripts as the default
    active response script for the monitored Ubuntu agent. Next, we need to modify
    the active response script to be triggered when an unauthorized SSH connection
    is detected.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Wazuh active response
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to set up the Wazuh platform to block unauthorized SSH access attempts,
    we need to execute the firewall-drop active response script once Wazuh rule `5710`
    is triggered. We need to take the steps that follow to accomplish this task.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the active response on the Wazuh manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have learned, `<active-response>` executes a specific `<command>` block.
    In our case, we are utilizing the firewall-drop active response, which executes
    the `firewall-drop` command. We can find both the `<command>` and `<active-response>`
    blocks in the `ossec.conf` file located at `/var/ossec/etc`. We want to make sure
    the `<active-response>` block for firewall-drop is executed once rule `5710` is
    triggered. Wazuh rule `5710` represents `sshd: Attempt to login using a non-existent
    user`. The final modified `<command>` and `<active-response>` blocks are shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<executable>`: It is set to `firewall-drop`, which indicates the name of the
    script located at `/var/ossec/active-response/bin` of the Wazuh agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<location>`: It is set to `local`, which indicates it only runs the script
    on the monitored endpoint that generated the alert'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<timeout>`: It is set to 60 seconds and specifies that for 60 seconds the
    active response action will be effective'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restarting the Wazuh manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order for the Wazuh manager to implement the configuration change, we need
    to restart the manager, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the unauthorized SSH brute-force attack, you can log in to a Kali Linux
    machine and run the following-mentioned `hydra` tool command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hydra`: This is the name of the tool used to perform the SSH brute-force attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-l voldemort`: The `-l` flag is used to indicate the username for the SSH
    login attempt. In this case, the username is `voldemort`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P <PASSWORD_TEXT_FILE>`: The `–P` flag is used to specify the path to the
    text file containing the list of passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<WAZUH_AGENT_IP>`: This represents the IP address of the Wazuh agent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SSH`: This specifies the service that `hydra` will attempt to attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you hit **Enter**, the SSH brute-force attack will be executed as shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 –  Launching an SSH brute-force attack](img/B19549_5_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Launching an SSH brute-force attack
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, once the SSH brute-force attack is executed, we will see two alerts: first,
    an SSH unauthorized access attempt, and second, an active response blocking user
    access. To visualize the alerts, go to the Wazuh manager and navigate to **Security
    alerts**. You will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Wazuh alerts after the SSH brute-force attack](img/B19549_5_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Wazuh alerts after the SSH brute-force attack
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look into the first alert, **ssh: Attempt to login using a non-existing
    user**, as shown in the following figure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Wazuh alert – ssh: Attempt to login using a non-existing user](img/B19549_5_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8 – Wazuh alert – ssh: Attempt to login using a non-existing user'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`5710`: This represents the Wazuh rule ID `5710`, **sshd: Attempt to login
    using a** **non-existing user**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.srcuser: voldemort`: This represents the username of the unauthorized
    account. In this case, it is `voldemort`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will look into an active response alert triggered by Wazuh rule ID
    `5710`, as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Security alert – Host Blocked by firewall-drop Active Response](img/B19549_5_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Security alert – Host Blocked by firewall-drop Active Response
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data.parameters.alert.data.srcuser: voldemort`: This represents the username
    blocked by the firewall-drop active response script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this use case, we have automatically blocked any unauthorized SSH attempt
    to our Ubuntu server running the Wazuh agent. In the next section, we will learn
    how to automatically isolate a Windows machine after getting infected by malware.
  prefs: []
  type: TYPE_NORMAL
- en: Isolating a Windows machine post-infection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of isolating a compromised endpoint is an essential part of IR
    in a SOC. In order to stop the threat from spreading and inflicting further damage,
    you must isolate the infected device or system from the network immediately. Also
    remember that it is important to examine the severity of the compromise, the value
    of the asset, and the potential impact on the business before deciding on an isolation
    strategy; isolation is not a silver bullet. A ransomware attack is an essential
    attack scenario in which isolation is a crucial step. Ransomware is a type of
    malware that encrypts the data of a victim and demands payment for the decryption
    key. It frequently spreads quickly throughout a network, potentially affecting
    many endpoints. In this section, we will isolate a Windows machine post-infection
    by malware. We will utilize the Wazuh active response capability to create an
    automatic outbound rule to block all outgoing traffic. In this section, we will
    cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Windows machine with a batch and PowerShell file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Wazuh manager with VirusTotal and active response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this use case, we are going to write a custom active response script to
    isolate a Windows machine. In order to demonstrate this detection, we need the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Windows 10 or 11 machine with the Wazuh agent installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell version 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirusTotal integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PowerShell script to block all outgoing traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Windows batch file (active response script) to trigger a PowerShell script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirusTotal integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we will integrate the VirusTotal platform with the Wazuh manager.
    VirusTotal is an online platform that aggregates several antivirus software and
    detects malicious content and false positives. We will cover three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up a VirusTotal account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate VirusTotal with Wazuh.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file integrity rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To complete all three steps, you can follow the steps described in the *VirusTotal
    integration* section of [*Chapter 2*](B19549_02.xhtml#_idTextAnchor042), *Malware
    Detection* *Using Wazuh*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Windows machine with a batch and PowerShell file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this step, we will set up our Windows machine with an active response script.
    We will use a batch file to create an active response script. Next, to create
    a Windows Firewall rule to block all outgoing traffic, we need a PowerShell script.
    This PowerShell script will only be triggered when the batch file is executed.
    To complete the entire process, follow these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell version 7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Log in to your Windows 10 or 11 machine and install PowerShell version 7 from
    the official website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3)'
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded and installed, you can find the executable at `C:\\Program Files\\PowerShell\\7\\"pwsh.ex`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a batch file as an active response script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, let’s create our active response script first. This will be done by using
    a Windows batch script, which will then trigger a PowerShell script to block all
    outgoing traffic from a Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write an active response script in Notepad and save it with the name `fw.cmd`
    at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Writing a PowerShell script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, write a PowerShell script in Notepad and save it with name `wfblock.ps1`
    at the same location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ruleName = "BlockOutgoingTraffic"`: It creates a `$ruleName` variable with
    the value `BlockOutgoingTraffic`. This will create a name for the Windows Firewall
    rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$existingRule`: This will check whether the rule already exists. If it doesn’t
    exist, then create a new rule to block all outgoing traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you set up the Windows machine configuration, you need to set up the Wazuh
    manager with an active response block and Wazuh rules.
  prefs: []
  type: TYPE_NORMAL
- en: Active response block in the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to make sure, we need to modify or add the `<command>` and `<active-response>`
    blocks under the `/``var/ossec/etc/conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, make sure the `<executable>` tag has `fw.cmd`, which is the same as the
    Windows batch file we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, we need to add an `<active-response>` block, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<command>` is using the Windows firewall command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<rules_id>` is selected as `87105` so that it will trigger when VirusTotal
    detects any malware sample. Wazuh rule `87105` defines the VirusTotal alert related
    to the sample file against the defined number of antivirus engines. To learn more,
    you can check the `0490-virustotal_rules.xml` Wazuh rule file under the **Management**
    tab of the Wazuh manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to test this use case, we will use a malware sample from [eicar.org](http://eicar.org).
    You can download it using this URL: [https://www.eicar.org/download-anti-malware-testfile/](https://www.eicar.org/download-anti-malware-testfile/).'
  prefs: []
  type: TYPE_NORMAL
- en: To make sure VirusTotal detects our testing malware sample, you need to save
    it in the document folder of a Windows 10/11 machine. Once you save the file,
    a file integrity check will be executed, and it will trigger VirusTotal to scan
    the sample. You can also find the corresponding alerts on the Wazuh dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Visualizing VirusTotal alerts on the Wazuh manager](img/B19549_5_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Visualizing VirusTotal alerts on the Wazuh manager
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at the `full.log` and rule description as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Visualizing a Wazuh alert about the eicar.com(1) file](img/B19549_5_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Visualizing a Wazuh alert about the eicar.com(1) file
  prefs: []
  type: TYPE_NORMAL
- en: We can also check the second alert, `data.virustotal.source.file` data field
    and rule ID `87105`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Expanding a VirusTotal security alert on the Wazuh manager](img/B19549_5_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Expanding a VirusTotal security alert on the Wazuh manager
  prefs: []
  type: TYPE_NORMAL
- en: Now, our `<active-response>` block will be executed as it is tied with rule
    ID `87105`, which belongs to the VirusTotal alert, and our command, `fw.cmd`,
    will be executed on a Windows 10 machine. This `fw.cmd` active response script
    will trigger a PowerShell script and block all the outgoing traffic, as you can
    see in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Status of newly created BlockOutgoingTraffic rule on a Windows
    machine](img/B19549_5_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Status of newly created BlockOutgoingTraffic rule on a Windows
    machine
  prefs: []
  type: TYPE_NORMAL
- en: So, we have successfully tested how Wazuh active response automatically blocks
    all outgoing traffic when our Windows machine is compromised by malware. This
    was possible by using our custom PowerShell script to create a security rule in
    the Windows Firewall service. In the next section, we will use active response
    to block RDP brute-force attack attempts.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking RDP brute-force attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to Sophos, in the first half of 2023, adversaries leveraged **Remote
    Desktop Protocol** (**RDP**) in 95% of attacks, increased by 88% from 2023\. RDP
    is a Microsoft-developed proprietary protocol that allows users to connect to
    and remotely operate another computer or device via a network connection. Attackers
    employ automated software to try many login and password combinations in order
    to obtain unauthorized access to systems via RDP. Mitigating such risks involves
    proactive measures as well as quick action to block malicious IP addresses that
    try these assaults. In this section, we will utilize Wazuh active response to
    block the attacker’s IP address against an RDP brute-force attack. We will cover
    the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Windows agent with an active response script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Wazuh server with a rule and active response script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this use case, we will use the default Wazuh active response script of a
    Windows machine called `netsh.exe`, located at `C:\Program Files (x86)\ossec-agent\active-response\bin`.
    We don’t need to create any custom script for this. In order to make this entire
    use case work, we will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 or Windows Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux for testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Windows agent with an active response script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we need to add the `netsh` command and the `netsh` active response
    block to the Wazuh agent’s `C:\\Program Files (``x86)\\ossec-agent\\ossec.conf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`netsh.exe`: This is the network shell script located at `C:\Program` `Files
    (x86)\ossec-agent\active-response\bin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<rules_id>`: This indicates that the active response `netsh` script will be
    executed when rule `100100` is triggered. We will be creating rule `100100` to
    detect RDP brute-force attacks on the Wazuh server in the next step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the `ossec.conf` file and restart the Wazuh agent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Restart the Wazuh agent on the Windows Server](img/B19549_5_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Restart the Wazuh agent on the Windows Server
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Wazuh Server with a brute-force attack rule and active response script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want our Wazuh to execute the active response `netsh` script against a brute-force
    attack and hence, we will write a Wazuh rule to detect RDP login attempts with
    `level="10"`, `frequency="3"`, and `timeframe="120"`. This rule will be triggered
    when three failed login attempts are detected within 120 seconds of the timeframe.
    The following-mentioned rule block needs to be added to the `local_rules.xml`
    file located in the `/``var/ossec/etc` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_matched_sid>`: This option is similar to `<if_sid>` but it will only match
    if the rule ID has been triggered in a certain period of time. As we want Wazuh
    to detect the same alert three times within 120 seconds of the timeframe, this
    is specific to our needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rule ID `60122` under `<if_matched_sid>`: This rule is used to track multiple
    Windows event IDs related to login failure. To learn more about this rule and
    its parent ruleset, visit this page: [https://github.com/wazuh/wazuh-ruleset/blob/master/rules/0580-win-security_rules.xml](https://github.com/wazuh/wazuh-ruleset/blob/master/rules/0580-win-security_rules.xml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, add the same `netsh` command and active response block to the Wazuh server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the `ossec.conf` file and restart the Wazuh manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To emulate this attack, we will launch an RDP brute-force attack using the
    hydra tool. The Hydra tool comes pre-built with Kali Linux; however, if you want
    to install it manually on some other platform, you can download it using this
    link: [https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra).
    You can run the following command to execute an RDP brute-force attack on your
    Windows Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-l roger`: This parameter specifies the username `roger` that Hydra will use
    for the brute-force attack. Change `roger` to the username you want to target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P pass.txt`: Indicates the `pass.txt` password file, which contains a list
    of passwords. Hydra will repeatedly try each password for the chosen username
    by looping over this file. Put your password list’s actual filename and directory
    in place of `pass.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`192.168.29.77`: Represents the IP address of the target system where the RDP
    service is running. Replace this with the actual IP address you want to target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rdp`: Indicates which service protocol to target, which is RDP in this instance.
    Hydra will make an effort to access the RDP service by logging in using the password
    list and the supplied username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can view the alerts on the Wazuh dashboard. Go to the `100100`. As you can
    see in the following screenshot, rule `100100` has been triggered from our Windows
    Server with IP address `192.168.29.77`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Wazuh alert showing an RDP brute-force attack](img/B19549_5_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Wazuh alert showing an RDP brute-force attack
  prefs: []
  type: TYPE_NORMAL
- en: Immediately, the Wazuh active response `Netsh` script is activated on the Windows
    Server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Wazuh alert showing netsh active response](img/B19549_5_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Wazuh alert showing netsh active response
  prefs: []
  type: TYPE_NORMAL
- en: To test whether the attacker machine is blocked or not, you can try launching
    an RDP session using a Remote Desktop client; it should not work and should give
    an error, as shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Remote Desktop connection failed](img/B19549_5_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Remote Desktop connection failed
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have learned how to block RDP attack attempts using Wazuh’s active
    response feature.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about IR phases, Wazuh’s active response capability,
    and some important use cases. We learned how Wazuh’s active response module actively
    blocks unauthorized SSH and RDP access attempts. Additionally, we also learned
    about Wazuh’s capability to isolate infected Windows machines promptly upon detection
    of malware.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to conduct threat hunting using Wazuh
    modules. We will learn the importance of log data analysis in Wazuh for better
    threat investigation and hunting. We will also utilize the MITRE ATT&CK framework
    to streamline our threat-hunting process.
  prefs: []
  type: TYPE_NORMAL
