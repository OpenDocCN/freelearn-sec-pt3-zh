- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Malware Detection Using Wazuh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Malware** is short for **malicious software**, and it is installed on a computer
    without the user’s permission. Attackers can use malware to encrypt, steal computer
    data, or spy on system activity. **Malware detection** is a process of monitoring
    and analyzing computer systems and networks for the presence of malicious software
    and files. Security products detect malware by matching the signature of known
    malware samples and also by monitoring anomalous behavior. However, some malware
    can evade detection using multiple techniques once it enters the system. Wazuh
    utilizes a wide range of approaches to address and counter those techniques to
    detect malicious files and suspicious activities. In this chapter, we will learn
    about different Wazuh modules to detect malicious files and integrate some third-party
    tools to enhance its detection capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Types of malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh’s capabilities for malware detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware detection using **file integrity** **monitoring** (**FIM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirusTotal** Integration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CDB list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Windows Defender logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating **System Monitor** (**Sysmon**) to detect fileless malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will utilize a real malware sample for testing; please make
    sure your system is running in isolation or in a controlled environment.
  prefs: []
  type: TYPE_NORMAL
- en: Types of malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Malware can take many forms, each with its own distinct capabilities and objectives.
    Some common types of malware include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viruses**: Malware that attaches itself to legitimate files and programs
    and spreads by infecting other files. Viruses can cause damage by corrupting or
    destroying data. Examples include ILOVEYOU, Mydoom, and Anna Kournikova.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Worms**: Malware that copies itself and spreads through networks by taking
    advantage of security holes to infect other connected systems. Examples include
    Blaster, Mydoom, and Slammer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trojans**: Malicious software that looks like legitimate files or programs.
    Once installed, Trojans can let cybercriminals in without permission, which can
    lead to data theft, espionage, or more damage. Examples are Zeus (designed to
    steal financial information such as credit or debit cards), SpyEye (targets online
    banking information), and Poison Ivy (controls the victim machine remotely).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ransomware**: Malware that encrypts the data of a victim, making it impossible
    to access until a ransom is paid to the attackers. Businesses and people can suffer
    a lot from ransomware attacks. Examples include Locky, WannaCry, and Ryuk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spyware**: Malware that is designed to covertly monitor and collect information
    from an infected system, including sensitive data, passwords, and browsing habits.
    Examples include CoolWebSearch (delivered through pop-up ads) and FinSpy (used
    by law enforcement agencies to capture screenshots and intercept communications).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rootkits**: Malware that gets privileged access to a system without being
    noticed. This lets attackers hide their presence and keep control of the system
    that has been compromised. Examples include Sony BMG Rootkit, Alureon, and ZeroAccess.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware is usually spread through different ways, such as phishing emails, malicious
    downloads, infected websites, and external devices such as USB drives that have
    been hacked. Cybercriminals are always changing their methods to avoid being caught
    and take advantage of new weaknesses. Now, let’s learn about some of the important
    Wazuh capabilities for malware detection.
  prefs: []
  type: TYPE_NORMAL
- en: Wazuh capabilities for malware detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wazuh offers several capabilities that contribute to its effectiveness in detecting
    malware. This is accomplished through the use of a combination of log analysis,
    intrusion detection, and threat intelligence. It also provides real-time alerting,
    event correlation, and the ability to execute custom scripts for automated reaction
    activities, making it a powerful tool for effectively identifying and responding
    to malware attacks. The following are some of Wazuh’s methods for malware detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Threat detection rules and FIM**: In this method, Wazuh utilizes its built-in
    capability to detect any critical file modification. Some of the capabilities
    are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh employs a set of predefined, continuously monitored threat detection principles.
    The purpose of these principles is to identify suspicious activities, events,
    and patterns that may indicate malware infections or security breaches.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh’s malware detection relies heavily on FIM. It monitors modifications to
    files and directories, such as additions and deletions. Wazuh generates an alert
    when an unauthorized or unanticipated change occurs, which may indicate malware
    activity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rootkit behavior detection**: Wazuh uses the rootcheck function to detect
    anomalies that might indicate the presence of malware in an endpoint:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rootkits are a form of malware that can conceal their presence and other malicious
    actions on a compromised system. Wazuh identifies rootkit-like activities using
    behavior-based detection techniques.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh searches for suspicious system behavior, such as unauthorized privilege
    escalation, attempts to conceal files or processes, and other activities that
    are typically associated with rootkits. When such conduct is identified, an alert
    is triggered.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirusTotal integration**: Wazuh detects malicious files through integration
    with VirusTotal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirusTotal is a web-based service that scans files and URLs for potential hazards
    using multiple antivirus engines and threat intelligence sources. Wazuh incorporates
    VirusTotal to improve its malware detection capabilities.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When Wazuh encounters a file or URL that it suspects to be malicious, it can
    automatically submit the sample for analysis by VirusTotal. The result includes
    findings from multiple antivirus engines, which are then integrated into Wazuh’s
    alerting mechanism. If the file is identified as malicious by multiple engines,
    the confidence in the alert is increased.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YARA integration**: Wazuh detects malware samples using YARA, which is an
    open-source tool that identifies and classifies malware artifacts based on their
    binary patterns:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YARA is a powerful tool that lets you write your own rules to find malware and
    certain patterns in files and processes. Wazuh works with YARA, so users can make
    their own rules for YARA to use to find malware that fits their needs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Security professionals can use YARA integration to create custom signatures
    that detect specific malware strains or behaviors that are not covered by the
    normal Wazuh rules. These custom rules can be added to the Wazuh ruleset and used
    to monitor the environment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand some important malware detection capabilities of the
    Wazuh platform, we can start to learn about different use cases with Wazuh. In
    the next section, we will learn how to detect malware using the FIM module of
    Wazuh.
  prefs: []
  type: TYPE_NORMAL
- en: Malware detection using FIM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a system gets compromised by malware, it may create new files or modify
    existing files, such as the following file types:'
  prefs: []
  type: TYPE_NORMAL
- en: Executable files (`.exe`, `.dll`, `.bat`, and `.vbs`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files (`.cfg` and `.ini`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary files (`.tmp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registry entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log files (`.log`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payload files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch scripts (`.bat`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell (`.ps1`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specially crafted documents with a malicious payload (`.doc`, `.xls`, and `.pdf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this information, we can create an FIM rule in Wazuh to detect any file
    changes. However, we will get a high number of false positive alerts, too. To
    solve this problem, we can focus on a specific directory or folder. We will learn
    more in this section.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll learn how to create Wazuh rules to detect some of the
    common malware patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and testing FIM on an Ubuntu machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting suspicious files on a **PHP** server using the FIM module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and testing FIM on an Ubuntu machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FIM is a technology that monitors the integrity of system and application files.
    It safeguards sensitive data, application, and device files by routinely monitoring,
    scanning, and confirming their integrity. It works by detecting changes to mission-critical
    files in the network and as a result, it brings down the risk associated with
    data breaches.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that Wazuh has a built-in capability for FIM. This is possible
    because Wazuh uses an **Open Source HIDS Security** (**OSSEC**) agent. OSSEC is
    a free, open-source host-based intrusion detection system. When a user or process
    creates, modifies, or deletes a monitored file, the Wazuh FIM module initiates
    an alert. Let’s understand a file integrity check by setting up a FIM module on
    an Ubuntu machine. In order to test this use case, you need to follow these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To test the FIM use case, we would require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Wazuh manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ubuntu machine (with the Wazuh agent installed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 1 – Setting up the Wazuh agent on an Ubuntu machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the FIM module is enabled on the Wazuh agent. The configuration
    of the FIM module is present in the `<syscheck>` tag under the `ossec.conf` file
    located at `/var/ossec/etc`. We only need to add directories (to be monitored)
    under the `<syscheck>` block. The following configuration will monitor specified
    files and directories for any types of changes or modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the preceding configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<disabled>` tag is set to `no` to enable the syscheck module on Wazuh.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<scan_on_start>` tag is set to `yes` to conduct the initial scan when the
    Wazuh agent shows up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<frequency>` tag is set to `720` to conduct a file monitoring scan every
    720 minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<directories>` tags talk about all the directories to monitor. In this
    example, we’re monitoring important system directories such as `/etc`, `/bin`,
    `/sbin`, `/lib`, `/lib64`, `/usr/lib`, `/usr/lib64`, `/var/www`, `/var/log`, and
    `/var/named`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ignore>` tags indicate files or directories to ignore during the monitoring
    process. These are common system files that are not generally important for FIM
    analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 2 – Restart the Wazuh agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the configuration changes to take effect, we need to restart the `wazuh-agent`
    service as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Step 3 – Visualizing the alerts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To visualize the alerts, you can navigate to **Security Alerts** or the **Integrity
    Monitoring** module in the Wazuh dashboard and check for the file-added alerts
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Visualizing the file-added alert on the Wazuh manager](img/B19549_2_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Visualizing the file-added alert on the Wazuh manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`decoder.name: syscheck_new_entry`: This field represents a new entry related
    to system checks or FIM that have been detected by the Wazuh agent. In this case,
    a file has been added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full.log: File ''/root/infectedfile.txt''added`: This represents that a new
    file called `infectedfile.txt` has been added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this use case, we have learned to detect file changes in `/root` using the
    FIM module of Wazuh. In the next section, we will learn to detect possible malware
    in the PHP server.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting suspicious files in the PHP server using the FIM module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP is known for its simplicity, speed, and flexibility. Currently, there are
    more than 33 million websites that use PHP. The most common PHP file extensions
    are `.php`, `.phtml`, `.php3`, `.php4`, `.php5`, `.php7`, and `.phps`.
  prefs: []
  type: TYPE_NORMAL
- en: These files are commonly found in the `/var/www/html/`, `/var/www/public_html/`,
    and root directory. In order to test possible malware using the FIM module in
    the PHP server, you need to follow these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To detect possible malicious files in the PHP server using Wazuh’s FIM module,
    you need the following system requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The Wazuh manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ubuntu server, which should have the PHP server package and Wazuh agent installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Wazuh rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will create a Wazuh rule to detect file creation and modification on the
    PHP server. We will add different types of PHP file extensions under the `<field>`
    tag of the Wazuh rule. We will cover this use case along with testing and finally,
    we will visualize the alerts on the Wazuh manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Wazuh rule to detect PHP file creation/modification
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create a Wazuh rule, go to `custom_fim.xml` and add the following rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this code down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>554</if_sid>`: This tag represents a list of rule IDs. This rule will
    match when a rule ID on the list has previously been matched. In this case, rule
    ID `100500` will match when rule ID `554` gets triggered. Rule ID `554` is fired
    when a file is added, and rule ID `550` represents the change in the integrity
    checksum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<field name="file" type="pcre2">(?i).php$|.phtml$|.php3$|.php4$|.php5$|.phps$|.phar$|.asp$|.aspx$|.jsp$|.cshtml$|.vbhtml$</field>`:
    This is used as a requisite to trigger the rule. It will check for a match in
    the content of a file extracted by the decoder. In this case, the content is the
    list of all possible PHP file extensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To test our FIM rule, we will add a new file called `antivirusupdate.php` in
    the root directory using the `touch` command as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2  – Creating  a blank file in the root directory](img/B19549_2_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Creating a blank file in the root directory
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To visualize the FIM alerts, navigate to the **Security Alerts** module of the
    Wazuh dashboard and you will find the alert as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Visualizing possible web shell alerts on the Wazuh manager](img/B19549_2_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Visualizing possible web shell alerts on the Wazuh manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`full.log`: `File ''/root/antivirusupdate.php'' added Mode`: This represents
    the full logs on the Wazuh manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rule.description`: This represents the triggered rule ID. In this case, the
    rule ID is 100500'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This FIM rule may lead to a lot of false positive alerts on the Wazuh dashboard.
    To overcome this situation, you can fine-tune your `<syscheck>` block by adding
    more `<``ignore>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will detect malicious files using the CDB list in the
    Wazuh manager.
  prefs: []
  type: TYPE_NORMAL
- en: The CDB list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CDB list in Wazuh serves as a repository for distinct hashes or checksums
    of malicious and benign files. The Wazuh security platform can precisely compare
    the files’ cryptographic representations on a system and those kept in the CDB.
    The CDB list consists of lists of users, file hashes, IP addresses, domain names,
    and so on. In this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The workings of the CDB list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Wazuh server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Windows endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The workings of the CDB list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can save a list of users, file hashes, IP addresses, and domain names in
    a text file called a CDB list. A CDB list can have entries added in a `key:value`
    pair or a `key:only` format. Lists on CDBs can function as allow or deny lists.
    Wazuh processes the CDB list in the process mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hash generation**: CDB lists consist of hashes of both good and bad content
    such as IP addresses, malware hashes, and domain names. A hash is a unique fixed-length
    value generated based on the CDB list content.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**File comparison**: Wazuh computes file hashes during a system scan and compares
    them to the CDB entries.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identification**: Wazuh marks a file as possibly malicious if its hash matches
    a known malicious hash in the CDB.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Alerts and reactions**: Based on the set policies, Wazuh has the ability
    to trigger alerts or responses upon detection.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve learned about how Wazuh processes the CDB list. Now, let’s go through
    the first practical use case of the CDB list wherein we will detect malicious
    IP addresses using the CDB list.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Wazuh server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to set up our Wazuh server with the CDB list of malware hashes and
    create the required rules to trigger alerts when a file with a hash matches CDB
    malware hashes. We need to follow these steps to accomplish that:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/ossec/etc/lists` directory on the Wazuh server. To add a new CDB list for
    malware hashes, create a new file with the name `malware-hashes` using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: nano /var/ossec/etc/lists/malware-hashes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.4 – The CDB list of malware hashes](img/B19549_2_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The CDB list of malware hashes
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding image, we have the hash of three types of malware: `mirai`,
    `Xbash`, and `fanny`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`<ruleset>` block, you may add a reference to the CDB list in the `/var/ossec/etc/ossec.conf`
    Wazuh manager configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`/var/ossec/etc/rules/local_rules.xml` file. When Wazuh finds a match between
    the MD5 hash of a recently created or updated file and a malware hash in the CDB
    list, this rule triggers. When an event occurs that indicates a newly created
    or modified file exists, rules `554` and `550` will be triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Restart the manager**: We have to restart the Wazuh manager to apply the
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have successfully created a CDB list of malware hashes and security rules
    to compare it with the hash of each file in the Wazuh agent. In the next step,
    we will set up a Windows endpoint to detect any file changes so that it can trigger
    the CDB list to perform a comparison of file hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Windows endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to set up our Windows endpoint to detect file changes. We will configure
    `<syscheck>` to track file changes in the `Downloads` folder. You can choose any
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this code down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_all="yes"`: This ensures that Wazuh verifies every aspect of the file,
    such as its size, permissions, owner, last modification date, inode, and hash
    sums'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`realtime="yes`”: Wazuh will perform real-time monitoring and trigger alerts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, restart the Wazuh agent using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the Mirai malware sample and put it in the area that the FIM module
    is monitoring to make sure everything is working right. In our case, it is a `Downloads`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be careful as these malicious files are harmful, so only use them for tests.
    Do not put them in places where they will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following PowerShell command to download the Mirai malware sample and
    store it in the `Downloads` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wazuh immediately detects the malware sample. As you can see in the following
    figure, we have an alert with the `Known Malware File Hash is` `detected` description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Know Malware File Hash is detected](img/B19549_2_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Know Malware File Hash is detected
  prefs: []
  type: TYPE_NORMAL
- en: 'If you expand the alert, you can see the full log, rule ID, and other information
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Visualizing the Mirai malware alerts](img/B19549_2_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Visualizing the Mirai malware alerts
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rule.description:` `Know Malware File Hash is detected`: This represents the
    description of rule ID 11002'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full.log:` `File ''c:\users\administrator\downloads\mirai'' modified`: This
    shows the full log information with the location, mode, attributes, and old/new
    modifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have successfully tested the CDB list to detect known malware using file
    hashes stored in the form of `key:value` pairs within the CDB list. Moreover,
    there are some more use cases of the CDB list such as detecting unknown users
    and detecting blacklisted IP addresses. In the next section, we will learn to
    detect malware using the VirusTotal API.
  prefs: []
  type: TYPE_NORMAL
- en: VirusTotal integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VirusTotal is a free online service that analyzes files and URLs to detect malware
    and other malicious content. It uses over 70 types of antivirus software and URL
    blocklisting engineers to provide detailed information about the submitted file,
    URL, or IP address. VirusTotal allows users to contribute their own findings and
    submit comments on files and URLs. These contributions can help improve the service’s
    accuracy and provide valuable insights to other users. VirusTotal provides an
    API with multiple paid plans. However, it also has a free plan where you can request
    four lookups per minute with a daily quote of 500 lookups.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this use case of malware detection, we will use a FIM module to monitor
    the changes and then trigger VirusTotal to scan the files in that directory. We
    will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up a VirusTotal account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate VirusTotal with the Wazuh manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Wazuh rule on the Wazuh manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a FIM check on Ubuntu Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing malware detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up VirusTotal account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to set up the VirusTotal account, simply visit [VirusTotal.com](http://VirusTotal.com)
    and sign up. After signing up, go to your profile and click **API key**. Copy
    the API key safely as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Retrieving the VirusTotal API key](img/B19549_2_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Retrieving the VirusTotal API key
  prefs: []
  type: TYPE_NORMAL
- en: Integrate VirusTotal with the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wazuh has prebuilt VirusTotal integration scripts located in `/var/ossec/integrations`.
    Now, all you have to do is to call this VirusTotal script in `/var/ossec/etc/ossec.conf`
    file, and to do that, add a `<integration>` tag as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this code down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<api_key>`: This represents the VirusTotal API key. You need to replace the
    `YOUR_VIRUS_TOTAL_API_KEY` text with your API key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<rule_id>100200,100201</rule_id>`: This represents the rule that triggers
    the VirusTotal inspection. In this case, we have rule ID 100200 and `100201`.
    We haven’t created these rules yet; we will write these rules to detect file changes
    in a specific folder of the endpoint. This will be covered in the next step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Wazuh rule on the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we want to trigger VirusTotal scanning only when any file is changed,
    added, or deleted to avoid tons of false positive alerts. We will create an FIM
    rule with an ID of `100200` and `100201` in the `local_rule.xml` file located
    at `/var/ossec/etc/rules` in the Wazuh manager. The Wazuh rules can be written
    as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<if_sid>550</if_sid>`: This specifies a condition that triggers this rule.
    It’s triggered when the event ID (SID) `550` occurs. The Wazuh rule `550` indicates
    that the integrity checksum changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<if_sid>554</if_sid>`: This rule triggers when the event ID `554` occurs.
    The Wazuh rule indicates that a file has been added to the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up an FIM check on Ubuntu Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want the Wazuh agent to first detect any file changes in the `/root` directory
    and this will trigger the Wazuh rule ID `100200` and `100201`. To enable syscheck
    to detect any file changes in the `/root` directory, we need to make the following
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<syscheck>` block in the `/var/ossec/etc/ossec.conf` Wazuh agent configuration
    file. Make sure that `<disabled>` is set to `no`. This enables the Wazuh FIM to
    monitor directory changes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/root` directory to enable an FIM check of `<directories check_all="yes"`
    `report_changes="yes" realtime="yes">/root</directories>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ossec.conf` file, we need to restart the Wazuh agent with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes the Wazuh agent restart process. In the next step, we will test
    VirusTotal using a sample malware file.
  prefs: []
  type: TYPE_NORMAL
- en: Testing malware detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test malware detection using VirusTotal, we will use the **European Institute
    for Computer Antivirus Research** (**EICAR**) test file. An EICAR test file is
    used to test the response of antivirus software and it is built by the European
    Institute for Computer Antivirus Research (hence, EICAR) and the **Computer Antivirus
    Research Organization** (**CARO**). You can download the test file from their
    official website: [https://www.eicar.org/download-anti-malware-testfile/](https://www.eicar.org/download-anti-malware-testfile/).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are testing this for a Windows machine, you need to disable the **Enhanced
    security** option on Google Chrome and **Real-time protection** on Windows Defender
    to allow the download.
  prefs: []
  type: TYPE_NORMAL
- en: Once the EICAR file is downloaded, move it to the root directory.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To view the alerts, navigate to the **Security Alerts** module of the Wazuh
    dashboard and you should find the alerts as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Visualizing the VirusTotal alert on the Wazuh dashboard](img/B19549_2_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Visualizing the VirusTotal alert on the Wazuh dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data.integration:` `virustotal`: This represents the third-party integration
    used in Wazuh. In this case, it is VirusTotal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.virustotal.permalink`: This represents the URL of the VirusTotal detection
    page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have successfully detected an EICAR file using VirusTotal and Wazuh. In the
    next section, we will learn how to integrate Windows Defender (an antivirus solution)
    with the Wazuh platform.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Windows Defender logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows Defender is an antivirus software module of Microsoft Windows. As per
    the *2023 Antivirus Market Report*, Windows Defender is the most common free antivirus
    product for PC users, with around 40% of the market share of free antivirus software.
    For more information on this, you can check the following link: [https://www.security.org/antivirus/antivirus-consumer-report-annual/](https://www.security.org/antivirus/antivirus-consumer-report-annual/).
    Additionally, Microsoft also offers endpoint security solutions for enterprises
    called Windows Defender for Endpoint. This makes us put more attention on integrating
    Windows Defender with Wazuh. By default, Wazuh cannot read the Windows Defender
    logs. Hence, it is important for us to put extra effort into making it possible.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we’ll learn to push Windows Defender logs to the Wazuh manager.
    You will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get started with Windows Defender logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Wazuh agent to collect Windows Defender logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for malware detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Windows Defender logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows Defender logs help SOC analysts understand the security status of endpoints,
    identify potential cyber threats, and also help them investigate any security
    incidents. Windows Defender logs encompass several pieces of information such
    as scan activities, threat detection, updates, quarantine, remediation, firewall
    and network activities, and real-time protection.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first understand where the Defender logs are stored. Well, You can view
    the logs in **Event Viewer**.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Event Viewer** | **Applications and Services Logs** | **Microsoft**
    | **Windows** | **Windows Defender** | **Operational**.
  prefs: []
  type: TYPE_NORMAL
- en: The general tab will give you information about the scan type and user information.
    However, the **Details** tab will give you complete information on that threat
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Visualizing Windows Event Viewer](img/B19549_2_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Visualizing Windows Event Viewer
  prefs: []
  type: TYPE_NORMAL
- en: 'To get more detailed information about this event, you can navigate to the
    **Details** tab shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Details of the Windows Defender event](img/B19549_2_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Details of the Windows Defender event
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Wazuh agent to collect Windows Defender logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to push the Defender logs in the `ossec.conf` file of the Wazuh agent.
    To collect Windows Defender logs, you must configure the Wazuh agent using the
    Wazuh manager or locally using the `ossec.conf` agent file located at `C:\Program`
    `Files (x86)\ossec-agent`.
  prefs: []
  type: TYPE_NORMAL
- en: In a large network, manually going to each Wazuh agent and making the changes
    in each agent is a cumbersome task. Wazuh helps us with the `agent.conf` file,
    which pushes the configuration to specific agent groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Login to the Wazuh dashboard, go to `<localfile>` tag in the `agent.conf` file
    as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<localfile>`: This tag is used to define the local log file or file path that
    the Wazuh agent should monitor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<location> Microsoft-Windows-Windows Defender/Operational</location>`: This
    represents the location or path of the log file that Wazuh should monitor. In
    this case, it is monitoring the `Microsoft-Windows-Windows Defender/Operational`
    log location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<log_format>`: This tag specifies the format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, for these changes to take effect, you need to restart the Wazuh agent
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note:'
  prefs: []
  type: TYPE_NORMAL
- en: To verify the location of Windows Defender events, you can also navigate to
    the `Microsoft-Windows-Windows Defender/Operational` location under **Event Viewer**
    and check for the log name as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Checking Log Name for Windows Defender events](img/B19549_2_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Checking Log Name for Windows Defender events
  prefs: []
  type: TYPE_NORMAL
- en: Testing for malware detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the malware detection using VirusTotal, we will use an EICAR test file.
    You can download the EICAR test file from their official website: [https://www.eicar.org/download-anti-malware-testfile/](https://www.eicar.org/download-anti-malware-testfile/).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You need to disable the **Enhanced security** option on Google Chrome and **Real-time
    protection** on Windows Defender to allow the download.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To visualize the alerts related to the EICAR test file, you can navigate to
    **Security Alerts** in the Wazuh manager and check for the Windows Defender alerts
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Visualizing Windows Defender alerts in the Wazuh manager](img/B19549_2_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Visualizing Windows Defender alerts in the Wazuh manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data.win.eventdata.product Name:` `Microsoft Defender Antivirus`: This represents
    the name of the product that generated the alert. In this case, it is Microsoft
    Defender Antivirus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.win.system.channel:` `Microsoft-Windows-Windows Defender/Operational`:
    This indicates the channel or source from where the alert originated. In this
    case, it is the `Microsoft-Windows-Windows` `Defender/Operational` channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rule.description:` `Windows Defender: Antimalware platform detected potentially
    unwanted software ()`: This provides the description of the triggered rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rule.groups:` `windows, windows_defender`: This field specifies the groups
    or categories to which the rule or alert belongs. In this case, we have `Windows`
    and `Windows_defender` indicating that it’s a Windows-specific alert related to
    Windows Defender.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have successfully collected and visualized the alerts from the Windows Defender
    solution. In the next section, we will learn to install and integrate Sysmon modules
    on a Windows machine to enhance the detection capabilities of the Wazuh platform.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Sysmon to detect fileless malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Malicious code that operates directly within a computer’s memory rather than
    the hard drive is known as fileless malware. It is “fileless” in the sense that
    no files are downloaded to your hard drive when your machine is infected. This
    makes it more difficult to detect using traditional antivirus or anti-malware
    tools, which primarily scan disk files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sysmon** is a device driver and Windows system service that provides advanced
    monitoring and logging capabilities. It was created by Microsoft’s Sysinternals
    team to monitor various aspects of system activity, such as processes, network
    connections, and file changes. While Sysmon does not specifically focus on detecting
    fileless malware, its comprehensive monitoring capabilities can undoubtedly assist
    in identifying and mitigating the impact of fileless malware attacks. We can enhance
    Wazuh’s malware detection capabilities by installing Sysmon on each Windows machine.
    To test the fileless attack detection, we will use the APTSimulator tool to simulate
    the attack and visualize them on the Wazuh manager.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to detect fileless malware using Sysmon
    and finally, we will visualize them on the Wazuh dashboard. We will cover the
    following items in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: How do fileless attacks work?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements for lab setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Sysmon on a Windows machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Wazuh agent to monitor Sysmon events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Sysmon rules on the Wazuh manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing malware detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do fileless malware attacks work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In its operation, a fileless malware attack is fairly unique. Understanding
    how it works can help an organization protect against future fileless malware
    attacks. Let’s learn about the different stages involved in the fileless malware
    attack. Each attack stage will be explained, and the techniques and tools used
    by the attackers will be explained in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Stage 1 – Gain access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Threat actors must first gain access to the target machine in order to carry
    out an attack. Some of the common techniques and tools involved in this stage
    are mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Techniques**: Remotely exploit a vulnerability and gain remote access via
    web scripting or a social engineering scheme such as phishing emails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**: ProLock and Bumblebee'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stage 2 – Steal credentials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the access gained in the previous step, the attacker now attempts to
    obtain credentials for the environment he has compromised, which will allow him
    to easily move to other systems in that environment. Some of the techniques and
    tools that he could have used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Techniques**: Remotely exploit a vulnerability and gain remote access via
    web scripting (e.g., Mimikatz)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**: Mimikatz and Kessel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stage 3 – Maintain persistence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, the attacker creates a backdoor that will allow him to return to this
    environment at any time without having to repeat the initial steps of the attack.
    Some of the techniques and tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Techniques**: Modify the registry to create a backdoor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**: Sticky Keys Bypass, Chinoxy, HALFBAKED, HiKit, and ShimRat'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stage 4 – Exfiltrate data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the final step, the attacker collects the data he desires and prepares it
    for exfiltration by copying it to a single location and then compressing it with
    commonly available system tools such as Compact. The attacker then uploads the
    data via FTP to remove it from the victim’s environment. Some of the techniques
    and tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Techniques**: Using DNS tunneling, traffic normalization, use of an encrypted
    channel, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**: FTP, SoreFang, and SPACESHIP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement for the lab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the fileless malware detection, we need the following system:'
  prefs: []
  type: TYPE_NORMAL
- en: The Wazuh server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 or 11 or Windows Server 2016 or 2019, which should have the Wazuh
    agent installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Sysmon on a Windows machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this step, we’ll set up our Windows 11 endpoint with the Sysmon package.
  prefs: []
  type: TYPE_NORMAL
- en: Sysmon offers comprehensive data about process creation, network connections,
    and file creation time changes. Sysmon generates events and stores them in `Applications`
    and `Services Logs/Microsoft/Windows/Sysmon/Operational`. To install Sysmon on
    a Windows machine, you need to follow the steps as explained in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Download and extract Sysmon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To download Sysmon on your Windows machine, visit its official website: [https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon](https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon).
    Once downloaded, extract the Sysmon archive to a folder of your choice on your
    Windows machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Download the SwiftOnSecurity Sysmon configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SwiftOnSecurity’s Sysmon configuration is a well-known and simple configuration
    file created by popular security professionals. Using this configuration can enhance
    our Windows monitoring capabilities. To download the SwiftOnSecurity Sysmon configuration
    file, visit their official GitHub repository ([https://github.com/SwiftOnSecurity/sysmon-config](https://github.com/SwiftOnSecurity/sysmon-config))
    and download the latest version of the configuration file called `SysmonConfig.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you place the `SysmonConfig.xml` file in the same folder where you
    extracted Sysmon.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Install Sysmon with the SwiftOnSecurity configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Sysmon using the SwiftOnSecurity configuration file called `SysmonConfig.xml`,
    you need to follow some steps as explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt or PowerShell with administrative privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the folder where Sysmon is extracted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the following command to install Sysmon with the SwiftOnSecurity configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the installation, you can verify that Sysmon is running properly by checking
    `Applications and Services Logs/Microsoft/Windows/Sysmon/Operational`, and you
    should start getting Sysmon-related events as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Visualizing Sysmon events in Event Viewer](img/B19549_2_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Visualizing Sysmon events in Event Viewer
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level**: This refers to the severity of an event. The levels are usually
    categorized as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0**: Information'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1**: Warning'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**: Error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3**: Critical'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source**: This field indicates the software or component that generated the
    event. In this case, it is Sysmon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID**: It is a unique value assigned to each type of event. Sysmon uses
    different event IDs for various purposes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 1**: Process creation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 2**: File creation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 3**: Network connection'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 7**: Image loaded'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 10**: Process access'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 11**: File creation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 12**: Registry event (object create and delete)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 13**: Registry event (value set)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 14**: Registry event (key and value rename)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 15**: File creation stream hash'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 17**: Pipe event (pipe created)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 18**: Pipe event (pipe connected)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 22**: DNS request'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task Category**: This provdes the classification for the events. It is the
    name of the event IDs as listed earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Wazuh agent to monitor Sysmon events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assuming the Wazuh agent is already installed and running, you need to inform
    the agent to monitor Sysmon events. To do that, we need to include the following
    block in the `ossec.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To ensure our changes take effect, we need to restart the agent.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are required to create a custom rule in the Wazuh manager to match the Sysmon
    events generated by the Windows machine. This rule will ensure that the Wazuh
    manager triggers an alert every time it gets a Sysmon-related event.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a rule, go to the Wazuh dashboard and navigate to `custom_sysmon.xml`),
    and paste the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<group>`: This tag is used to organize rules and helps in managing and categorizing
    rules based on their functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<rule>`: This defines the individual rule with the `id` and `level` attributes.
    In the preceding ruleset, the rule ID ranges from 101100 to 101107 with `level=5`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<if_sid>`: This tag is used as a requisite to trigger any rule when a rule
    ID has previously matched. Let’s look at a couple of the following rules:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101100"` with `if_sid "61650"` will be checked when the requisites
    of rule ID 61650 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101101"` with `if_sid "61603"` will be checked when the requisites
    of rule ID 61603 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101102"` with `if_sid "61604"` will be checked when the requisites
    of rule ID 61604 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101103"` with `if_sid "61605"` will be checked when the requisites
    of rule ID 61605 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101104"` with `IF_SID "61606"` will be checked when the requisites
    of rule ID 61606 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101105"` with `IF_SID "61607"` will be checked when the requisites
    of rule ID 61607 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101106"` with `IF_SID "61608"` will be checked when the requisites
    of rule ID 61608 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule ID "101107"` with `IF_SID "61609"` will be checked when the requisites
    of rule ID 61609 are satisfied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can review the details of each of the mentioned `IF_SID` under the Wazuh
    rule file called `0595-win-sysmon_rules.xml`. You can find this file under the
    **Rules** section of the Wazuh dashboard or in the Wazuh’s official GitHub repository
    located at [https://github.com/wazuh/wazuh-ruleset/tree/master/rules](https://github.com/wazuh/wazuh-ruleset/tree/master/rules).
  prefs: []
  type: TYPE_NORMAL
- en: 'For changes to take effect, you have to restart the Wazuh manager on the dashboard
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Restarting the Wazuh manager](img/B19549_2_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Restarting the Wazuh manager
  prefs: []
  type: TYPE_NORMAL
- en: 'To restart the Wazuh manager using the command line, you can enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the next step, we will test our Wazuh rules by initiating attacks simulated
    by the APTSimulator tool and will visualize the alerts on the Wazuh dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test a fileless malware scenario, we will use the APTSimulator tool developed
    by Florian Roth. It is a Windows batch script that employs several tools and output
    files to make a system appear to be compromised. To execute this APTSimulator
    script, download the file on a Windows machine and execute the `.``bat` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the link to download: [https://github.com/NextronSystems/APTSimulator](https://github.com/NextronSystems/APTSimulator).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you download this script on your Windows Server, open the command prompt,
    go to the `APTSimulator-0.9.4` folder, and execute the bat file `APTSimulator.bat`,
    as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Executing APTSimulator for testing Sysmon alerts](img/B19549_2_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Executing APTSimulator for testing Sysmon alerts
  prefs: []
  type: TYPE_NORMAL
- en: Type `0`. This will run every test including Collection, Command and Control,
    **Credential Access**, **Defense Evasion**, **Discovery**, **Execution**, **Lateral
    Movement**, **Persistence**, and **Privilege Escalation**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some of the attacks might not work so you can skip them.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To visualize the Sysmon alerts from the Windows machine, navigate to the **Security
    Alerts** module in the Wazuh dashboard and you should see multiple alerts as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Visualizing the Sysmon alerts in the Wazuh dashboard](img/B19549_2_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Visualizing the Sysmon alerts in the Wazuh dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see that we got a wide range of Sysmon events such as **Process
    Creation (Event 1)**, **DNS Query (Event 22)**, **Network Connection (Event 3)**,
    and **RegistryEvent (Event 13)**. All these Sysmon events can be used to conduct
    further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced us to the synergy between Wazuh and malware detection,
    covering its capabilities in FIM and using VirusTotal for enhanced threat intelligence
    and the CDB list to build a list of known malware hashes. The integration of Windows
    Defender logs with Wazuh provided us with a unified look at security events on
    a Windows machine. In the end, we talked about the integration of Sysmon with
    a Windows machine to detect fileless malware on the Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to enhance Wazuh’s threat intelligence
    capabilities by integrating the **Malware Information Sharing Platform** (**MISP**).
    To build a scalable system, we will also integrate TheHive and Cortex with the
    MISP platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Threat Intelligence, Automation, Incident Response, and Threat Hunting'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will learn how to extend the Wazuh threat intelligence capability
    by integrating the MISP platform. You will learn to integrate TheHive with Wazuh
    and MISP to perform threat analysis. In addition to that, you will learn how to
    automate security operations and management of the Wazuh platform using the **security
    orchestration, automation, and response** (**SOAR**) tool, **Shuffle**. You will
    also learn to perform automated incident responses using a Wazuh-native feature
    called Active Response such as blocking brute force attempts and automatically
    isolating infected machines. Lastly, we will learn how to leverage the Wazuh platform
    to conduct proactive threat hunting.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19549_03.xhtml#_idTextAnchor077), *Threat Intelligence and Analysis*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19549_04.xhtml#_idTextAnchor116), *Security Automation and Orchestration
    Using Shuffle*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19549_05.xhtml#_idTextAnchor136)*: Incident Response with Wazuh*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19549_06.xhtml#_idTextAnchor163)*: Threat Hunting with Wazuh*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
