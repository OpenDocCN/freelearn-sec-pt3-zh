["```\npush 0\npush 21646c72h\npush 6f57206fh\npush 6c6c6548h\nmov eax, esp\npush 74h\npush 6B636150h\nmov edx, esp\npush 0\npush eax\npush edx\npush 0\nmov eax, <user32.MessageBoxA>\ncall eax\n```", "```\npush 0\npush 21646c72h\npush 6f57206fh\npush 6c6c6548h\n```", "```\npush 74h\npush 6B636150h\n```", "```\npush 0\npush eax\npush edx\npush 0\nmov eax, <user32.MessageBoxA>\n```", "```\npush c3\npush 57006a52\npush 50006ad4\npush 8b6b6361\npush 5068746a\npush c48b6c6c\npush 6548686f\npush 57206f68\npush 21646c72\npush 68006a5f\nmov eax, esp\ncall eax\nmov eax, <user32.MessageBoxA>\ncall eax\n```", "```\n  mov ecx, 0x10\n  mov esi, 0x00402000\nloc_00401000:\n  mov al, [esi]\n  sub al, 0x20\n  mov [esi], al\n  inc esi\n  dec ecx\n  jnz loc_00401000\n```", "```\n mov ecx, 0x10\n mov esi, 0x00402000\nloc_00401000:\n mov al, [esi]\n add al, 0x10\n mov [esi], al\n inc esi\n dec ecx\n jnz loc_00401000\n```", "```\ndata = 0x00, 0x01, 0x02, 0x0a, 0x10, 0x1A, 0xFE, 0xFF\n key = 0x11\n encrypt algorithm = byte subtraction\n decrypt algorithm = byte addition\n```", "```\nencrypted data = 0xEF, 0xF0, 0xF1, 0xF9, 0xFF, 0x09, 0xED, 0xEE\n```", "```\ndecrypted data = 0x00, 0x01, 0x02, 0x0a, 0x10, 0x1A, 0xFE, 0xFF\n```", "```\ndata (unsigned) = 0, 1, 2, 10, 16, 26, 254, 255\ndata (signed) = 0, 1, 2, 10, 16, 26, -2, -1\n```", "```\nencrypted data (unsigned) = 239, 240, 241, 249, 255, 9, 237, 238\nencrypted data (signed) = -17, -16, -15, -7, -1, 9, -19, -18\n```", "```\n mov ecx, 0x10\n mov esi, 0x00402000\nloc_00401000:\n mov al, [esi]\n xor al, 0x20\n mov [esi], al\n inc esi\n dec ecx\n jnz loc_00401000\n```", "```\nEncryption using the key 0x20:\n  data:  0x46 = 01000110b\n   key:  0x20 = 00100000b\n0x46 XOR 0x20 = 01100110b = 0x66\n\nDecryption using the same key:\n  data:  0x66 = 01100110b\n   key:  0x20 = 00100000b\n0x66 XOR 0x20 = 01000110b = 0x46\n```", "```\n                call GetProcessHeap\n                push 1000h             ; dwBytes\n                mov edi, eax\n                push 8 ; dwFlags\n                push edi               ; hHeap\n                call HeapAlloc\n                push 1BEh              ; Size\n                mov esi, eax\n                push offset unk_403018 ; Src\n                push esi               ; Dst\n                call memcpy\n                add esp, 0Ch\n                xor ecx, ecx\n                nop\nloc_401030:\n                xor byte ptr [ecx+esi], 58h\n                inc ecx\n                cmp ecx, 1BEh\n                jl short loc_401030\n```", "```\n    cmp byte ptr [esi], 0x20\n    jz loc_00EB100C\n    mov eax, 0\n    jmp loc_00EB1011\nloc_00EB100C:\n    mov eax, 1\nloc_00EB1011:\n    test eax, eax\n    ret\n```", "```\n    mov ecx, 1\n    mov ebx, 0                ; initial value of control variable\nloc_00EB100A:\n    test ecx, ecx\n    jz loc_00EB103C           ; jump will never happen, an endless loop\nloc_00EB100E:\n    cmp ebx, 0                ; is control variable equal to 0?\n    jnz loc_00EB102B\nloc_00EB1013:\n    cmp byte ptr [esi], 0x20\n    jnz loc_00EB1024\nloc_00EB1018:\n    mov eax, 0\n    mov ebx, 2\n    jmp loc_00EB103E\nloc_00EB1024:\n    mov ebx, 1                ; set control variable to 1\n    jmp loc_00EB103E\nloc_00EB102B:\n    cmp ebx, 1                ; is control variable equal to 1?\n    jnz loc_00EB103C\nloc_00EB1030:\n    mov eax, 1\n    mov ebx, 2                ; set control variable to 2\n    jmp loc_00EB103E\nloc_00EB103C:\n    jmp loc_00EB1040          ; exit loop\nloc_00EB103E:\n    jmp loc_00EB100A          ; loop back\nloc_00EB1040:\n    test eax, eax\n    ret\n```", "```\n    mov eax, [esi]\n    pushad\n    popad\n    xor eax, ffff0000h\n    nop\n    call loc_004017f\n    shr eax, 4\n    add ebx, 34h\n    sub ebx, 34h\n    push eax\n    ror eax, 5\n    and eax, 0ffffh\n    pop eax\n    jmp loc_0040180\nloc_004017f:\n    ret\n```", "```\n    mov eax, [esi]\n    xor eax, ffff0000h\n    shr eax, 4\n    jmp loc_0040180\n```", "```\nmov eax, 78h\n```", "```\npush 78h\npop eax\n```", "```\nmov cl, 4\nmul cl\n```", "```\nshl eax, 2\n```", "```\njmp 00401000h\n```", "```\npush 00401000h\nret\n```", "```\nxchg eax, edx\n```", "```\nxor eax, edx\nxor edx, eax\nxor eax, edx\n```", "```\nrol eax, 7\n```", "```\npush ebx\nmov ebx, eax\nshl eax, 7\nshr ebx, 25\nor eax, ebx\npop ebx\n```", "```\npush 1234h\n```", "```\nsub esp, 4\nmov [esp], 1234h\n```", "```\n\n; code in the .text section\npush 00403000h\ncall LoadLibrary\npush 00403010h\npush eax\ncall GetProcAddress\npush 0\npush 00403030h\npush 00403020h\npush 0\ncall eax              ; USER32!MessageBoxA\n\n; data in the .data section\n00403000h \"USER32.DLL\", 0\n00403010h \"MessageBoxA\", 0\n00403020h \"Hello World!\", 0\n00403030h \"Packt Demo\", 0\n```", "```\nmov eax, large fs:30h\nmovzx eax, byte ptr [eax+2]\n```"]