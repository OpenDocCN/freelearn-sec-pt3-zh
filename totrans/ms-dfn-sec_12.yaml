- en: '*Chapter 10*: Applying IoT Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"You wouldn''t leave the keys to your car sitting on the hood - without security
    on IoT devices you''re opening yourself up to the risks that come with sharing
    data with potentially malicious parties"*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Lisa De luca, Prolific IoT inventor and Head of Customer Intelligence at
    Wayfair technologies.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internet of Things** (**IoT**) devices are becoming very popular because
    they can make our lives easier. In addition, their cost makes them very accessible
    to the consumer market. However, these cheap devices bring a lot of opportunities
    for cybercriminals who are eager to leverage the devices to exploit vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, in this chapter, you will learn how to get ahead of the criminals.
    You will also learn how to leverage these technologies to create your very own
    cybersecurity tools, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Your own device to detect rogue access points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Raspberry Pi firewall and intrusion detection system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A powerful honeypot for less than $10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IoT device to monitor your web services and network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An internet ad blocker with Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the main topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*An introduction to the Internet of Things,* their risks for industrial and
    home implementations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list with the top 10 *vulnerabilities on IoT devices*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Explore the most popular types of IoT *network technologies including: LoRaWAN,
    Sigfox, ZigBee, and more*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A review of security mechanisms *and best practices to improve the security
    of IoT devices.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complete guide on how to *leverage low cost IoT devices to create your own
    defensive security tools*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plus, as a bonus, this chapter tells you *the dangers of unauthorized IoT devices
    and how you can detect them*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements for this chapter. However, we strongly recommend
    that you get a Raspberry Pi (model 3 or above) so that you can experiment and
    create some of the defensive security tools that you will see in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Internet of Things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by defining the IoT as *a collection of devices that are capable
    of connecting to the internet to share data and resources*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples could be your smartwatch or your smart TV (yes, they like to
    put the word *smart* on IoT devices), but many other devices in your office, such
    as the copy machine, the printers, and even the coffee machine, could be IoT-enabled
    devices that need to be analyzed for vulnerabilities before allowing them to be
    connected to the internet. The following are some examples of IoT devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Examples of IoT devices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Examples of IoT devices
  prefs: []
  type: TYPE_NORMAL
- en: Companies are realizing the benefits of connecting devices to the internet.
    These benefits include the addition of new functionality and the harvesting of
    data regarding customer use or habits (very useful to improve future products).
    Additionally, companies can create connected ecosystems by sharing services, data,
    or features through devices, greatly enhancing user experience.
  prefs: []
  type: TYPE_NORMAL
- en: But those implementations also bring a plurality of **risks** that you must
    know and understand in order to create a strategy to properly protect against
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The risks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most IoT devices were created to *enhance* the user experience. However, in
    many cases, those devices were not designed to be *secure* by design. This could
    represent a risk to your network and data.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the two main types of IoT implementations and the associated risks
    of each one.
  prefs: []
  type: TYPE_NORMAL
- en: Industrial IoT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main risks in industrial IoT environments are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Loss of data from sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corruption of data from sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jamming of sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Industrial espionage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device hijacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alteration of data to cause disruption of services (machinery or production
    plants)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alteration of data to cause financial losses (crop loss)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart houses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main risks in smart house environments are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Network intrusion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disclosure of personal or sensitive data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Devices can be used as botnets to launch **distributed denial of service** (**DDoS**)
    attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access/control of devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling or bypassing of security systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy issues (cameras, microphones, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following image illustrates an example of how your IoT devices can be hijacked
    by an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 10.2 – Threat landscape of an IoT smart house'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Threat landscape of an IoT smart house
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see what the most common *vulnerabilities* are that may trigger those
    *risks*.
  prefs: []
  type: TYPE_NORMAL
- en: The vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the competition in the IoT market revolves around *cost*. Therefore,
    companies need to reduce it and, sometimes, this means a lack of security testing,
    or even of basic security settings on the devices.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, there are hundreds (maybe thousands) of IoT devices that are already
    connected to the internet, with the owners not even being aware of the vulnerabilities
    they have.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the top 10 vulnerabilities found on IoT devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Top 10 IoT vulnerabilities'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Top 10 IoT vulnerabilities
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the most common network protocols used for IoT devices and
    their associated advantages, risks, and vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding IoT networking technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While some IoT implementations use Wi-Fi, the truth is that Wi-Fi has several
    limitations, especially in terms of energy consumption and network coverage (range).
    Therefore, a new set of technologies has been developed to overcome that limitation
    and increase the reach up to 10 kilometers.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at some of those IoT network technologies and the vulnerabilities
    associated with them.
  prefs: []
  type: TYPE_NORMAL
- en: LoRaWAN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LoRaWAN,** also know as **LoRa,** is an open standard for the implementation
    of **low-power wide area networks** (**LPWANs**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the main advantages of this technology is the ability to transfer data
    over long distances (more than 10 kilometers) with very low power consumption.
    This makes LoRa a great alternative for connecting IoT devices and sensors. Additionally,
    as seen in the following figure, LoRa devices are really small. This is great
    for prototyping (and even to integrate into production systems):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – LoRa sender and receiver'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – LoRa sender and receiver
  prefs: []
  type: TYPE_NORMAL
- en: So, long-range coverage and small devices (with low power consumption) sound
    like the perfect solution to implement IoT networks, but there are also a plurality
    of vulnerabilities that you need to take into consideration if you plan to have
    these types of networks in your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: LoRaWAN security vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By design, LoRa is very secure. In fact, authentication and encryption are mandatory.
    However, devices and networks can still be compromised if the implementation is
    not performed properly.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is very important to look for **LoRaWAN CertifiedCM** devices
    to ensure the device has been tested against the standard and works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of some of the vulnerabilities reported for these devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Some devices may come with hard-coded encryption keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some devices may use easy-to-guess encryption keys, such as `AppKey = device
    identifier + app identifier`, or `AppKey = app identifier + device identifier`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerable to denial-of-service attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerable to ACK spoofing attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerable to replay attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, there are two CVE vulnerabilities associated with LoRa: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-4060](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-4060)
    and [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28349](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28349).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that new CVEs are uploaded daily, so always check them before any implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Zigbee
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zigbee is a standard for **personal area networks** (**PANs**) developed by
    the Zigbee Alliance, targeted to provide a low-cost, low-power, wireless communications
    solution for short-range applications (such as communication between sensors).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Why is IoT communications protocol security important? In 2017, a group of researchers
    were able to compromise a network and inject malware by leveraging a vulnerability
    on a Zigbee implementation of a smart bulb.
  prefs: []
  type: TYPE_NORMAL
- en: Zigbee security vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most common vulnerabilities on Zigbee networks are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: They are susceptible to availability attacks through signal jamming (this can
    be easily achieved due to the band used).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security is based on the secrecy of this key exchange; therefore, they are
    susceptible to attacks that sniff the network during the repairing of the keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some systems do not support the changing of compromised keys, so once a key
    is compromised you cannot change the keys to lock the intruder out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional product-related vulnerabilities can be found at the following URL:
    [https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=zigbee](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=zigbee).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows Zigbee modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Zigbee modules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Zigbee modules
  prefs: []
  type: TYPE_NORMAL
- en: Remember that, here, we are explaining the standard features and vulnerabilities.
    However, we highly recommend that you familiarize yourself with the technology
    before implementing it.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing is that these devices are really low cost, so you can easily
    create your own prototypes (with the help of a prototyping board such as Arduino
    or Raspberry Pi) to determine the best network for your IoT implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Sigfox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Sigfox** was developed to send small messages a few times a day. This keeps
    costs and power consumption as low as possible. With this technology, you can
    send up to 140 messages a day (12 bytes for uplink messages and 8 bytes for downlink
    messages).'
  prefs: []
  type: TYPE_NORMAL
- en: This is especially useful in transferring data from sensors over long distances
    at a low cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'This technology is becoming widely popular, and, as you can see in *Figure
    10.6*, Sigfox is being implemented all around the globe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Sigfox coverage map'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Sigfox coverage map
  prefs: []
  type: TYPE_NORMAL
- en: Sigfox security vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most common vulnerabilities on Sigfox networks are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Due to the low bandwidth, some communication may be sent unencrypted. This presents
    a risk to the data being transferred.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are susceptible to availability attacks through signal jamming (this can
    be easily achieved due to the band used).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's take a look at a well-known protocol that has been adopted in some
    IoT implementations. We are talking about **Bluetooth**.
  prefs: []
  type: TYPE_NORMAL
- en: Bluetooth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to its popularity, Bluetooth has become an interesting option for IoT manufacturers,
    because it is low cost and easy to integrate with other devices.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a version called **Bluetooth Low Energy** (**BLE**). This is even
    better for IoT implementations because the power consumption is considerably low.
  prefs: []
  type: TYPE_NORMAL
- en: Bluetooth security vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'BLE includes 128-bit encryption, plus authentication. These are two essential
    mechanisms in security. However, there are still some vulnerabilities related
    to BLE:'
  prefs: []
  type: TYPE_NORMAL
- en: Devices are vulnerable to several attacks when in **discoverable mode**; therefore,
    this should *only* be used during setup and turned off after that. However, *some
    devices come with the discoverable option on by default, and do not give you the
    option to change it*. Such devices (normally very low-cost IoT devices) should
    be avoided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are some vulnerabilities listed on the CVE site about BLE. However, most
    of them are related to weak implementation by the manufacturer and not about the
    protocol itself. Refer to the following URL: [https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=ble](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=ble).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2020, a Tesla Model X was hacked by a cybersecurity expert in just 90 seconds
    by taking advantage of a massive Bluetooth vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: There are other technologies, such as **NFC**, that are also used on IoT implementations
    to exchange data or trigger actions. Those technologies also need to be analyzed
    to ensure they will not represent a threat to our data or devices.
  prefs: []
  type: TYPE_NORMAL
- en: Security considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we just saw, many of these protocols offer enough security mechanisms for
    IoT networks. However, most of the vulnerabilities found are related to poor implementations.
    Therefore, the overall security considerations for IoT devices are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Always research about an IoT device before purchasing it, as it may have poor
    security implementation or an outdated version of the protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform a feature analysis to determine which is the best option for you in
    terms of speed, bandwidth, and distance (as seen in *Figure 10.7*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that all implementations are carried out by an expert to avoid security
    holes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be aware of low-cost devices and sensors, as they may lack encryption or other
    security mechanisms (to reduce cost).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolate the IoT network from your corporate network to avoid additional risks
    to your main infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following graph shows a comparison of IoT network protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Comparison of IoT network protocols'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Comparison of IoT network protocols
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 10.7*, *there is no one-size-fits-all solution*. Instead,
    every technology has its pros and cons that need to be evaluated in order to determine
    which is the best solution for you. Remember that availability is one of the factors
    that you need to evaluate as part of your cybersecurity strategy. Therefore, you
    also need to take into consideration which of these technologies gives you a higher
    fidelity and a lower risk of losing packets or connections.
  prefs: []
  type: TYPE_NORMAL
- en: Improving IoT security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's analyze some additional mechanisms and best practices that you can
    apply to improve the security of IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: Default passwords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change all the default passwords of all IoT devices upon installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure you select very strong passwords for those devices, consisting
    of the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 15 characters long.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letters (lower and upper case), numbers, and special characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid the use of common words (also known as dictionary words) like names of
    countries, months of the year, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change it at least twice a year for home devices and quarterly for business
    devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a password manager for secure and easy management of these passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, using a super password is not enough. You should also obfuscate the
    username to make things even harder for the attacker. Let's do this by changing
    the **default user**.
  prefs: []
  type: TYPE_NORMAL
- en: Default users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Default users like **Admin** are easy to guess for attackers, so changing them
    will make it harder for an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Disable unnecessary features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If an IoT device has options, such as remote connections to the admin panel
    or vulnerable services such as Telnet, enabled, then you *must* disable them.
  prefs: []
  type: TYPE_NORMAL
- en: Insecure systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before purchasing any IoT devices, you *must* check for known vulnerabilities
    on the web (for example, at the following URL: [https://cve.mitre.org/](https://cve.mitre.org/)).'
  prefs: []
  type: TYPE_NORMAL
- en: If the vulnerabilities are solved (for example, by the company releasing a patch),
    then it means that the manufacturer takes security seriously. However, if the
    vulnerability has not been resolved by the manufacturer, then you should look
    for an alternative, instead of adding a vulnerable device to your network.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In 2020, a group of researchers used [Shodan.io](http://Shodan.io) to find vulnerable
    printers and used a script to force those vulnerable printers to print a *guide
    on printer security*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, in 2018, more than 50,000 printers started to print a message
    supporting a YouTuber in another successful mass-scale printer attack (see *Figure
    10.8*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Letter printed by 50,000 vulnerable printers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Letter printed by 50,000 vulnerable printers
  prefs: []
  type: TYPE_NORMAL
- en: This attack was relatively *harmless*. However, imagine if the attacker had
    sent a command to print a copy of *Don Quixote* to those 50,000 printers. Then
    we would be talking about an impact of 50,000,000 pages (this is a *lot*).
  prefs: []
  type: TYPE_NORMAL
- en: Enabled services and ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT devices may come with several services and ports enabled by default. Therefore,
    you *must* define which services should have internet access and which services
    should be intranet only.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may want a network printer to access the internet to get updates,
    but remote management access and network printer services should be disabled if
    not in use (most of the time, an intranet printer is enough).
  prefs: []
  type: TYPE_NORMAL
- en: Data storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check what kind of data is saved on the device and what type of security is
    applied to that data. If the data is not securely encrypted when stored, then
    either disable the saving of data or create a process to delete all data continuously.
  prefs: []
  type: TYPE_NORMAL
- en: Secure setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, avoid adding a device to the network with the default settings,
    as that could be an easy target for attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Physical setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that those devices are not accessible by unauthorized people as an
    attacker can press the reset button to enable default login and access the system.
  prefs: []
  type: TYPE_NORMAL
- en: Separate networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is always good practice to keep your IoT devices in a private network. This
    ensures that the IoT devices are not accessing any sensitive files.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about the good side of IoT devices, and how you can leverage
    them to create some very cool projects to enhance the security of your network,
    office, systems, data, and even your house.
  prefs: []
  type: TYPE_NORMAL
- en: Creating cybersecurity hardware using IoT-enabled devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Raspberry Pi** is one of the most famous IoT devices used today to create
    prototypes.'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, there are hundreds of cool projects on the internet that you can create
    with this powerful device.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 10.9*, Raspberry Pi is a very powerful device with a lot
    of computing power, packed with all the ports that you need, plus some I/O pins
    to easily connect a plurality of modules and sensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main versions: the normal Raspberry Pi (currently at version
    4), and **Raspberry Pi Zero**. This is a miniature version of Raspberry Pi that
    is portable and consumes very little power. This could be great for some projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Raspberry Pi versions comparison'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.9 – Raspberry Pi versions comparison
  prefs: []
  type: TYPE_NORMAL
- en: Many of the Raspberry Pi projects available on the internet are related to cyber
    weapons aimed to attack networks and systems. However, the good news is that there
    are also a lot of cool projects for *defensive security* that you can leverage
    due to *low cost* and *easy implementation, but more importantly because you can
    have a lot of fun in creating them*. So, let's take a look at this awesome compilation
    of defensive security projects with Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting rogue access points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Rogue access points are a huge threat to our networks, systems, and data*.'
  prefs: []
  type: TYPE_NORMAL
- en: They are basically malicious **access points** designed to mimic one of your
    original access points and perform a plurality of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The threat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A **rogue access point** represents a *huge* threat to your infrastructure
    and data because it can be used to launch a variety of dangerous attacks, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Man in the middle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: De-authentication attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probe request monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intercept, inspect, modify and replay web traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credentials harvesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP starvation attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Update attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARP poison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS spoof
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Therefore, as you can see, a rogue access point can do a lot of damage to your
    infrastructure. Luckily, in the past, those attacks were not very common because,
    as seen in *Figure 10.10*, it was difficult to smuggle all the hardware required
    to perform that attack unnoticed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Comparison of the old and new types of rogue access point'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.10 – Comparison of the old and new types of rogue access point
  prefs: []
  type: TYPE_NORMAL
- en: The bad news is that now, an attacker can use a pocket-sized Raspberry Pi as
    the platform to launch these types of attacks. Due to the small size and low power
    consumption, this can remain physically undetected in the attacker's pocket.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform these types of attacks, an attacker can leverage several tools available
    on the internet such as **Wifiphisher** ([https://github.com/wifiphisher/wifiphisher](https://github.com/wifiphisher/wifiphisher)),
    or a framework called **Wifipumpkin3**. This can be found at the following URL:
    [https://github.com/P0cL4bs/wifipumpkin3](https://github.com/P0cL4bs/wifipumpkin3).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – WiFi-Pumpkin''s previous GUI version (deprecated)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.11 – WiFi-Pumpkin's previous GUI version (deprecated)
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 10.11*, these tools are very easy to use. This may cause
    an increase in the number of attacks because they can be performed by script kiddies
    (attackers with minimal knowledge that love to execute simple attacks based on
    simple tutorials found on the internet).
  prefs: []
  type: TYPE_NORMAL
- en: The solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a few commercial solutions from Cisco and HP, but these solutions
    *are very expensive* and almost impossible to acquire for small and mid-size enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: '*But there is good news.* A group of clever inventors and masters in cybersecurity
    from Cenfotec University in Costa Rica used the very same technology used by the
    attackers to develop a low-cost solution that can find rogue access points in
    your infrastructure. This solution is called the **Rpi-AWAPS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Analysis and controller systems of the Rpi-AWAPS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.12 – Analysis and controller systems of the Rpi-AWAPS
  prefs: []
  type: TYPE_NORMAL
- en: 'To read more about this incredible project, please visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.crbravo.com/rpi-awaps](http://www.crbravo.com/rpi-awaps)'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting a threat into a solution**: The solution created by these masters
    and inventors is *unique* because they *transformed an offensive weapon into a
    solution and that is the pinnacle of cybersecurity innovation*. Also, this awesome
    tool was published online, so anyone can replicate it at a very low cost. If you
    like this tool, please leave a message to the authors using the preceding link
    – they will appreciate it!'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the current implementation of the project is in Spanish, but
    the team is working on a project to create an English version of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi firewall and intrusion detection system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another cool way to leverage a low-cost IoT device is by creating a low-cost
    firewall or intrusion detection system using **Raspberry Pi**.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to achieve this and, while this is not an enterprise-level
    solution, it will bring some extra protection to small companies with little to
    no budget for cybersecurity. Here are a couple of examples that you can follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.instructables.com/Raspberry-Pi-Firewall-and-Intrusion-Detection-Syst/](https://www.instructables.com/Raspberry-Pi-Firewall-and-Intrusion-Detection-Syst/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dergipark.org.tr/en/download/article-file/1160762](https://dergipark.org.tr/en/download/article-file/1160762)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also create more specialized security systems with Raspberry Pi, targeted
    for some specific systems such as **SCADA**.
  prefs: []
  type: TYPE_NORMAL
- en: Defensive security systems for industrial control systems (SCADA)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are also some implementations that leverage Raspberry Pi to increase
    the security of industrial control systems. Here is one example: [http://www.acadpubl.eu/hub/2018-118-21/articles/21e/66.pdf](http://www.acadpubl.eu/hub/2018-118-21/articles/21e/66.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: There are several types of Raspberry Pi, so even if some of the preceding links
    refer to a specific version of the Pi, you may be still able to run it on the
    latest Raspberry Pi available. Your Pi may run even better than the one mentioned
    in the link (in terms of speed, capacity, space, energy consumption, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Secure USB-to-USB copy machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very interesting implementation of a Raspberry Pi to reduce the risk
    of connecting an infected USB device.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you are at a conference and someone is offering you some files that
    you need through a USB device. You know that connecting it to your computer is
    a risk, but what else can you do?
  prefs: []
  type: TYPE_NORMAL
- en: The solution is called **CIRCLean**. This system is based on a Raspberry Pi
    designed by the **Computer Incident Response Center Luxembourg** (**CIRCL**) to
    scan a USB device and disable some suspicious files before securely moving the
    rest of the content to a new USB device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are their official sites in case you want to know more about this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://circl.lu/projects/CIRCLean/](https://circl.lu/projects/CIRCLean/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/CIRCL/Circlean](https://github.com/CIRCL/Circlean)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Step-by-step instructions for CIRCLean'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.13 – Step-by-step instructions for CIRCLean
  prefs: []
  type: TYPE_NORMAL
- en: Notice how *Figure 10.13* describes the functionality of the system in a step-by-step
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a $10 honeypot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all know the value of having a honeypot. However, some of the solutions on
    the market are a bit expensive. But what about a honeypot solution that costs
    less than a coffee? That definitely sounds attractive. Well, my friend, that is
    possible with none other than Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, there are several honeypot solutions that you can install on your little
    (but powerful) new friend, the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCanary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Thinkst Canary** is an awesome honeypot device, but unfortunately, not everyone
    can purchase it. The good news is that you can get its most important features
    using the free **OpenCanary** software.'
  prefs: []
  type: TYPE_NORMAL
- en: You can easily customize a cheap Raspberry Pi to be used as the host for this
    incredible system.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCanary allows you to natively fake the following services:'
  prefs: []
  type: TYPE_NORMAL
- en: SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SNMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VNC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And many more!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every time someone logs on to the OpenCanary server, you will get an instant
    notification by email of the activity performed (as seen in *Figure 10.14*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, since this is a honeypot and no one should be logging in to it, you know
    that every login is a hacking attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Intrusion alert – OpenCanary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.14 – Intrusion alert – OpenCanary
  prefs: []
  type: TYPE_NORMAL
- en: 'The official page of the project can be found at the following URL: [https://opencanary.readthedocs.io/en/latest/](https://opencanary.readthedocs.io/en/latest/).'
  prefs: []
  type: TYPE_NORMAL
- en: Cowrie
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another option is **Cowrie**. Cowrie is a medium- to high-interaction SSH and
    Telnet honeypot designed to log brute force attacks and the shell interaction
    performed by the attacker. It can emulate a Unix system in Python or an SSH and
    Telnet proxy.
  prefs: []
  type: TYPE_NORMAL
- en: It presents a fully virtualized filesystem with most commands and binaries available
    to the attacker. All actions are logged, including all the tools used by the attacker
    (toolkits, trojans, usernames, passwords, and even their location).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can visit their site at the following URL: [https://github.com/cowrie/cowrie](https://github.com/cowrie/cowrie).'
  prefs: []
  type: TYPE_NORMAL
- en: SNARE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A smaller option is the **super next generation advanced reactive honeypot**
    (**SNARE**). This *web application honeypot* will help you to attract and track
    a lot of bad actors from the wild zones of the internet.
  prefs: []
  type: TYPE_NORMAL
- en: This type of honeypot allows you to host a page while being able to see all
    the traffic and activities that occur on that page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official site is available at the following URL: [https://github.com/mushorg/snare](https://github.com/mushorg/snare).'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced monitoring of web apps and networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nagios Core** is an open source system that offers network and application
    monitoring. It monitors hosts and services and sends alerts in the case of any
    error (and also when the service is back online).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nagios Core includes the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitor network services (SMTP, POP3, HTTP, NNTP, PING).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor resources (CPU load, disk usage, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifications and alerts (via email, pager, or as defined by the user).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web interface to view network status, notifications, error history, logs,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The good news is that there is a free version specially created for IoT devices
    (including Raspberry Pi) called **NEMS** and, as you can see in *Figure 10.15*,
    the interface is really cool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – NEMS running on Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.15 – NEMS running on Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the link to the site of this special Raspberry Pi version: [https://nemslinux.com/download/nagios-for-raspberry-pi-4.php](https://nemslinux.com/download/nagios-for-raspberry-pi-4.php).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an internet ad blocker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Internet ads are not just a pain – they also have several other issues:'
  prefs: []
  type: TYPE_NORMAL
- en: High bandwidth consumption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clickbait
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The good news is that you can use **Pi-hole**. This is a great ad blocker that
    can protect your entire network from ads using Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project page can be found here: [https://pi-hole.net/](https://pi-hole.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: Access control and physical security systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also leverage a plurality of IoT devices to create inexpensive devices
    for access control and physical security based on several technologies, such as
    these:'
  prefs: []
  type: TYPE_NORMAL
- en: Move detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Face recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alarms and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As seen in *Figure 10.15*, you can use a plurality of IoT-enabled devices for
    these types of projects, such as a Raspberry Pi loaded with **Motion Eye OS**,
    or even cheaper devices such as an **ESP8266** or **ESP32**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Raspberry Pi Zero, Orange Pi, and ESP32'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.16_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.16 – Raspberry Pi Zero, Orange Pi, and ESP32
  prefs: []
  type: TYPE_NORMAL
- en: You have learned a lot about all the cool security projects that you can create/develop
    with these tools. However, any of these devices in the wrong hands (including
    inadvertent users) could represent a big risk for the company's data and systems,
    so here is a *bonus track* that expands on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Bonus track – Understanding the danger of unauthorized IoT devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another security risk is related to the use of unauthorized IoT devices connected
    to your network. In this case, an inadvertent user may naively connect an IoT
    device to your network. This may bring a lot of security risks to your network.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, you *must* have a system in place to detect those unauthorized devices
    in your network.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting unauthorized IoT devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An easy way to detect unauthorized IoT devices connected to your network is
    by checking the manufacturers of the devices connected to your network.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily achieve this using a piece of software called **Kismet**. As
    you can see in *Figure 10.17*, with Kismet you can scan the devices on your network
    and see the manufacturer of the device, enabling you to detect unauthorized devices
    such as a Raspberry Pi, Alexa, Google Home, Amazon Echo, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Checking the name of the manufacturer using Kismet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.17_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.17 – Checking the name of the manufacturer using Kismet
  prefs: []
  type: TYPE_NORMAL
- en: 'This tool is already installed on Kali Linux. For more information, visit the
    following URL: [https://tools.kali.org/wireless-attacks/kismet](https://tools.kali.org/wireless-attacks/kismet).'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting a Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are also some tools that you can use to identify a specific IoT device.
    For example, you can use a piece of software called **Raspberry Pi Finder** (developed
    by **Adafruit**) that gives you a very clean and easy-to-use interface to find
    out whether a Raspberry Pi is connected to your network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.18 – Raspberry Pi Finder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.18_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.18 – Raspberry Pi Finder
  prefs: []
  type: TYPE_NORMAL
- en: 'Another cool feature of this tool is that it is available on Windows, Mac,
    and Linux. For more information, you can visit their official sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.adafruit.com/the-adafruit-raspberry-pi-finder](https://learn.adafruit.com/the-adafruit-raspberry-pi-finder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/adafruit/Adafruit-Pi-Finder](https://github.com/adafruit/Adafruit-Pi-Finder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is another tool to identify a Raspberry Pi in your network. Coincidentally,
    this tool has the same name but was developed by another developer called **Ivan
    X**. This utility can be found at the following link: [http://ivanx.com/raspberrypi/](http://ivanx.com/raspberrypi/).'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling rogue Raspberry Pi devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to take a step further after detecting a Raspberry Pi, then you
    can use a tool called **RPI Hunter**. This tool enables you to find out whether
    a Raspberry Pi is connected to your network and then send many payloads to disable
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about this tool, visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/BusesCanFly/rpi-hunter](https://github.com/BusesCanFly/rpi-hunter)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of information in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned about IoT devices, their associated risks and vulnerabilities,
    and how to solve them.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you became familiar with all the different types of IoT network technologies
    available and their associated vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: But the best part is that *you learned how to leverage these IoT devices (that
    most people see as threats) as great tools that you can deploy in your arsenal
    of defensive security tools*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to move to another fascinating and very relevant topic these
    days: **cloud security** (how to securely deploy and develop apps in the cloud).'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to know more about all available Raspberry Pi models and other
    cool projects, visit their site at the following URL: [https://www.raspberrypi.org/](https://www.raspberrypi.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are curious to learn more about LoRa networks, you can visit their site
    at the following URL: [https://lora-alliance.org/](https://lora-alliance.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn more about Zigbee, you can visit the following site: [https://zigbeealliance.org/](https://zigbeealliance.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to learn more about Sigfox, you can visit their official site at
    the following URL: [https://www.sigfox.com](https://www.sigfox.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
