- en: Identifying Android Malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identifying malware is a typical task in many Android forensic examinations.
    In this chapter, we will start with an overview of the most common Android malware
    types, and then walk you through the process of identifying malware on Android
    devices using different methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Android malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android malware overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying Android malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Android malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, malicious programs are common on any operating system, and mobile
    devices are no exception. Even such secure devices as those running iOS, iPhones,
    and iPads, can be infected. A good example is **Pegasus** spyware, which was used
    to attack Arab human rights defender, Ahmed Mansoor, in 2016\. It is able to jailbreak
    the target device and plant spyware on it, thereby enabling attackers to read
    a victim's messages, track calls, collect passwords, trace the phone's location,
    and gather information from different applications.
  prefs: []
  type: TYPE_NORMAL
- en: If we are talking about Android, the situation is even worse. It is easier to
    install applications from untrusted sources, making it the most malware-affected
    mobile platform. What's more, security researchers often find lots of malware
    samples even on the Google Play Store! A good example is the **Android Grabos**
    campaign, discovered by McAfee in late 2017/early 2018\. This campaign pushed
    unwanted apps onto unsuspecting users—this is commonly known as a pay-per download
    scam. 144 apps were identified by security researchers and removed from Google
    Play. But around 17.5 million global smartphone devices had already downloaded
    those applications before they were removed from the store.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go further now and look at the most common types of Android malware.
  prefs: []
  type: TYPE_NORMAL
- en: Android malware overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may know, different types of malware have different goals, so they have
    different functionalities as well. Some malicious programs spy on the victim and
    attempt to steal application data, for example, SMS messages, and emails, while
    others just show the user unwanted advertisements. This section will introduce
    you to the most common types of Android malware.
  prefs: []
  type: TYPE_NORMAL
- en: Banking malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Banking malware is one of the most popular varieties on the Android platform.
    It can be distributed as fake banking applications to steal banking information
    typed by the users, or as a third-party application that will steal such info
    from a genuine one. Also, usually, banking Trojans can intercept banking transactions,
    and perform actions typical of spyware, such as sending, deleting, and intercepting
    SMS messages, and keylogging. Some pieces of banking Trojans have even more advanced
    capabilities. A good example is **MysteryBot**—this can also send spam from the
    affected device and has ransomware capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Spyware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spyware monitors, logs, and sends important information from the target device
    to the attacker's server. This information might be comprised of SMS messages,
    recorded phone calls, screenshots, keylogs, emails, or any other application data
    that may be of interest to the attacker. An interesting example is **BusyGasper**, identified
    by Kaspersky Lab experts in early 2018\. It not only possesses common spyware
    capabilities, such as collecting information from popular messаging applications,
    such as WhatsApp, Viber, and Facebook, but it also has device sensor listeners,
    including motion detectors.
  prefs: []
  type: TYPE_NORMAL
- en: Adware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adware is another popular malicious or unwanted application type that is very
    common on Android devices. It is relatively easy to detect, as the victim will receive
    continuous popups and ads on their device's screen. Such unwanted programs are
    not always harmless, since popups may result in the downloading of another piece
    of malware, including the types already mentioned—spyware and banking Trojans.
  prefs: []
  type: TYPE_NORMAL
- en: Ransomware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, the main targets of ransomware are desktop Windows-based computers
    and servers, but it also exists on mobile platforms, and on Android in particular.
    Usually, it only locks the device screen with a ransom note, but sometimes it
    encrypts users' data as well. A good example is **WannaLocker **ransomware, which
    targeted Chinese Android users in 2017, and used AES to encrypt users' files,
    except those whose names start with `.` and files that have `DCIM`, `download`, `miad`,
    `android`, and `com`. in their pathname.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptomining malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cryptocurrencies are extremely popular nowadays, so this type of malicious program
    is available even for mobile platforms, such as Android. The goal of such applications
    is to mine cryptocurrency, using a victim's device computation capacity, for example,
    Monero. Occasionally, this type of malware can even put smartphone hardware at
    risk. For example, **Loapi**, a Trojan with cryptomining capabilities, worked
    victims' phones so hard that their batteries swelled up in less than 48 hours!
  prefs: []
  type: TYPE_NORMAL
- en: The following section walks you through identifying malicious applications on
    Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Android malware identification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section walks you through the process of identifying Android malware in
    forensic images using antivirus scanners, VirusTotal, and YARA rules.
  prefs: []
  type: TYPE_NORMAL
- en: Android malware identification using antivirus scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using antivirus scanners is a typical way to find known pieces of malware, so
    it's a recommended first step for picking low-hanging fruit. There are a multitude
    of antivirus scanners, with many of them having free versions that can be used
    by mobile forensic examiners to complete such tasks. Most of them are Windows-based,
    so the first step is to mount a previously created physical image so that it will
    be accessible to the operating system and antivirus scanner.
  prefs: []
  type: TYPE_NORMAL
- en: As you already know, most Android devices use EXT4 as the filesystem for the
    most interesting partition from a forensic point of view—the userdata partition.
    By default, this filesystem isn't supported by Windows, so we need a third-party
    tool to be able to mount it and, more importantly, in read-only mode, as we don't
    want the antivirus scanner to delete anything from the image we are going to examine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, forensic examiners have such a tool available. It''s called *Linux
    File Systems for Windows*, and its trial version is available for download here:
    [https://www.paragon-drivers.com/en/lfswin/](https://www.paragon-drivers.com/en/lfswin/).
    After installation, you are ready to start mounting the userdata partition. You''ll
    need FTK Imager, but you should have it already installed, as we used it in the
    previous chapters. Here is how to mount an ext4 partition on a Windows host in
    two simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open FTK Imager and go to File | Image Mounting...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b72c30f2-fa90-491e-9020-b47122bd2c00.png)'
  prefs: []
  type: TYPE_IMG
- en: AccessData FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the image file. In our case, it''s an Android 9 userdata partition physical
    image. Choose Physical & Logical as the mount type, Block Device / Read Only as
    the mount method, and then click the Mount button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f03e091-3b99-425a-b94f-036702d5b3e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Mounting an EXT4 image with FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! Now the filesystem is available as logical disk `E:` on our Windows
    10 host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f38c5744-b3b6-4234-ba87-b042d0b75b98.png)'
  prefs: []
  type: TYPE_IMG
- en: Part of a mounted filesystem, as seen in Windows Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it can be easily scanned with an antivirus scanner. Usually, user-installed
    applications can be found under the `/data/app` directory, so it may be a very
    good idea to start our malware hunting by scanning this folder. For this example,
    we will use ESET NOD32 antivirus ([https://www.eset.com/int/home/antivirus/](https://www.eset.com/int/home/antivirus/)).
    It has a very interesting option from a forensic point of view—**Scan without
    cleaning**. This enables an examiner to find a piece of malware, but not delete
    or quarantine it. To choose it, right-click on your folder of choice, and go to
    Advanced options. In our case, scanning only took a few seconds, and the result
    yielded two malicious objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6fe3801-cfc8-4dbb-84e2-9f9d7b70a41e.png)'
  prefs: []
  type: TYPE_IMG
- en: Antivirus scan log
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, sometimes, especially if you know where to look, you can find
    Android malware very quickly and easily using antivirus engines. Of course, the
    software you are using may not contain corresponding signatures and may miss malicious
    applications, so it's highly recommended to use multiple engines for scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Android malware identification using VirusTotal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VirusTotal is a free service that can be used to analyze suspicious files and
    URLs for malware. As you may have noticed, Android applications have an `.apk`
    extension, so if you find a suspicious file, you may want to upload it to VirusTotal
    to check whether it's actually malicious. Why is this better than scanning with
    an antivirus scanner? It will scan your file with at least 55 antivirus engines!
    What's more, you may not want to upload any files from your real cases to the
    internet, but it's not a problem, as you can search for files that have already
    been uploaded using their hash sums, MD5, SHA1, or SHA256\. This service is available
    here: [https://www.virustotal.com](https://www.virustotal.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already found two malicious files in our Android 9 image, so let''s
    upload one of them to VirusTotal and see how it is detected by other antivirus
    engines. Go to VirusTotal using a web browser of your choice, and click the Choose
    file button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02a25991-91ea-4b69-9112-718b6b67baaa.png)'
  prefs: []
  type: TYPE_IMG
- en: VirusTotal interface
  prefs: []
  type: TYPE_NORMAL
- en: 'If a file''s hash is already in the database, you''ll immediately be redirected
    to the page with the results; if not, it will need some time to scan it. In our
    case, the file''s hash has been found immediately, and we see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2443dee3-00ac-4a5b-ac79-cb16edafa447.png)'
  prefs: []
  type: TYPE_IMG
- en: VirusTotal scan results
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our malware sample has been detected by 29 antivirus engines
    out of 56 – not bad at all. But what if we didn't want to upload our sample? As
    previously mentioned, you can use hashes to search for malicious files on VirusTotal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a suspicious file''s hash sum, you can use Eric Zimmerman''s free
    tool, called Hasher, which is available at [https://ericzimmerman.github.io](https://ericzimmerman.github.io).
    Now take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the tool, go to Tools - Options, and choose hashing algorithms. In our
    case, we chose MD5 and SHA256.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To select the file you want to hash, go to File - Select file, or press *Alt*
    + *1*. You''ll see the results in the main window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aac87593-fabc-432a-8edc-697a85d1b3e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Hashing results
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the hash value, click on the corresponding field and press *Alt* +
    *C*. Now you are ready to go to VirusTotal. Click on the Search tab, and paste
    the hash value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14f6da0d-076b-4fef-9c12-28119f10f86e.png)'
  prefs: []
  type: TYPE_IMG
- en: Searching VirusTotal using hash values
  prefs: []
  type: TYPE_NORMAL
- en: As we used the SHA256 hash sum of the file already scanned by VirusTotal, we
    will be redirected to the same page. But even if we didn't upload the file, we
    would get the result, as the file had already been uploaded by a third party.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you have a bunch of files to scan, and it may be a problem to upload
    them one by one. To upload a bunch of files automatically, you can use VirusTotal
    Uploader, which is available here: [https://support.virustotal.com/hc/en-us/articles/115002179065-Desktop-Apps](https://support.virustotal.com/hc/en-us/articles/115002179065-Desktop-Apps).
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload a file or multiple files, click Select file(s) and upload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63432575-4f4c-492b-bba1-3dab0a0546a2.png)'
  prefs: []
  type: TYPE_IMG
- en: VirusTotal Uploader inteface
  prefs: []
  type: TYPE_NORMAL
- en: 'For demonstration purposes, let''s upload the second malicious file we have
    already identified. Its hash value was found as well, so the tool immediately
    opened the browser tab containing the scan results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dace1291-1a32-493e-8a91-4a97822218f8.png)'
  prefs: []
  type: TYPE_IMG
- en: VirusTotal scan results
  prefs: []
  type: TYPE_NORMAL
- en: This file has even better detection results—34 engines out of 60\. But what
    is a forensic examiner going to do if the file isn't detected by any of the antivirus
    engines as there are no signatures for it? Write your own rules using YARA! You'll
    learn how to do this in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Android malware identification using YARA rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the official documentation (which can be found at [https://yara.readthedocs.io/en/v3.8.1/](https://yara.readthedocs.io/en/v3.8.1/)),
    YARA is a tool aimed at helping malware researchers (and forensic examiners—both
    computer and mobile, of course) to identify and classify malware samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the help of YARA, an examiner can write rules based on textual or binary
    patterns. Here is an example of such a rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This rule will detect any file that contains the `teststring` string. Let''s
    look closely at the principal parts of the rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '`meta`: This part contains the rule''s metadata, for example, what exactly
    it detects, and who wrote it. It may even not be included in the rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strings`: These are strings that your malware sample must contain in order
    to be detected. You can use multiple strings or even binary patterns. Strings
    can be case-sensitive or not, and in ASCII or wide form (two bytes are used to
    encode a single character), or both.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`condition`: This contains a Boolean expression telling us under what circumstances
    a file satisfies the rule. It may be all the strings defined in the `strings`
    section, or a limited number of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's write a YARA rule to detect a piece of malware we already identified in
    the previous sections. First of all, we must find unique strings. To be able to
    do this, let's use another forensic tool from Eric Zimmerman – bstrings: [https://ericzimmerman.github.io/](https://ericzimmerman.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a command-line tool, so you''ll have to run it from the Windows Command
    Prompt. Use the `-f` switch to point to the file you want to extract strings from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aef46ecf-dfae-4611-969e-93c7e19d8f9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Using bstrings to extract strings from an APK file
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting string emerges from the very outset – `com.example.horsenjnj`.
    But how can we determine whether it''s unique? A good idea is to search for the
    string in Google or another available search engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbd489ac-3fd8-4a6e-8a47-79ab4fd05674.png)'
  prefs: []
  type: TYPE_IMG
- en: Google search results
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is only one search result, which makes the string we found
    unique. What's more, if we click the link, it will bring us to the VirusTotal
    page we already saw in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: If we scroll the output of strings, we will find more interesting strings, for
    example, `res/xml/shit.xml`– not a very common name for an XML file from application
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use two of the strings we have found to write a YARA rule for the detection
    of our piece of malware. As you may remember from the previous sections, most
    antivirus engines detected it as Android Banker, so let's call our rule `android_banker`.
    The same can be written in the description—**Detects Android Banker**; we will
    add this to the `meta` section. We have two strings for our rule. Since we don't
    know how they are encoded, we can add `ascii wide` after each of them. The final
    section—the condition (the file that will be detected by the rule) must contain
    both strings, so let's use `all of them` as the condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what we end up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To use it, you must save it as a file with the `.yar` extension. Now, all you
    need is a scanner capable of using YARA rules. You can get one here: [https://github.com/virustotal/yara/releases/](https://github.com/virustotal/yara/releases/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The scanner is another command-line tool. Use the `-r` switch to scan a directory
    of your choice recursively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eaf608a2-2b85-4c0a-96f9-8d05b09049a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Scanning for malware using YARA rules
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, our malware sample was successfully
    identified by the YARA scanner.
  prefs: []
  type: TYPE_NORMAL
- en: You can create more complex rules, of course, and the official YARA documentation
    is a very good reference source. This can be found at [https://yara.readthedocs.io/en/v3.8.1/](https://yara.readthedocs.io/en/v3.8.1/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has shown you how to identify malware in forensic images of Android
    smartphones and tablets using antivirus scanners, VirusTotal, and YARA rules,
    as well as how to write your own rules.
  prefs: []
  type: TYPE_NORMAL
- en: The final chapter will introduce you to Android malware analysis techniques,
    including the basics of dynamic and static analyses of malicious applications.
  prefs: []
  type: TYPE_NORMAL
