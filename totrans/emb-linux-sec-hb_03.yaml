- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying Design Requirements Criteria – Hardware Selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll be performing a deep introspective into the design criteria
    that will determine what hardware you select. The simple decision of selecting
    a platform alone could drive thousands of other dependencies you may not have
    even thought of previously. This chapter and the next (which is this chapter’s
    companion) will become the cornerstone of all future efforts when you’re building
    your appliance.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, It’s my understanding that if you’re reading this book (which
    I deeply appreciate you choosing by the way!), you’re somewhat vested in its core
    subject matter. As the author, I’m assuming that not only are you interested in
    **embedded Linux systems** but that you are probably deeply involved in such a
    project right now. Knowing that, I assume that you also have a good baseline of
    general technical knowledge. I trust that the level of the information presented
    here is informative enough to add value to your project and not too general enough
    to be an affront to your already acquired skills. This chapter and the next are
    meant to help you connect all the metaphorical dots and illuminate a greater picture
    of what your solution can become.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you’re planning to build a **virtual appliance**, this chapter may not be
    as relevant for you and your team as we will be focusing on hardware. This chapter
    is mostly geared toward the physical. We will only briefly review virtual appliances.
    In terms of virtual appliances (or cloud offerings), you’ll need to consider what
    platform(s) you need to create images for. In recent years, virtual appliances
    have become more and more prevalent, especially in terms of the app stores on
    any of the **hyperscalers** (Azure, AWS, or Google). Many still build virtual
    appliances for OpenStack, KVM, Hyper-V, and (mostly) VMware ESXi.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you choose to make your products physical, virtual, or both, this chapter
    will help you and your design team sort out all the criteria to make an appropriate
    hardware platform selection. Additionally, we’ll review how best practices can
    impact these selections in terms of performance and scalability. These best practices
    tie in directly to your security footprint but they’ll also assist you in building
    a better product.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the targeted performance requirements?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any environmental limitations?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common off-the-shelf** (**COTS**) versus custom-built hardware'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What mainstream hardware platforms are available?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and use case criteria will dictate your operating system selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: What are the targeted performance requirements?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, it’s time for us to get technical. Hopefully, the developers
    of your solution have at least a general idea of what the end-state requirements
    of the appliance will be. Not having this crucial information at your disposal
    may make your prototyping exercises rather expensive as you may have to test multiple
    iterations of hardware platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the size and scale of your solution, or whether it’s physical
    or virtual, you must ensure that extensive performance testing is conducted to
    ensure that the security measures that are implemented within it still allow the
    solution to perform its tasks as advertised. We’ll get into how to integrate these
    security measures in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Another critical thing to consider is the future state of your solution. Ensure
    that the specifications you set forth for the applications, security measures,
    and scale of user data have some level of a safety buffer. It’s impossible to
    plan for the performance impact of future security patches or changes in your
    applications over time. Giving your solution a little extra CPU, memory, and storage
    can save your support team a trunk full of grief in the future.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s learn what we need if we decide so that we can create our solution
    virtually.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual appliances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you plan to deliver your offering as a virtual appliance, this exercise is
    going to be far less stressful. You won’t be testing hardware! You don’t need
    to worry about procuring a platform that meets your life cycle needs. It’s liberating.
    Deciding on creating a virtual appliance (or a public cloud offering) puts the
    resource requirements on the customer.
  prefs: []
  type: TYPE_NORMAL
- en: Your customer can then decide exactly how much vCPU, RAM, storage, and networking
    bandwidth they wish to assign to the virtual appliance. They provide the platform.
    The added benefit of this is that you know that the operating system that you
    need to choose must support Intel/AMD as that is the general standard in the enterprise.
    Your company, of course, can make recommendations for those baselines. In terms
    of public cloud providers, you can set the baseline VM sizing as part of the marketplace
    offering.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the key decision becomes which virtualization platforms you’re
    planning to make your solution available for – VMware, OpenStack, KVM, Hyper-V,
    Google, Azure, or AWS. Initially, you may start with one platform and then decide
    to add platforms as it is feasible for your teams.
  prefs: []
  type: TYPE_NORMAL
- en: I would be remiss in not mentioning that a good product manager does their research
    into which is the best selection for platforming. Depending on said research,
    you may find division in your target user base and their preferences, their procurement
    cycles, and, most importantly, their preferences for cloud and/or on-premises
    virtualization platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Although many solutions cannot be delivered as a virtual appliance, if it is
    feasible for your product, I’d recommend giving that methodology strong consideration.
    There’s a wealth of flexibility it can offer, something we will cover later in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered the performance of physical appliances, let’s consider
    hardware design.
  prefs: []
  type: TYPE_NORMAL
- en: T-shirt sizing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**T-shirt sizing** is a method of scaling and delivering a solution based on
    a desired capacity. It’s meant to standardize and simplify the delivery of your
    solution to your end-customer at the scales most commonly sought after.'
  prefs: []
  type: TYPE_NORMAL
- en: Allow me to present an example to help describe the T-shirt sizing methodology.
    For discussion’s sake, let’s say that a company wants to deliver a standalone
    storage solution. This company plans to offer a small, medium, and large solution.
    It becomes quite clear why they call it T-shirt sizing.
  prefs: []
  type: TYPE_NORMAL
- en: 'They decide that the small version of the solution will have the following
    hardware attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Single multi-core CPU (with low core counts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 32 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dual-gigabit Ethernet interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4x 1 TB SATA SSD drives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Moving on to their next level, they have decided that the medium version of
    their storage solution has the following hardware attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Single multi-core CPU (with high core counts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 64 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four-gigabit Ethernet interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8x 1 TB SATA SSD drives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Closing the loop on their sizing, they have decided that the large version
    of their storage appliance has the following hardware attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Dual multi-core CPUs (with high core counts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 128 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four-gigabit Ethernet interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dual 10G Ethernet interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16x 1 TB SATA SSD drives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These examples have been simplified to illustrate a point. The fictitious company
    selected three levels, each one being a larger scale than the previous. In the
    physical appliance world, this sizing methodology will also imply that to create
    a T-shirt-sized offering, much more work will be needed to ensure each release
    of the solution delivers the expected performance and security levels consistently.
    It is not uncommon that the choice to create such stepped-sized offerings may
    force the usage of different hardware vendors and platforms altogether.
  prefs: []
  type: TYPE_NORMAL
- en: T-shirt sizing your solutions invokes additional work for your teams, but I
    argue that it is a great methodology to consider. Doing such allows you to deliver
    your solution to a wider range of audiences with different scales of need. Now
    that we’ve reviewed the impact scaling has on design, let’s look at other factors
    in the hardware realm.
  prefs: []
  type: TYPE_NORMAL
- en: CPU/VCPU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CPU is the single greatest determining factor of everything else in your
    solution. There is a broad range in terms of performance, power consumption, and
    price. Your solutions’ form factor, environmental thresholds, and performance
    needs will ultimately drive the decision.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into all the greatness each CPU family brings to the table, I
    want you to know about the dark side of this equation. That’s right – I’m starting
    with the bad news and hopefully ending on a positive note in these next few sections.
    As this is a security-focused book, we must dive deep into the limitations, vulnerabilities,
    exploitation of said weaknesses, and other general malfeasance that becomes possible
    when choosing the wrong platform.
  prefs: []
  type: TYPE_NORMAL
- en: Later in this book, we’ll dive into all the resources your teams will have available
    to inform you of new threats, vulnerabilities, fixes, and mitigations. For now,
    let’s just go to the swampy waters of what to avoid today. The following list
    is based on entries in the **Common Vulnerabilities and Exposures** (**CVE**)
    database.
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth noting that the nasty ones get named, but not friendly human names
    such as tropical storms, hurricanes, and typhoons. They get names that instill
    the doom and gloom in those that mention them. Often, the team that discovers
    the vulnerability will give the vulnerability a logo as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'As there are currently about 240,000 known vulnerabilities of all types in
    the CVE database, I will only review some of those that grabbed headlines worldwide.
    This list will get you started, but don’t stop here – continue your research before
    making a selection. The following list highlights some of the most impactful CVEs
    that should influence your CPU and platform due diligence. We will also look at
    their impacts and mitigation techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Meltdown**: This family of vulnerabilities, which is contained in multiple
    CVEs, is centered upon the ability to exploit a race condition in the CPU and
    gain access to privileged information. It has 5 CVEs – CVE-2023-46836, CVE-2022-42331,
    CVE-2018-7112, CVE-2018-19965, and CVE-2017-5754:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impacts**: Intel x86 microprocessors, AMD microprocessors, IBM Power processors,
    and some ARM microprocessors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mitigations**: Most operating systems vendors have created patches to mitigate
    the vulnerability, but there are serious performance impacts on the systems once
    these fixes are applied. Newer processors built after 2019 should have hardware
    and firmware mitigations built in but still, there are new transient execution
    CPU vulnerabilities as recent as 2023.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spectre**: This family of vulnerabilities, which is contained in many CVEs,
    is very similar to Meltdown in terms of how CPU conditions are exploited to attain
    privileged information access by unauthorized users. It has 31 CVEs, so I’ll highlight
    the most important two – CVE-2017-5753 & CVE-2017-5715:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impacts**: Intel x86 microprocessors, as well as AMD and ARM microprocessors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mitigations**: Most operating systems vendors have created patches to mitigate
    this vulnerability, but there are serious performance impacts on these systems
    once these fixes are applied. Newer processors built after 2019 should have hardware
    and firmware mitigations built in but still, there are new transient execution
    CPU vulnerabilities as recent as 2023.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Downfall**: Also known as **Gather Data Sampling** (**GDS**), Downfall is
    another breed of transient execution CPU vulnerability that attacks the speculative
    execution functions in the CPU called **Advanced Vector Extensions** (**AVX**).
    Through this weakness, it is possible to run an exploit to access data contained
    within the vector registers (CVE-2022-40982):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impacts**: Intel X86-64 consumer microprocessors of product generations 6
    through 11, Intel Xeon X86-64 processors of generations 1 through 4.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mitigations**: It is expected that version 6.5 or greater of the Linux kernel
    will have code to mitigate this. However, even in 2024, almost every consumer
    computer today is vulnerable to it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foreshadow**: This vulnerability is also known as **L1 Terminal Fault** (**L1TF**).
    It targets virtual machines, hypervisors, and then ultimately the operating systems
    involved by attacking memory management (CVEs: CVE-2018-3615 & CVE-2018-3620):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impacts**: Virtually all families of Intel and AMD microprocessors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mitigations**: Processor replacement appears to be the best fix to resolve
    the problem. This issue has been resolved within the Intel Xeon processor family,
    starting with the Cascade Lake release. All newer chipsets should be immune to
    the exploits.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inception**: This vulnerability, also known as **Return Address Security**
    (**RAS**), is a new type of side-channel attack that targets speculative execution
    (CVE-2023-20569):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impacts**: Virtually all recent AMD microprocessors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mitigations**: AMD has released BIOS and firmware patch bundles to mitigate
    this exploit. Additionally, operating systems vendors may have released workaround
    patches. As of February 28, 2024, AMD has updated its published whitepaper with
    new information on how to mitigate this attack on future AMD processors ([https://www.amd.com/content/dam/amd/en/documents/corporate/cr/speculative-return-stack-overflow-whitepaper.pdf](https://www.amd.com/content/dam/amd/en/documents/corporate/cr/speculative-return-stack-overflow-whitepaper.pdf)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This list was my version of the top five exploitable vulnerabilities to be actively
    aware of. Each is generally tied to multiple CVEs and not all have been mitigated
    to the fullest extent. New variations or similar attacks continue to plague all
    CPU platforms as threats and AI usage to find new vulnerabilities evolve.
  prefs: []
  type: TYPE_NORMAL
- en: Fueled with that baseline information, you can see how hardware selection impacts
    your security footprint. As we move on to the next section, remember that all
    of these factors will resurface when we discuss operating system selection in
    the next chapter. For now, we’ll look into various memory considerations.
  prefs: []
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Memory type is deeply tied to the CPU and its associated memory controllers.
    These are all unchangeable parts of the system’s main board or motherboard. Because
    of the inferred dependencies, this is one of the easier selection points. However,
    from a security and reliability perspective, there are some differences to consider
    when making design choices. Each of these factors has a cost and other implications.
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, the only questionable option that you may be forced to consider
    is utilizing **Error-Correcting Code RAM** (**ECC RAM**) or non-ECC RAM.
  prefs: []
  type: TYPE_NORMAL
- en: What is ECC RAM? It is fault-tolerant memory that’s primarily used in high-end
    servers and workstations. Although it does provide greater resiliency, there can
    be a mild performance degradation in using this. If you need resilience, chances
    are that a ~2% hit to speed doesn’t matter.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its higher cost than standard RAM modules, ECC RAM is uncommonly found
    in IoT devices or small-scale embedded Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll consider a more important factor that can be impacted by your security
    footprint.
  prefs: []
  type: TYPE_NORMAL
- en: Disk input/output (I/O)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To best understand how this can impact your design, you must know the definition
    of the term **input/output operations per second** (**IOPS**). Since the point
    of this book is security, not teaching technical terms, I thought it appropriate
    to leverage a standard, publicly accepted definition here.
  prefs: []
  type: TYPE_NORMAL
- en: IOPS is defined as “*an input/output performance measurement that’s used to
    characterize computer storage devices such as hard disk drives (HDDs), solid-state
    drives (SSDs), and storage area networks (SANs). Like benchmarks, IOPS numbers
    published by storage device manufacturers do not directly relate to real-world*
    *application performance.*”
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'For vastly more on this subject, visit the Wikipedia page on this: [https://en.wikipedia.org/wiki/IOPS](https://en.wikipedia.org/wiki/IOPS).
    Wikipedia is an invaluable public resource that you should consider donating to
    if it helps you. It sure has helped me over the years.'
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, you must understand the impact encryption has on system performance
    in terms of overhead and degraded IOPS.
  prefs: []
  type: TYPE_NORMAL
- en: The third and final factor to be considered is what type of storage your solution
    will leverage. This still matters regardless of whether you are creating a virtual
    appliance or a physical one. The painful difference between the two delivery methods
    is that you can control what storage types are built into a physical appliance,
    whereas with a virtual appliance, you have no control and can only provide recommendations.
    If the end-user can control what storage class is used, your solution may not
    function as advertised or – even worse – not be able to function at all if the
    storage is too slow to meet the applications’ needs. So, let’s look at what storage
    choices there are.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following storage classification list, I will be focusing on the base
    unit of storage itself and not going into different mass storage options, such
    as arrays or network-attached storage. That could be a whole book in itself. So,
    let’s look at your options for individual storage drives:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hard disk drive** (**HDD**) is one of the oldest storage devices for computer
    systems. Over the decades, the size of the spinning magnetic platters has greatly
    shrunk in size but gained in terms of storage capacity. Early HDDs had their capacity
    in megabytes, though today, they can contain as much as several terabytes. Other
    factors that will limit the overall performance of this storage platform are the
    bus that connects the drive and the amount of IOPS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bus**: SATA'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IOPS**: Between 50-80 on average'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The bus and IOPS are provided for all noted storage platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solid state drive** (**SSD**) is a leap forward in storage technology from
    HDD disks. SSDs have no moving parts and are created in very small form factors.
    They are generally delivered in the form factor of a 2.5 in disk or card form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bus**: SATA or PCIe'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IOPS**: Depending on the platform, 4,000 to tens of thousands (or more)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-Volatile Memory Express** (**NVME**) is the latest in consumer storage
    platforms. NVME drives are delivered as small cards. Sometimes, multiple NVME
    drive cards can be mounted onto a larger PCIe card for storage density:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bus**: PCIe'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IOPS**: Depending on the platform, 10,000 up to millions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we’ve taken a deep dive into some of the most common storage types,
    let’s look at how adding encryption impacts their performance.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption at the disk, volume, or filesystem level can easily be broken down
    into two delivery methods. These are hardware-based encryption and software-based
    encryption. Each has its positives and negatives.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware-based solutions are normally delivered via PCIe RAID cards. They can
    not only allow you to create resilient volumes but also offload the overhead of
    providing encryption from the main CPU or operating system. The only drawbacks
    are having proper slots to fit the cards into your solution, and more so the costs
    of said cards.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux Unified Key Setup** (**LUKS**) is the standard software-based encryption
    method for Linux distributions. Widely used across the world in solutions of all
    scales, LUKS does add a bit of overhead cost in terms of RAM and CPU performance.
    On scale, it requires external key management, but on an individual system, it
    will force the user to enter a passphrase before the filesystem can be accessed.
    This can be cumbersome for booting and updating processes as it requires manual
    intervention. Other than those factors, it costs nothing to implement.'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting data at rest is considered a cornerstone of systems security. On
    the other hand, encrypting data in transit is often taken care of at the application
    or networking layer.
  prefs: []
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we’ll review a few options you can implement to add security
    to your networking profile while reducing the load on your solution’s CPU. With
    each of these options, we’ll provide you with some links to further educate you
    on their technology. Each of these technologies, which will be presented in brevity
    here, can greatly assist your team in designing a more secure solution.
  prefs: []
  type: TYPE_NORMAL
- en: What I don’t want to do here is waste your time with general information on
    firewalling, VLANs, whitelisting address segments, or other basic network security.
    As this book focuses on designing, building, and supporting secure embedded Linux
    systems appliances, I intend to highlight hardware that can assist you. Let’s
    take a look at a couple of interesting technologies that you should consider putting
    into your solutions.
  prefs: []
  type: TYPE_NORMAL
- en: TCP offload engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For several years now, some higher-end **network interface cards** (**NICs**)
    have had additional built-in functionality to offload the entire TCP/IP networking
    stack from the main CPU of the system. This comes in the form of a solution known
    as a **TCP offload engine**. These NICs are supported by virtually all operating
    systems now.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging one or more of these cards can improve the performance of your solution
    but realistically, you must still have to account for encryption and security
    in your applications and systems configuration as well. Moving the networking
    stack to the NIC allows for other types of application security to run unimpeded
    on the main CPU.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about this technology at [https://en.wikipedia.org/wiki/TCP_offload_engine](https://en.wikipedia.org/wiki/TCP_offload_engine).
  prefs: []
  type: TYPE_NORMAL
- en: TLS accelerator cards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Transport Layer Security** (**TLS**) accelerators (formerly also known as
    **SSL accelerators**) are cards that offload processor-intensive work related
    to encrypting and decrypting network traffic. The performance boost and network
    security capability increase by leveraging one of these solutions is beyond substantial.
    Some high-end appliance manufacturers embed this hardware directly on their mainboards,
    though they can be added easily via a PCI slot (if available) on the system.'
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about this technology at [https://en.wikipedia.org/wiki/TLS_acceleration](https://en.wikipedia.org/wiki/TLS_acceleration).
  prefs: []
  type: TYPE_NORMAL
- en: GPU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OK – I know that I may ruffle some feathers here with my take on this subject.
    In recent years, GPUs have been used more for offloading workloads than processing
    video output in many appliance solutions worldwide. It can be debated and argued
    that most modern GPUs are more competent at workload processing than the majority
    of the mainstream CPU market.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of your opinion on their usage, offloading the processing of computational
    power to GPUs is a mainstream function in many Linux systems. This is most commonly
    associated with efforts in **artificial intelligence** (**AI**) and **machine
    learning** (**ML**) applications.
  prefs: []
  type: TYPE_NORMAL
- en: This is a design concern based on what may be supported in your chosen operating
    system (which we plan to dive deep into within the next chapter). Adding a GPU
    to your system is no small decision. Most of these cards are quite significant
    in terms of size and they require a notable amount of additional power (provided
    via direct cables from the **power supply unit** (**PSU**) of the system itself).
    In most circumstances, this additional power powers the card’s cooling fans as
    they generate heat like an oven!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a solution that requires a significant GPU or multiple GPUs will
    require a larger PSU and more significant cooling to be built within the appliance.
    I felt that it was important to mention this as we will soon discuss the impact
    environmental concerns have on your solution.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll consider other custom hardware that you may require in your appliance.
  prefs: []
  type: TYPE_NORMAL
- en: Custom hardware and peripherals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a section that may be near and dear to your heart since you’re building
    a custom solution. There are vast security implications and factors to consider,
    depending on what your solution will be connected to or contain internally. Building
    an appliance solution virtually implies some level of customization at not just
    the software level but the hardware leveraged as well. This is best described
    by the fact that you are solving an issue or several issues that the end-customer
    could not account for easily.
  prefs: []
  type: TYPE_NORMAL
- en: Physical security concerns aside, let’s take a journey down the path of what
    security concerns may exist with the usage of custom hardware and/or external
    peripheral hardware devices. These can be internal or connected to your solution
    externally. They may require your solution to have third-party drivers and software
    installed that you have little control over or input in their life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: For externally connected devices, the concern not only resides in software that
    is out of your control but also in the physical medium to which your solution
    is connected to these devices. Perhaps your solution is built to control or maintain
    external industrial machines. The very manner in which your solution connects
    with them and the protocols in play is the greatest security concern.
  prefs: []
  type: TYPE_NORMAL
- en: If the custom hardware or peripheral needs third-party support and software,
    your team must ensure that the life cycle and support cycle will align with what
    you project for your solution. If you’re building a solution that’s anticipated
    to last for approximately 5-10 years but the third-party software needed to maintain
    the functionality may not be supported after only a few years, there is a massive
    gap. Failure to plan for this is a security problem. If there’s a newly discovered
    vulnerability but your vendor is no longer providing support or updates, your
    solution is ultimately compromised.
  prefs: []
  type: TYPE_NORMAL
- en: The implications for your product might be substantial here, so I recommend
    having done a bit of due diligence in confirming the supportability of anything
    third party that you build into your solution. *The devil is in* *the details*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to another crucial factor – encompassing the implications
    of how and where your solution may be deployed by your end-customers. This is
    the environment in which it will reside.
  prefs: []
  type: TYPE_NORMAL
- en: Are there any environmental limitations?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover a group of often overlapping concerns that will
    impact the design and physical security of your product. Not all hardware is capable
    of residing in challenging environments. Let’s face the facts here and acknowledge
    that most electronics need a pretty stable and safe environment in which to operate
    efficiently. Exposure to the elements, limited cooling, power availability, lack
    of internet, and physical security all are at play here (and more). These factors
    may greatly influence whether or not your team can leverage existing off-the-shelf
    hardware platforms or whether you must design and build a custom platform. There
    are many vendors worldwide that can assist you regardless, but it’s up to you
    and your team to make that call. Let’s look at the factors you must consider.
  prefs: []
  type: TYPE_NORMAL
- en: Power
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Power consumption, which is directly correlated to cooling requirements, is
    yet another crucial calculation and requirement for your solution. Power consumption
    is rate-limited by the power supply in the hardware platform. These can vary vastly,
    depending on the scale of capacity and the components in your solution.
  prefs: []
  type: TYPE_NORMAL
- en: Another power consideration has to do with where and how it will be deployed.
    Let’s review some examples.
  prefs: []
  type: TYPE_NORMAL
- en: The average CPU doesn’t consume that much power. However, if you have built
    a solution that has incorporated one or more GPUs, then plan for additional power
    and aggressive amounts of cooling. This may entail additional components, such
    as additional fans, liquid cooling systems, or additional heat sinks.
  prefs: []
  type: TYPE_NORMAL
- en: Systems that run too hot don’t live long productive lives. They are much more
    likely to crash randomly and create situations where your solution is compromised
    or create negative customer experience issues. Heat is a key environmental factor.
    We will revisit environmental considerations later in this chapter and also discuss
    how some vendors counter them.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to another set of impacting factors.
  prefs: []
  type: TYPE_NORMAL
- en: Offline/air-gapped
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Albeit very common for embedded Linux systems appliances, being cut off from
    the internet is not a bad thing. Being shielded from exposure to external threats
    can be seen as a positive attribute for a system to have. Sadly, such protection
    also comes at a cost. Simplistic methods to provide device updates directly from
    web-based resources become untenable.
  prefs: []
  type: TYPE_NORMAL
- en: These systems require additional coding for their interfaces and alternate methods
    for processing software updates. This can be as simple as creating a DNF repository
    behind the firewall for the devices to update or be as complex as having an interface
    that leverages the ingestion of an update via an encrypted tarball, ISO image,
    or binary file.
  prefs: []
  type: TYPE_NORMAL
- en: It’s paramount for you to understand your target market so that you can plan
    for this requirement. For some industries, such as the government, this is considered
    a baseline standard to adhere to. However, there are exceptions, hence why we
    covered impact levels earlier in this book. Some agencies may allow systems that
    are not critical nor contain any sensitive data to get their updates from the
    internet. It happens, but this cannot be assumed to be the standard. Often, the
    standards are much less forgiving.
  prefs: []
  type: TYPE_NORMAL
- en: What if your appliance is a component in a vehicle? Let’s just assume this vehicle
    itself has no internet access and that its updates are only provided when the
    vehicles’ owners take them to the dealership for service. Sound futuristic? Not
    exactly. This situation is a reality today. In terms of some of the most advanced
    vehicles, maybe they can self-update when they are parked outside your home via
    your Wi-Fi connection. Some even have satellite connections. Can you see where
    this leads? But mostly, such updates are strictly controlled by the manufacturers.
    I honestly believe they’d prefer to be able to charge you money via the dealership
    for such services.
  prefs: []
  type: TYPE_NORMAL
- en: Many appliances are deployed in areas that simply have no luxury of getting
    connected to a cellular network, Wi-Fi, or LAN. So, simply knowing your target
    audience and planning to serve them best is key.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk more about this subject in upcoming chapters and dive deeper into
    this via practical exercises in future chapters (in which you’ll also have access
    to the resources via this book’s GitHub repository).
  prefs: []
  type: TYPE_NORMAL
- en: I could go on about offline systems. I bet you’re thinking, *Please don’t!*.
    So, for now, let’s move on to the next critical factor we need to plan for.
  prefs: []
  type: TYPE_NORMAL
- en: Climate control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where exactly will your solution be deployed? This is yet another key bit of
    information. Why? Brace for impact, because it truly matters. If your target audience
    works in a desert environment outdoors, for example, then standard off-the-shelf
    hardware will not suffice. You’ll need hardware that can survive in that environment
    and thrive. Such an example poses other system design concerns. Will this system
    be in sunlight and be exposed to the elements?
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you can see where I am going with this. But if you can’t yet, let’s
    take a look at another example situation. Let’s say that your appliance is targeting
    the agricultural industry and that it is mounted on very large tractors that service
    massive farmlands. Is your solution going to be able to withstand the vast differences
    in temperatures, humidity, and weather in that situation?
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s consider the ultimate extreme example that has existed for decades.
    What if your solution were to be a component of something traveling in outer space,
    such as a satellite or a deep space probe? Is your solution capable of enduring
    radiation, vast heating and freezing situations, and most of all the prospect
    of a piece of space dust or debris traveling at 100,000 km per hour?
  prefs: []
  type: TYPE_NORMAL
- en: 'Environmental conditions can easily compromise your solution if they are not
    planned for. However, there’s also another level of security you need to plan
    for if a machine is not in a protected location: the appliance’s physical security.
    Few platforms have tamper-proofing built in, so this also needs to be considered
    if your solution could be in a place outside or exposed to the public. Perhaps
    you need to ensure the solution has a locking enclosure or other protections.'
  prefs: []
  type: TYPE_NORMAL
- en: Protect your solutions from their target environment. Protect your solutions
    from unauthorized access. Protect your solutions from the end-users themselves.
    Yes, I said it – protect your appliances from the end-users themselves. The overall
    environment in which your solutions could be deployed determines our next design
    factor. Taking all, you’ve gathered thus far, let’s move on to choosing to use
    off-the-shelf hardware or having something custom-built.
  prefs: []
  type: TYPE_NORMAL
- en: COTS versus custom-built hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, I saved this *little* section for last in this group as all the previous
    ones led to this. This is where I truly hope that you’ve been paying close attention
    to the treasure trove of circumstances that can impact your overall final design
    for your solution.
  prefs: []
  type: TYPE_NORMAL
- en: As part of my intense research for this book, I’ve reached out to a few of the
    most likely hardware vendors that impact the embedded Linux systems market here
    in North America and globally. I was shocked to see how several of them no longer
    offer fully customized solutions rather than custom bezels and covers, hence why
    I felt this review needed to be here.
  prefs: []
  type: TYPE_NORMAL
- en: Some smaller or foreign shops will build you a system to specification but know
    that you will pay a premium for such services. I humbly acknowledge that based
    on your solutions’ needs, this may be your only recourse.
  prefs: []
  type: TYPE_NORMAL
- en: Some of these global vendors, such as Dell, HPE, and Lenovo, are more than happy
    to create a rebranded version of the hardware they already build. Few, however,
    at least in the USA, will build a custom system from the motherboard up. Those
    that will create an entire custom build from the motherboard onwards will not
    be inexpensive unless the order of scale in the number of systems requested is
    astronomical.
  prefs: []
  type: TYPE_NORMAL
- en: As customization is at such a premium cost, leveraging an existing form factor/build
    from a major vendor does have its advantages. Firstly, you know the system that
    will be delivered to you is supported, has a level of quality, and is easily repeated.
    The bigger factor in leveraging a vendor like this is to be able to get a system
    that meets your environmental and form factor needs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll take a look at a couple of global companies that build
    good systems that can be leveraged as your platform for your embedded Linux system.
    My day job has empowered me with excellent access to these two companies (and
    several others) but I offer the disclaimer that there are more out there across
    the globe. Both have many excellent products and services that can assist your
    team in its journey to create the ultimate secure embedded Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: Dell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, who is Dell and what do they do in the embedded Linux systems space? As
    one of the largest OEM manufacturers of technology solutions in the world, Dell
    has advanced capabilities and services that can be tailored to assist their embedded
    partners in logistics, building, and providing key solutions’ life cycle services.
    In other words, they can help you build, design, and then actually do all the
    heavy lifting for your team. This means that once you’ve settled on a design specification,
    Dell’s services can build, ship to customers, and even provide end-customer updates
    and support. You can learn more at [www.dell.com](http://www.dell.com) or on YouTube
    at [https://www.youtube.com/channel/UC01FW5V9UVohbPtqKSmXX-w](https://www.youtube.com/channel/UC01FW5V9UVohbPtqKSmXX-w).
  prefs: []
  type: TYPE_NORMAL
- en: Dell makes a wide range of server and workstation products. Another thing that
    Dell is known for is being one of the world’s first major OEM vendors to ship
    Linux pre-installed on their systems.
  prefs: []
  type: TYPE_NORMAL
- en: OnLogic™
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, who is OnLogic™ and what do they do in the embedded Linux systems space?
    As mentioned on the official website ([https://www.OnLogic.com/company/press/cl250/](https://www.OnLogic.com/company/press/cl250/)),
    *“OnLogic™ is a global industrial computer manufacturer who designs highly configurable,
    solution-focused computers engineered for reliability at the IoT edge. Their systems
    operate in the world’s harshest environments, empowering customers to solve their
    most complex computing challenges, no matter their industry. Founded in 2003,
    the company has offices in the US, the Netherlands, Taiwan, and Malaysia. OnLogic™
    has helped more than 70,000 customers worldwide advance their ideas with computers
    that are designed to last, built to order, and delivered in days.* Learn more
    at [www.OnLogic™.com](http://www.onlogic.com)or on YouTube at [www.youtube.com/](http://www.youtube.com/onlogic)OnLogic™*.”*
  prefs: []
  type: TYPE_NORMAL
- en: OnLogic makes a vast range of customizable systems for those creating solutions,
    ranging from very small ARM™-based systems, to a range of rugged PCs, and closing
    the loop with ruggedized modular small industrialized servers. Any of these systems
    are geared toward a wide range of environmental conditions. These resilient systems
    empower operations in climates and situations that would destroy lesser systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example of an OnLogic system being used in an industrial
    situation. The following figure shows an ARM-based OnLogic Factor 201™ system
    mounted in an electrical cabinet and being used as a **programmable logic controller**
    (**PLC**) that controls functions for machine controls within a factory environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22104_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – OnLogic Factor 201
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the comprehensive line of OnLogic Factor 201 system
    solutions, please visit the OnLogic Factor 201 system website, a link to which
    was provided previously.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed a couple of examples of COTS systems, if you don’t believe
    they meet your needs, then it’s time to consider custom builds from the ground
    up. This is a herculean undertaking and not something I have any deep recommendations
    for.
  prefs: []
  type: TYPE_NORMAL
- en: What mainstream CPU/hardware platforms are available?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s take a quick tour of the most commonplace platforms (and some not-so-common)
    that can be found being used by companies building embedded Linux systems. Each
    of these platforms has a unique performance profile and costs. The following platforms
    have been used by partners that I have worked with in the past decade. Some of
    these are vastly more popular than others. Let’s dive in.
  prefs: []
  type: TYPE_NORMAL
- en: Xeon™
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Intel Xeon™ processor family has been the flagship of high-performance server
    and workstation solutions since its introduction in 1998\. These processors are
    commonly used in AI, HPC, database and analytics, and critical application workloads.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on choosing the right Xeon processor for your solution,
    visit the Intel® website at [https://www.intel.com/content/www/us/en/products/docs/processors/xeon/server-processor-overview.html](https://www.intel.com/content/www/us/en/products/docs/processors/xeon/server-processor-overview.html).
  prefs: []
  type: TYPE_NORMAL
- en: Core™
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Intel® Core™ family of processors covers a wide range of devices, from IoT
    devices to laptops to the highest-end gaming PCs (i3, i5, i7, and i9). This family
    of processors can effortlessly handle everything from edge computing to business
    applications to high-end gaming.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on how to choose the right Core processor for your solution,
    visit the Intel website at [https://www.intel.com/content/www/us/en/products/details/processors/core.html](https://www.intel.com/content/www/us/en/products/details/processors/core.html).
  prefs: []
  type: TYPE_NORMAL
- en: Atom™
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Intel® Atom™ family of processors delivers a low-power consuming x64 platform
    that’s geared toward appliances and IoT devices. You might even think that these
    processors were tailor-made for the diverse environmental needs of most networking
    devices, edge appliances, and definitely for embedded Linux systems solutions.
    Don’t let their lightweight size and reduced power consumption fool you – these
    processors pack a punch in terms of processing capability. To learn more about
    Atom processors, visit the Intel website at [https://www.intel.com/content/www/us/en/products/details/processors/atom.html](https://www.intel.com/content/www/us/en/products/details/processors/atom.html).
  prefs: []
  type: TYPE_NORMAL
- en: Ryzen™
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AMD® Ryzen™ family of processors boasts onboard AI capabilities and Radeon
    GPU features on-chip. This empowers these chipsets to not just address the gaming
    PC market but readily provide the ability to process AI workloads within small
    form factors. AMD is also committed to maintaining the socket technology used
    by this family of processors for years to come. This is a pretty cool feature
    if you wish to future-proof your solution or be able to simply change the CPU
    itself for T-shirt sizing options. To learn more about the Ryzen™ family of processors,
    visit the AMD website at [https://www.amd.com/en/products/processors/business-systems/ryzen-ai.html](https://www.amd.com/en/products/processors/business-systems/ryzen-ai.html).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced RISC Machine (ARM™)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ARM®** isn’t just a platform – it’s a licensed architecture and because of
    this, many manufacturers build custom variations of this architecture into their
    systems. In recent years, NVIDIA tried to buy the company that owns the rights
    and patent of the architecture. This didn’t happen as planned, but NVIDIA is now
    known for bringing the most advanced ARM-based solutions coupled with their industry-leading
    GPU technologies, and these are trending in the ever-growing AI/ML battlefield.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of use cases where ARM is used as the platform is as vast as its
    ability to scale in terms of performance. This ranges from cellular phones to
    IoT devices and transcends to large-scale data center clusters of ARM with multiple
    onboard GPU-powered juggernaut servers. All of these require their manufacturers
    to pay license fees to the ARM corporation. If you’re interested in learning more
    about how this all works, I recommend taking a look at their website: [https://www.arm.com/](https://www.arm.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With all these different companies making their own version of the architecture,
    there have been hurdles in the Linux community in trying to support the platform
    as a whole. Many of these issues will be addressed in depth in the next chapter.
    So, if you’re looking for a hint of what’s to be discussed, I’ll offer a quick
    summary: UEFI BIOS compatibility, driver issues, and common tooling are the major
    hurdles in supporting this platform from a Linux perspective.'
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the perceived issues, some distributions of Linux thrive in this
    space, while others struggle to keep up and can only offer support for limited
    implementations of the ARM platform architecture. This platform and the next to
    be discussed are truly areas to keep your eyes on closely. Let’s move on.
  prefs: []
  type: TYPE_NORMAL
- en: RISC-V®
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RISC-V® is a new international open standard architecture that provides a framework
    for anyone to build a solution upon. Licensing is similar to the Open Source Software
    models. I find this to be game-changing. There is very little out there for support
    on this emerging platform at the time of writing, but in the next year or so,
    I suspect that RISC-V may give ARM a significant amount of competition, if not
    overtake it in the marketplace. Recently, I started playing with this platform
    in my home lab. Many Linux distributions are rushing to add support for this game-changing
    platform. You should follow this one closely. Very, very close.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on this open architecture, visit the RISC-V website at
    [https://riscv.org/](https://riscv.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Power® and IBM Z®
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These two IBM® platforms are generally known for their massive scale and resilience.
    IBM Z® is the mainframe platform that has been in production for longer than I
    can imagine and it’s still going strong in the Linux world. IBM® Power® systems
    haven’t been around as long but they too provide a certain niche environment that
    is still present in some industry verticals.
  prefs: []
  type: TYPE_NORMAL
- en: These systems are the pillars of resilience and uptime. They are the cornerstone
    of taking damage and still going onward. That said, they are generally not the
    platform of choice for an embedded Linux systems appliance. They are large and
    require a very specific set of skills that are no longer prevalent in the IT industry.
  prefs: []
  type: TYPE_NORMAL
- en: This is where my many years of experience come into play. Over the past decade,
    I’ve seen a couple of examples where these platforms are delivered as appliance
    solutions. Yes, I said it. These behemoths are delivered as appliances to their
    end-customers. These rare solutions generally focus on provisioning advanced storage
    and disaster recovery solutions for their end-customers, who need such advanced
    services but find them too complex in today’s X86-driven world.
  prefs: []
  type: TYPE_NORMAL
- en: Designing, building, and supporting one of these solutions nowadays is considered
    a herculean effort. The skills required to master these platforms are becoming
    more and more rare as time progresses. For more information on the Power platform,
    visit the IBM website at [https://www.ibm.com/power](https://www.ibm.com/power).
    Additionally, for more information regarding the Z series platform, please visit
    the IBM website at [https://www.ibm.com/z](https://www.ibm.com/z). These systems
    are greatly resilient but require some deep, deep investments.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we’ve come to the end of this chapter. So, let’s summarize what we’ve
    learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a myriad of selection criteria. All of the data
    that we have reviewed in this chapter will directly relate to what operating system
    we select in the next chapter. It’s codependent. The hardware you choose for your
    solution will limit your choices of what Linux distribution can support your hardware
    and requirements properly.
  prefs: []
  type: TYPE_NORMAL
- en: There is no *Easy Button* here for you to push and get answers. The platform
    you decide upon will be deeply tied to the options you have available for possible
    Linux distribution choices. This may not be a bad thing as there are many distributions
    of Linux to choose from. Any assistance in driving the selection may be useful.
    In this chapter, you learned how many of the complex hardware factors can impact
    the supportability of your system, limit the security profile, or simply become
    so complex that you may need to hire more specialized personnel to work with the
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: The greatest advice I can offer here is that you do your research and be diligent
    in not limiting yourself in this selection process. Having more options is a good
    thing. I wish the best of luck to you in this endeavor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take everything we’ve reviewed here and apply that
    knowledge to various selection criteria so that you have the most adequate Linux
    distribution for your company’s solution.
  prefs: []
  type: TYPE_NORMAL
