["```\nC:\\Users\\virusito\\loaders> echo \"1=potato;2=fish;3=person\" > raw.dat\n```", "```\n00 format MZ\n```", "```\n01 \n```", "```\n02 mov ah, 9h\n```", "```\n03 mov dx, hello\n```", "```\n04 int 21h\n```", "```\n05\n```", "```\n06 mov ax, 4c00h\n```", "```\n07 int 21h\n```", "```\n08\n```", "```\n09 hello db 'Hello, world!', 13, 10, '$'\n```", "```\nC:\\Users\\virusito\\loaders> fasm mz.asm\n```", "```\nflat assembler  version 1.73.04  (1048576 kilobytes memory)\n```", "```\n2 passes, 60 bytes.\n```", "```\n@Override\n```", "```\npublic int getTierPriority() {\n```", "```\n  return 60; // we are less priority than PE!  Important for \n```", "```\n             // AutoImporter\n```", "```\n}\n```", "```\npublic class MzLoader extends AbstractLibrarySupportLoader {\n```", "```\n  public final static String MZ_NAME = \"Old-style DOS \" +\n```", "```\n                                       \"Executable (MZ)\";\n```", "```\n  @Override\n```", "```\n  public String getName() {\n```", "```\n    return MZ_NAME;\n```", "```\n  }\n```", "```\nList<QueryResult> results = QueryOpinionService.query(\n```", "```\n                                          getName(),\n```", "```\n                                          \"\" + dos.e_magic(), \n```", "```\n                                          null\n```", "```\n);\n```", "```\n<constraint loader=\"Old-style DOS Executable (MZ)\"\n```", "```\n                                  compilerSpecID=\"default\">\n```", "```\n  <constraint primary=\"23117\" processor=\"x86\" endian=\"little\" \n```", "```\n                             size=\"16\" variant=\"Real Mode\"/>\n```", "```\n</constraint>\n```", "```\n    00 @Override\n    01 public void load(ByteProvider provider,\n    02                  LoadSpec loadSpec, \n    03                  List<Option> options,\n    04                  Program prog, \n    05                  TaskMonitor monitor,\n    06                  MessageLog log) \n    07               throws IOException, CancelledException {\n    08\n    09   FileBytes fileBytes = \n    10               MemoryBlockUtils.createFileBytes(\n    11                                              prog, \n    12                                              provider,\n    13                                              monitor\n    14   );\n    ```", "```\n    15   AddressFactory af = prog.getAddressFactory();\n    16   if (!(af.getDefaultAddressSpace() instanceof \n    17      SegmentedAddressSpace)) {\n    18      throw new IOException(\n    19            \"Selected Language must have a\" +\n    20            \"segmented address space.\");\n    21   }\n    ```", "```\n    22\n    23 SegmentedAddressSpace space = \n    24   (SegmentedAddressSpace) af.getDefaultAddressSpace();\n    ```", "```\n    25   SymbolTable symbolTable = prog.getSymbolTable();\n    26   ProgramContext context = prog.getProgramContext();\n    ```", "```\n    27   Memory memory = prog.getMemory();\n    ```", "```\n    28\n    29   ContinuesFactory factory = \n    30                MessageLogContinuesFactory.create(log);\n    31   OldStyleExecutable ose = new OldStyleExecutable(\n    32                                         factory,\n    33                                         provider);\n    34   DOSHeader dos = ose.getDOSHeader();\n    35   FactoryBundledWithBinaryReader reader = \n    36                                 ose.getBinaryReader();\n    37\n    ```", "```\n38   if (monitor.isCancelled()) return;\n```", "```\n    39   monitor.setMessage(\"Processing segments...\");\n    40   processSegments(prog, fileBytes, space, reader, dos, \n    41                   log, monitor);\n    42\n    ```", "```\n    43   if (monitor.isCancelled()) return;\n    44   monitor.setMessage(\"Adjusting segments...\");\n    45   adjustSegmentStarts(prog);\n    46 \n    ```", "```\n    47   if (monitor.isCancelled()) return;\n    48   monitor.setMessage(\"Processing relocations...\");\n    49   doRelocations(prog, reader, dos);\n    50 \n    51   if (monitor.isCancelled()) return;\n    ```", "```\n    52   monitor.setMessage(\"Processing symbols...\");\n    53   createSymbols(space, symbolTable, dos);\n    54 \n    55   if (monitor.isCancelled()) return;\n    ```", "```\n    56   monitor.setMessage(\"Setting registers...\");\n    57 \n    58   Symbol entrySymbol = \n    59      SymbolUtilities.getLabelOrFunctionSymbol(\n    60        prog, ENTRY_NAME, err -> log.error(\"MZ\", err));\n    61   setRegisters(context, entrySymbol,\n    62                memory.getBlocks(), dos);\n    63 }\n    ```", "```\n00 int csStart = INITIAL_SEGMENT_VAL;\n```", "```\n01 HashMap<Address, Address> segMap = new HashMap<Address,\n```", "```\n02                                                Address>();\n```", "```\n03 SegmentedAddress codeAddress = space.getAddress(\n```", "```\n04                  Conv.shortToInt(dos.e_cs()) + csStart, 0);\n```", "```\n00 if (numBytes > 0) \n```", "```\n01   MemoryBlockUtils.createInitializedBlock(\n```", "```\n02                           program, false, \"Seg_\" + i,\n```", "```\n03                           start, fileBytes, readLoc,\n```", "```\n04                           numBytes, \"\", \"mz\", true,\n```", "```\n05                           true, true, log\n```", "```\n06   );\n```", "```\n07 }\n```", "```\n08 if (numUninitBytes > 0) {\n```", "```\n09   MemoryBlockUtils.createUninitializedBlock(\n```", "```\n10                           program, false, \"Seg_\" + i + \"u\",\n```", "```\n11                           start.add(numBytes),\n```", "```\n12                           numUninitBytes, \"\", \"mz\", true,\n```", "```\n13                           true, false, log\n```", "```\n14   );\n```", "```\n15 }\n```", "```\n00 Memory mem = prog.getMemory();\n```", "```\n01 MemoryBlock[] blocks = mem.getBlocks();\n```", "```\n00 if (val == FAR_RETURN_OPCODE) {\n```", "```\n01   Address splitAddr = offAddr.add(1);\n```", "```\n02   String oldName = block.getName();\n```", "```\n03   mem.split(block, splitAddr);\n```", "```\n04   mem.join(blocks[i - 1], blocks[i]);\n```", "```\n05   blocks = mem.getBlocks();\n```", "```\n06   blocks[i].setName(oldName);\n```", "```\n07  }\n```", "```\n00  int relocationTableOffset =\n```", "```\n01                          Conv.shortToInt(dos.e_lfarlc());\n```", "```\n02  int numRelocationEntries = dos.e_crlc();\n```", "```\n03  for (int i = 0; i < numRelocationEntries; i++) {\n```", "```\n04    int off = Conv.shortToInt(reader.readNextShort());\n```", "```\n05    int seg = Conv.shortToInt(reader.readNextShort());\n```", "```\n06  \n```", "```\n07    int location = (seg << 4) + off;\n```", "```\n08    int locOffset = location + dataStart;\n```", "```\n09  \n```", "```\n10    SegmentedAddress fixupAddr = space.getAddress(\n```", "```\n11                                        seg + csStart, off\n```", "```\n12    );\n```", "```\n13    int value = Conv.shortToInt(reader.readShort(\n```", "```\n14                                                 locOffset\n```", "```\n15                                                 )\n```", "```\n16    );\n```", "```\n17    int fixupAddrSeg = (value + csStart) & Conv.SHORT_MASK;\n```", "```\n18    mem.setShort(fixupAddr, (short) fixupAddrSeg);\n```", "```\n19  }\n```", "```\n00  int ipValue = Conv.shortToInt(dos.e_ip());\n```", "```\n01  int codeSegment = Conv.shortToInt(dos.e_cs()) +\n```", "```\n02                                    INITIAL_SEGMENT_VAL;\n```", "```\n00  Address addr = space.getAddress(codeSegment, ipValue);\n```", "```\n01  symbolTable.createLabel(addr, ENTRY_NAME, \n```", "```\n02                          SourceType.IMPORTED);\n```", "```\n03  symbolTable.addExternalEntryPoint(addr);\n```", "```\n00  Register ss = context.getRegister(\"ss\");\n```", "```\n01  context.setValue(ss, entry.getAddress(), \n```", "```\n02                   entry.getAddress(), \n```", "```\n03                   BigInteger.valueOf(\n```", "```\n04                               Conv.shortToLong(dos.e_ss())\n```", "```\n05                   )\n```", "```\n06  );\n```"]