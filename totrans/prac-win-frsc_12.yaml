- en: Chapter 12. Network Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network forensics is a separate large area of Computer Forensics. It also includes
    various fields. Under network forensics, we should understand forensics where
    the main evidence is researched digital network traffic logs of network equipment,
    network applications, such as proxies, firewalls, servers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Together with a conventional host-based network, forensics allows us to resolve
    the incident more efficiently. Information from the network layer provides a complete
    picture of what happened. Moreover, in some cases the analyst does not have access
    to these compromised machines because attackers use encryption, delete files,
    or use other techniques to hide information.
  prefs: []
  type: TYPE_NORMAL
- en: In cases of complex targeted attacks, initial network intrusion is only the
    first stage of an attack. The next steps for the promotion of the network, the
    development of the attack, the collection of information, and data exfiltration
    occur with the use of the network.
  prefs: []
  type: TYPE_NORMAL
- en: Network traffic data relates to the volatility, therefore, to collect network
    traffic that is necessary to perform a series of preparatory measures for the
    collection of data.
  prefs: []
  type: TYPE_NORMAL
- en: Network data collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All data that can be retrieved from the network traffic can be divided into
    several levels:'
  prefs: []
  type: TYPE_NORMAL
- en: Full Packet Capture 100%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet String Data 4%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sessions 0.1%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is obvious that, from the point of view of a forensics analyst, the most
    preferred method is to collect full traffic, as in this case, we obtain the most
    complete dataset.
  prefs: []
  type: TYPE_NORMAL
- en: However, along with the obvious advantages, this approach has a number of drawbacks.
    A large amount of data for storage and subsequent analysis requires a lot of time
    and resources.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, other forms of data, such as NetFlow, in many cases is a reasonable
    alternative, and it requires fewer resources for the collection and storage and
    to process.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to other forms of full traffic, data altogether constitutes only a
    few percent. It require less space for storage and, therefore, can be stored for
    a longer time period.
  prefs: []
  type: TYPE_NORMAL
- en: For clarity, consider the following example. Let's suppose an organization has
    a daily volume of network traffic in a 1 TB per day on weekdays and 100 GB over
    the weekend, while the weekly storage data volume requires 5.2 TB.
  prefs: []
  type: TYPE_NORMAL
- en: The data in other formats require *5200 * 0.041 = 213.2 MB* per week. Thus,
    the total amount required for data storage is the weekly amount 5.4 TB or an average
    of approximately 770 MB per day.
  prefs: []
  type: TYPE_NORMAL
- en: If we talk about the need to ensure a minimum of three months storage, it will
    require 69 TB space on the disc. In addition to the processing of such large amounts
    of data, it requires a lot of time and power equipment.
  prefs: []
  type: TYPE_NORMAL
- en: However, this problem can be solved by a combined approach to the collection
    and analysis of network data. Namely, it is possible to store a complete traffic
    only for a week and the rest of the data for the year.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the storage network data for the year 5200 will need *0.041 + 5200 * /
    7 * 365 = 16.32 TB*.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, the Full Packet Capture data collection and NetFlow prerequire
    arrangements to collect the data before the incident. Unfortunately, often at
    the time of the incident, it appears that the organization has no Full Packet
    Capture, no NetFlow data. In this case, our only hope is that the processes of
    logging has been enabled on the server and networking equipment.
  prefs: []
  type: TYPE_NORMAL
- en: Next, consider the work with different data types, as often forensics analysts
    work with data that is available at the moment of working on the incident.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most ubiquitous connectivity options of the corporate network to the Internet
    is to use a proxy server. Moreover, all protocols except HTTP and HTTPS are blocked
    by a firewall. Therefore, we consider this particular scheme. A proxy server is
    a server that is an intermediary between the client and server. Proxies can be
    used for almost any network protocol, but they are most often used for the web
    traffic for HTTP and HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, a forensics analyst usually has a data proxy server. Proxy logs
    are invaluable in analyzing what URL is accessing the corporate network machines.
    Analysis of the logs of the proxy server allows you to quickly identify which
    workstations are exposed to a malicious resource. This is done much faster than
    in the analysis of each client machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, proxy logs include not only the time and IP address of the client
    and the URL, but they also include the status of the HTTP response and the username:'
  prefs: []
  type: TYPE_NORMAL
- en: Unix timestamp (`sec.ms`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response time (`ms`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requestor IP/name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache status and HTTP status code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reply size (bytes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request method (GET, POST, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL requested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Username (if available)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squid hierarchy status and Server IP / peer name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIME type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, caching the proxy server allows you to store additional copies of all
    the requested objects. In some cases, this is the only way to obtain the necessary
    files and perform the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Today there are many different proxies, both commercial and free. However, probably
    the most popular at the moment is Squid. Among the free servers, NGINX can also
    be noted.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of commercial solutions both hardware and in software
    form. Among commercial proxies, one of the most popular is the BlueCoat proxy.
    Among its advantages is its ability to proxy SSL traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Other popular solutions in the corporate environment are ForeFront Threat Managment
    Gateway (formerly, Microsoft ISA Server) and the decision of the Barracuda Network.
  prefs: []
  type: TYPE_NORMAL
- en: All of them have their own formats of log files, and we will not consider all
    of these decisions. We will focus on a detailed examination of Squid.
  prefs: []
  type: TYPE_NORMAL
- en: As noted earlier, Squid is one of the most popular and free solutions formed
    around a large community of users. This decision can be found in both small networks
    and large enterprises. Squid has great potential, and it is relatively easy to
    install.
  prefs: []
  type: TYPE_NORMAL
- en: An experienced administrator can configure Squid as a caching server with different
    filtering rules for different file types and a large number of additional options.
    All these settings are in the Squid configuration file, and they must be copied
    for analysis along with the log files. The default configuration file is located
    in `/etc/squid/squid.conf`. This file is well documented and explains many settings
    in the configuration file, specified as the location of the log files and cache.
  prefs: []
  type: TYPE_NORMAL
- en: Log files contain information about all client requests made via the HTTP protocol.
    The cache directory contains responses from web servers to clients. During the
    investigation, the analyst can get all the files and analyze them.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Squid provides a lot of information about every request it receives
    from customers. Thus, during the investigation, the analyst can get all objects
    from HTTP traffic passing through the proxy. Attackers often use the HTTP protocol
    to deliver malicious software as well as as a means of communication to communicate
    with the C & C servers, so proxy is a good place to collect information about
    such activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually entry in the log file of the proxy server Squid (`access.log`) is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is worth noting that the query string is logged and does not default. To
    remedy this situation, it is necessary to make a corresponding change in the configuration
    file, namely this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides this, it is also useful to include logging the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These options can be particularly useful in investigations. Also, since the
    Squid 2.6 version, you now have the opportunity to ask your own log format via
    the `logformat` option in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the administrator can specify an alternate log file and format string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As the Squid log file is simply a text file, it is easy to automate using scripting
    languages and command-line utilities. There is also a large number of different
    log file analyzers in Squid. Here are some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Squidview: [http://www.rillion.net/squidview/](http://www.rillion.net/squidview/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calamaris: [http://cord.de/calamaris-english](http://cord.de/calamaris-english)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SARG: [http://sourceforge.net/projects/sarg/](http://sourceforge.net/projects/sarg/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each has its advantages and disadvantages, so you need to choose the most appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Consider the case when the disposal of such, analysts have a full dump of the
    network traffic. In some cases, recording network traffic is included in the investigation
    of the incident after the incident and detection. Even in this situation, network
    traffic analysis can greatly enhance the effectiveness of the investigation.
  prefs: []
  type: TYPE_NORMAL
- en: To capture network traffic, the most often used format is the PCAP format. This
    format is supported by most of the tools for data collection, analysis, and detection.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the popular utilities are built on the `libpcap` library, including `tcpdump`
    and `wireshark`, and they have similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Using tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tcpdump` tool is used to collect and analyze network packets. It is ideal
    for the analysis of individual packages and for their consistency. In the case
    of automatic processing, `tcpdump` has several advantages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read a previously recorded `pcap` file, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The default `tcpdump` displays information about each packet, while the output
    format is protocol-dependent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to make the output more informative, `-v -vvv` can be used, as
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With the `-x` option, you can make `tcpdump` output packets in the `heh` format
    or into ASCII using`-A` or `-X`, and `tcpdump` allows you to output in two formats
    simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'In many cases, especially when handling large `pcap` files, the ability to
    use filters to discard unnecessary data is particularly useful. The `tcpdump`
    tools allows BPF filters. For example, to filter only TCP packets to port `80`,
    you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To write the filtered data to a file you must use the `-w` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, it is necessary to use a set of filters, and in this case, it is
    more convenient to write the filter set in the file and, thus, to use a file with
    the `-F` optional filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For more information on the various keys to use `tcpdump`, use the `man tcpdump`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Using tshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another useful tool for the analysis of `pcap` files is `tshark.`
  prefs: []
  type: TYPE_NORMAL
- en: The `tshark` tool is a console version WireShark. `tshark` has virtually the
    same functionality as `tcpdump,` but it adds the possibility of a WireShark protocol
    analyzer and uses syntax to filter.
  prefs: []
  type: TYPE_NORMAL
- en: To read a previously recorded `pcap` file the `-r` option is also used. The
    output format depends on the protocol. Thus, `tshark` shows application-level
    information.
  prefs: []
  type: TYPE_NORMAL
- en: To obtain additional information, use the `-V` option. To display packets in
    hex and ASCII formats, use the `-x` option.
  prefs: []
  type: TYPE_NORMAL
- en: Tshark allows the use of filters capture when using syntax that is similar to
    tcpdump's BPF, and display filters can be used when the built-in protocol analyzers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the use of, filters should be used with the `-f` option and the `-R` recording
    and read option. So to read `pcap` file of DNS traffic, you can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Another useful feature is the ability to generate tshark statistics from the
    analyzed traffic. To do this, use the `-z` option. A full list of the available
    statistics are available through the man pages on tshark.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to view statistics on http traffic, you can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**IO**,**phs**: This displays the results in a `pcap` file protocols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP**,**tree**: This displays statistics from HTTP requests and responses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMB**,**srt**: This displays statistics relating to the SMB commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, even so, despite the fact that in some cases command-line utilities
    are well suited for the analysis of packets at a fundamental level, it is better
    to use GUI tools such as WireShark for some tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Using WireShark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WireShark is used to address various issues that are related to the functioning
    of the network by network administrators, but it also plays an invaluable role
    in cases of network traffic analysis in investigations of incidents.
  prefs: []
  type: TYPE_NORMAL
- en: The WireShark interface can be divided into three main parts.
  prefs: []
  type: TYPE_NORMAL
- en: The upper part displays the list of packages. Each package information is available.
    By default, the packet number, timestamp, source, and destination address, protocol,
    packet length, and special protocols for different information.
  prefs: []
  type: TYPE_NORMAL
- en: The middle section displays detailed information about the package, which is
    selected in the upper part.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom window displays the individual bytes package to hex and ASCII formats
    such as conclusions team tcpdump, `-X`.
  prefs: []
  type: TYPE_NORMAL
- en: The data in all windows are connected to each other; thus, when we choose data
    in one window, associated data is highlighted in the other windows.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark has a lot of possibilities to analyze network packets. Therefore,
    to describe them in a single chapter is almost impossible. There are several good
    books that reveal these features in detail, namely *Practical Packet Analysis*
    and *Wireshark Network Analysis*.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the timestamps are the only binding element in the investigation.
    For example, sometimes the analyst knows only the approximate time of the incident
    and that they have to filter traffic for a certain period of time. The default
    WireShark displays the timestamps of packets in seconds from the start of the
    recording of traffic in the `pcap` file. Changing the display format of this can
    be done through the menu, as follows: **View** |**Time Display Format** |**Date
    and Time of Day**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order not have to perform this action every time, you can change these settings
    in Wireshark, as follows: **Edit** |**Preferences**'
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it is important to get a general idea of the analyzed traffic.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the **Statistics** menu item. This displays a wealth of information
    and statistics on the traffic collected.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Protocol Hierarchy provides a list of all identified in the traffic
    reports and statistics on them. Very often, this helps identify anomalies in the
    traffic, for example, in the case of tunneling via DNS or ICMP.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, WireShark allows you to group the traffic on the traffic
    between the different hosts. Thus, it is possible to determine the amount of transferred
    data between different machines. Statistics on the machines can be viewed via
    **Statistic** | **Endpoints**, and various conversations can be viewed through **Statistics**
    | **Conversations**.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, there are situations when it is necessary to analyze the data
    exchanged between two specific hosts. You can use the `Following TCPStream` option.
    WireShark allows you to perform such actions for UDP, HTTP, and SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful WireShark option that should be mentioned is the extraction of
    the responses from the network traffic. WireShark allows you to extract objects
    from the HTTP, SMB, and DICOM streams. To do this, use navigate to **File** |**Export**
    |**Objects** |**HTTP**.
  prefs: []
  type: TYPE_NORMAL
- en: Then, select a file from the displayed list of files, and use the **Save As**
    to save the file. It should be noted that the need to extract the file, all packets
    of network traffic in the case of at least one `otsutviya` package relating to
    the transfer of the file to get it will not succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can extract files from traffic using a number of other utilities,
    such as NetworkMiner or Bro. We discuss On Bro in more details later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default setting displays a specific list of columns in WireShark with the
    data about the packets, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The batch number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The timestamp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The location receiver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The length of the packet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fields with more information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, this may require additional information, such as port numbers
    of the receiver and the source or method of the HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following steps that must be completed in order to add a new column
    with the data on the method that is used by HTTP:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with the WireShark `pcap` traffic test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the HTTP packet containing the HTTP request method, such as GET or POST.
    This can be done manually or by entering the `http.request` filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the HTTP packet in the window with packets, then expand the HTTP header,
    and find a site with the **Method Request** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the field, and right-click on it to select **Â«Apply as ColumnÂ»**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After these actions a new column should appear. You can later change the name
    and other attributes of the column.
  prefs: []
  type: TYPE_NORMAL
- en: Often, WireShark plays an invaluable role in the analysis of network traffic
    that is required to handle large quantities of data and rich filtering. To filter
    data using Wireshark BPF filters. BPF filters are the most common method of filtering
    network utilities, including Wireshark, tcpdump, tshark, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: BPF filters can be used both during the traffic data collection and the analysis
    data. Consider the structure BPF filter, and a folder created by the BPF, which
    is called expression syntax. The expression includes one or more primitives that
    can be combined by operators. The primitives, in turn, are made up of qualifiers
    and the following values.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of qualifier, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type:**`host`, `net`, and `port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dir:**`src` and `dst`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proto:**`ether`, `fddi`, `ip`, `arp`, `rarp`, `decnet`, `lat`, `sca`, `moprc`,
    `mopdl`, `tcp`, and `udp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example with several primitives:'
  prefs: []
  type: TYPE_NORMAL
- en: dst host host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: src host host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: host host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ether src ehost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gateway host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full list of primitives can be found in the main pages for the `tcpdump` utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Primitives are grouped and can be combined using the following operators:'
  prefs: []
  type: TYPE_NORMAL
- en: Negation (`!` Or `not`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenation (`&&` or `and`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternation (`||` or `or`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the BPF syntax can be found on the main page.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing Bro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another tool to analyze network traffic is Bro. Bro is a very powerful tool,
    which is often positioned as an IDS, but the possibilities are much wider with
    Bro. Discussing all of them in a single chapter is almost impossible, so we will
    consider only some of them. One of the many advantages of Bro is the ability to
    use ready-made parsers different protocols.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following are some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: DHCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POP3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of these protocols is constantly expanding.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Bro applies the protocol analyzers to traffic, and it records the
    results in the log files that correspond to different protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Bro also allows you to write your own handlers in a language called Bro. For
    each event that occurs during the processing of the event may be caused by its
    handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following simple event handler discovery file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, remove all files from the traffic to keep this code in a file, run the
    `getfiles.bro` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After running this command, the catalog files are created, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conn.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssl.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ftp.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dns.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weird.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These files contain information about the network traffic for certain protocols.
    For example, `http.log` contains the following fields.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the log files in the startup directory that is created by Bro,
    `extract_files` lists which files are extracted from the traffic. For each file
    in this directory, you can find the corresponding entry in the `files.log` file.
    This entry contains a number of attributes, which are useful.
  prefs: []
  type: TYPE_NORMAL
- en: To analyze the contents of these log files in the distribution utility has Bro
    `bro-cut`. The input to this utility is passed through the pipe contents of the
    log file, and it specifies the list of fields to be filtered.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to list the types of files extracted from the traffic, you can
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s assume that we are investigating an incident of a viral infection, in
    which case the most interesting types of files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These are executable files on MS Windows files and the Java virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we learn more about the following files of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These results allow the team to set time, download the resource files, and download
    the protocol by which to transfer these files. You can then find these files in
    the `extract_files` directory and analyze them.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the resource files, go to the IP address `85.17.137.151
    92,123,155,154`, and you can use the data from the `dns.log` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dns.log` file is the result of Bro, and it describes the events, permits,
    and changes domain names into IP addresses and vice versa. The request to the
    DNS server is represented by a query attribute. The server''s response attribute
    is `answer`, and `ts` is the timestamp request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The result is that the IP address `85.17.137.151` resolves to domains `finansial.gov`
    and `w282d1wb.athleticsdrycleaner.pw`.
  prefs: []
  type: TYPE_NORMAL
- en: The IP address `92.123.155.154` belongs to `microsoft.com`, which greatly reduces
    the likelihood that the downloaded file is malicious.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the basis of the allocated domain names of the `http.log` file can obtain
    the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This suggests that the user downloaded a file from the resource `finansial.gov
    utisl.jar` protocol HTTP (the previously mentioned `FUJlhk2BEJTsb8tozk.jar.jar`
    file). Then, from the same resource, the `''2'' (Fy9phB2NNXKNHKuyHb.exe)` file
    was downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, you must pay attention to suspicious HTTP-POST `gate.php` requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resp_fuids` attribute identifies a response from the Web server, and this
    indicates any appropriate entry in the `files.log` file. Thus, the `FI ... Ug`
    identifier can get the `finansial.gov` server''s response in the GET request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Knowing Bro](img/image_12_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the replies provided, it is clear that `utisl.jar` is a java-applet. The
    client opens a page in a frame of the legal site, `www.efinancialnews.com`.
  prefs: []
  type: TYPE_NORMAL
- en: This small example is a clear demonstration of how it is possible to investigate
    with only file traffic using Bro.
  prefs: []
  type: TYPE_NORMAL
- en: However, the example shows only a small part of all possibilities of Bro. To
    learn about Bro's other capabilities, you can visit [https://www.bro.org/](https://www.bro.org/),
    where you can find a lot of additional material.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed some topics on network forensics. We learned what
    kind of data we could collect from a network and how to analyze logs from a proxy
    server. Also from this chapter, we learned how to collect `pcap` files and how
    to analyze them with WireShark and Bro.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, you will learn how to build a forensic environment.
    We will describe two approaches; one of them is virtualization, and another one
    uses distributed systems. We will describe GRR as an example of a distributed
    system.
  prefs: []
  type: TYPE_NORMAL
