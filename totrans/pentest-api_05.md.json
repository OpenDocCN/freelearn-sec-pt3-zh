["```\nConnection failed:\nSQLState: '08001'\nSQL Server Error: 21\n[Microsoft][SQL Server Native Client 11.0]Client unable to establish connection\n```", "```\njava.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'form category' at line 1\n```", "```\nORA-04021: timeout occurred while waiting to lock object SYS.<package like UTL_FILE\n```", "```\nWarning: pg_query(): Query failed: ERROR: syntax error at or near \"20131418\" LINE 1: 20131418 ^ in /var/www/html/view_project.php on line 13\nWarning: pg_num_rows() expects parameter 1 to be resource, boolean given in /var/www/html/view_project.php on line 14\n```", "```\nSELECT * FROM products WHERE name = '$user_input';\n```", "```\n' OR 1=1 --\n```", "```\nSELECT * FROM products WHERE name = '' OR 1=1 -- ';\n```", "```\nIf name = '' OR 1=1 then\n    SELECT * FROM products;\nEndIf\n```", "```\nSELECT * FROM products WHERE name = '$user_input';\n```", "```\n'; INSERT INTO users (username, password) VALUES ('a', 'b') --\n```", "```\nSELECT * FROM products WHERE name = ''; INSERT INTO users (username, password) VALUES ('a', 'b') --';\n```", "```\nGET /api/show_product?prod_id=$id\n```", "```\n50 UNION ALL SELECT * FROM ORDERS;\n```", "```\nGET /api/show_product?prod_id=50 UNION ALL SELECT * FROM ORDERS;\n```", "```\n{\n  'category': 'clothing',\n  'max_num_items': '10'\n}\n```", "```\n{\n  'category': \"clothing (SELECT 'admin', version() FROM information_schema.tables LIMIT 1);--\",\n  'max_num_items': '10'\n}\n```", "```\nGET /api/products?id=100\n```", "```\nGET /api/products?id=100 AND 1=2;\n```", "```\nGET /api/products?id=100 AND 1=1;\n```", "```\nGET /api/products?id=100 OR UNION SELECT username FROM users WHERE LENGTH(username) <= 10;\n```", "```\n$ python vAPI.py -p 8000\n * Serving Flask app 'vAPI'\n * Debug mode: on\n```", "```\n{\n  \"username\":\"§pentest§\",\n  \"password\":\"§MyPassword§\"\n}\n```", "```\nGET /api/login?username=$username&password=$password\n```", "```\ndb.users.find({ username: '$username', password: '$password' })\n```", "```\nGET /api/login?username[$regex]=.*&password[$regex]=.*\n```", "```\nconst filterObject = { \n    price: { \n        $gt: req.query.minPrice \n    }, \n    category: req.query.category \n};\ndb.products.find(filterObject);\n```", "```\nGET /products?minPrice=100&category=furniture\n```", "```\nGET /products?minPrice=100&category={\"$and\": [{category: \"furniture\"}, {\"isAdmin\": true}]}\n```", "```\nGET /api/products?category=tools\n```", "```\ndb.products.find({ category: '$category' })\n```", "```\nGET /api/products?category[$ne]=tools\n```", "```\n{\n  \"coupon_code\": \"blabla\"\n}\n```", "```\nimport org.owasp.esapi.ESAPI;\nimport org.owasp.esapi.errors.ValidationException;\npublic class UserRegistrationValidator {\n    public boolean isValidUsername(String username) {\n        try {\n            ESAPI.validator().isValidInput(\"Username\", username, \"Username\", 50, false);\n            return true;\n        } catch (ValidationException e) {\n            return false;\n        }\n    }\n}\n```", "```\nfrom flask import request\nimport sqlite3\n@app.route('/search')\ndef search():\n    query = request.args.get('q')\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM items WHERE name LIKE ?\", ('%' + query + '%',))\n    results = cursor.fetchall()\n    conn.close()\n    return jsonify(results)\n```", "```\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nList<FileItem> items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);\nfor (FileItem item : items) {\n    if (!item.isFormField()) {\n        String fileName = new File(item.getName()).getName();\n        String contentType = item.getContentType();\n        // Validates fileName, contentType, and file size\n    }\n}\n```", "```\nimport org.apache.commons.validator.routines.FloatValidator;\npublic class NumericInputValidator {\n    public boolean isValidFloat(String input) {\n        FloatValidator validator = FloatValidator.getInstance();\n        return validator.isValid(input, Locale.US);\n    // Using US locale for decimal separator\n    // You can do the same for integers and other numeric types.\n    }\n}\n```", "```\nimport org.owasp.encoder.Encode;\npublic class HtmlSanitizer {\n    public String sanitizeHtml(String input) {\n        return Encode.forHtml(input);\n    }\n}\n```"]