- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Penetration Testing Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing with the first part of our book, this is one of the most practical
    chapters. It’s obviously impossible to conduct a high quality pentest without
    the necessary toolbelt. We discuss some possibilities here along with some utilities
    that will help you on your daily API pentesting life. You will find instructions
    to install all major tools I applied to build the exercises, which are the same
    tools you will use in real API intrusion tests. There are also a couple of decisions
    that you need to make regarding the operating system and the **Integrated Development
    Environment** (**IDE**) to adopt. You can save some considerable time by cloning
    the book’s repository. I shared all codes that are present in the following chapters,
    together with some tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting tools and frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a testing lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring testing environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While some pentesters have a couple of laptops, each one with a release of one
    of the most prevalent operating systems (Linux, macOS and Windows), other prefer
    hosting their testing environments on some public or private cloud. I also previously
    worked with forensic analysis. There, the operating system’s family does make
    a point when conducting a deep analysis because of filesystems’ internals or some
    other intrinsic feature, such as libraries, command utilities or kernel. Nowadays,
    I belong to the team who works with local VMs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, I used a virtual machine for all the subsequent chapters of this book.
    To have a decent experience, it’s advisable that you have at least the following
    hardware config:'
  prefs: []
  type: TYPE_NORMAL
- en: Some Intel Core i7 or an equivalent AMD chip, or some Apple silicon computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16 GB of RAM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 TB of hard drive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting tools and frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will cover a reasonable number of API topics in the following chapters.
    So, we should start with selecting appropriate utilities that will diminish our
    work. Since we will leverage a VM, we must start with choosing a hypervisor. This
    part has various options and sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VMware Workstation**: This product recently (2024) became free for **personal**
    use. It’s very stable, frequently updated and can forward all CPU flags to the
    guest OS. I’d definitely recommend this if you’re using Windows as your host OS.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oracle Virtualbox**: An open-source cross-platform hypervisor controlled
    by Oracle. It has extension packs and works quite smoothly in pretty much any
    Windows release. The biggest limitation when this chapter was written (and that
    was present for a while in the product’s history) though, was the lack of virtualization
    registers for guest OSs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Hyper-V**: This is Windows’ embedded hypervisor. Works both on
    desktop and on server releases of the OS. It has a subset called **Windows Subsystem
    for Linux** (**WSL**), currently in its second version, which allows the deployment
    of some headless Linux distros.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VMware Fusion**: This product recently (2024) became free for **personal**
    use. Sharing an update lifecycle similar to its Windows brother, it’s an option
    you should consider when running an Apple host OS.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oracle Virtualbox**: It’s also available for macOS, but since the release
    of the Apple silicon chips (M1, M2, M3…), it stayed in beta. Unfortunately, starting
    a Linux guest OS was not successful with such chips when this chapter was written.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UTM**: This was a pleasant finding while I was researching products options
    and features to compose the lab. Because of the uncertainty about VMware Fusion’s
    license and the limitations and instabilities of Virtualbox on ARM/Apple silicon,
    I picked UTM. It is a light, low on advanced features open-source hypervisor based
    on QEMU that does a good job on emulating hardware for guest OSs. Therefore, it’s
    my recommendation if you’re running macOS on an Apple silicon.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VMware Workstation**: The package is stable enough to run on top of any major
    distro. Combining easiness of use, powerfulness of resources and free licensing,
    it’s my recommendation when running Linux as host OS.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oracle Virtualbox**: For sure, also available here. You can easily download
    binaries for some major distros, such as Fedora, Debian, Ubuntu and openSUSE.
    If using other distribution, try its source code.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QEMU-KVM**: If you feel satisfied with managing VMs using the command line
    only, this is a good choice. All Linux distributions have an implementation of
    one of these utilities or both. Although accompanied by some important and effective
    utilities, it can eventually become boring especially when you have to context
    switching a lot between the guest OS and the host OS. Use it as a last resource.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All tools demonstrated in this book run on Linux. Some of them also have versions
    for other systems, and some can be executed as Docker containers. To keep consistency
    throughout the chapters, I preferred selecting Linux. I used an Apple computer
    with an Apple silicon to write most of this book. Just a couple of labs could
    not run on such platform because of limitations of the tools used, and this was
    circumvented with another computer running Windows on an Intel chip. In both scenarios,
    I selected an Ubuntu Desktop distribution running as a VM. For the Apple machine,
    I selected UTM as the hypervisor and for the Windows computer, I picked VMware
    Workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step, although optional can help you with the coding part. It’s about
    selecting an IDE. There are some options you could consider in this sense:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vi`, and maybe one of its more powerful resources are the keystroke shortcuts.
    Contrary to Emacs, it may come preinstalled on some distros. However, `vim` has
    a modal way of work (editing vs visualizing) that can be cumbersome for newcomers.
    Besides that, there’s almost no graphical representation of anything. By default,
    you only see the text you’re editing and nothing else.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graphical**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is a reasonable amount of graphical IDEs in this category, like Atom,
    PyCharm and Sublime. In this book, we are going to primarily use either Python
    or Golang for our examples and exercises. Hence, there is no need for something
    too heavy in terms of resource consumption or with lots of complex features. I’m
    going to recommend only one to you, which is **Visual Studio Code** (or **VScode**,
    for short). There’s even an open-source version of it, called **VSCodium**. This
    product showed some quite useful features when I had to code: syntax highlighting,
    code completion, inline help, debugger, inline terminal, to name a few.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I ended up picking VScode (the non-open-source version) because of the features
    already mentioned but also because some extensions (how it calls its plugins)
    do not work smoothly with VSCodium.
  prefs: []
  type: TYPE_NORMAL
- en: Once you learned the lab’s options, it’s time to start building it. Let’s go!
  prefs: []
  type: TYPE_NORMAL
- en: Building a testing lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have chosen your tools and frameworks, let’s start building the
    environment that will accommodate our lab. I won’t show neither the hypervisor
    nor Ubuntu installation steps because they are very straightforward. However,
    should you find some trouble while installing them, you can always check the official
    documentations , such as https://help.ubuntu.com/20.04/installation-guide/index.html,
    https://docs.fedoraproject.org/en-US/fedora/latest/getting-started/, and https://download.virtualbox.org/virtualbox/7.0.18/UserManual.pdf.
    The sequence of tools that you will see in this section sort of follows the sequence
    they are introduced in the upcoming chapters. Some of them only contain a couple
    of screenshots and were not actually used throughout the book. So, their installations
    won’t be covered here.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with installing Docker first.
  prefs: []
  type: TYPE_NORMAL
- en: 'With your VM fully loaded, open a command prompt and just check if `curl` is
    installed. Some newer releases of Bash suggest the command to install a software
    when it’s not present. In any case, should `curl` is not present, you can easily
    install it with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next utility we will need is Docker. The official documentation has a comprehensive
    step-by-step guide here (https://docs.docker.com/engine/install/ubuntu/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before installing it per se, you have to run a couple of steps to prepare your
    system, such as adding its official repository and installing the signing key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And then you install Docker with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not forget to give your username all the necessary permissions to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first container we’ll install is going to be WebGoat which comes with WebWolf.
    Simply run the following and you’ll have all you need to run both software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ docker images
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: REPOSITORY                   TAG               IMAGE ID       CREATED         SIZE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: webgoat/webgoat              latest            cea483e51e8f   6 months ago    404MB
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that Docker is installed, let’s add more software to our lab.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OWASP Software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following subsections cover the installation of projects from OWASP. It’s
    an organization that unites recognized professionals with diverse backgrounds.
    They discuss and establish standards that are adopted throughout the world, as
    well as create software and tools to help security professionals and enthusiasts
    to practice and exercise their roles, especially on offensive security.
  prefs: []
  type: TYPE_NORMAL
- en: Installing crAPI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start by installing crAPI, which is another project from OWASP that’s
    full of vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: First, clone the repository located at https://github.com/OWASP/crAPI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll make use of `docker-compose` to put it up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install it with `sudo apt install docker-compose` and then type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will download some images and start all containers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check what you now have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And the containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: crAPI is up. Time to install Zed Attack Proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OWASP ZAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s move on and install OWASP ZAP. This is a graphical process.
  prefs: []
  type: TYPE_NORMAL
- en: First download the Linux Installer from here (https://www.zaproxy.org/download/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll have to install Java to run ZAP. When you simply type `java` on a command
    prompt, Bash will suggest you a couple of options. You must have a Java Virtual
    Machine with at least version 11:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then run the installer (as root):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As a result, the welcome screen is displayed (*Figure 2**.1*).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.1 – ZAP installer’s welcome screen](img/B19657_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – ZAP installer’s welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Next** button and you’ll be shown two options (*Figure 2**.2*).
    As we are advanced users, let’s do a **Custom installation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Picking a custom installation](img/B19657_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Picking a custom installation
  prefs: []
  type: TYPE_NORMAL
- en: This means a couple of subsequent questions will be asked. The first one is
    the installation directory. You can choose the default value, unless you have
    a partition with more/dedicated disk space. You will also see how much disk space
    is required and how much you have left (*Figure 2**.3*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Choosing the installation directory](img/B19657_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Choosing the installation directory
  prefs: []
  type: TYPE_NORMAL
- en: Then you have to inform where the installer will create the symbolic links.
    This is to make the software and its internal components to work when you invoke
    it either from the command line or from some window manager. Choose the default,
    since it points out to a directory that’s in system’s PATH (*Figure 2**.4*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Selecting where the installer will create the symbolic links
    to the binaries](img/B19657_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Selecting where the installer will create the symbolic links to
    the binaries
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to tell if you want or not a desktop icon. That’s cosmetic although
    useful in some cases. It didn’t hurt, so I selected it (*Figure 2**.5*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 –  Creating a desktop icon for the app](img/B19657_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Creating a desktop icon for the app
  prefs: []
  type: TYPE_NORMAL
- en: Next step is about updates. Do not forget to select the checkbox about checking
    updates on the startup, but do not select the one that installs new ZAP releases.
    As it happens with any more complex software like this one, you should read its
    release notes before considering installing a new version. Some conflict might
    be imposed to your system with other software. So, it’s safe to check first (*Figure
    2**.6*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Some update options](img/B19657_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Some update options
  prefs: []
  type: TYPE_NORMAL
- en: After this, the installation is complete. Try launching the application from
    the graphical interface. It may turn out that no icon is displayed with it (*Figure
    2**.7*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – ZAP’s icon does not show the app’s actual icon](img/B19657_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – ZAP’s icon does not show the app’s actual icon
  prefs: []
  type: TYPE_NORMAL
- en: This is not a problem. It might have some relationship with the JVM configuration
    or even your Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Every time it loads, ZAP asks if you want to persist the session. If you’re
    willing to save your activities, choose one of the relevant options. For the majority
    of the exercises you’ll do here, there’s no need for so (*Figure 2**.8*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Whether or not to persist the session](img/B19657_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Whether or not to persist the session
  prefs: []
  type: TYPE_NORMAL
- en: After you click on **Start**, the tool finally loads. You may have been presented
    the window on *Figure 2**.9*. ZAP has a reasonable number of add-ons, and they
    follow independent update cycles. Some recommendations may pop-up and confirm
    the process shall continue. Do not ignore them (*Figure 2**.9*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – ZAP add-on optional yet recommended update](img/B19657_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – ZAP add-on optional yet recommended update
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows a screenshot of some of the ZAP’s add-ons and the
    possibility to update them all with one click and in sequence (*Figure 2**.10*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – ZAP’s add-ons update screen](img/B19657_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – ZAP’s add-ons update screen
  prefs: []
  type: TYPE_NORMAL
- en: OWASP software has been installed. Let’s include another toolbelt item.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Burp Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another tool that we’ll apply a lot is Burp Suite. There is a couple of available
    versions, but we’ll use the Community Edition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the installer at https://portswigger.net/burp/releases/community/latest.
    Then simply execute it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As usual, first screen is the welcome screen (*Figure 2**.11*).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Burp installation welcome screen](img/B19657_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Burp installation welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: Select **Next** and you’ll be asked the directory where it will be installed
    (*Figure 2**.12*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Burp’s installation directory](img/B19657_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Burp’s installation directory
  prefs: []
  type: TYPE_NORMAL
- en: As it happened with ZAP (*Figure 2**.4*), the installer asks where symbolic
    links should be created. Do the same as the previous figure and select the default
    value, unless you have another area with more disk space (*Figure 2**.13*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Where links to Burp’s binaries should be created](img/B19657_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Where links to Burp’s binaries should be created
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the installer to decompress and put the files in the right locations.
    This may take a while depending on the current release and your VM’s hardware
    configuration (*Figure 2**.14*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Files being installed](img/B19657_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Files being installed
  prefs: []
  type: TYPE_NORMAL
- en: Just finish the setup and you’re good to go (*Figure 2**.15*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Installation’s end](img/B19657_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Installation’s end
  prefs: []
  type: TYPE_NORMAL
- en: At least, Burp comes with the right icon. When you type its name on your Linux’s
    windows manager, you’ll see it. Load it to verify if it’s all OK with the installation
    (*Figure 2**.16*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Calling Burp though the GUI](img/B19657_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Calling Burp though the GUI
  prefs: []
  type: TYPE_NORMAL
- en: Every time you open the application, you’ll be prompted if you want to start
    a temporary project in memory or if you’d prefer to load a previously saved project.
    In all exercises of this book, we’ll be creating temporary projects only, so just
    choose the first option and click on **Next** (*Figure 2**.17*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.17\uFEFF – Choosing how Burp will start](img/B19657_02_17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Choosing how Burp will start
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will be prompted with which parameters you’d like to use when loading
    Burp. You can configure several of them using the application’s GUI or directly
    editing its configuration files. If you have done this before, you can browse
    the config file and load it here through the corresponding dialog box. Otherwise,
    simply click on **Next** with the selected default option (*Figure 2**.18*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Loading Burp’s parameters](img/B19657_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Loading Burp’s parameters
  prefs: []
  type: TYPE_NORMAL
- en: That’s all. Burp is installed. Let’s continue.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postman and Wireshark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next installations are ridiculously simple: Postman and Wireshark.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postman
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'According to the official documentation, Postman currently (2024) supports
    Ubuntu, Fedora and Debian. Others may also work, but you’ll have to check your
    distro’s documentation besides the own tool’s to double check it. Using snap,
    as recommended by the manufacturer, you can have it on your system with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Done. Call it via the GUI or the CLI (*Figure 2**.19*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Calling Postman](img/B19657_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Calling Postman
  prefs: []
  type: TYPE_NORMAL
- en: Installing Wireshark
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For Wireshark, if you type wireshark on a command prompt, Bash will suggest
    installing it via APT. So just do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There’s a decision you need to take. By default, non-root users are not allowed
    to capture packets from your network devices. If you choose **No** (default),
    you must run Wireshark as root to be able to use it, especially if you’re capturing
    packets from the loopback interface (*Figure 2**.20*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Choosing if non-root users will be able to capture packets](img/B19657_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Choosing if non-root users will be able to capture packets
  prefs: []
  type: TYPE_NORMAL
- en: 'I selected `/etc/group` file and add my username to the line with the `wireshark`
    group, logout and login again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After that, I could finally load the software and capture the packets. Wireshark
    is now ready to rock (*Figure 2**.21*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Calling Wireshark](img/B19657_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Calling Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously stated, many of the codes created on this book were written either
    in Python or in Golang. Python has a very useful module called `pip` inside such
    environment. Sometimes, it does not come preinstalled with the main language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, you have two options. You either run the aforementioned command
    to install the required module only, or you install `pip` and the module. The
    second option is more versatile because you’ll need `pip` in some of the subsequent
    chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the Python version and the Ubuntu release, the first command on
    the block above may install many modules by default. You can check with `pip3
    list`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although I have mentioned that I picked VScode to use as IDE, I didn’t show
    yet how I installed it. There is a couple of available options, described at https://code.visualstudio.com/docs/setup/linux.
    I personally downloaded the binary and installed it with APT (`sudo apt install
    ./code`) and that’s all (*Figure 2**.22*):'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.22 – Calling V\uFEFFS code](img/B19657_02_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Calling VS code
  prefs: []
  type: TYPE_NORMAL
- en: This is it for the development environment. Let’s check other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing other tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need various types of tools to conduct the different activities in further
    chapters. Some of them will help you with fuzzing (which you’ll learn in detail
    in *Chapters 4 and 6*), some others help with load/stress test, or fake log generation
    or log analysis, and finally source code verification, besides the Golang package
    itself. In this section, we’ll take a look at a few of them. For your convenience,
    as it happened with all downloadable tools presented on this chapter, I put Intel
    and ARM Linux versions of it on the book’s GitHub repository. The book’s repository
    is available at [https://github.com/PacktPublishing/Pentesting-APIs](https://github.com/PacktPublishing/Pentesting-APIs).
    All major code excerpts used throughout the book are there for your convenience.
    Additionally, the utilities have big sizes. So, please check out the `README.md`
    file of this repository which will contain further instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another nice utility to work with Python is **Anaconda**. You can create additional
    environments to work on and install additional packages on them, like what can
    be accomplished with Virtual Environment. One biggest advantage though is that
    you can update all components and dependencies with a single command. I didn’t
    install it on my system, but you can follow the steps on https://docs.anaconda.com/free/anaconda/install/linux/
    to get it working.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next tool that will be useful to you in some of the chapters is **Hydra**,
    which is usually applied when you want to conduct some sort of brute force attack.
    To guarantee our happiness, its binary version is available on some Ubuntu default
    repository, so we can easily install it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Patator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Patator** is also inside our toolbelt. This utility is awesome when you need
    to conduct fuzzing attacks against some targets. However, its footprint may be
    quite considerable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Radamsa
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving on, we will install one flexible and powerful tool called **Radamsa**.
    It will be useful when working with fuzzing. The documentation is straightforward
    in terms of the installation (https://gitlab.com/akihe/radamsa):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Yes, you’ll install it from the source code, as this procedure needs to download
    some files that change according to the platform you are running them on.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Bench
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving on, next tool is **Apache Bench** (**ab**), something very useful for
    load tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: hping3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Not finished yet, for sure. Let’s now install `hping3`, which is an utility
    that sends ECHO packets using other protocols than ICMP. APT is your tool of choice
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: flog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next tool is a fake log generator. It’s very useful when you need to test some
    configuration or some utility you are developing against a mass of logs. It’s
    represented by the `flog` tool which can be installed with APT as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In [*Chapter 8*](B19657_08.xhtml#_idTextAnchor131), you’ll make use of an utility
    called `filebeat`, that continually pushes changes on files to an external Elastic
    service (like their cloud). It can be very important when you must have continuous
    monitoring of some resource. There are specific packages for major distributions.
    In our case (Ubuntu), you can follow the sequence below. The first line is a slight
    change from the one in the official documentation, since the use of `apt-key`
    to add repository keys is now deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `wget` and `echo` commands are on single lines. This package is supported
    on both, Intel and ARM processors. For your convenience, there are copies of the
    `.deb` packages for both platforms available on the book’s GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: ripgrep
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another quick and interesting tool that you will make use to search through
    log files is `ripgrep`. It’s also installed via APT, but its binary is simply
    `rg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Safety
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some tools and utilities that you’ll use on this book are released as Python
    modules. This is the case of `Safety`, a scanner to look for vulnerabilities in
    source code files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Golang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`snap`. This was the one I chose for its simplicity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s see how we can create separate environments to avoid bugging our main
    installation and start playing with the codes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring testing environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first recommendation I give is to always use Python’s **Virtual Environment**.
    **Anaconda** is nice and is very powerful, but it’s simply not necessary here.
    If you intend to combine the code you’ll see here on this book with other utilities
    or environments we were already creating, then Anaconda can become a valid option.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of the number of virtual environments you should have, it’s up to you.
    You can for example create one per chapter for the sake of better organizing the
    whole stuff, but this will mean more disk space will be occupied, since the same
    Python modules will be installed multiple times. Alternatively, you can create
    a single environment, let’s say `pentest`, and create sub-directories under it
    with the codes for each chapter, following the structure proposed on the book’s
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'I chose the second option above since the VM’s disk space is not something
    too big and multiple repeated modules just don’t make much sense. You will definitely
    need at least the following ones for the exercises: `Flask`, `Flask-GraphQL`,
    `Graphene`, `Flask-JWT-Extended`, `Pandas`, `Scapy`. The `safety` utility, as
    previously covered, is another Python module you may want to give a try.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Other auxiliary modules, such as `flask-oauth`, `flask-oauthlib`, `jsonify`,
    `requests`, and `scrapy` are also required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You are good to move on and start exploring the rest of the book. Enjoy it!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the end of *Part 1* of our book. We covered all the tools and utilities
    that will be used in the subsequent chapters. The intention here was to facilitate
    your work if you’re not too familiar with some of the software that we will be
    using.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll start *Part 2* and you’ll learn about the initial
    steps on pentesting APIs, with the reconnaissance activities. See you there!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'UTM Official Documentation: [https://docs.getutm.app/](https://docs.getutm.app/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VMware Workstation Documentation: [https://docs.vmware.com/VMware-Workstation-Pro/index.html](https://docs.vmware.com/VMware-Workstation-Pro/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle Virtualbox Documentation: [https://www.virtualbox.org/wiki/Documentation](https://www.virtualbox.org/wiki/Documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio Code Official Documentation: [https://code.visualstudio.com/docs](https://code.visualstudio.com/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Official Documentation: [https://docs.docker.com/](https://docs.docker.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP WebGoat and WebWolf: [https://owasp.org/www-project-webgoat/](https://owasp.org/www-project-webgoat/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP crAPI: [https://owasp.org/crAPI/docs/challenges.html](https://owasp.org/crAPI/docs/challenges.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP ZAP Documentation: [https://www.zaproxy.org/docs/](https://www.zaproxy.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Burp Suite Official Documentation: [https://portswigger.net/burp/documentation](https://portswigger.net/burp/documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Postman Official Documentation: [https://learning.postman.com/docs/introduction/overview/](https://learning.postman.com/docs/introduction/overview/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireshark Documentation: [https://www.wireshark.org/docs/](https://www.wireshark.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tshark Manual Page: [https://www.wireshark.org/docs/man-pages/tshark.html](https://www.wireshark.org/docs/man-pages/tshark.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python Virtual Environments: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Anaconda Official Documentation: [https://docs.anaconda.com/](https://docs.anaconda.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hydra Documentation: [https://hydra.cc/docs/intro/](https://hydra.cc/docs/intro/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Patator Repository: [https://github.com/lanjelot/patator](https://github.com/lanjelot/patator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Radamsa Repository: [https://gitlab.com/akihe/radamsa](https://gitlab.com/akihe/radamsa)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache Bench Manual Page: [https://httpd.apache.org/docs/2.4/en/programs/ab.html](https://httpd.apache.org/docs/2.4/en/programs/ab.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hping3 Manual Page: [https://linux.die.net/man/8/hping3](https://linux.die.net/man/8/hping3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flog Repository: [https://github.com/mingrammer/flog](https://github.com/mingrammer/flog)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Filebeat Official Documentation: [https://www.elastic.co/guide/en/beats/filebeat/current/index.html](https://www.elastic.co/guide/en/beats/filebeat/current/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ripgrep Documentation: [https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md](https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Safety Official Documentation: [https://docs.safetycli.com/safety-2](https://docs.safetycli.com/safety-2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python Flask Documentation: [https://flask.palletsprojects.com/en/3.0.x/](https://flask.palletsprojects.com/en/3.0.x/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python Scapy Documentation: [https://scapy.readthedocs.io/en/latest/](https://scapy.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python Scrapy Documentation: [https://docs.scrapy.org/en/latest/](https://docs.scrapy.org/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: API Information Gathering and AuthN/AuthZ Testing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part covers what you need to do right after figuring out your target API:
    gather more information about it. You will learn techniques to discover information
    about the target, including scanning it, which will help you prepare for the attack.
    You will also learn about the world of API **Authentication** (**AuthN**) and
    **Authorization** (**AuthZ**), two foundational components with their own particularities
    that you need to learn to successfully explore the target.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This section contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19657_03.xhtml#_idTextAnchor042), *API Reconnaissance and Information
    Gathering*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19657_04.xhtml#_idTextAnchor056), *Authentication and Authorization
    Testing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
