- en: Extracting Data Logically from Android Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从安卓设备中逻辑提取数据
- en: This chapter will cover logical data extraction, using free and open source
    tools wherever possible. The majority of the material covered in this chapter
    will use the **Android Debug Bridge** (**ADB**) methods previously discussed in
    [Chapter 2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml),* Setting Up the Android
    Forensic Environment*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖逻辑数据提取，尽可能使用免费和开源工具。本章中大多数内容将使用之前在[第2章](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml)中讨论过的**Android
    调试桥**（**ADB**）方法，*设置安卓取证环境*。
- en: 'By the end of this chapter, the reader should be familiar with the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，读者应熟悉以下内容：
- en: Logical extraction overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑提取概述
- en: Manual ADB data extraction
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动ADB数据提取
- en: ADB backup extractions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADB备份提取
- en: ADB dumpsys
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADB dumpsys
- en: Bypassing Android lock screens
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过安卓锁屏
- en: Android SIM card extractions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓SIM卡提取
- en: Logical extraction overview
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑提取概述
- en: In digital forensics, the term logical extraction is typically used to refer
    to extractions that don't recover deleted data or do not include a full bit-by-bit
    copy of the evidence. However, a more correct definition of logical extraction,
    also defined in [Chapter 1](1e7a3a23-96c6-4085-9981-44b579bb2a7f.xhtml), *Introducing
    Android Forensics*, is any method that requires communication with the base operating
    system. Because of this interaction with the operating system, a forensic examiner
    cannot be sure that they have recovered all of the data possible; the operating
    system is choosing which data it allows the examiner to access. In traditional
    computer forensics, logical extraction is analogous to copying and pasting a folder
    in order to extract data from a system; this process will only copy files that
    the user can access and see. If any hidden or deleted files are present in the
    folder being copied, they won't be in the pasted version of the folder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字取证中，逻辑提取一词通常用于指不恢复删除数据或不包括证据的完整逐位复制的提取方法。然而，逻辑提取的更准确定义，也在[第1章](1e7a3a23-96c6-4085-9981-44b579bb2a7f.xhtml)中定义，*介绍安卓取证*，是任何需要与基本操作系统进行通信的方法。由于与操作系统的交互，取证员不能确定是否已恢复所有可能的数据；操作系统在决定允许取证员访问哪些数据。因此，在传统的计算机取证中，逻辑提取类似于复制和粘贴一个文件夹来提取系统中的数据；此过程仅会复制用户可以访问和看到的文件。如果在被复制的文件夹中有任何隐藏或已删除的文件，它们将不会出现在粘贴的文件夹中。
- en: As you'll see, however, the line between logical and physical extractions in
    mobile forensics is somewhat blurrier than in traditional computer forensics.
    For example, deleted data can routinely be recovered from logical extractions
    on mobile devices due to the prevalence of SQLite databases being used to store
    data. Furthermore, almost every mobile extraction will require some form of interaction
    with the operating Android OS; there's no simple equivalent to pulling a hard
    drive and imaging it without booting the drive. For our purposes, we will define
    a logical extraction as the process that obtains data visible to the user, and
    may include data that has been marked for deletion.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如你将看到的，在移动设备取证中，逻辑提取和物理提取之间的界限，比传统计算机取证中更为模糊。例如，由于SQLite数据库广泛用于存储数据，删除的数据通常可以从移动设备的逻辑提取中恢复。此外，几乎所有的移动提取都需要与安卓操作系统进行某种形式的交互；没有类似于拔出硬盘并对其进行镜像而不启动硬盘的简单等效物。就我们而言，我们将逻辑提取定义为获取用户可见数据的过程，并可能包括已标记为删除的数据。
- en: Root access
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Root访问权限
- en: When forensically analyzing an Android device, the limiting factor is often
    not the type of data being sought, but rather whether or not the examiner has
    the ability to access the data. Root access has been covered extensively in [Chapter
    2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml), *Setting Up the Android Forensic
    Environment*, but it is important enough to warrant repetition. All of the data
    listed previously, when stored on the internal flash memory, is protected and
    requires root access to read. The exception to this is application data that is
    stored on the SD card, which will be discussed later in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行安卓设备的取证分析时，限制因素通常不是所寻求的数据类型，而是检查员是否能够访问数据。Root访问权限在[第2章](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml)中已做过详细讨论，*设置安卓取证环境*，但这一点足够重要，值得重复。之前列出的所有数据，当存储在内部闪存中时，都受到保护，并且需要Root权限才能读取。唯一的例外是存储在SD卡上的应用数据，本书后续将进行讨论。
- en: Without root access, a forensic examiner cannot simply copy information from
    the `/data` partition. The examiner will have to find some method of escalating
    privileges in order to gain access to the contacts, call logs, SMS/MMS, and application
    data. These methods often carry many risks, such as the potential to *destroy*
    or *brick* the device (making it unable to boot), and may alter data on the device
    in order to gain permanence.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 没有 root 访问权限，取证检查员无法简单地从 `/data` 分区复制信息。检查员将不得不找到某种方法来提升权限以访问联系人、通话记录、短信/MMS
    和应用程序数据。这些方法通常伴随着许多风险，如可能*销毁*或*砖化*设备（使其无法启动），并可能修改设备上的数据以获得永久性。
- en: The methods commonly vary from device to device, and there is no universal,
    one-click method to gain root access to every device. Commercial mobile forensic
    tools such as Oxygen Forensic Detective and Cellebrite UFED have built-in capabilities
    to temporarily and safely root many devices, but do not cover the wide range of
    all Android devices.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 方法通常因设备而异，没有通用的一键方法可以获取每台设备的 root 访问权限。商业移动取证工具如 Oxygen Forensic Detective 和
    Cellebrite UFED 具有内置功能，可以临时和安全地 root 许多设备，但不涵盖所有 Android 设备的广泛范围。
- en: Throughout this chapter, we will make note of where root is required for each
    technique demonstrated.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将注意到每个技术演示所需的 root 权限位置。
- en: The decision to root a device should be in accordance with your local operating
    procedures and court opinions in your jurisdiction. The legal acceptance of evidence
    obtained by rooting varies by jurisdiction.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 决定对设备进行 root 是根据您当地的操作程序和法院意见。通过 root 获取的证据的法律接受度因司法管辖区而异。
- en: Manual ADB data extraction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动 ADB 数据提取
- en: The `adb pull` command can be used to pull single files or entire directories
    directly from the device to the forensic examiner's computer. This method is especially
    useful for small, targeted examinations. For example, in an investigation strictly
    involving SMS messages, the examiner can choose to pull just the relevant files,
    if possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`adb pull` 命令可用于直接从设备将单个文件或整个目录拉到取证检查员的计算机。这种方法在涉及短信消息的严格调查中尤其有用，检查员可以选择仅拉取相关文件，如果可能的话。'
- en: USB Debugging
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: USB 调试
- en: Setting up the ADB environment has been previously discussed in this book. However,
    the device under examination must also be configured properly. USB Debugging is
    the actual method through which the examiner's computer will communicate with
    the device. USB Debugging is found under the Developer Options in the Settings
    menu. However, as of **Android 8.1**, the Developer Options menu is hidden; to
    reveal it, a user has to go to Settings | System | About Phone, and then tap the
    Build Number field seven times. Return to the previous screen—you will find that Developer
    Options are available now; simply open this menu and select Enable USB Debugging.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中先前已讨论了设置 ADB 环境。但是，检查的设备也必须正确配置。USB 调试是取证员计算机与设备通信的实际方法。USB 调试位于设置菜单中的开发者选项下。然而，截至**Android
    8.1**，开发者选项菜单是隐藏的；要显示它，用户必须转到设置 | 系统 | 关于手机，然后点击构建号字段七次。返回到上一个屏幕—现在可以找到开发者选项了；简单地打开这个菜单并选择启用
    USB 调试。
- en: In addition to USB Debugging, the correct drivers must be installed on the examiner's
    computer. Generally, they can be found online, either from the manufacturer's
    website or [www.xda-developers.com](https://www.xda-developers.com/). If commercial
    forensic tools are installed on the machine, the appropriate drivers may already
    be installed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 USB 调试外，检查员计算机上必须安装正确的驱动程序。通常可以在线找到它们，要么是从制造商的网站，要么是从[www.xda-developers.com](https://www.xda-developers.com/)。如果在机器上安装了商业取证工具，则可能已经安装了适当的驱动程序。
- en: 'Prior to Android 4.2.2, enabling USB Debugging was the only requirement to
    communicate with the device over ADB. In Android 4.2.2, Google added **Secure
    USB Debugging**. Secure USB Debugging adds an additional requirement of selecting
    to connect to a computer on the device''s screen; this prevents ADB access to
    locked devices from untrusted computers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 4.2.2 之前，启用 USB 调试是与设备通过 ADB 通信的唯一要求。在 Android 4.2.2 中，Google 添加了**安全
    USB 调试**。安全 USB 调试增加了在设备屏幕上选择连接到计算机的额外要求；这可以防止来自不受信任计算机的 ADB 访问已锁定设备：
- en: '![](img/9d5c70d9-8fea-4583-9a3f-133f1e7f0707.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d5c70d9-8fea-4583-9a3f-133f1e7f0707.png)'
- en: RSA fingerprint dialog (Android 8.1)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: RSA 指纹对话框（Android 8.1）
- en: 'Once USB Debugging has been enabled and the **Secure USB Debugging** check
    passed (depending on Android version), the device is ready for examination. To
    verify that the device is connected and ready to use ADB, execute the following
    command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If Always allow from this computer is selected, the device will store the computer's
    RSA key and the prompt will not appear on future connections to that computer,
    even if the device is locked.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'If the device status is **offline** or **unauthorized**, the Secure Debugging
    prompt needs to be selected on the screen:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd866447-8b15-4375-8a82-cd36ad42782b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'If everything is running correctly, the **device** status should show device
    like the following screen:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87e986c1-fca8-4af6-9d36-263ebf78e32e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Recovery Mode
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to truly be forensically sound, ADB data extractions shouldn't be used
    against a phone while it is turned on. While the device is running, timestamps
    can be modified and applications may be running and updating files in the background.
    To avoid this, an examiner should place the device into a custom Recovery Mode
    as shown in [Chapter 2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml), *Setting
    Up the Android Forensic Environment*, if possible. ADB access isn't available
    through the stock Android Recovery Mode. Typically, the first step in the rooting
    process is to flash a custom Recovery Mode to allow a method for repairing the
    device if something goes wrong. Rooted devices are far more likely to contain
    a custom recovery, but it is possible to flash a custom recovery to a non-rooted
    device. This method also allows the examiner to avoid the Secure USB Debugging
    prompt on newer versions of Android, although our testing shows that this does
    not work on Android Lollipop and versions newer than that. Recovery Mode also
    may not require USB Debugging to be enabled, which makes it an excellent option
    for bypassing a locked device.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: This method won't work on devices with full disk encryption enabled. Booting
    into Recovery Mode will not decrypt the `/data` partition.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The process to boot into Recovery Mode will vary for each device. Typically,
    it involves some combination of powering the device off and holding the volume
    and power keys. Guides for specific models can be easily found online.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'The stock Recovery Mode will typically show a picture of an Android being operated
    on:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a50ec078-0d64-4665-b9c0-63078baf29d1.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Stock Recovery Mode
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that stock recoveries will not allow ADB communication;
    running `adb devices` will simply show no devices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom recovery images for many devices can be found at the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[https://twrp.me/Devices/](https://twrp.me/Devices/)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'If a device is in a custom Recovery Mode and the correct drivers have been
    installed on the examiner''s computer, the device can be accessed via ADB as if
    it were live. Note that its status using the `adb devices` command now shows that
    it is in Recovery Mode:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e320edb-7122-4543-a8b9-afd4be72b0d2.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'There is one final step before the examiner can begin extracting data over
    ADB: the `/data` partition must be mounted in order to access user data. Some
    custom recoveries may mount this automatically, and others might not. If using
    **Team Win Recovery Project** images from the URLs shown previously, the `/data`
    partition can be mounted by selecting Mount and then selecting the `/data` partition
    as seen in the following steps. The recovery menu is generally either navigated
    by using the volume keys to move up and down and the power button to select, or
    may be touch-based depending on the custom recovery image used.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'For a TWRP recovery, follow these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'From the main recovery screen, select Mount:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36af8c77-3d34-4516-bd74-8f122f7b6903.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'After choosing Mount, select the partition(s) to be mounted:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbbdc3db-e25f-4fa4-9199-9c7ac080668e.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Once the `/data` partition (and any other partition the examiner wants to investigate)
    is mounted, the examiner can perform ADB data extractions, as demonstrated earlier
    in this chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: On many devices running Android 6.0 (Marshmallow) or higher, the userdata partition
    is encrypted by default, so it's impossible to mount and image it using custom
    recovery.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: If the device does not have a custom recovery, the following section will show
    how to boot into one or flash it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Booting to a custom recovery image
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the bootloader is determined to be unlocked, an examiner will need a custom
    recovery image from which to boot. An excellent source of recovery images is [https://twrp.me/Devices/](https://twrp.me/Devices/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: It is absolutely critical to select the correct recovery image for the device
    being examined; they aren't interchangeable and booting from the wrong image may
    brick the device.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a recovery image is selected and downloaded, the device needs to be placed
    into fastboot mode. This can be accomplished using one of two ways:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: ADB
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical device buttons
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To enter fastboot on a device over ADB, the device must already have USB Debugging
    enabled. The following is the command to enter fastboot mode over ADB:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If USB Debugging cannot be enabled or ADB cannot be used, there is also typically
    a combination of buttons to press while the device is booting, similar to entering
    Recovery Mode. The exact combination can be found online for each device specifically.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the device is in fastboot mode, running the following command will verify
    the device is connected and ready to communicate:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following command will load the custom recovery image into RAM and boot
    the device into Recovery Mode:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The device should now reboot and enter Recovery Mode. As shown in the Recovery
    Mode section, the `/data` partition may need to be mounted in order to access
    user data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: If the fastboot boot command fails, it is a likely indicator that the device's
    bootloader is locked.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Using adb shell to determine if a device is rooted
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest method to determine if a device is rooted is to use `adb shell`.
    This will open a shell on the device that will be accessed on the examiner''s
    computer; this means that any commands run in the shell will be executed on the
    device. Once USB Debugging is enabled and Secure USB Debugging is bypassed (or
    from Recovery Mode, as discussed later), open a Terminal on the local computer
    and run the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 确定设备是否已 root 的最简单方法是使用 `adb shell`。这将在设备上打开一个 shell，并将其访问权限传递到检查员的计算机；这意味着在
    shell 中运行的任何命令都将在设备上执行。一旦启用了 USB 调试并绕过了安全 USB 调试（或从恢复模式，如后续讨论的那样），在本地计算机上打开终端并运行以下命令：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The shell will appear in one of two ways, either with `$` or `#`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: shell 可能以两种方式之一出现，要么是 `$`，要么是 `#`：
- en: '![](img/43070d85-ac6b-483a-80f3-9975b13170f7.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43070d85-ac6b-483a-80f3-9975b13170f7.png)'
- en: 'On Linux systems, `#` is used to indicate a root user; `$` indicates a non-root
    user. If the shell returns showing `#`, the shell has root access:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统上，`#` 用于表示 root 用户；`$` 表示非 root 用户。如果 shell 返回显示 `#`，则说明 shell 已具有
    root 权限：
- en: '![](img/5ecfd6ee-9ba2-4e8c-a0a1-7dec4eb37705.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ecfd6ee-9ba2-4e8c-a0a1-7dec4eb37705.png)'
- en: 'One further step may be required on some rooted devices. If the shell returns
    `$`, try running the `su` command (as you can see in the previous screenshot):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些已 root 的设备上，可能需要进一步的步骤。如果 shell 返回 `$`，尝试运行 `su` 命令（如前面的截图所示）：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the `su` binary is installed on the device, which is usually a part of the
    rooting process, this will escalate the shell's permissions to root if it did
    not open with them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备上安装了 `su` 二进制文件（通常是 root 过程的一部分），则如果 shell 没有以 root 权限打开，这将提升 shell 的权限为
    root。
- en: Note that some older devices automatically ran the shell as root; simply opening
    the `adb shell` may be enough to give an examiner root access.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些旧设备会自动以 root 权限运行 shell；只需打开 `adb shell` 可能就足以给检查员 root 权限。
- en: adb pull
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: adb pull
- en: 'As discussed in [Chapter 2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml),* Setting
    Up the Android Forensic Environment*, `adb pull` is used to transfer files from
    the device to the local workstation. The following show the format for the `adb
    pull` command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml)中所述，*设置 Android 法医环境*，`adb
    pull` 用于将文件从设备传输到本地工作站。以下显示了 `adb pull` 命令的格式：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The optional `–p` flag shows the transfer''s progress, while the optional `–a`
    flag will copy the file''s timestamp and mode. The `<remote>` parameter is the
    exact path to the file on the device. The optional `<local>` parameter is the
    path where the file will be written on the examiner''s workstation. If no local
    path is specified, the file will be written to the current working directory.
    An example `adb pull` command may look like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `–p` 标志显示传输的进度，而可选的 `–a` 标志将复制文件的时间戳和模式。`<remote>` 参数是设备上文件的确切路径。可选的 `<local>`
    参数是文件将在检查员的工作站上写入的路径。如果没有指定本地路径，文件将写入当前工作目录。一个示例 `adb pull` 命令可能如下所示：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s look at the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下截图：
- en: '![](img/567160da-b1df-439c-a0df-62edb511d61a.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/567160da-b1df-439c-a0df-62edb511d61a.png)'
- en: This command would pull an image file from the device and write it to a directory
    of our choice. Again, note that the device must be rooted if you want to pull,
    for example, the `mmssms.db` database (which contains sent and received SMS and
    MMS); otherwise, the output would simply show that `0` files were pulled.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将从设备中提取图像文件并将其写入我们选择的目录。同样，请注意，如果您希望提取例如 `mmssms.db` 数据库（该数据库包含已发送和接收的 SMS
    和 MMS），设备必须是 root 的；否则，输出只会显示提取了 `0` 个文件。
- en: The output shows that the file is `599401` bytes in size. As a result of our
    command, `1.png` now resides in the `Test` folder.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示文件大小为 `599401` 字节。根据我们的命令，`1.png` 现在位于 `Test` 文件夹中。
- en: 'Similarly, if an investigator wishes to pull the files for an entire application,
    that can be done with `adb pull` also:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果调查员希望提取整个应用程序的文件，也可以使用 `adb pull`：
- en: '![](img/259c3f29-51b5-4682-bb62-70317a639e01.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/259c3f29-51b5-4682-bb62-70317a639e01.png)'
- en: This time, the `adb pull` command fetched every file in the `Pictures` directory.
    As you can see in the preceding screenshot, three files were pulled. The total
    size of the transfer is shown as `1310468` bytes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`adb pull` 命令提取了 `Pictures` 目录中的每个文件。如前面的截图所示，提取了三个文件。传输的总大小显示为 `1310468`
    字节。
- en: 'It''s even possible to do the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以执行以下操作：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This would pull every logical file available from the `/data/data` directory
    and put them in the examiner's `Test` folder. This is not equivalent to a physical
    image, as certain files are skipped and deleted files will not be copied, but
    it is a simple method for pulling the vast majority of a user's application data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 `/data/data` 目录中提取所有可用的逻辑文件，并将它们放入检查员的 `Test` 文件夹中。这与物理镜像不同，因为某些文件会被跳过，已删除的文件不会被复制，但它是提取用户大部分应用数据的简单方法。
- en: 'Another advantage of the `adb pull` command is that it is highly useful for
    scripting purposes. A knowledgeable examiner can maintain a list of paths for
    common files of interest, and write a script that automatically pulls these files
    from a device, or even have the script automatically pull the entire `/data/data`
    directory. The following is a simple example of Python code that will perform
    this function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`adb pull` 命令的另一个优势是它对脚本化非常有用。经验丰富的检查员可以维护一个常见文件路径的列表，并编写一个脚本，自动从设备中提取这些文件，甚至让脚本自动提取整个
    `/data/data` 目录。以下是执行此功能的简单 Python 代码示例：'
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that the code is not very refined; it's only purpose is to illustrate the
    ease with which `adb` commands can be scripted. At the very least, properly implementing
    the code should include the option to specify an output directory and handle any
    errors. However, the six lines shown previously would be sufficient to pull the
    entire `/data/data` directory logically, assuming USB Debugging is enabled and
    the device is rooted.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代码并不精细；它的唯一目的是说明 `adb` 命令脚本化的简便性。至少，正确实现代码应该包括指定输出目录的选项并处理任何错误。然而，之前展示的六行代码足以在启用
    USB 调试并且设备已获取 root 权限的情况下，逻辑上提取整个 `/data/data` 目录。
- en: Fastboot mode
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fastboot 模式
- en: Fastboot is another protocol utility built into the Android Software Development
    Kit, and is used for interacting directly with a device's bootloader. Essentially,
    it is a much lower-level version of ADB and is frequently used to flash new images
    to a device. How can this be helpful to an examiner?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Fastboot 是 Android 软件开发工具包中内置的另一种协议工具，用于直接与设备的引导加载程序进行交互。从本质上讲，它是 ADB 的更低级版本，常用于将新镜像刷入设备。那么，这对检查员有什么帮助呢？
- en: Fastboot can allow an examiner to boot from a custom recovery image and temporarily
    gain root access on a device, hence gaining access to data that would have been
    unavailable otherwise. Fastboot does not require USB Debugging to be enabled or
    root access. The process of loading a custom bootloader onto a device is commonly
    used by commercial forensic tools to temporarily root a device, but a skilled
    examiner can also perform the process manually. Using this method, the recovery
    image is loaded into RAM; no permanent data on the device is altered in any way.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Fastboot 允许检查员从自定义恢复镜像启动设备，并临时获得 root 权限，从而访问通常无法获得的数据。Fastboot 不要求启用 USB 调试或
    root 权限。将自定义引导加载程序加载到设备上的过程通常被商业取证工具用来临时获取设备的 root 权限，但熟练的检查员也可以手动执行该过程。使用这种方法，恢复镜像被加载到
    RAM 中；设备上的任何永久性数据都不会以任何方式被更改。
- en: The most important requirement for using fastboot is an unlocked bootloader;
    locked bootloaders will not allow a device to boot from code that isn't specifically
    signed by the manufacturer. Unfortunately for forensic purposes, most devices
    no longer ship with an unlocked bootloader as it is a serious security risk, and
    manually unlocking a bootloader typically erases the user data. As such, the amount
    of devices for which this is a feasible method is somewhat limited. But, when
    it works, it's an absolutely invaluable tool for an examiner to have in their
    arsenal.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 fastboot 的最重要要求是解锁引导加载程序；锁定的引导加载程序不允许设备从没有被制造商专门签名的代码启动。不幸的是，对于取证目的，大多数设备现在都不再出厂时解锁引导加载程序，因为这会带来严重的安全风险，而手动解锁引导加载程序通常会清除用户数据。因此，这种方法可行的设备数量有限。但当它有效时，它对检查员来说是一个非常宝贵的工具。
- en: This method will not work on devices with full disk encryption enabled. Booting
    into Recovery Mode will NOT decrypt the `/data` partition.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备启用了全盘加密，这种方法将无法使用。启动到恢复模式将**不会**解密 `/data` 分区。
- en: Determining bootloader status
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定引导加载程序状态
- en: 'Much like everything involving Android forensics, there is no one guaranteed
    method to determine whether a bootloader is locked, as it varies by manufacturer.
    To boot into the bootloader, use the `adb` command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有涉及 Android 取证的内容一样，没有一种方法可以百分百确定引导加载程序是否被锁定，因为这取决于制造商。要启动到引导加载程序，请使用 `adb`
    命令：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The device should boot to a screen that shows information regarding the bootloader.
    Frequently, this screen will display the bootloader status, as seen in the following
    screenshot.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a generic, stock fastboot menu from a Nexus 5\. Note that
    the Lock State indicates that the bootloader is unlocked:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a082e8a5-f6ec-408f-bd1b-27b20591b880.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'The following is a standard Samsung Odin mode screen; Odin is the Samsung proprietary
    equivalent to fastboot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12a786e6-268d-4f00-b862-593292ad668d.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: Samsung Odin mode screen
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: ADB backup extractions
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google implemented ADB backup functionality beginning in Android 4.0, Ice Cream
    Sandwich. This allows users (and forensic examiners) to back up application data
    to a local computer over ADB. This process does not require root and is therefore
    highly useful for forensic purposes. However, it does not acquire every application
    installed on the device. When a developer makes a new app, it is set to allow
    backups by default, but this can be changed by the developer. In practice, it
    seems the vast majority of developers leave the default setting, which means that
    backups do capture most third-party applications. Unfortunately, most Google applications
    disable backups; full application data from apps such as Gmail and Google Maps
    won't be included. The same can be said about most messengers—its data isn't available
    in ADB backups.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: This method will not be useful against a locked device; user interaction with
    the screen is required.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Extracting a backup over ADB
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The format of the `adb backup` command is shown in the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The flags are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '`-f`: Name the path for the output file. If not specified, defaults to `backup.ab`
    in the present working directory.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-apk|noapk]`: Choose whether or not to back up the `.apk` file. Defaults
    to `–noapk`.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-obb|-noobb]`: Choose whether or not to back up `.obb` (APK expansion) files.
    Defaults to `–noobb`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-shared|-noshared]`: Choose whether or not to back up data from shared storage
    and the SD card. Defaults to `–noshared`.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-all]`: Include all applications for which backups are enabled.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-system|-nosystem]`: Choose whether or not to include system applications.
    Defaults to `–system`.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[<packages>]`: Explicitly name application packages to be backed up. Not needed
    if using `–all` or `–shared`.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example `adb backup` command to capture all possible application data would
    be the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, an example `adb backup` command to capture a specific application''s
    data would be the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see something like the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0ac308c-f817-4cb5-a547-c43130d3cc78.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: 'When performing a backup, the user must approve the backup on the device; this
    means that backups can''t be performed without bypassing screen locks:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02ac4074-080f-4efd-93f2-c742b1abb328.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: Depending on the number of applications installed, the backup process may take
    a significant amount of time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Parsing ADB backups
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The resulting backup data is stored as a `.ab` file, but is actually a TAR file
    that has been compressed with the Deflate algorithm. If a password was entered
    on the device when the backup was created, the file would also be AES encrypted.
    It should also be mentioned that these files may exist on a suspect's computer
    and can be analyzed using the same methods.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的备份数据以`.ab`文件的形式存储，但实际上是一个经过Deflate算法压缩的TAR文件。如果在备份创建时在设备上输入了密码，文件还会进行AES加密。还应该提到，这些文件可能存在于嫌疑人的计算机上，并可以使用相同的方法进行分析。
- en: There are many free utilities to turn the `.ab` backup file into a `.tar` file
    that can be viewed. One such utility is the Android Backup Extractor found at: [http://sourceforge.net/projects/adbextractor/](http://sourceforge.net/projects/adbextractor/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多免费的工具可以将`.ab`备份文件转换为可以查看的`.tar`文件。一个这样的工具是Android Backup Extractor，网址为：[http://sourceforge.net/projects/adbextractor/](http://sourceforge.net/projects/adbextractor/)。
- en: 'To use the Android Backup Extractor, simply extract its files into the directory
    with the backup. The command to run the utility is shown in the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Android Backup Extractor，只需将其文件提取到备份所在的目录中。运行该工具的命令如下所示：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `.tar` file will be at the path specified on the command line, or the current
    working directory if no path is specified. Decompressing the `.tar` file may be
    done manually on a Linux command line or with one of the many Windows archive
    utilities such as WinRAR or 7Zip:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`.tar`文件将位于命令行指定的路径中，如果没有指定路径，则位于当前工作目录中。可以在Linux命令行手动解压`.tar`文件，也可以使用诸如WinRAR或7Zip等Windows压缩工具：'
- en: '![](img/2d749204-152f-4ac0-81b3-cd415a70c053.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d749204-152f-4ac0-81b3-cd415a70c053.png)'
- en: Directories within the backup, seen in 7-Zip
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 备份中的目录，在7-Zip中查看
- en: Data locations within ADB backups
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ADB备份中的数据位置
- en: 'Now that the backup has been converted into a `.tar` file and then extracted,
    the examiner can view the data contained in the backup. In our example, there
    are two directories found in the root of the backup:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，备份已被转换为`.tar`文件并提取出来，检查员可以查看备份中包含的数据。在我们的示例中，备份根目录下发现了两个目录：
- en: '`apps`: Contains data from `/data/data` for applications that were included
    in the backup'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apps`：包含备份中包含的应用程序的`/data/data`中的数据'
- en: '`shared`: Contains all data from the SD card; only present if the shared argument
    was passed at the command line'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared`：包含来自SD卡的所有数据；仅在命令行传递了shared参数时才会出现'
- en: 'Note that the files within the apps directory are stored in directories by
    their package name (just as seen in `/data/data` from within `adb shell`), and
    the shared directory is exactly what the user would see if they accessed the SD
    card by plugging it into a computer. For a benign example of user data that was
    pulled from the backup, the user''s Pandora activity is shown in the following
    screenshot. Pandora is a streaming music service with millions of downloads in
    Google Play Store. Pandora''s application data will be contained in the `apps`
    folder of the backup, in the folder named `com.pandora.android`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，apps目录中的文件按其包名存储在目录中（就像在`adb shell`中看到的`/data/data`），shared目录则是用户将SD卡插入计算机后看到的内容。以下是从备份中提取的用户数据的良性示例，显示了用户的Pandora活动。Pandora是一款在Google
    Play商店下载量达到百万的流媒体音乐服务。Pandora的应用数据将包含在备份的`apps`文件夹中，文件夹名为`com.pandora.android`：
- en: '![](img/809d7b2b-f3b8-46a1-aa2a-6a9ed6ef8fe4.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/809d7b2b-f3b8-46a1-aa2a-6a9ed6ef8fe4.png)'
- en: The Pandora directory from the backup
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 来自备份的Pandora目录
- en: 'This is a fairly standard layout for an Android application, as discussed in
    [Chapter 2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml), *Setting Up the Android
    Forensic Environment*. The application''s databases will be in the `db` folder:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Android应用程序的一个标准布局，如[第2章](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml)《设置Android取证环境》中所讨论的那样。应用程序的数据库将位于`db`文件夹中：
- en: '![](img/bfe83963-5518-4f97-a84d-09c2c7c6007e.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfe83963-5518-4f97-a84d-09c2c7c6007e.png)'
- en: Files within the db folder of the Pandora backup
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Pandora备份的db文件夹中的文件
- en: 'XML configuration settings will be in the `sp` folder:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: XML配置设置将位于`sp`文件夹中：
- en: '![](img/35199ac0-04c4-4cbc-83b4-43665869e176.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35199ac0-04c4-4cbc-83b4-43665869e176.png)'
- en: Files within the sp folder of the Pandora backup
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Pandora备份的sp文件夹中的文件
- en: 'Using a database viewer to view `pandora.db` reveals stations that the user
    has created, as well as the timestamp for when it was created:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据库查看器查看`pandora.db`可以查看用户创建的电台以及创建时间戳：
- en: '![](img/1ac041dc-5ad7-45ce-961a-72672fcae7b2.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ac041dc-5ad7-45ce-961a-72672fcae7b2.png)'
- en: Contents of pandora.db from the backup
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking in the XML preferences file, the timestamp of the app installation
    can be found under `firstInstallId`. Note that the exact method for converting
    the timestamps is shown in [Chapter 7](c0ffe5a3-4668-436d-9f02-e70a67f3e43e.xhtml),
    *Forensic Analysis of Android Applications*:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12ce7e66-1696-4fa4-9380-4e66ac218577.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: Contents of the XML preferences file
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: If, for some odd reason, the user's Pandora usage was a major question in the
    investigation, what could an examiner determine from these two seemingly innocuous
    files?
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, the `lastTransmission` and `firstInstallID` timestamps are within milliseconds
    of each other, indicating that the application was never used after it was installed.
    Furthermore, the creation dates of each station precede the installation of the
    application, in some cases by years. This would be an indicator that the user
    has used Pandora on other devices; that may be highly relevant to the investigation.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: While Pandora is generally not germane to digital forensic investigations, it
    is an example of data that can be gleaned from a simple backup over ADB. More
    detailed application analysis will be presented in [Chapter 7](c0ffe5a3-4668-436d-9f02-e70a67f3e43e.xhtml),* Forensic
    Analysis of Android Applications*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: ADB dumpsys
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dumpsys is a tool built into the Android OS, generally used for development
    purposes to show the status of services running on the device. However, it can
    also contain forensically interesting information. Dumpsys does not require root
    access, but, like all ADB commands, does require USB Debugging to be enabled on
    the device and Secure USB Debugging to be bypassed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'The exact services that can be viewed differ across devices and Android versions.
    To view a list of all possible services that can be dumped, run the following
    command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the command will appear as a list, as shown here:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e784d64f-0f27-4782-873f-d56c506f405b.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: 'The service name located before the colon is the argument we will pass to `dumpsys`.
    A valid `dumpsys` command, using the previously seen service number seven (`iphonesubinfo`),
    looks like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the following, we see that the output of the `iphonesubinfo` service includes
    the device IMEI:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90db25f5-377b-45ec-a842-eb1b496721f0.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'There are many forensically interesting `dumpsys` services; several examples
    follow. As the `dumpsys` services may vary by OS version and device, this list
    is not all-inclusive and is merely intended to show the usefulness of `dumpsys`
    to a forensic examiner:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`iphonesubinfo`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`batterystats`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`procstats`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appops`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wifi`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notification`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumpsys batterystats
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Batterystats is used to show the usage of running applications. Its output
    can be very verbose, depending on the number of applications in use; in the following
    screenshot, the output was redirected to a file because it did not fit in the
    Windows command line:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6042281c-036f-4dd6-9c66-faa5769aec16.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: This shows us the network usage of Google Chrome. This information can be used
    to show that the application had been used recently, and this information will
    exist even if Chrome was used in Incognito Mode and leaves no forensic evidence
    elsewhere.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Note that the *Wakelock* section can be very useful for detecting malware. A
    wakelock is a method of keeping the device awake (that is, not entering sleep
    mode) and is indicative of an application attempting to stay running in the background.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Dumpsys procstats
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Procstats is a service to display the processor usage by running applications.
    Similar to batterystats, it is another method that can be used to show that an
    application was recently used on a device:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/588440f4-861d-4312-8e1c-ce21343993ac.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: Dumpsys user
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beginning with Android Jelly Bean, Google added support for multiple users on
    tablet devices. With the release of Lollipop, Google extended this support to
    phones. One of the most challenging problems in digital forensics has long been
    proving who was using a device when incriminating actions were performed, that
    is: *Who was behind the keyboard?*
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `dumpsys` on the user service will show the last login info for all
    users:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37c4ea9a-a670-4e92-8cec-78c106e0faf8.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: As only one user can be logged in at a time, looking at the user with the most
    recent login will identify the account currently in use on the device.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Dumpsys App Ops
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'App Ops may be the most interesting `dumpsys` service. The term App Ops is
    generally used to refer to permissions accessible by an application. In older
    versions of Android, it was rumored that Google would include the ability for
    users to revoke specific permissions from an application. This has never come
    to fruition, but this service at least remains, and shows the last time an application
    used each permission that it can access. The following is another example from
    Google Chrome:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb3a903a-3bf8-4ee5-88a1-d45392b0a7f1.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: In the preceding output, we can see that approximately 1 hour and 7 minutes
    before `appops` was dumped with `dumpsys`, Chrome used the `TAKE_AUDIO_FOCUS`
    permission, and later used `AUDIO_MEDIA_VOLUME`. This indicates that Chrome was
    used to listen to something, and when it happened.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'A somewhat more interesting example is the phone application:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b8ad528-1e68-43a3-9104-7100fc03fd02.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: 44 minutes ago, the user used the phone application and required the `READ_CONTACTS`
    permission, then immediately also used the `WRITE_CALL_LOG` permission. We can
    surmise that the user made a phone call 44 minutes ago; even if they had deleted
    the call from the records afterwards.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Dumpsys Wi-Fi
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Wi-Fi service will show a list of all SSIDs for which a connection has
    been saved. This could be useful for showing that a user was in a certain location,
    for example. More detailed Wi-Fi information is also available on the filesystem,
    but requires root access to view. Using `dumpsys`, we can access this data without
    requiring root:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0993e64f-466c-4b7b-b2b1-c013c49ae333.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: Dumpsys notification
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The notification service will provide information about currently active notifications.
    This can be useful for recording the state of a device when it is seized or identifying
    which application is displaying a specific notification. Each notification can
    be rather large and contain a lot of information, only some of which may be of
    use. The following is an example of an incoming email from the Gmail application,
    which includes the subject (`This is a test email`) and body (`To see a test notification`):'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3967c31b-71f5-4860-a334-7b7f13dd0c35.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Dumpsys conclusions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running the `dumpsys` command with no service name will run `dumpsys` on all
    available services. However, the output will be very large and should be redirected
    into a text file. On most platforms, the command to do this would be the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This would write the output to `dumpsys.txt` in the current working directory.
    The output can then be searched or a parsing script can be run to pull out known
    relevant fields.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Dumpsys is an extremely powerful tool that can be used to show information that
    cannot be obtained elsewhere on the device. We recommend running `dumpsys` on
    every Android device when it is seized, prior to being shut down. This will save
    a wide variety of information that may be useful later, and does not require root.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Helium backup extractions
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to its developers, Helium is the *missing app sync and backup solution
    for Android*. It doesn't require root access and can be used to extract some data
    that ADB backup can't; for example, SMS messages and call logs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, there are two apps that an examiner will need: an Android app and
    a PC app. The Android app can be downloaded from Google Play:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[https://play.google.com/store/apps/details?id=com.koushikdutta.backup](https://play.google.com/store/apps/details?id=com.koushikdutta.backup).'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'The desktop version is available here:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.clockworkmod.com/carbon](http://www.clockworkmod.com/carbon).'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these steps for extracting the data:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you open the Android app, you''ll see the following screen:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ba24af0-9176-4301-b022-88981ffe09a4.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: Open the desktop app and enable Helium. You will see a message that says Helium
    has been enabled on your Android.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can choose the data you want to backup; in our case, it''s messages and
    call logs:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0b11512-6274-49a4-bf88-2b936e8a14c9.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: 'As we want to save the backup to our forensic workstation, let''s go to the
    menu in the upper-right corner and choose the appropriate option, PC Download:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7154414c-544f-4758-a926-1443ee16cc51.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: 'Check the IP address and port the Helium Server is running on; in our case,
    it''s `192.168.1.71` and `5000`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d5cfe41-0e6e-4fc5-9411-e9632ef0472f.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: 'Access the address from your web browser of choice, choose the applications
    you want to back up, and click Start Backup:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31e7b13b-bcbc-41d7-8e79-baa894fd43ad.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'In your default downloads folder you''ll find a ZIP archive with the following
    name: `backup.zip`.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three files in the archive:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '`backup.json`: It contains information about the backup, such as package name,
    backup date, and smartphone''s OS version.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.android.providers.telephony.ab`: It is a backup itself and contains extracted
    data, in our case, SMS and call logs.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.android.providers.telephony.png`: It backed up the application''s icon.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Again, to extract the contents of `com.android.providers.telephony.ab`, we
    need to use one of the utilities from Android Backup Toolkit ([https://sourceforge.net/projects/adbextractor/](https://sourceforge.net/projects/adbextractor/)),
    this time Helium Backup Extractor:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, in the current working directory, there is an `app` folder, where under `apps\com.android.providers.telephony\cb`
    we can find the `custom.cb` file. This file contains backed up application data
    in JSON format; here is an example:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `number` field shows the phone number, the `new` field (if the call is recent
    or not), `duration` (call duration), `date` (call date in Unix Epoch format—milliseconds),
    and `type` (type of the call); in our case, it's `1`, incoming.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this method may not seem to be very forensically sound as we have
    to install an app on the target mobile device, but sometimes it's the only way
    to extract valuable digital evidence. What is more, many commercial mobile forensic
    tools use small applications, so-called **agents**, to extract more data during
    logical acquisition. You'll learn more about Android forensic tools in [Chapter
    8](1b4c4086-f708-4bea-9bb4-f2f477b10c85.xhtml), *Android Forensic Tools Overview*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing Android lock screens
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lock screens are the most challenging aspect of Android forensic examinations.
    Frequently, the entire investigation depends on the examiner's ability to gain
    access to a locked device. While there are methods to bypass them, this can be
    highly dependent on the OS version, device settings, and technical capabilities
    of the examiner. There is no magical solution that will work every time on every
    device. Commercial forensic tools such as Cellebrite and Oxygen have fairly robust
    bypass capabilities, but are far from infallible. This chapter will show how an
    examiner can increase their odds of bypassing locked devices with free tools and
    methods.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: An examiner should never attempt to guess a pattern/PIN/password on the device.
    Many manufacturers implement a setting that will wipe the device after a number
    of failed attempts. Many also allow the user to lower that number.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Lock screen types
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many methods used to secure a device, and the methods for bypassing
    each vary:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: None/slide
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattern
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PIN
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Smart Lock: Trusted Face, Trusted Voice, Trusted Location, Trusted Device,
    On-body Detection'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other security options may exist; as Android is open source, the possibilities
    are only limited by the developer's imagination. These are the options that are
    available in the stock version of Android Oreo released by Google. Most security
    options used by vendors generally use one of these stock options as a failsafe
    in case a user is unable to log in with their unique options. Versions in which
    the setting was first used also refer to stock Android; various manufacturers
    may have implemented them sooner.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: None/Slide lock screens
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Slide to unlock* screen is the default setting of most Android devices.
    It provides no level of security, and is bypassed by sliding a finger on the screen
    in the indicated direction.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Pattern lock screens
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pattern lock screens are the iconic Android security method. Frequently referred
    to as *swipe codes* or similar names, these require the user to trace a pattern
    on the device with a finger. A common bypass for this lock is the *smudge attack*,
    looking for patterns left on the screen by the user's finger.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Password/PIN lock screens
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users familiar with Apple''s iOS will recognize this option. It requires a
    user to type a password or PIN in order to unlock the device. These are lumped
    together because, forensically, they are identical: they store their passwords
    the same way.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Smart Locks
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Smart Lock is a term introduced in Android Lollipop, although the Face unlock
    option was previously available. They require a specific condition to unlock the
    device: a user''s face must be recognized, the user must be in a known location,
    or a specific other device must be nearby.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Trusted Face
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Face unlock works exactly as it sounds: it uses facial recognition to determine
    if the user has been previously been set up as a trusted user. Older versions
    of Face locks were easily fooled by pictures of a trusted user, though newer versions
    may require the user to blink in order to unlock the device.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Trusted Voice
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **OK Google** phrase can be used by the user to unlock the phone. This type
    of lock isn't available on many devices, as the phone has to actively listen for
    the user's voice while the screen is off, and it drains the battery.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Trusted Location
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trusted Location is also commonly referred to as **geo-fencing**. If a user
    is in a location that has been marked as trusted (such as home or work), the device
    will not lock. There's no input required from the user, but the GPS must be enabled.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Trusted Device
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trusted Device works via Bluetooth; if a device that has been set up as a trusted
    device is nearby, the lock screen will be disabled. This may be used with smart
    watches, vehicles that pair over Bluetooth, Bluetooth headsets, or any other Bluetooth–capable
    device.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: On-body Detection
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On-body Detection uses phone's motion sensors, for example, the accelerometer
    and gyroscope, to keep it unlocked while it's in the user's hand, pocket, or bag.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: All Smart Lock options require a pattern/PIN/password as a backup security method.
    This means we only have to learn how to bypass patterns/PINs/passwords in order
    to crack all of the security options.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: General bypass information
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all cases, bypassing the lock screen will require retrieving a file from
    the device. Pattern locks are stored as hash values at `/data/system/gesture.key`
    and PIN/password locks are stored as hash values at `/data/system/password.key`
    (up to Android 5.0, Lollipop). Additionally, the `password.key` hash is salted;
    the salt value is stored at `/data/data/com.android.providers.settings/databases/settings.db`
    prior to Android 4.4, and `/data/system/locksettings.db` on devices running Android
    4.4 and later.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Android 6.0 (Marshmallow) introduced Gatekeeper password storage—a new level
    of obfuscation to PIN and pattern locks. Now, the locks are stored in `gatekeeper.pattern.key`
    and `gatekeeper.password.key` and no longer use hashes. Gatekeeper uses **Hash-based
    Message Authentication Code** (**HMAC**) with a hardware-backed secret key to
    manage and verify passwords.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'If the device is locked, how is an examiner supposed to access these files?
    Again, there is no magic solution that works every time, but some options are
    as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'ADB:'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires root
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires USB Debugging
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires Secure USB Debugging pairing (depending on OS version)
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Booting into a custom Recovery Mode:'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not require root (root will be given through the recovery image)
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not require USB Debugging (accomplished via fastboot)
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not require Secure USB Debugging (this is bypassed entirely)
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires an unlocked bootloader
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Won't work on devices with encrypted userdata partition
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JTAG/Chip-off:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly advanced
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not require any specific device settings or options
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Won't work on devices with encrypted userdata partition
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing Android lock screens
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PIN or password can be bypassed by simply overwriting or deleting the files.
    However, this is changing the original evidence and may not be forensically valid
    in your jurisdiction.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Removing PIN/password with ADB
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the device you are examining and its operating system version,
    you may need to delete different files. If the device contains `*.key` files under `/data/system/`,
    you need to remove these files; if there are no such files, you may need to remove
    `locksettings.db`, if possible, or update some of its records (see the next section).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to remove the files of interest via ADB:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now the device should be rebooted. After the reboot, there will be no PIN or
    password.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Removing PIN/Password with ADB and SQL
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no `*.key` files on recent Android devices, such as those running
    Oreo or Pie, but there is still the `lockscreen.db` database under `/data/system`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to remove the PIN or passwords for making changes in this database:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Reboot the device and the screen lock will be removed.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Android SIM card extractions
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Traditionally, SIM cards were used for transferring data between devices. SIM
    cards in the past were used to store many different types of data, such as the
    following:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: User data
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contacts
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMS messages
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialed calls
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network data
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrated Circuit Card Identifier (ICCID)**: Serial number of the SIM'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**International Mobile Subscriber Identity (IMSI)**: Identifier that ties the
    SIM to a specific user account'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSISDN**: Phone number assigned to the SIM'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location Area Identity (LAI)**: Identifies the cell that a user is in'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication Key (Ki)**: Used to authenticate the mobile network'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various other network-specific information
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the rise in capacity of device storage, SD cards, and cloud backups, the
    necessity for storing data on a SIM card has decreased. As such, most modern smartphones
    typically do not store much, if any, user data on the SIM card. All network data
    listed previously does still reside on the SIM, as a SIM is necessary to connect
    to all modern (4G) cellular networks.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: As with all Android devices, though, there is no concrete stipulation that user
    data can't be stored on a SIM; it simply doesn't happen by default. Individual
    device manufacturers can easily decide to write user data to the SIM, and individual
    users can download applications to provide that functionality. This means that
    a device's SIM card should always be examined during a forensic examination. It
    is a very quick process, and should never be overlooked.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring SIM card data
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SIM card should always be removed from the device and examined separately.
    While some tools claim to read the SIM card through the device interface, this
    may not recover deleted data or all data on the SIM; the only way for an examiner
    to be certain all data was acquired is to read the SIM through a standalone SIM
    card reader with a tool that has been tested and verified.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: The location of the SIM will vary by device, but is typically either stored
    beneath the battery or in a tray located on the side of the device. Once the SIM
    is removed, it should be placed in a SIM card reader. There are hundreds of SIM
    card readers available in the marketplace, and all major mobile forensics tools
    come with an included reader that will work with their software. Oftentimes, the
    forensic tools will also support third-party SIM readers as well.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: There is a surprising lack of thorough, free SIM card reading software available.
    Any software used should always be tested and validated on a SIM card that has
    been populated with known data prior to being used in an actual forensic investigation.
    Also, keep in mind that much of the free software available works for older 2G/3G
    SIMs, but may not work properly on a modern 4G SIM. We used the Mobiledit! Lite,
    a free version of Mobiledit!, for the following screenshots. It is available at: [http://www.mobiledit.com/downloads](http://www.mobiledit.com/downloads).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample 4G SIM card extraction from an Android phone running
    version 4.4.4; note that nothing that could be considered user data was acquired
    despite the SIM being used actively for over a year, though fields such as the
    ICCID, IMSI, and MSISDN (own phone number) could be useful for subpoenas/warrants
    or other aspects of an investigation:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75f5fad3-33c1-4c76-ab6a-7435b4aefb0a.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
- en: SIM card extraction overview
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot highlights SMS messages on the SIM card:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/612ae554-6024-4fb9-8d06-c6f80491248a.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot highlights the phonebook of the SIM card:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d83c3405-4054-4d0a-8c8a-91964edea4c9.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot highlights the phone number of the SIM card (also
    called the MSISDN):'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97fb182c-d225-49d7-9aae-eee2f5db6695.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
- en: SIM Security
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Due to the fact that SIM cards conform to established, international standards,
    all SIM cards provide the same security functionality: a 4- to 8-digit PIN. Generally,
    this PIN must be set through a menu on the device. On Android devices, this setting
    is found at Settings | Security | Set up SIM card lock. The SIM PIN is completely
    independent of any lock screen security settings and only has to be entered when
    the device boots. The SIM PIN only protects user data on the SIM; all network
    information is still recoverable even if the SIM is PIN locked.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: The SIM card will allow three attempts to enter the PIN; if one of these attempts
    are correct, the counter will reset. On the other hand, if all of these attempts
    are incorrect, the SIM will enter **Personal Unblocking Key** (**PUK**) mode.
    The PUK is an 8-digit number assigned by the carrier, and is frequently found
    on documentation when the SIM is purchased. Bypassing a PUK is not possible with
    any commercial forensic software; because of this, an examiner should never attempt
    to enter the PIN on the device as the device will not indicate how many attempts
    remain before the PUK is activated. An examiner could unwittingly PUK lock the
    SIM and be unable to access the device. Forensic tools, however, will show how
    many attempts remain before the PUK is activated, as seen in the previous screenshots.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Common carrier defaults for SIM PINs are 0000 and 1234\. If three tries remain
    before activating the PUK, an examiner may successfully unlock the SIM with one
    of these defaults.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Carriers frequently retain PUK keys when a SIM is issued. These may be available
    through a subpoena or warrant issued to the carrier.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: SIM cloning
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SIM PIN itself provides almost no additional security, and can easily be
    bypassed through SIM cloning. SIM cloning is a feature provided in almost all
    commercial mobile forensic software, although the term cloning is somewhat misleading.
    SIM cloning, in the case of mobile forensics, is the process of copying the network
    data from a locked SIM onto a forensically sterile SIM that does not have the
    PIN activated. The phone will identify the cloned SIM based on this network data
    (typically the ICCID and IMSI) and think that it is the same SIM that was inserted
    previously, but this time there will be no SIM PIN. This cloned SIM will also
    be unable to access the cellular network, which makes it an effective solution
    similar to Airplane Mode. Therefore, SIM cloning will allow an examiner to access
    the device, but the user data on the original SIM is still inaccessible as it
    remains protected by the PIN.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: We are unaware of any free software that performs forensic SIM cloning. It is
    supported by almost all commercial mobile forensic kits, however. These kits will
    typically include a SIM card reader, software to perform the clone, as well as
    multiple blank SIM cards for the cloning process.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter has covered many topics related to logical extractions of Android
    devices. As a recap, the various methods and their requirements are as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Requirements** |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
- en: '| ADB pull |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
- en: USB Debugging enabled
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure USB Debugging bypassed on 4.2.2+
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root access to obtain user data
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '| ADB pull from Recovery Mode |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
- en: Must be a custom recovery to enable ADB access
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root access to obtain user data
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '| Fastboot to boot from custom recovery image |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
- en: Unlocked bootloader
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boot image for device
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '| ADB backup |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
- en: USB Debugging enabled
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure USB Debugging bypassed on 4.2.2+
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Must be done from a running device (not Recovery Mode)
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '| ADB Dumpsys |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
- en: USB Debugging enabled
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure USB Debugging bypassed on 4.2.2+
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Must be done from a running device (not Recovery Mode)
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '| SIM card extraction |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: None, should be done independent of device
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, valuable user data can be recovered from the SD card, which will
    be covered in [Chapter 5](a910938e-1c0b-4f19-baae-509ccaa36c09.xhtml), *Extracting
    Data Physically from Android* *Devices*.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: If a screen is locked, an examiner can remove the key files or remove some records
    from the `locksettings.db` database using the methods listed previously.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a lot of data in this chapter and to help simplify it somewhat, a
    suggested *best practices* flowchart is shown as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f07a5a6-2220-4b35-8629-a1e6c525399a.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
- en: Android Forensics flowchart
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
