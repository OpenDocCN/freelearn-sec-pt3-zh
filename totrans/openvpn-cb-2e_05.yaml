- en: Chapter 5. Scripting and Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a client-side up/down script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a `client-connect` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a `learn-address` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a `tls-verify` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an `auth-user-pass-verify` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script security and logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting and IPv6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `down-root` plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the PAM authentication plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most powerful features of OpenVPN is its scripting capability and
    the ability to extend OpenVPN itself through the use of plugins. Using client-side
    scripting, the connection process can be tailored to the site-specific needs,
    such as setting up advanced routing options, adding firewall rules or mapping
    network drives. With server-side scripting, it is possible to assign a custom
    IP address to different clients, or to extend the authentication process by adding
    an extra username and password check. Plugins are very useful when integrating
    OpenVPN authentication into existing authentication frameworks, such as PAM, LDAP,
    or even Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the focus will be on scripting, both at the client side and
    at the server side, and on a few often-used plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Using a client-side up/down script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use very simple `up` and `down` scripts on the client
    side to show how OpenVPN calls these scripts. By logging messages to a file, as
    well as the environment variables, we can easily see which information OpenVPN
    provides to the `up` and `down` scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the *Setting up the public and
    private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running Fedora 22 Linux and OpenVPN 2.3.10\. The client was running
    Windows 7 64 bit and OpenVPN 2.3.10\. Keep the server configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe, from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file as `example5-1.ovpn`. Note the backslashes: when specifying the `ca`, `cert`, `key`,
    and `tls-auth` directives, forward slashes can be used, but not for the `up` and `down`
    scripts!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, on the Windows client, create the batch file `updown.bat` batch file
    in the  `C:\Program Files\OpenVPN\scripts` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, start the OpenVPN client:![How to do it...](img/image00375.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the client successfully connects to the OpenVPN server, the  `c:\temp\openvpn.log`
    log file will contain an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When the client disconnects from the server, the script is called again, with
    the exact same command-line parameters, but now the `script_type` is set to `down`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the first command-line argument contains the name of the `TUN` device.
    On Linux and Mac OS systems, this will generally be `tun0` or `tun1`, but on Windows
    platforms, it is the actual name of the TAP-Win32 adapter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the initial connection is made with the OpenVPN server, but before the
    VPN is fully established, the OpenVPN client calls the `up` script. If the `up`
    script returns with an exit code not equal to zero, the connection sequence is
    aborted.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, when the connection is shut down the `down` script is executed after
    the VPN connection has been stopped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the use of the double backslashes (`\\`) in the `up` and `down` directives:
    OpenVPN translates the backslash character internally and hence it needs to be
    specified twice. The backslash between `c:\\program` and `files` is required as
    otherwise OpenVPN cannot find the `up` and `down` scripts without it.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will see some more advanced tricks when using the `up` and `down`
    scripts, including a sample script to verify the remote hostname of a VPN server.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The script used in this recipe merely writes out all the environment variables
    to a file. These environment variables contain useful information about the remote
    server, such as the `common_name` certificate. An extension to this script would
    be to check whether the  `common_name` certificate matches the remote hostname.
    The IP address of the remote hostname is available as `trusted_ip`.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the down script before the connection terminates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `down` script is executed after the actual connection to the OpenVPN server
    has been stopped. It is also possible to execute the script during the disconnect
    phase before the connection to the server is dropped. To do this, add the following
    directive to the client configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Advanced - verify the remote hostname
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A more advanced usage of an `up` script would be to verify that the remote
    hostname matches the remote IP address, similar to the way that a web browser
    verifies the address of secure websites. On Linux systems, this can easily be
    done using a shell script as an `up` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: But on Windows, this is trickier to achieve without resorting to tools such
    as PowerShell or Cygwin.
  prefs: []
  type: TYPE_NORMAL
- en: Using a client-connect script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will demonstrate how to set up a client-connect script that gets
    executed on the server side when a new client connects. Similarly, we can specify
    a `client-disconnect` script that is executed when a client disconnects from the
    server. Client-connect and client-disconnect scripts can be used for several purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Extra authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening and closing firewall ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning specific IP address to special clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing out connection-specific configuration lines for a client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will use a client-connect script to disable client access
    to the client with a `client2` certificate between 10 p.m. (or 22:00 hours) and
    6 a.m. During other hours, a static IP is assigned to this client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running Fedora 22 Linux and OpenVPN 2.3.10\. The client was running
    Windows 7 64 bit and OpenVPN 2.3.10\. Keep the server configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe, from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    at hand. For the client, keep the client configuration file, `basic-udp-client.ovpn`,
    from the *Using an ifconfig-pool block* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following lines to the `basic-udp-server.conf` server configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-2-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the connect script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this file as `example5-2-connect.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the script is executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the OpenVPN client:![How to do it...](img/image00376.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the client is started after 6 am and before 10 p.m., the connection will
    be established successfully. Otherwise, the client log file will show lines similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, the server log will more clearly state the reason for the connection
    refusal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a client connects, the OpenVPN server executes the `client-connect` script
    with several environment variable sets that are related to the client connecting.
    The script writes out two lines to the connect-specific configuration file, which
    is passed as the first and only parameter to the `client-connect` script. This
    configuration file is then processed by the OpenVPN server as if it's a normal
    configuration file. The two possible lines that we use are `disable` and `ifconfig-push
    10.200.0.200 255.255.255.0`.
  prefs: []
  type: TYPE_NORMAL
- en: The first option disables a client from connecting. The second option pushes
    a pre-defined IP to the client.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we focus on `client-disconnect` and the many environment variables
    that are available to all OpenVPN scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Pitfall in using ifconfig-push
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `client-connect` script used here did not check whether the IP address that
    was assigned using the `ifconfig-push 10.200.0.200 255.255.255.0` command was
    actually available. If many clients connect to the server, then this IP address
    will also be assigned from the pool of IP addresses that is formed as a result
    of the `server 10.200.0.0 255.255.255.0` statement.
  prefs: []
  type: TYPE_NORMAL
- en: When assigning static IP addresses to a client, it is best to assign them from
    a special subnet.
  prefs: []
  type: TYPE_NORMAL
- en: The client-disconnect scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `client-disconnect` script can be specified using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This script is executed when the client disconnects from the server. Be aware
    that when a client first disconnects and `explicit-exit-notify` is not specified
    on the client side, then the OpenVPN server will first try to reconnect several
    times to the client. If a client does not respond after several attempts, then
    the `client-disconnect` script will be executed. Depending on the server configuration,
    this might be several minutes after the client has actually disconnected. When
    using TCP connections, it is not needed to specify `explicit-exit-notify`, as
    the client is disconnected immediately when the TCP connection stops.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a multitude of environment variables available inside a client-connect
    and client-disconnect script. It is very instructive to write a `client-connect`
    script that does a little more than the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Also, similar to the `up` and `down` script, is the `script_type` environment
    variable that contains the type of script as configured in the server configuration
    file. This gives the server administrator the option to write a single script
    for both `client-connect` and `client-disconnect`.
  prefs: []
  type: TYPE_NORMAL
- en: Absolute paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that an absolute path is used for the script. Relative paths are allowed,
    but especially for the OpenVPN server, it is more secure to use absolute paths.
    Assuming that the OpenVPN server is always started in the same directory is a
    bad security practice. An alternative is to use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using a learn-address script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a `learn-address` script that is
    executed on the server side when there is a change in the address of a connecting
    client. Learn-address scripts can be used to dynamically set up firewalling rules
    for specific clients or to adjust routing tables.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use a `learn-address` script to open up a firewall and
    to set up masquerading for a client. When the client disconnects, the firewall
    is closed again and the `iptables` masquerading rule is removed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running Fedora 22 Linux and OpenVPN 2.3.10, and the client was running
    Windows 7 64 bit and OpenVPN 2.3.10\. For the client, keep the client configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe,
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-3-server.conf`. Note that this server configuration file
    does not have the lines `user nobody` and `group nobody` (nor `group nogroup`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `learn-address` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this file as `example5-3-learn-address.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the script is executable and start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the client using the Windows GUI using the basic configuration file:![How
    to do it...](img/image00377.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the client connects to the server, check the `iptables` firewall rules
    on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Disconnect the client, wait for a few minutes, and then verify that the `iptables`
    rules have been removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a client connects to the OpenVPN server or disconnects from it, the OpenVPN
    server executes the `learn-address` script with several command-line arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$1`: Action (add, update, delete).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$2`: IP or MAC. For tun-based networks, this is the client IP address. For tap-based
    networks, this is the client (virtual) MAC address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$3`: `client_common` name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, the `learn-address` script is used to open up the firewall for
    the connecting client and to set up the masquerading rules for the client so that
    the clients can reach the other machines on the server-side LAN.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following section, some details of the use of the `user nobody` directive
    and the `update` action of the `learn-address` script are given.
  prefs: []
  type: TYPE_NORMAL
- en: User nobody
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As stated earlier, this server configuration does not include the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, on some Linux distributions, it can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If we had added these lines, then the OpenVPN server process would be running
    as user `nobody`. This user does not have the required rights to open and close
    firewall ports using `iptables`, hence they were removed in this example.
  prefs: []
  type: TYPE_NORMAL
- en: The update action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `learn-address` script is also called when the OpenVPN server detects an
    address change on the client side. This can happen most often in a TAP-based network
    when an external DHCP server is used. The `learn-address` script can then adjust
    routing tables or firewalling rules based on the new client IP address, using
    the `update` action.
  prefs: []
  type: TYPE_NORMAL
- en: Another method to generate a `learn-address update` action is by triggering
    a soft-reset of the server; for example, by sending a USR1 signal to the server
    process. This will cause all clients to reconnect, this time triggering an `update`
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Using a tls-verify script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN has several layers in which the credentials of a connecting client are
    verified. It is even possible to add a custom layer to the verification process
    by specifying a `tls-verify` script. In this recipe, we will demonstrate how such
    a script can be used to allow access only for a particular certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the *Setting up the public and private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
    For this recipe, the server computer was running Fedora 22 Linux and OpenVPN 2.3.10\.
    The client was running Windows 7 64 bit and OpenVPN 2.3.10\. For the client, keep
    the client configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe, from Chapter 2, *Client-server IP-only Networks* .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-4-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `tls-verify` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this file as `example5-4-tls-verify.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the script is executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the list of allowed certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that this is a one-line command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the client with the Windows GUI using the basic configuration file:![How
    to do it...](img/image00378.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client should be able to connect normally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, on the OpenVPN server, remove the `/etc/openvpn/cookbook/example5-4-tls-verify.sh.allowed`
    file and reconnect. This time the server log will show the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means that the client is denied access by the OpenVPN server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a client connects to the OpenVPN server, the `tls-verify` script is executed
    several times to verify the entire certificate chain of the connecting client.
    In this recipe, we look for the end-user certificate, which is the equivalent
    of the `client1.crt` file. When this end-user certificate is found in the `example5-4-tls-verify.sh.allowed`
    file, the script returns `0`, indicating a successful verification. If it is not
    found, a message is printed to the OpenVPN log and the script returns `1`. The
    OpenVPN server then denies the access to this particular client.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we focus only on the end-user certificate using a simple lookup
    table. Of course, this could also have been achieved in many other ways (for example,
    by using a `client-config-dir` file). With a `tls-verify` script, it is also possible
    to disallow all the certificates from a particular certificate authority (CA).
  prefs: []
  type: TYPE_NORMAL
- en: 'In more complex setups, where client certificates can be signed by many different
    CAs, it is sometimes very useful to temporarily refuse access to all the certificates
    from a particular CA. For example, to deny access to all certificates that are
    signed with the CA certificate with the subject name "Cookbook 2.4 CA" from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*, the following script could be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using an auth-user-pass-verify script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other than certificates and private keys, OpenVPN also offers the option to
    use a username and password mechanism for verifying client access. In this recipe,
    we will demonstrate how to set up an `auth-user-pass-verify` script, which is
    executed on the server side when a client connects. This script can be used to
    look up a user in a database or file and can also be used to verify that the right
    password was specified.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.10, and the client was running
    Fedora 22 and OpenVPN 2.3.10\. For the server, keep the server configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe, from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append a line to the server configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the last line is a single line. Save it as `example5-5-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `auth-user-pass-verify` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-5-aupv.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up a (very unsafe!) password file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that the `auth-user-pass-verify` script is executable, then start
    the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-5-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, the OpenVPN client will ask for the username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, if the correct password is entered, the connection is established as normal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, try to reconnect using a different username:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The server log will now show the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And the client is now refused access.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenVPN client first prompts the user for the Auth username and password.
    Note that the password is sent to the server over a secure channel, but the password
    itself is not hashed or encrypted. The server-side `auth-user-pass-verify` script
    is passed the username and password in a file on two lines. The script then looks
    up the username in its password file and verifies whether the right password was
    specified. If so, then the script exits with exit code 0, indicating success.
    Otherwise, the exit code of 1 is returned, causing the server to abort the client
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following section, we'll see some details about how a password can be
    specified and can be passed from the server to the `auth-user-pass-verify` script.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the username and password in a file on the client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenVPN has the option to specify the username and password in a file on the
    client. For this, OpenVPN needs to be compiled with a special flag, which is enabled
    by default starting with OpenVPN 2.3.
  prefs: []
  type: TYPE_NORMAL
- en: Note that it is unsafe to allow the password to be stored on the client (in
    plaintext format!).
  prefs: []
  type: TYPE_NORMAL
- en: Passing the password via environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we used the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This configured the OpenVPN server to pass the client-supplied username and
    password via a temporary file. This temporary file is accessible only to the server
    process, and hence, this is a safe mechanism to pass the encrypted password to
    the `auth-user-pass-verify` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to pass the username and password to the `auth-user-pass-verify`
    script via environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The advantage of this is that no extra files need to be created. The downside
    is that passing a password via plaintext and via the environment is slightly less
    secure: it is easier (but not easy!) to snoop the environment of another process
    than it is to read a secure file owned by another user.'
  prefs: []
  type: TYPE_NORMAL
- en: Script order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all the possible scripts that can be configured on the OpenVPN server,
    it becomes important to determine the order in which these scripts are executed.
    In this recipe, we will find out what the order is, as well as the command-line
    parameters for each of these scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentSO 6 Linux and OpenVPN 2.3.10., and the client was running
    Fedora 22 and OpenVPN 2.3.10\. For the server, keep the server configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe, from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
    For the client, keep the client configuration file from the previous recipe at
    hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following lines to the server configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-6-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-6-script.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the script is executable and then start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Auth username and password can be chosen arbitrarily, as they are not used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After successfully connecting to the server, disconnect the client and wait
    for a few minutes until the server recognizes that the client has disconnected.
    Now, stop the OpenVPN server as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A log file will be created in `/tmp/example5-6.log`, parts of which are shown
    here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many script hooks built into OpenVPN. When the OpenVPN server starts
    up and when a client connects and then disconnects, these scripts are executed
    one by one. The order (for OpenVPN 2.3) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `up` script as user `root`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `route-up` script as user `root`; afterwards, root privileges are dropped
    and OpenVPN switches to the user `nobody` as specified in the server configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tls-verify` script. The CA certificate that was used to sign the client
    certificate is passed for verification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tls-verify` script. The client certificate itself is passed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `user-pass-verify` script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `client-connect` script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `learn-address` script with the action, `add`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point, the client has successfully established a VPN connection. Now,
    when the client disconnects:'
  prefs: []
  type: TYPE_NORMAL
- en: The `client-disconnect` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `learn-address` script with the action, `delete`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And when the server shuts down:'
  prefs: []
  type: TYPE_NORMAL
- en: The `down` command; note that this is run as the user `nobody`!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When writing scripts, it is very important to keep the script execution time
    in mind. The design of OpenVPN 2 is very monolithic: everything (except plugins,
    which we will come to later in this chapter) is run under a single thread. This
    means that while a script is executing, the whole OpenVPN server is temporarily
    unavailable for all other clients: the routing of packets stops, other clients
    cannot connect or disconnect, and even the management interface will not respond.
    So, it is very important to ensure that all the server-side scripts execute very
    quickly.'
  prefs: []
  type: TYPE_NORMAL
- en: This design flaw has been recognized, but it is not expected that there will
    be a major change until the arrival of OpenVPN 3.
  prefs: []
  type: TYPE_NORMAL
- en: Script security and logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the major differences between OpenVPN 2.0 and later versions is related
    to the security when running scripts. With OpenVPN 2.0, all scripts were executed
    using a `system` call and the entire set of server environment variables was passed
    to each script. Starting with OpenVPN 2.1, the `script-security` configuration
    directive is introduced and the default for executing scripts is now the `execv`
    call, which is more secure. Also, it is advisable to log output of your scripts
    for security reasons. With script logging output, including timestamps, it becomes
    much easier to track down problems and possible security incidents. Starting with
    OpenVPN 2.3, it is no longer possible to add the `system` option to the `script-security`
    configuration directive.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will focus on the different options for the `script-security`
    configuration directive and on the methods to ease the logging of script output.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentSO 6 Linux and OpenVPN 2.3.10, and the client was running
    Fedora 22 and OpenVPN 2.3.10\. For the server, keep the server configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe, from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the OpenVPN server using the configuration file from the *Using a client-side
    up/down script* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-7-client.conf`. Notice the lack of the `script-security`
    directive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `up` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-7-up.sh` and make sure that it is executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the OpenVPN client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The client appears to connect successfully until the `up` script needs to be
    executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we repeat the preceding with an extra command-line parameter, `--script-security
    2`, the client can connect successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `/etc/openvpn/cookbook/example5-7.log` log file now shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If we repeat this preceding exercise using `--script-security 3`, we would get
    a similar output.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to execute the scripts on either the client or the server, the directive,
    `script-security 2` (or 3) must be specified; otherwise, OpenVPN 2.1 or higher
    will refuse to start. The following parameters can be specified for the `script-security`
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: This parameter specifies that no external programs can be called. This
    means that OpenVPN cannot successfully start up, except on Microsoft Windows under
    certain circumstances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: This parameter specifies that only built-in external programs (such as `/sbin/ifconfig`,
    and `/sbin/ip` on Linux, and `netsh.exe`, and `route.exe` on Windows) can be called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: This parameter specifies that built-ins and scripts can be called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`: This is the same as `2`, but now here, passwords can be passed to scripts
    via environment variables as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are subtle differences between running scripts on Linux/NetBSD/Mac OS
    and on Windows. On Windows, the system call, `CreateProcess` , is used by default.
    This makes it impossible to pass extra parameters to some scripts, such as the `up`
    script, as the entire text enclosed with quotes after the `up` directive is considered
    as the name of the executable or script.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting and IPv6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that IPv6 addresses are more common, it is instructive to show how IPv6
    addresses are passed from the server to client-side scripts. Basically, all environment
    variables that existed for IPv4 addresses also exist for IPv6, simply by appending
    or inserting `_ipv6` to the environment variable. In this recipe, we will show
    you how to process these environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.10., and the client was running
    Fedora 22 and OpenVPN 2.3.10\. For the server, keep the server configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe, from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append two lines to the server configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-8-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-8-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-8-script.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the `example5-8.sh` script is executable, and then start the
    client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the client has is connected, check the client-side log file, `/tmp/example5-8.log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenVPN server assigns an IPv6 address to the client and also pushes out
    two IPv6 routes to the client using the `push "route-ipv6 ..."` directive. The
    client picks up these directives and passes them on to the `up` and `route-up`
    scripts. These scripts only show the environment variables that have `ipv6` in
    them, which gives a good overview of the IPv6 settings that are available to scripts
    and plugins.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be careful when passing IPv6 routes to clients that contain the IPv6 address
    of the server itself—these routes can take precedence over an existing route to
    the server, causing the VPN connection to stall.
  prefs: []
  type: TYPE_NORMAL
- en: Using the down-root plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN supports a plugin architecture, where external plugins can be used to
    extend the functionality of OpenVPN. Plugins are special modules or libraries
    that adhere to the OpenVPN Plugin API. One of these plugins is the `down-root`
    plugin, which is available only on Linux. This allows the user to run specified
    commands as a user `root` plugin when OpenVPN shuts down. Normally, the OpenVPN
    process drops root privileges (if the `--user` directive is used) for security
    reasons. While this is a good security measure, it makes it difficult to undo
    some of the actions that an `up` script can perform, which is run as a user `root`
    plugin. For this, the `down-root` plugin was developed. This recipe will demonstrate
    how the `down-root` plugin can be used to remove a file that was created by an `up`
    script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the *Setting up public and private
    keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.10\. No client computer was
    required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-9-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `up` script, which we will also use for the `down-root` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example5-9.sh` and make sure that it is executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The server log file will now show the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This indicates the plugin has started. The fact that there were no error codes
    right after the `up` script was executed indicates that it ran successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verify that the `/tmp/example5-9.tempfile` file was created on the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, stop the server. The server log will now show the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that the `/tmp/example5-9.tempfile` file has been removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `down-root` plugin is registered at system startup when the OpenVPN server
    process is still running with `root` privileges. Plugins are spawned off in a
    separate thread, meaning that when the main OpenVPN process drops its root privileges,
    the plugins will still have full `root` access. When OpenVPN shuts down, the plugin
    is called and it removes the file created by the user `root` plugin when the server
    started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an interesting part of the server log file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This indicates that the OpenVPN process was indeed not capable of running the
    command `/sbin/ifconfig tun0 0.0.0.0`, proving that `root` privileges had been
    successfully dropped. The plugin was then called, which did have `root` privileges,
    so that it could remove the root-owned file in `/tmp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that it is required to specify a path starting with `./` for the script
    that the plugin runs. If the leading `./` is not specified on Linux or Mac OS,
    then OpenVPN will not be able to find the script that the plugin needs to run,
    as the current directory (`.`) normally is not part of the PATH environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that the `up` script is called with the `script_type` environment
    variable set but that this is not true for plugins. To overcome this, an extra
    parameter was added so that the same script could be used as both the `up` and `down-root`
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Plugins are supported on Linux, Net/FreeBSD, and on Windows. The following
    script callbacks can be intercepted using a plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`up`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route-up`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipchange`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tls-verify`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth-user-pass-verify`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client-connect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client-disconnect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`learn-address`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe, *Using the PAM authentication plugin*, which explains how to
    use an OpenVPN plugin to authenticate remote VPN clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the PAM authentication plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very useful plugin for OpenVPN is a plugin to validate a username using the
    Linux/UNIX PAM authentication system. **PAM** stands for **pluggable authentication
    modules** and is a very modular system for allowing users access to system resources.
    It is used by most modern Linux and UNIX variants, offering a very flexible and
    extendible system for authenticating and authorizing users. In this recipe, we
    will use the PAM authentication plugin as a replacement of an `auth-user-pass-verify`
    script to validate a remote user's credentials against the system PAM configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3 or higher on two computers. Make sure that the computers
    are connected over a network. Set up the client and server certificates using
    the first recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Fedora 22 Linux and OpenVPN 2.3.11\. For the client, keep the client configuration
    file, `example5-5-client.conf`, from the *Using an auth-user-pass-verify script*
    recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the last line of the server configuration file is a single line. Save
    it as: `example5-10-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The server log file will now show:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This indicates that the PAM plugin successfully initialized in the background.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the OpenVPN client. OpenVPN will first prompt for the Auth username and
    password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the server used in this recipe, a special user `cookbook` was created. After
    typing in the username and password, the connection to the server is successfully
    established. The OpenVPN server log shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This shows that the user was successfully authenticated using PAM.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PAM authentication plugin intercepts the `auth-user-pass-verify` callback.
    When the OpenVPN client connects and passes along the username and password, the
    plugin wakes up. It queries the PAM subsystem by looking at the `login` module
    (this is the first parameter for the `openvpn-auth-pam.so` file). The other parameters
    are used by the `auth-pam` plugin to know which input to expect from the PAM subsystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The PAM `login` subsystem will ask for the username by presenting the `login
    prompt` and will ask for the password by presenting the `password` prompt. The `auth-pam`
    plugin uses this information to know where to fill in the username (`USERNAME`)
    and password (`PASSWORD`).
  prefs: []
  type: TYPE_NORMAL
- en: After the user has been successfully authenticated by the PAM subsystem, the
    connection is established.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It would also have been possible to authenticate a user using an `auth-user-pass-verify`
    script, which queries the PAM subsystem. There are two major advantages to using
    the PAM plugin for this:'
  prefs: []
  type: TYPE_NORMAL
- en: It is not required to use the `script-security` directive at all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plugin method is much faster and far more scalable. When many users try
    to connect to the OpenVPN server at the same time, the VPN performance would be
    greatly affected when using an `auth-user-pass-verify` script, as for each user
    connection, a separate process needs to be started, during which the OpenVPN's
    main thread is installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe, *Using the down-root plugin*, in which the basics of using
    OpenVPN plugins are explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
