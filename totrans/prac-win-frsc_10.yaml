- en: Chapter 10. Browser and E-mail Investigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Internet and World Wide Web is the main way to search and view data and
    information nowadays. Browsers are the most common tools to do this. So, investigating
    browsers is important when an analyst tries to investigate a user''s activity
    to profile this user. This isn''t an easy task because of the huge number of browsers
    in the market nowadays and the different artifacts structure in each browser.
    In this chapter, we will highlight three of the most used browsers: Internet Explorer,
    Firefox, and Chrome.'
  prefs: []
  type: TYPE_NORMAL
- en: E-mail is still the main way to communicate among many people in the digital
    world, especially in the corporate environment. This chapter will cover the different
    formats of e-mail clients' archives, and explain how to read e-mails from these
    archives for analysis or tracing senders.
  prefs: []
  type: TYPE_NORMAL
- en: Browser investigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tricking a user into visiting a malicious link and downloading a malicious executable
    is one of most used techniques by offenders to infect users' machines. Analyzing
    the browsing activities of the victim can identify the first infection vector
    and how it worked. Also, in case of analyzing a criminal machine, browsing through
    the history would help profile the user and clarify their intentions by identifying
    the types of websites that they usually visit and the contents of their downloaded
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing browser activities requires that the investigator understand the different
    artifacts of the browser with their locations and the data structure of each one.
    From this, we can see why it is tricky to conduct in-depth browser forensics.
    There are many browsers that are currently on the market, and a single user can
    be using more than one browser.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explain different browser's artifacts and look at how
    to extract all these artifacts from the local browser files.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Internet Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Internet Explorer aka IE or MSIE is one of the first internet browsers
    on the market. It comes by default with the Windows operating system. Version
    1 was released in 1995, and the latest version at the time of writing this book
    is version 11\. Between version 1 and version 11 and between the different versions
    of Windows, the artifacts of the MSIE have been reformed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, starting from Windows Vista the directory structure and artifacts'' locations
    have been changed in the filesystem. So, there are two factors that control the
    Internet Explorer analysis process:'
  prefs: []
  type: TYPE_NORMAL
- en: The version of the installed Internet Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the running Windows operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using browsing history, the investigator can profile system users and track
    their activities to narrow the investigation process. Windows keeps the browsing
    history for 20 days by default, which can be edited from the program itself or
    from the registry.
  prefs: []
  type: TYPE_NORMAL
- en: The investigator can use this piece of information to see whether the user recently
    cleared their browsing history or the history that the investigator found is the
    maximum history record that can be found in the system. The number of days to
    keep the history records of MSIE can be found under a value named `DaysToKeep`
    in the software hive under `\Microsoft\Windows\CurrentVersion\Internet Settings\Url`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The location of History files differ from one Windows version to another, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Before Windows Vista, the History file called `History.IE5` in `C:\Documents
    and Settings\<Username>\Local Settings\History.IE5`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Windows Vista and Windows 7, the locations changed but it uses the same
    file structure `History.IE5`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\History\History.IE5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\History\Low\History.IE5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Windows 8, Windows 8.1, and Windows 10, the location and the structure changed:
    `<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\WebCache\WebCacheV#.dat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Starting from MSIE Version 7 under Windows Vista and then Windows 7, MSIE runs
    in protected mode to improve security. This protected mode is turned on by default,
    and it can be turned off by the user. It runs the MSIE with low privilege, which
    makes any malicious software that is installed by MSIE during browsing run with
    the same low privilege, which doesn''t allow the malware to access and manipulate
    sensitive areas in the operating system, such as system files or registry keys.
    All the activities of the MSIE in protected mode in Windows Vista or Windows 7
    are located under the `Low` folder: `<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\History\Low\History.IE5`.'
  prefs: []
  type: TYPE_NORMAL
- en: History.IE5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This was used by MSIE from Version 5 to Version 9 to store browsing history.
    On a live system, browsing to this location will display different folders indicating
    different periods of browsing. Each folder contains links to the visited websites.
    The user can reopen these websites from this location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![History.IE5](img/image_10_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: History on a live system
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to open the same location with the command line. We will list
    the files under the `content.IE5` directory using the `dir` command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![History.IE5](img/image_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Listing the contents of History using the dir command
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that there is a different structure with only one file named `index.dat`.
    However, if we tried to list the directory structure by the `dir` command with
    an `/a` switch to list all directories, we will get different results, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![History.IE5](img/image_10_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The dir command with an /a switch
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see two new directories with names that start with `MSHist01`. These
    two folders represent the two folders in the preceding screenshot. The rest of
    the name represents the period of time that each folder contains of browsing history
    with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The constant * `MSHist01` *, four digits for the start year, two digits for
    the start month, two digits for the start day, four digits for the end year, two
    digits for the end month, and two digits for the end day*'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, these two files represent the following browsing history:'
  prefs: []
  type: TYPE_NORMAL
- en: The first file shows the dates from 16-2-2015 to 23-2-2015, which indicates
    that this is a weekly history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second file indicates a daily history for February 28, 2015.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Linux, if we tried to open the same `History` directory, we would see all
    the details using the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![History.IE5](img/image_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Listing the History contents with the ls command in Linux
  prefs: []
  type: TYPE_NORMAL
- en: 'So, from this short listing, we can see that there are three different types
    of `index.dat` files, which can be summarized, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Main `index.dat`, which is located directly under `History.IE5`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weekly `index.dat`, which is located under the `weekly` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily `index.dat` file, which is located under the `daily` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each index file contains entries about the visited websites. Each entry starts
    with a URL as a signature. Each entry contains the website title, URL, username,
    number of hits, and two timestamps—one at offset 8, and the second one at offset
    16 from the start of each entry. Each timestamp is 32 bits or 8 bytes long:'
  prefs: []
  type: TYPE_NORMAL
- en: '![History.IE5](img/image_10_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hex dump of the weekly index.dat file
  prefs: []
  type: TYPE_NORMAL
- en: "Knowing the timezone of the machine is a very critical piece of information\
    \ for the analysis process, but you must also know how each artifact in Windows\
    \ is storing its timestampsâ\x80\x94either in UTC or local time. In `History.IE5`,\
    \ there are three different `index.dat` files, each file stores timestamps in\
    \ a different way:"
  prefs: []
  type: TYPE_NORMAL
- en: '| Type of `index.dat` file | First timestamp at offset 8 | Second timestamp
    at offset 16 |'
  prefs: []
  type: TYPE_TB
- en: '| Main | Last access (UTC) | Last access (UTC) |'
  prefs: []
  type: TYPE_TB
- en: '| Daily | Last access (local time) | Last access (UTC) |'
  prefs: []
  type: TYPE_TB
- en: '| Weekly | Last access (local time) | Creation time of the `index.dat` file
    (UTC) |'
  prefs: []
  type: TYPE_TB
- en: '*Different timestamps for different index.dat files*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The timestamp can be converted to a human readable format using the `DCode.exe`
    tool ([http://www.digital-detective.net/digital-forensic-software/free-tools/](http://www.digital-detective.net/digital-forensic-software/free-tools/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![History.IE5](img/image_10_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first timestamp in weekly index.dat decoded using the DCode.exe tool
  prefs: []
  type: TYPE_NORMAL
- en: The first timestamp of the weekly `index.dat` entry shows the date on which
    it was last accessed in local time. So, this page was last accessed on **Thu,
    19 February 2015 13:47:22 UTC**, considering that the machine's timezone was UTC+2.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, the second timestamp is ****Sat, 28 February 2015 20:39:24****
    , which is the creation date of the weekly `index.dat` file itself in UTC.
  prefs: []
  type: TYPE_NORMAL
- en: In case we don't know the timezone of the machine, the difference in time between
    the first and the second timestamp in the same entry in the daily `index.dat`
    file is the difference between the UTC and the local time of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: IEHistoryView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IEHistoryView ([http://www.nirsoft.net/utils/iehv.html](http://www.nirsoft.net/utils/iehv.html))
    can open the `history` file and parse it from live system or within the Wine environment
    in Linux with the History folder. It can parse history up to MSIE Version 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IEHistoryView](img/image_10_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The IEHistoryView tool (index.dat parser)
  prefs: []
  type: TYPE_NORMAL
- en: BrowsingHistoryView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'BrowsingHistoryView ([http://nirsoft.net/utils/browsing_history_view.html](http://nirsoft.net/utils/browsing_history_view.html))
    is another program that can parse all versions of the MSIE, and it has two versions
    for 32-bit and 64-bit systems. Also, it can work on a live system and in a postmortem
    analysis by providing the program with the webcache directory location. It also
    can parse the history of different other browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BrowsingHistoryView](img/image_10_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: BrowsingHistoryView custom analysis
  prefs: []
  type: TYPE_NORMAL
- en: MiTeC Internet History browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MiTeC Internet History browser is free software from MiTeC ([http://www.mitec.cz/ihb.html](http://www.mitec.cz/ihb.html)).
    This works on all MSIE versions and on other browsers as well. It parses the machine
    and displays the results of different browsers in the same output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MiTeC Internet History browser](img/image_10_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MiTeC IHB output (three different browsers) on Windows 8.1
  prefs: []
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user visits Internet pages, these pages will be cached to the system
    in order to speed up browsing. For example, if the user pressed the back button
    in the browser, then the browser will fetch the page from the local system instead
    of requesting it again from the remote server. From the forensics perspective,
    this is useful to find a way to rebuild the contents of the pages that a user
    has been visiting. Cached data allow us to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cached data location differs from one version of Windows to another, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Before Windows Vista, the cache file was called `Content.IE5` and was located
    at `<SystemPartition>\Documents and Settings\<Username>\Local Settings\Temporary
    Internet Files\Content.IE5`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Windows Vista, Windows 7, and Windows 8:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\Temporary
    Internet Files\Content.IE5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\Temporary
    Internet Files\Low\Content.IE5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Windows 8 or with the beginning of MSIE V10.0, the cache is combined with
    the `WebCacheV#.dat` file, but the old locations still exist with only a file
    with size of 0 bytes named `container.dat`:![Cache](img/image_10_010.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content.IE5 for MSIE Version 11 running on Windows 7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Windows 8.1, the `WebCacheV#.dat` file is still also used by the operating
    system to save a cache, but the old location has been changed to the `INetCache`
    directory starting from MSIE V11.0:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\INetCache\IE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\INetCache\Low\IE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the new cache location in Windows 8.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cache](img/image_10_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Windows 8.1 cache location
  prefs: []
  type: TYPE_NORMAL
- en: Content.IE5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Content.IE5` folder was used starting from MSIE5 and it contains randomly
    named folders that contain the actual data of the visited pages. The `index.dat`
    file, located in the Content.IE5 folder, contains the metadata of each cached
    file. This file tracks the cached contents and identifies which files are located
    under the sub-directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'It contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The original address with the HTTP header returned from the request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The location of the file cached for this URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of cache record, that is, URL and LEAK for normal record, REDR for
    redirected pages, and HASH to index the contents of the file:![Content.IE5](img/image_10_012.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample URL entry in index.dat file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Along with this information, there are some timestamps stored in the `index.dat`
    file as well.
  prefs: []
  type: TYPE_NORMAL
- en: IECacheView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The IECacheView program from [http://www.nirsoft.com](http://www.nirsoft.com)
    can parse the cache information on a live Windows system. In case of live analysis,
    it will detect the right location of the cached information. However, in a postmortem
    analysis, it should be provided with the location of the cached data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IECacheView](img/image_10_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IECacheView parsing cached data of MSIE V8 on Windows 7
  prefs: []
  type: TYPE_NORMAL
- en: This program can do many things to each entry in the context menu, such as viewing
    the actual code of the page, which will be useful in identifying malicious redirection
    in the page with iframe.
  prefs: []
  type: TYPE_NORMAL
- en: Msiecf parser (Plaso framework)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will highlight the Msiecf parser or the MSIE Cache File parser from Plaso
    framework, which we used in [Chapter 5](ch05.html "Chapter 5. Timeline"), *Timeline*,
    which parses the cache file from the system partition from the forensics image
    or backup and includes all the results in the storage file created by the log2timeline
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create the storage file for this parser, which will take little time
    as compared to the creation of a complete storage file by, for example, Win7 parser.
    In this case, we need to mount the image and point to the user profile location
    in the mounted image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Msiecf parser (Plaso framework)](img/image_10_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Msiecf Parser from Plaso framework
  prefs: []
  type: TYPE_NORMAL
- en: Then, we can use the `psort.py` tool to filter the created storage file as before.
  prefs: []
  type: TYPE_NORMAL
- en: Cookies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cookies are used by the remote site to track the user activities on the site.
    The remote site adds some information to a single file called a cookie. This information
    differs from one site to another.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a user uses an online shopping site, starts adding items to their
    cart, and browses between different sections on the site without losing previously
    added items and without signing in to the site. One way to do this is by adding
    cookies to the user's machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two different types of cookies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Session cookies**: These are stored only in the memory of the running machine.
    This type can be investigated during memory forensics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistent cookies**: These will be stored to the local filesystem, and this
    type of cookie is what we are interested in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Like history and cache, the location of the cookies in the machine differs
    between different versions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before Windows Vista: `<SystemPartition>\Documents and Settings\<Username>\Cookies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Windows Vista, Windows 7, and Windows 8:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Roaming\Microsoft\Windows\Cookies`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Roaming\Microsoft\Windows\Cookies\Low`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting with Windows Vista, Microsoft made some changes to the user profile
    folder structure and operations in the operating system to increase security.
    One improvement was to make more use of the roaming profile, which allows users
    to access machines in the same domain with their profile data. During this remote
    access some data, including the cookies of the user browsing, is stored locally
    in the roaming directory and not in the remote machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Windows 8.1:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\INetCookies`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\INetCookies\Low`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IECookiesView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IECookiesView is a program ([http://www.nirsoft.net/utils/internet_explorer_cookies_view.html](http://www.nirsoft.net/utils/internet_explorer_cookies_view.html))
    that directly detects the location of the cookies in a live system, and it can
    be provided with the location of the cookies extracted from a forensic image in
    a postmortem analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IECookiesView](img/image_10_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IECookiesView on live Windows 7 running MSIE V8
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the IECookiesView contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The website this cookie was created for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of visits to this website (number of hits)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamps for the cookies stored in UTC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The user who accessed the URL, which can be seen mentioned as part of the filename
    in the following pattern: `<UserName>@<SiteURL>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favorites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Favorites are some websites that are stored by the user for future use. These
    favorites can help in identifying and profiling user activities. The location
    of the favorites changed after Windows Vista as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before Windows Vista: `<SystemPartition>\Documents and Settings\<Username>\Favorites`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After Windows Vista: `<SystemPartition>\Users\<Username>\Favorites`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FavoritesView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'FavoritesView is another program from Nirsoft ([http://www.nirsoft.net/utils/faview.html](http://www.nirsoft.net/utils/faview.html))
    that parses the bookmarks of Mozilla Firefox and Netscape in the same window.
    In some cases and if the program is running under live system, it won''t open
    the correct location of the favorites or bookmarks, so the investigator needs
    to open the correct locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![FavoritesView](img/image_10_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FavoritesView on Windows 8.1
  prefs: []
  type: TYPE_NORMAL
- en: Session restore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Starting from MSIE V8.0 Microsoft implemented a recovery mode to recover the
    opened tabs if MSIE crashed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Session restore](img/image_10_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Crash recovery message of MSIE
  prefs: []
  type: TYPE_NORMAL
- en: 'Each opened tab has a file describing the pages opened with this tab. The location
    that contains data differs from one Windows version to another, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Before Windows Vista and with MSIE V8: `<SystemPartition>\Documents and Settings\<Username>\
    Local Settings\Internet Explorer\Recovery`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Vista, Windows 7, Windows 8, and Windows 8.1: `<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Internet
    Explorer\Recovery`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will provide great help to the investigator, especially if the history
    was turned off. Each file is an OLE-structured storage file with the signature
    of `0xD0CF11E0A1B11AE1`. This type of file needs a special parser.
  prefs: []
  type: TYPE_NORMAL
- en: MiTeC SSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MiTeC Structured Storage Viewer, from [http://www.mitec.cz/ssv.html](http://www.mitec.cz/ssv.html),
    can read the structured storage format and parse it.
  prefs: []
  type: TYPE_NORMAL
- en: 'By opening one of the last active files in the recovery directory by the SSV,
    we can find some timestamps of the file itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MiTeC SSV](img/image_10_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Timestamps in SSV
  prefs: []
  type: TYPE_NORMAL
- en: 'The creation time indicates the time when the session was ended as long as
    the file was found under the last active folder. If we investigate the active
    folder, the time will indicate when the tab was opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MiTeC SSV](img/image_10_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of the last active sessions of MSIE
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous figure, two pages were opened in this tab. We are now interested
    in two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`|KjjaqfajN2c0uzgv1l4qy5nfWe`: This contains the last opened URL in the tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TL#`: This is the page that opened in the tab. Instead of the # sign, there
    will be a number, which indicates the order of the tab in the session'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each TL# page has the page title, page URL, and the referring site if there
    is one.
  prefs: []
  type: TYPE_NORMAL
- en: Inprivate mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Inprivate** or **Incognito** modes are in almost all browsers nowadays. In
    the Inprivate mode, no artifacts are saved to the hard drive. All the artifacts
    are in memory, including the session cookies. Memory forensics can provide good
    results in such cases. This is another reason why we need to capture the memory
    of a running system and not shut it down.'
  prefs: []
  type: TYPE_NORMAL
- en: The session recovery files during the Inprivate mode are created in the same
    location but deleted after closing the session. With MSIE Inprivate mode, recovering
    these files can provide some information about the visited sites during the Inprivate
    sessions. Carving the unallocated space for the OLE file header can be enough
    to recover these files.
  prefs: []
  type: TYPE_NORMAL
- en: WebCacheV#.dat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MSIE Version 10 was released with Windows 8\. Starting from this version, a
    relatively new artifact was introduced, the `WebcacheV#.dat` file. `WebcacheV#.dat`
    is a single file that contains many browser data, that is, history, cache, and
    cookies together. Instead of the # in the file name, there is a two digit number,
    this number may differ from one system to another, but there will be only one
    file with this name at `<SystemPartition>\Users\<Username>\AppData\Local\Microsoft\Windows\WebCache\`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebCacheV#.dat](img/image_10_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WebCacheV#.dat in Windows 8.1
  prefs: []
  type: TYPE_NORMAL
- en: This file is an **Extensible Storage Engine** (**ESE**) database file or EDB.
    This type of database is used in many Microsoft applications, such as Windows
    search, Active directory, and Windows Mail.
  prefs: []
  type: TYPE_NORMAL
- en: Although this file contains many browser artifacts combined, the old locations
    of the browser artifacts still have the old files, but they are unused (we will
    explain this later).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the artifacts won't be extracted from a live system because they are
    already in use by the operating system. They can be extracted from the forensic
    image. Otherwise, we can use programs, such as **FTK imager**, if we have the
    suitable privilege to dump these files from the live system as discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'As it is an ESE database, the `WebcacheV#.dat` file can be tested to see whether
    it is corrupted with the Windows utility, `Esentutl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebCacheV#.dat](img/image_10_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Esentutl utility to test the WebCacheV01.dat file
  prefs: []
  type: TYPE_NORMAL
- en: ESEDatabaseView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ESEDatabaseView from Nirsoft can be used to open the `.dat` file. Once opened,
    we can find many containers (tables) in the database. We can list all the containers
    in the containers table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ESEDatabaseView](img/image_10_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The list of containers in the WebCacheV01.dat file
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see all the artifacts that are located in the `WebCacheV#.dat` file,
    such as the highlighted history data in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ESEDatabaseView](img/image_10_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The history containers within the WebCacheV01.dat file (cropped image)
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, using the container ID we can list the table or the container which contains
    the actual data. For example, container 1 contains the `History.IE5` data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ESEDatabaseView](img/image_10_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The History.IE5 container in the WebCacheV01.dat file (cropped image)
  prefs: []
  type: TYPE_NORMAL
- en: Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firefox is a widely-used browser that started in 2004 and has kept developing
    since. Starting from version 3, it started to use the SQLite format to store the
    usage artifacts except for the cache, and since this version the location of these
    artifacts is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The location of the cache is at the following places:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before Windows Vista: `<SystemPartition>\Documents and Settings\<Username>\Local
    Settings\Application Data\Mozilla\Firefox\Profiles\<profile folder>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since Windows Vista: `<SystemPartition>\Users\<Username>\AppData\Local\Mozilla\Firefox\Profiles\<profile
    folder>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The rest of the artifacts are at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before Windows Vista: `<SystemPartition>\Documents and Settings\<Username>\Application
    Data\Mozilla\Firefox\Profiles\<profile folder>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since Windows Vista: `<SystemPartition>\Users\<Username>\AppData\Roaming\Mozilla\Firefox\Profiles\<profile
    folder>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<profile folder>` folder consists of `<RandomText>.default`, such as `918159wp.default`.
  prefs: []
  type: TYPE_NORMAL
- en: Places.sqlite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Places.sqlite` contains the browsing history of the Firefox browser. It contains
    a lot of information including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First visit date/time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last visit date/time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referrer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Title of the visited page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visit type, which includes the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicked link
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Typed URL
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirected
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Opened from bookmarks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MozillaHistoryView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To parse Firefox history, we can use MozillaHistoryView ([http://www.nirsoft.net/utils/mozilla_history_view.html](http://www.nirsoft.net/utils/mozilla_history_view.html)).
    This usually runs on a live system and automatically detects the location of the
    profiles in the running system, or it provides the SQLite database location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MozillaHistoryView](img/image_10_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The MozillaHistoryView options
  prefs: []
  type: TYPE_NORMAL
- en: Cookies.sqlite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Cookies.sqlite` contains the browsing cookies of Firefox. It stores the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last accessed time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "Connection typeâ\x80\x94either secure or not secure"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stored data from the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MozillaCookiesView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To parse the Firefox Cookies, we can use MozillaCookiesView from [http://www.nirsoft.net/utils/mzcv.html](http://www.nirsoft.net/utils/mzcv.html).
    It parses and lists the cookies in the running system or in the profile directories
    that are pointed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MozillaCookiesView](img/image_10_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MozillaCookiesView
  prefs: []
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Firefox cache format is the same for all versions. Its location hasn''t
    changed from one version to another. It contains the following information about
    the cached files in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source URL of the download
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamps (last modification, last request, and expiration time)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Count (how many times this file was used from the cached data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MozillaCacheView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MozillaCacheView ([http://www.nirsoft.net/utils/mozilla_cache_viewer.html](http://www.nirsoft.net/utils/mozilla_cache_viewer.html))
    can parse and view the cached data of Firefox. It can also export any file from
    the cached data for examination:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MozillaCacheView](img/image_10_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MozillaCacheView
  prefs: []
  type: TYPE_NORMAL
- en: Other browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the previous analysis of MSIE and Firefox, we can understand how it is
    a challenge for digital forensics investigators to conduct browser forensics because
    of the huge number of browsers on the market and the difference in storing their
    browsing artifacts in the system. Nirsoft.net contains many other tools to parse
    different browsers at [http://www.nirsoft.net/web_browser_tools.html](http://www.nirsoft.net/web_browser_tools.html)
    for Google Chrome, Opera, and Safari.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail investigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E-mail is one of the most-used methods of communication nowadays, especially
    in corporate environments. Sending, receiving, or reading e-mails leaves traces
    in the electronic devices. These traces could help in analyzing cases of targeted
    attacks, blackmail, espionage, information leakage, and harassment. Traces of
    e-mail differ according to the way of using the e-mail account, either by webmail
    or an installed e-mail client.
  prefs: []
  type: TYPE_NORMAL
- en: In webmail, browser investigation and memory forensics could help in retrieving
    some e-mail data and even in some cases recover access credentials for the e-mail
    account. In this section, we will discuss the Outlook e-mail client artifacts
    on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook PST file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many e-mail clients on the market. Outlook from Microsoft is one
    of the most-used clients. Outlook stores all the messages, contacts, and calendar
    in a **Personal File Folder** (**PFF**) file. One of the PFFs is the **Personal
    Storage Table** (**PST**) file and is saved by default in the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '`My Documents\Outlook Files` in Windows XP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Documents\Outlook Files` starting from Windows Vista'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can archive e-mails to their machine and free their space on the mail
    server. The archived e-mails will be stored in the PST file as well. The archived
    PST file won't be connected to the server and won't be associated to the user
    account. It will only be available on the user's local computer and won't be available
    on any other devices associated with the user and synced with their account, unless
    the user copies the archived PST file to another device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The archived file locations are, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Documents and Settings\<username>\Local Settings\Application
    Data\Microsoft\Outlook` in Windows XP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<username>\AppData\Local\Microsoft\Outlook` starting
    from Windows Vista'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PST file can be imported to Outlook, but it won't be uploaded to the server.
    It will be only available on the local running client.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook OST files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another PFF file is the **Offline Storage Table** (**OST**) file. It is mostly
    used with the Microsoft exchange server account. It allows the user to create,
    edit, or delete messages on the local computer without connecting to the server;
    and once the connection is established, the client syncs with the server and updates
    all the new changes made by the user to make both copies on the server and the
    client the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OST file can be located at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Documents and Settings\<username>\Local Settings\Application
    Data\Microsoft\Outlook` in Windows XP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<SystemPartition>\Users\<username>\AppData\Local\Microsoft\Outlook` starting
    from Windows Vista.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike the PST files, OST can't be imported to Outlook; it needs to be converted
    to the PST file format first. Different commercial tools can make this conversion.
  prefs: []
  type: TYPE_NORMAL
- en: EML and MSG files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An EML file contains single messages saved by the user. The EML file is a plain
    text file that contains the message details, including the header, body, and attachments.
    An EML file can be opened with Outlook or any compatible e-mail clients. Also,
    there are some EML viewers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another format for saved e-mails is the MSG format. MSG is a binary format
    and can be treated as a compound file for analysis with a compound file parser,
    such as the **Libolecf** by Joachim Metz:'
  prefs: []
  type: TYPE_NORMAL
- en: '![EML and MSG files](img/image_10_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Libolecf against an MSG file
  prefs: []
  type: TYPE_NORMAL
- en: DBX (Outlook Express)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Outlook Express was used before Windows Vista, and then was replaced with Microsoft
    Outlook. Outlook Express uses DBX files as the message storage. A DBX file is
    stored at `<SystemPartition>\Documents and Settings\<username>\Local Settings\Application
    Data\Identities\<Identity number>\Microsoft\Outlook Express`. The Outlook Express
    folder has the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Folder.DBX`: This is the master file in Outlook Express. It contains the tree
    structure of the folders in the mail. There is a different DBX file for each folder
    in the mail structure, including `Inbox.DBX`, `SentItems.DBX`, and `Drafts.DBX`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cleanup.log`: This is used to log the cleanup operations in the deleted files.
    Outlook Express creates a log for the last archive. During archiving, Outlook
    Express actually cleans up deleted items. In normal behavior, it just marks an
    item as deleted and keeps it in the DBX file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PFF Analysis (libpff)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Library libpff ([https://github.com/libyal/libpff/](https://github.com/libyal/libpff/))
    is a cross-platform library to open and parse the PFF files. This library has
    two tools: `pffinfo` and `pffexport`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to investigate an OST file retrieved from the forensic image of
    Windows 7\. First, let''s find information about the OST file using `pffinfo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PFF Analysis (libpff)](img/image_10_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting information from the OST file
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we know that there is no encryption on the OST file, so let''s export
    the data from the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PFF Analysis (libpff)](img/image_10_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exporting the data from the OST file
  prefs: []
  type: TYPE_NORMAL
- en: 'A new folder, `<OSTfilename>.export`, will be created under the working directory.
    In our case, it will be `test.ost.export`. As there are many items in the OST
    file, we created the `log.txt` file to log all these exported items, and then
    we can filter the log file and locate the items of interest. In our case, if we
    are interested in e-mails only, we can `grep` the `log.txt` file for e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PFF Analysis (libpff)](img/image_10_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: E-mails in the OST file
  prefs: []
  type: TYPE_NORMAL
- en: So, there are some e-mails in different folders, such as Deleted Items and Inbox.
    In case we are interested in the received e-mails, which could contain malicious
    links or attachments that deceived the user to infect the machine, we can check
    the e-mails in the Inbox folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the created export folder, we will find the same folder structure in the
    OST. We can navigate to one message location and view the contents of this message''s
    folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PFF Analysis (libpff)](img/image_10_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The contents of each message
  prefs: []
  type: TYPE_NORMAL
- en: We will find different files for each message, including the message header
    and the message body itself. Using the header, we can track the sender. The message
    body will help us check for malicious or phishing links. If the message has an
    attachment, another directory with the attached files will be found under the
    message directory. The attachment could be malicious.
  prefs: []
  type: TYPE_NORMAL
- en: Other tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many tools used to read and parse different e-mail files. Some of
    these of tools can run on a live system for live analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these tools are, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: MiTeC mail viewer for Microsoft Outlook Express 4, 5, and 6 message database
    [`*.idx`/`*.mbx`/`*.dbx`], Windows Vista Mail/Windows Live Mail, and Mozilla Thunderbird
    message databases as well as standalone EML files. You can download this from [http://www.mitec.cz/mailview.html](http://www.mitec.cz/mailview.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different tools from [http://www.freeviewer.org](http://www.freeviewer.org)
    to view PST, OST, EML, and DBX files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PST File Viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OST File Viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EML File Viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlook DBX Viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different tools from [http://www.nucleustechnologies.com](http://www.nucleustechnologies.com)
    to view PST, OST, and EML files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel PST viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel OST viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel EML Viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the importance of browser analysis, browser artifacts,
    and how to find and parse these artifacts in different browsers. Then, we learned
    about parsing PFF files for Microsoft Outlook and different e-mail files, such
    as MSG and EML.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go through Windows memory analysis and show you
    how it is not optional anymore to perform memory forensics.
  prefs: []
  type: TYPE_NORMAL
