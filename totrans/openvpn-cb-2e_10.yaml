- en: Chapter 10.  Advanced Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Including configuration files in config files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple remotes and remote-random
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details of `ifconfig-pool-persist`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting using a SOCKS proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting via an HTTP proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting via an HTTP proxy with authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP-less setups - `ifconfig-noexec`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port sharing with an HTTPS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing features - `redirect-private`, `allow-pull-fqdn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering out pushed options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handing out public IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this last chapter will cover the advanced configuration of OpenVPN.
    This chapter will focus on some of the less well-known configuration options that
    OpenVPN offers, as well as some advanced recipes for real-life deployments. The
    recipes will cover both advanced server configuration, such as the use of connection
    blocks and inline certificates, as well as advanced client configuration, such
    as using a proxy server to connect to an OpenVPN server.
  prefs: []
  type: TYPE_NORMAL
- en: Including configuration files in config files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the lesser-known possibilities when using configuration files is the
    ability to include other configuration files. This can be especially handy when
    setting up a complex OpenVPN server, where multiple OpenVPN instances are offered
    simultaneously. The common configuration directives can be stored in a single
    file, whereas the connection-specific parts can be stored in a file for each instance.
    In this recipe, we will set up two OpenVPN instances, one using UDP and the other
    using TCP as the transport protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this option does not allow for the sharing of VPN IP address ranges
    between instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create the common configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-1-common.conf`. Note that this configuration file does
    not include a protocol specification or server line. Also, note that we will be
    using the same server certificate for both OpenVPN instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the following server configuration file for UDP-based connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-1-server1.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And createa server configuration file for TCP-based connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-1-server2.conf`. This instance is listening on the HTTPS
    port`443`, which is an often-used trick to circumvent very strict firewalls, or
    to work around a badly configured firewall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start both servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the log files to see if both the servers have successfully started.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenVPN configuration files are treated very similarly to command line options.
    As the `--config` command line option is used almost always, it is also possible
    to use it inside a configuration file again. This allows for a split in the configuration
    options, where directives that are common to all OpenVPN instances can be stored
    in a single file for easy maintenance. The instance-specific directives (such
    as the `server` directive) can then be stored in much smaller configuration files,
    which are also less likely to change over time. This again eases maintenance of
    a large-scale OpenVPN server setup.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN has a built-in protection mechanism to avoid including the same configuration
    file recursively.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple remotes and remote-random
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenVPN has (limited) built-in support for automatic failover and load-balancing:
    if the connection to one OpenVPN server cannot be established, then the next configured
    server is chosen. The `remote-random` directive can be used to load-balance many
    OpenVPN clients across multiple OpenVPN servers. In this recipe, we will set up
    two OpenVPN servers and then use the `remote-random` directive to have a client
    choose either one of the two servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that OpenVPN does not offer transparent failover, in which case the existing
    connections are transparently migrated to another server. Transparent failover
    is much harder to achieve with a VPN setup (not just OpenVPN), as the secure session
    keys need to be migrated from one server to the other as well. This is currently
    not possible with OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00431.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.conf` at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start both servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the log files to see that both the servers have successfully started.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that we can use the exact same configuration file on both servers. By using
    masquerading, the VPN clients will appear to come from either `server1` or `server2`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set up masquerading on both servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-2-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The OpenVPN client will randomly choose which server to connect to.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the connection has been established, stop the first OpenVPN process on
    the server that the client connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And wait for the client to reconnect. After the default timeout period, the
    client will reconnect to an alternate server.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the OpenVPN client starts up and `remote-random` is specified, it randomly
    picks a server from the list of available remote servers. If the VPN connection
    to this server cannot be established, it will pick the next server from the list,
    and so on. When the VPN connection is dropped, for example, due to a failing server,
    the OpenVPN client will try to reconnect after a default timeout period. In the
    server configuration file used in the *Server-side routing* recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*, the timeout period is configured using the `keepalive` option.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When setting up a failover OpenVPN solution there are many things to consider,
    some of which are outlined here.
  prefs: []
  type: TYPE_NORMAL
- en: Mixing TCP and UDP-based setups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is also possible to mix TCP and UDP-based setups by specifying the protocol
    type with the `remote` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It is much handier to use connection blocks in this case. The use of connection
    blocks is explained later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Advantage of using TCP-based connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is one major advantage when using a TCP-based setup in combination with
    a failover solution. If the OpenVPN server to which a client is connected is unavailable,
    the TCP connection will fail almost immediately. This leads to a very short timeout
    period after which the OpenVPN client will try to reconnect. With a UDP-based
    setup, the client cannot so easily detect whether the server is unavailable and
    must first wait for the `keepalive` timeout to pass.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically reverting to the first OpenVPN server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A question that is asked from time to time is whether it is possible to configure
    OpenVPN to also support automatic reverting: a second OpenVPN instance is set
    up to provide a failover solution. When the main OpenVPN server is unavailable,
    the backup instance takes over. However, when the main OpenVPN server comes back
    online, the clients are not automatically reconnected to the main server. For
    this, a client reset (or server reset of the second OpenVPN instance) is required.
    It is possible to achieve this using scripting but it depends largely on what
    type of connectivity is considered acceptable: it takes some time for an OpenVPN
    client to detect when the remote server is not responding and to reconnect. The
    VPN connectivity will be intermittent in such a setup. Especially when the network
    connection to the main OpenVPN server is not stable, this can lead to very low
    availability.'
  prefs: []
  type: TYPE_NORMAL
- en: A quick and dirty method to have all clients revert back to the first server
    is to use the management interface on the second server and disconnect all clients.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, which explains
    the basic setup of OpenVPN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C*onnection blocks* recipe, which shows an alternate and more flexible method
    for supporting multiple servers in a single client configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ease the deployment of OpenVPN configuration, and public and private key
    files, a new feature is available to include all of them in a single file. This
    is done by integrating the contents of the `ca`, `cert`, `key`, and optionally
    the `tls-auth` file into the client configuration file itself. In this recipe,
    we will set up such a configuration file and use it to connect to our standard
    OpenVPN server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00432.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks* at hand, as well as the client configuration
    file, `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Insert the contents of the `ca.crt`, `client1.crt`, `client1.key` and `ta.key`
    files in the configuration. Save it as `example10-3-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, connect the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When OpenVPN parses the configuration file, it scans for the directives `ca`, `cert`, `key`,
    and `tls-auth`, (and `dh` for server configuration files), but also for XML-like
    blobs starting with `<ca>`, `<cert>`, `<key>`, `<tls-auth>` and `<dh>` respectively.
    If an XML-like block is found, then the contents of this XML-like block are then
    read and treated in the same manner as when a file is specified. When all the
    required configuration files or blocks are present, the connection is established.
  prefs: []
  type: TYPE_NORMAL
- en: Note that it is not required to treat all of the aforementioned configuration
    directives in the same manner. It is also possible to only specify an inline-block
    for the CA certificate and `tls-auth` files, as these files tend to be static
    for all the clients.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As stated in the first version of the OpenVPN 2 Cookbook, it was also possible
    to specify an inline file using the `[[inline]]` tag. However, this tag was never
    properly documented and starting with OpenVPN 2.3 it is no longer functional.
  prefs: []
  type: TYPE_NORMAL
- en: Connection blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the inline certificates used in the previous recipe, it is also possible
    to specify connection blocks. These connection blocks are treated as multiple
    definitions for remote servers and they are tried in order until a VPN connection
    is established. The advantage of using a connection block is that for each remote
    server, server-specific parameters can be specified, such as the protocol (UDP
    or TCP), the remote port, whether a proxy server should be used, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up two servers, one listening on a UDP port and
    the other on a TCP port. We will then configure the OpenVPN client to try the
    first server using a UDP connection. If the connection cannot be established,
    the client will attempt to connect to the second server using a TCP connection.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00433.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the server configuration
    file, `example8-9-server.conf`, from the *Tuning TCP-based connections* recipe
    from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance Tuning"), *Performance
    Tuning*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start both the servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the log files to check that both the servers have successfully started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-4-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the connection has been established, stop the first OpenVPN process on
    the server that the client connected to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And wait for the client to reconnect. After the default timeout period, the
    client will reconnect to the alternate server using the TCP protocol.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the OpenVPN client starts up, it attempts to connect to the server specified
    in the first `<connection>` block. If that connection fails, it will try the next `<connection>`
    block entry and so forth. When an OpenVPN server becomes unavailable or is stopped,
    the client will automatically restart and try to connect to the first available
    OpenVPN server again.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVPN client first parses the global directives, which are specified outside
    the `<connection>` blocks. For each block, the global directives are then overruled
    using block-specific directives. This makes it easier to specify in the `<connection>`
    blocks only those parameters that are different for each connection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connection blocks, as well as inline certificates, are very handy features to
    easily distribute OpenVPN configurations using a single file. However, a consequence
    of these features is that the use of the command line to overrule the directives
    specified in the configuration file becomes harder, if not impossible. There are
    a few other things to keep in mind when using connection blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Allowed directives inside connection blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are only a few directives allowed inside a connection block:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` and `bind-ipv6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connect-retry`, `connect-retry-max`, and `connect-timeout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`explicit-exit-notify`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http-proxy`, `http-proxy-option`, `http-proxy-retry`, and `http-proxy-timeout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link-mtu` and `link-mtu-extra`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local lport`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mssfix`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nobind`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proto`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` and `rport`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`socks-proxy` and `socks-proxy-retry`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tun-mtu` and `tun-mtu-extra`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other directives are considered global and can only be specified once.
  prefs: []
  type: TYPE_NORMAL
- en: Pitfalls when mixing TCP and UDP-based setups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connection blocks make it very easy to mix TCP and UDP-based setups. The downside
    is that the global parameters specified in the configuration file must be valid
    for both the TCP and UDP-based setups.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Multiple remotes and remote-random* recipe earlier in this chapter, which
    explains how to achieve the same setup without using connection blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details of ifconfig-pool-persist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the options available in OpenVPN that can lead to a lot of confusion
    is `ifconfig-pool-persist`. This directive tells the OpenVPN server to maintain
    a persistent list of IP addresses handed out to different clients. When a client
    reconnects at a later time, the previously-used address is reused. This is only
    one of three methods for assigning static addresses to an OpenVPN client. The
    other two methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an `ifconfig-push` statement in a client-connect script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an `ifconfig-push` statement in a client-configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of these take precedence over the entries found in the `ifconfig-pool-persist`
    file. Experience has shown that it is often a good idea to temporarily disable
    this option when an OpenVPN setup is not working properly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to use `ifconfig-pool-persist` and what
    the pitfalls are.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00434.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks* at hand, as well as the client configuration
    file, `basic-udp-client.conf`, from the same recipe. The second client was running
    Windows 7 64 bit and OpenVPN 2.3.11\. For this client, keep the client configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding the following line to the `basic-udp-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-4-server.conf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An empty file, `/etc/openvpn/cookbook/ipp.txt`, will be created as the server
    starts up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect the first client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Normally, this client will be assigned `10.200.0.2`, which is the first available
    IP address in the `server` IP range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Stop both the client and the server. List the contents of the `ipp.txt` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the server again. Now, connect the second client, which has a different
    certificate:![How to do it...](img/image00435.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This client will now be assigned the address `10.200.0.3`. Without the `ifconfig-pool-persist`
    option, it would have been assigned the first available address, which is  `10.200.0.2`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the OpenVPN server starts, it reads the `ipp.txt` file, if it exists, and
    it tries to re-assign the IP addresses to the client certificates found in the
    file. Whenever an OpenVPN client with one of the existing client certificates
    connects, it is assigned the address found in the `ipp.txt` file, unless the server
    VPN IP address space is too small for the number of already-connected clients.
    In that case, the client receives the first available address from the server
    VPN IP address space.
  prefs: []
  type: TYPE_NORMAL
- en: The first client that connected received the first available address, `10.200.0.2`,
    from the VPN IP server address range. When the OpenVPN server shuts down, this
    information is recorded in the `ipp.txt` file. The second time the OpenVPN server
    started, this information was reloaded and the address, `10.200.0.2`, was held
    in reserve for the client with certificate `client1`. When the second client connected
    with certificate `client2`, it received the next available address in the server
    VPN IP address range, which is `10.200.0.3`. When the server shuts down again,
    this information is also recorded in the `ipp.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: This means that from now on, the first client will always receive the `.2` address
    and the second client the `.3` address. However, it is not a guarantee that the
    listed IP addresses will be assigned to a particular client certificate. The exception
    occurs when many VPN clients connect to the server. If the VPN IP address range
    is exhausted and the first client is not connected at that time, its address is
    recycled for other VPN clients. If the client with certificate `client1` then
    tries to connect to the server, it will be assigned the first available address.
    For a guaranteed assignment, a `client-config-dir` file should be used.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the `ifconfig-pool-persist` directive, there are a few pitfalls to
    watch out for.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the update interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because we did not explicitly specify an update interval, the `ipp.txt` file
    is updated every 600 seconds (10 minutes). This can also be seen by looking at
    the `ipp.txt` file right after a new client connects: the newly-found client certificate
    and VPN IP are not listed in the `ipp.txt` file until the first update interval
    passes or when the OpenVPN server process shuts down.'
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to specify an update interval of 0 seconds, which means
    that the `ipp.txt` file is never updated. This causes the OpenVPN server to associate
    IP addresses with the client certificate names found in the `ipp.txt` file at
    the startup but these associations will never change afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: Caveat - the duplicate-cn option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `duplicate-cn` option can be used to allow the same client certificate to
    connect to the same server a number of times. If this option is used, the `ifconfig-pool-persist`
    option becomes useless, as the same client certificate will be connected twice.
    This means that the OpenVPN server has to hand out two different IP addresses
    to each client and the entry in the `ipp.txt` file becomes meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: When topology net30 is used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the server option `topology net30` is used, the format of the `ipp.txt`
    file is slightly different. In the `net30` topology mode, each client is assigned
    a `/30` network address consisting of four IP addresses: the network address,
    the VPN server endpoint address, the actual client VPN IP address, and the broadcast
    address for the `/30` network. In the `ipp.txt` file, the first of these is recorded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Connecting using a SOCKS proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under certain circumstances, it is not possible to directly connect to an OpenVPN
    server. This happens most often when firewalls are restricting UDP-based traffic.
    In such cases, OpenVPN can connect to an OpenVPN server via an intermediary host
    known as a proxy. OpenVPN supports two types of proxies, SOCKS and HTTP-based,
    both of which work only using TCP-based configurations. This recipe will outline
    how to access an OpenVPN server via a SOCKS proxy, whereas the next two recipes
    will show how to use an HTTP proxy, both with and without authentication.
  prefs: []
  type: TYPE_NORMAL
- en: SOCKS proxies can very easily be set up using almost any SSH client. On Linux
    and Mac OS X, it can be done using the `ssh` or `slogin` commands, whereas, on
    Windows, the free SSH client PuTTY can be used. In this recipe, we will use SSH
    on a Linux client to set up a public SOCKS proxy. A Windows OpenVPN client will
    connect using this proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00436.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    Keep the configuration file, `example8-9-server.conf`, from the *Tuning TCP-based
    connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning* at hand. For the client, keep the configuration
    file, `basic-tcp-client.ovpn`, from *Using an ifconfig-pool block* recipe from
    the [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click on the OpenVPN GUI tray icon and select **Settings**. Fill in the
    name or IP address of the **SOCKS proxy** host, and then click on **OK**:![How
    to do it...](img/image00437.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up a **SOCKS proxy** by setting up an SSH connection on the intermediary
    proxy host. The destination address for the SSH connection is a server which can
    reach the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now start the OpenVPN client in another terminal window:![How to do it...](img/image00438.jpeg)![How
    to do it...](img/image00439.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The connection log will show that OpenVPN first connects to the remote proxy
    host (in this screenshot, the IP address `192.168.3.17` was used). This connection
    is then forwarded to the OpenVPN server and the VPN is established:![How to do
    it...](img/image00440.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **SOCKS proxy** host acts as an intermediary between the (OpenVPN) client
    and the server. SOCKS proxies can also be configured in most web browsers and
    are often used to gain access through a hotel or corporate firewall. The client
    first connects to the **SOCKS proxy** host and then requests a new connection
    to the actual endpoint, which is the OpenVPN server in this case. If the connection
    is allowed by the SOCKS host, the connection is established and the VPN connection
    can be set up.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before using a proxy host to set up a VPN connection, there are a few things
    to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Proxy hosts tend to have a severe impact on the performance of a VPN setup.
    Both the bandwidth and the latency are usually affected when proxy hosts are used.
    This is mostly caused by having to connect to a separate host. There is little
    that can be done about this drop in performance.
  prefs: []
  type: TYPE_NORMAL
- en: SOCKS proxies via SSH
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SSH can be a very handy tool to set up a **SOCKS proxy** host, over which an
    OpenVPN connection can be set up. Apart from the drawback mentioned above, this
    introduces another penalty: both the SSH connection and the VPN connection will
    normally be encrypted. Thus, tunneling traffic over an encrypted VPN link, which
    in itself is tunneled over an encrypted SSH link, is double encrypted!'
  prefs: []
  type: TYPE_NORMAL
- en: 'A question that you should ask yourself if you are tunneling VPN traffic over
    an SSH tunnel is: why? What type of traffic needs to be tunneled over a VPN link
    that cannot be tunneled via a SOCKS-over-SSH tunnel? Most modern web browsers
    and e-mail clients have built-in support for SOCKS hosts, eliminating the need
    for a full-blown VPN. File sharing protocols such as Windows file sharing (**Common
    Internet File System** (**CIFS**)) can also be tunneled over an SSH connection.
    In those cases, a VPN tunnel adds only extra complexity.'
  prefs: []
  type: TYPE_NORMAL
- en: SOCKS proxies using plain-text authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In OpenVPN 2.2 and higher, support is added to connect to a SOCKS proxy that
    required authentication. For OpenVPN 2.2, plain-text authentication support is
    added. Though the name "plain text" may suggest otherwise, the authentication
    mechanism is secure, as the connection to the **SOCKS proxy** host is encrypted
    first.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next two recipes in this chapter will deal with connecting an OpenVPN client
    to a server via an HTTP proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting via an HTTP proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated in the previous recipe, it is not possible to directly connect to
    an OpenVPN server under certain circumstances. In such cases, OpenVPN can connect
    to an OpenVPN server via an intermediary host known as a proxy. This recipe will
    outline how to access an OpenVPN server via an roxy.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP proxy used in this recipe is a Linux-based Apache `httpd` server with
    the `mod_proxy` module loaded. This module can be configured to allow `CONNECT`
    requests. This type of request is needed to connect to secure web servers (HTTPS)
    as well as to an OpenVPN server. If the `CONNECT` request is not allowed, then
    the HTTP proxy cannot be used to set up an OpenVPN connection.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00441.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.11\.
    Keep the configuration file, `example8-9-server.conf`, from the *Tuning TCP-based
    connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning*, as well as the client configuration file, `example8-9.ovpn`,
    from the same recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the client configuration file, `example8-9.ovpn`, by adding the lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `http-proxy-host` is either the name or the IP address of the host running
    the HTTP proxy software. In this recipe, the HTTP proxy was running on the HTTP
    default port `80`. Save the configuration file as `example10-6.ovpn`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the client, and then check the connection log.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The connection log will show that the OpenVPN client first connects to the
    HTTP proxy host and then sends an `HTTP ''CONNECT''` request to connect to the
    OpenVPN server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00442.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The HTTP proxy host responds with the HTTP code `200` meaning `OK`, after which
    the VPN connection is established.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An HTTP proxy host acts as an intermediary between the (OpenVPN) client and
    the server. HTTP proxies can be configured in most web browsers and are often
    used to gain access through a hotel or a corporate firewall. The client first
    connects to the HTTP proxy host and then requests a new connection to the actual
    endpoint using the `HTTP 'CONNECT'` request. If the HTTP proxy host allows the `CONNECT`
    request, the HTTP code `200` is returned and the connection to the OpenVPN server
    is granted. From here on, the OpenVPN connection is set up in a similar fashion
    to a regular TCP-based setup.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using an HTTP proxy host to connect to an OpenVPN server, there are a few
    caveats.
  prefs: []
  type: TYPE_NORMAL
- en: http-proxy options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few options available in OpenVPN to configure the way in which
    OpenVPN connects with the HTTP proxy host:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http-proxy-timeout` (`n`): This sets the timeout when connecting to the HTTP
    proxy host to (`n`) seconds. The default value is 5 seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http-proxy-option AGENT` (`string`): This sets the HTTP agent to (`string`)
    when connecting to the HTTP proxy host. Some proxies allow connections from "well-known"
    web browsers only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http-proxy-option VERSION 1.1`: This sets the HTTP protocol version to 1.1\.
    The default is HTTP/1.0\. OpenVPN 2.1 is not fully HTTP/1.1 compliant when connecting
    to an HTTP proxy host, causing some proxies to refuse access. This is fixed in
    OpenVPN 2.2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dodging firewalls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that OpenVPN makes no attempt to hide itself from a firewall. Modern
    firewalls that perform the so-called deep-packet inspection can easily detect
    the type of traffic that OpenVPN is using to connect to the OpenVPN server and
    can block access based on that.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to SOCKS proxies, HTTP proxy hosts tend to have an impact on the performance
    of a VPN setup. Both the bandwidth and the latency are usually affected when proxy
    hosts are used. This is mostly caused by having to connect to a separate host.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OpenVPN GUI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Windows, you can also the use OpenVPN GUI application to set up an HTTP
    proxy server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the OpenVPN GUI](img/image00443.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous and next recipes in this chapter deal with connecting via a **SOCKS
    proxy** host and connecting via an HTTP proxy with authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting via an HTTP proxy with authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, a plain HTTP proxy was used to connect to an OpenVPN
    server. As a follow-up, in this recipe we will show how an OpenVPN connection
    can be set up when the HTTP proxy server requires authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP proxy used in this recipe is a Linux-based Apache `httpd` server with
    the `mod_proxy` module loaded and configured for basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00444.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `example8-9-server.conf`, from the *Tuning TCP-based
    connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning*, as well as the client configuration file, `basic-tcp-client.conf`,
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the HTTP proxy server to support basic authentication. For the Apache `httpd`
    server used in this recipe, the following `proxy.conf` file was used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `proxy-password` file using Apache''s `htpasswd` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the client configuration file, `basic-tcp-client.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the configuration file as `example10-7-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a plain-text file containing the username and password created in step
    3; for example, by using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client and wait for the connection to be established:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we take a closer look at the client logfile. If the right username and
    password are entered, the HTTP proxy grants access to connect to the OpenVPN server
    and the VPN connection is established:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As can be seen from the connection log, the OpenVPN client attempts basic proxy
    authorization when connecting to the HTTP proxy server. If the authentication
    is successful, the HTTP proxy grants access to the client to connect to the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the previous recipe, the OpenVPN client first connects to the HTTP
    proxy host. It attempts to authenticate to the HTTP proxy using basic authentication,
    using the username and password supplied in the proxy password file, `/etc/openvpn/cookbook/proxypass`.
    After successful authentication, the client then sends an `HTTP 'CONNECT'` request
    to connect to the OpenVPN server. From here on, the OpenVPN connection is set
    up in a similar fashion to a regular TCP-based setup.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenVPN supports multiple authentication mechanisms when connecting to an HTTP
    proxy.
  prefs: []
  type: TYPE_NORMAL
- en: NTLM proxy authorization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenVPN also supports HTTP proxies that use NTLM proxy authorization, where
    **NTLM** stands for **NT Lan Manager**. Typically, this type of proxy is used
    in a Microsoft Windows environment. Unfortunately, OpenVPN's implementation of
    NTLM authorization is rather limited. It does not send out proper NTLMSSP messages
    and it works only with a very limited set of proxies. To enable support for this
    type of proxy add `http-proxy proxyhost proxyport stdin ntlm` or `http-proxy proxyhost
    proxyport stdin ntlm2`, where `stdin` instructs OpenVPN to query the username
    and password on the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenVPN also supports HTTP `digest` authentication, which is more secure than
    the plain-text authentication outlined in this recipe. You can also use the option `auto-nct` with
    the `http-proxy` authentication directive to reject weak proxy authentication
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN GUI limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current OpenVPN GUI does not allow you to specify a username or password
    in the GUI. This was supported in older versions of the Windows OpenVPN GUI application.
    As this feature is not widely used it was removed during the rewrite of the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe in this chapter, where a connection is established using
    an HTTP proxy without extra authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP-less setups - ifconfig-noexec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this recipe is to create an OpenVPN tunnel without assigning IP
    addresses to the endpoints of the tunnel. In a routed network setup, this ensures
    that the tunnel endpoints can never be reached through themselves, which adds
    some security and can also make the routing tables a bit shorter. In the OpenVPN
    configuration files, an IP address needs to be specified, but it is never assigned
    to the tunnel interface.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe has only been tested on Linux systems, as it requires some network-interface
    configuration that is not available on other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00445.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure that the client and server are not on the same local network. If the
    client and server can contact each other directly then this recipe will fail.
    Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. In this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the server config file, `example3-1-server.conf`, from the *Simple configuration
    - non-bridged* recipe from [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-8-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-10-8-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `example10-8-up.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `/etc/openvpn/cookbook/example10-8-up.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Similarly, create the `example10-8-route-up.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `/etc/openvpn/cookbook/example10-8-route-up.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure both scripts are executable and both of them start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the client successfully connects to the OpenVPN server, check the `tap0`
    interface and the routing tables, and verify that you can ping the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenVPN server allocates an IP address for the client, but that does not
    mean that the client interface actually needs to assign these addresses. The `example10-8-up.sh`
    script does exactly this.
  prefs: []
  type: TYPE_NORMAL
- en: Some older Linux kernels refuse to add a route without an address being assigned
    to an interface. Hence, we assign the address `0.0.0.0` to the `tun0` interface.
    To add the routes that are pushed by the server, a special `route-up` script is
    used, `example10-8-route-up.sh`, which brings up all the routes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please note the following when considering an IP-less setup.
  prefs: []
  type: TYPE_NORMAL
- en: Point-to-point and TUN-style networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe can also be used in a point-to-point style environment, where static
    keys are used to connect two networks. Similarly, it can also be used in a TUN-style
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: Routing and firewalling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At first, this recipe might seem odd. The advantage of this setup is that the
    OpenVPN client itself is not reachable by other machines on the VPN. This is handy
    when connecting many clients to an OpenVPN server, but some clients are used as
    gateways to the networks behind them (for example, to connect a remote office
    to the OpenVPN server). By not assigning the remote office gateway an IP address,
    there is no risk of the gateway itself being attacked from the remote VPN side.
    Also, server-side firewalling and `iptables` rules can be slightly shorter in
    this scenario, as there will be no traffic coming from the OpenVPN client with
    the VPN source address. This is also the reason why the server configuration has
    an explicit route to the client-side network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: It also explains why this recipe will fail if the VPN client and server are
    on the same local area network. If the VPN client can contact the VPN server directly
    then the VPN server will not be able to determine which traffic needs to go inside
    the tunnel and which traffic needs to be sent directly to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Port sharing with an HTTPS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common OpenVPN setup to allow road warriors to reach the home office is to
    have OpenVPN listen on the secure web server (HTTPS) port  `443`. The downside
    is that you can no longer use that port on the OpenVPN server to actually host
    a secure website. OpenVPN 2.1 introduces a new `port-sharing` directive, enabling
    dual use of a TCP port. All traffic that is detected as OpenVPN traffic is processed
    by the OpenVPN server itself, and all other traffic is forwarded to another (local)
    machine and/or port.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up an OpenVPN server to share TCP port `443` with
    a web server and we will show that both OpenVPN and a web browser can successfully
    connect to this server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00446.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    Keep the server configuration file, `example8-9-server.conf`, from the *Tuning
    TCP-based connections* recipe from [Chapter 8](part0092.xhtml#aid-2NNJO1 "Chapter 8. Performance
    Tuning"), *Performance Tuning* at hand, as well as the client configuration file, `example8-9.ovpn`,
    from the same recipe.
  prefs: []
  type: TYPE_NORMAL
- en: On the server computer, a secure web server was running on port `8443`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by modifying the `example8-9-server.conf`
    file. Change the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-9-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, modify the client configuration file, `example8-9.ovpn`, by also changing
    the port to `443`. Save the client configuration file as `example10-9.ovpn`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the client and verify that the client can connect to the VPN server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the client has connected, start a web browser and browse to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The OpenVPN server log file will show lines similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `port-share` is used, OpenVPN will inspect the incoming traffic on port `443`.
    If this traffic is a part of an OpenVPN session or if it is an initial OpenVPN
    handshake, then the OpenVPN server processes it by itself. If it is not recognizable
    as OpenVPN traffic, it is forwarded out to the host and port specified in the `port-share`
    directive.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is the OpenVPN server process that is always listening on port `443`.
    The web server must be listening on a different host, interface, or port. With
    this setup, the same port can be used to offer two different services.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The web server that OpenVPN forwards its traffic to must be a secure (HTTPS)
    web server. This is due to the nature of the inbound SSL traffic on the OpenVPN
    server itself. It is not possible to forward the traffic to a regular (HTTP) web
    server. If the traffic is forwarded to port `80`, the Apache web server used in
    this recipe, the following error will appear in the web server error log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Alternatives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many alternatives available that can achieve the same functionality.
    One example tool that can distinguish between OpenVPN, SSL (HTTPS), and SSH traffic
    is the Linux-based `sslh` tool.
  prefs: []
  type: TYPE_NORMAL
- en: Routing features - redirect-private, allow-pull-fqdn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Over the years, the routing features of OpenVPN have expanded. Most notably,
    there are quite a few options for the `redirect-gateway` directive, as well as
    several other less well-known routing directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '`redirect-private`: This option behaves very similar to the `redirect-gateway`
    directive, especially when the new parameters are used, but it does not alter
    the default gateway.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow-pull-fqdn`: This allows the client to pull DNS names from the OpenVPN
    server. Previously, only IP addresses could be pushed or pulled. This option cannot
    be pushed and needs to be added to the client configuration itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route-nopull`: All the options are pulled by a client from the server, except
    for the routing options. This can be particularly handy when troubleshooting an
    OpenVPN setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max-routes n`: This defines the maximum number of routes that may be defined
    or pulled from a remote server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will focus on the `redirect-private` directive and its parameters,
    as well as the `allow-pull-fqdn` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00447.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-Side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following lines to the `basic-udp-server.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example10-10-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following line to the client configuration file, `basic-udp-client.ovpn`,
    and save it as `example10-10.ovpn`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the client:![How to do it...](img/image00448.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch the routing table after the connection has been established.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the DHCP or DNS server was on a different subnet than the client itself,
    then a new route will have been added. This is to ensure that DHCP requests still
    go to the local DHCP server and are not sent over the VPN tunnel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A route for the host `server.example.com` will have been added.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bypass-dhcp` and `bypass-dns` options for the directives, `redirect-gateway`
    and `redirect-private`, cause the OpenVPN client to add an extra route to the
    DHCP and DNS servers if they are on a different network. In large-scale networks,
    the DNS server is often not found on the local subnet that the client is connected
    to. If the route to this DNS server is altered to go through the VPN tunnel after
    the client has connected, this will cause at the very least a serious performance
    penalty. More likely, the entire DNS server will become unreachable.
  prefs: []
  type: TYPE_NORMAL
- en: The `allow-pull-fqdn` directive enables the use of a DNS name instead of an
    IP address when specifying a route. Especially, if a dedicated route to a host
    with a dynamic IP address needs to be made, this is very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `allow-pull-fqdn` directive cannot be pushed from the server.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the directives explained in this recipe, there are more routing directives
    available to control if and how routes are added to the client.
  prefs: []
  type: TYPE_NORMAL
- en: The route-nopull directive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `route-nopull` directive causes the client to pull all the information from
    the server but not the routes. This can be very useful for debugging a faulty
    server setup. It does not mean that no routes are added at all by the OpenVPN
    client. Only the routes that are specified using `push "route"` will be ignored.
    Starting with OpenVPN 2.4, it is also possible to filter out options that are
    pushed from the server to the client. The next recipe will go into detail on this.
  prefs: []
  type: TYPE_NORMAL
- en: The max-routes directive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `max-routes` directive is introduced in OpenVPN 2.1, as version 2.1 allows
    an administrator to push many more routes when compared to OpenVPN 2.0\. To prevent
    a client from being overloaded with routes, the option `max-routes n` is added,
    where `n` is the maximum number of routes that can be defined in the client configuration
    file and/or can pulled from the server.
  prefs: []
  type: TYPE_NORMAL
- en: The default value for this parameter is `100`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe in this chapter, where options that are pushed from the server
    to the client are filtered before they are applied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering out pushed options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with OpenVPN 2.4, it is now possible to filter out options pushed from
    the OpenVPN server to the client. This allows users to have more control over
    the network routes and addresses that are pushed from the server.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show how this new feature of OpenVPN works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00449.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.12\. The client was running Windows 7 64 bit and OpenVPN 2.4_alpha2\.
    For the server, keep the configuration file, `example9-2-server.conf`, from the *Linux
    - using pull-resolv-conf* recipe, from [Chapter 9](part0103.xhtml#aid-3279U1 "Chapter 9. OS
    Integration"), *OS Integration* at hand. For the client, keep the configuration
    file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool block* recipe
    from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following line to the client configuration file, `basic-udp-client.ovpn`,
    and save it as `example10-11.ovpn`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the client:![How to do it...](img/image00450.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the client log file by selecting `View Log` in the OpenVPN GUI. The log
    file will contain lines similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that the DNS settings on the client have not been altered using a tool
    such as `ipconfig /all`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pull-filter` directive accepts several parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accept t`: Accepts the pushed option `t` from the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore t`: Ignores the pushed option `t` from the server, but doesn''t abort
    the connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reject t`: Rejects the pushed option `t` from the server and abort the VPN
    connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each option can be specified multiple times, with the last occurrence overriding
    earlier lines.
  prefs: []
  type: TYPE_NORMAL
- en: By adding the line `pull-filter ignore "dhcp-option DNS"` to the client configuration
    file, we ignore any pushed line that starts with `dhcp-option DNS`. Therefore,
    no DNS settings are accepted from the VPN server. This option can be applied to
    all options that are pushed from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Handing out the public IPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the `topology subnet` feature that OpenVPN offers, it becomes feasible
    to hand out public IP addresses to connecting clients. For this recipe, we will
    show how such a setup can be realized. We will re-use a technique from the *Proxy-ARP*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, to make the VPN clients appear as
    if they are a part of the remote network. If a dedicated IP address block is available
    for the VPN clients, then this is not required. The advantage of using the `proxy-arp`
    method is that it allows us to use only part of an expensive public IP address
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, the server computer was running CentOS 6 Linux and OpenVPN
    2.3.12\. The client computer was running Windows 7 64 bit and OpenVPN 2.3.11\.
    Keep the client configuration file, `basic-udp-client.ovpn`, from the *Using an
    ifconfig-pool block* recipe from Chapter 2, *Client-Server IP-Only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this recipe, a public IP address block of 16 addresses was used, but
    here, we will list a private address block instead (`10.0.0.0/255.255.255.240`).
    This block is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10.0.0.18`: This is used for the server''s VPN IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.0.19`: Not available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.0.20` -`10.0.0.25`: Available for VPN clients'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.0.26`: Not available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.0.27`: The LAN address of the OpenVPN server itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.0.28` -`10.0.0.29`: Not available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.0.0.30`: The router on the remote LAN'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that this server configuration cannot be run as user `nobody`. Save the
    configuration file as `example10-12-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the `proxyarp-connect.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `/etc/openvpn/cookbook/proxyarp-connect.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Similarly, create the `proxyarp-disconnect.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `/etc/openvpn/cookbook/proxyarp-disconnect.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that both the scripts are executable, then start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, start the client. The IP address assigned to the client should be `10.0.0.20`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the client to browse the Internet and check its IP address by surfing, for
    example, to [http://www.whatismyip.com](http://www.whatismyip.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some notes on the server configuration file, the directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up a pool of (public) IP address for the clients to use. Because not all
    of these addresses are available in the `/28` block, we cannot simply use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The next statement is to ensure that the VPN server itself is reached via the
    regular network and not via the VPN tunnel itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to redirect all traffic via the VPN tunnel, we need to explicitly
    state the new default gateway and `redirect-gateway`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, the following statement will also cause the topology setting to be
    pushed to the VPN clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: But, as we're not using the `server` directive, this does not happen automatically.
    By explicitly pushing the topology, we ensure that the clients will also use the
    correct settings.
  prefs: []
  type: TYPE_NORMAL
- en: The  `client-connect` and `client-disconnect` scripts are very similar to the
    ones used in the *Proxy-ARP* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.
    By using a handy feature of the Linux `arp` command, we can make the remote clients
    appear to be part of the local network.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `topology subnet` feature was introduced in OpenVPN 2.1 and is essential
    to making this recipe practical. Without this feature, each client would be handed
    out a miniature `/30` network, which means that each client would use up to four
    public IP addresses. This made the deployment of handing out public IP addresses
    to VPN clients very expensive.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Proxy-ARP* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, which explains
    in more detail how the Linux/UNIX Proxy-ARP feature works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
