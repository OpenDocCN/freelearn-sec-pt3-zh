- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat Intelligence and Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to a Ponemon Institute study ([https://webroot-cms-cdn.s3.amazonaws.com/9114/5445/5911/ponemon-importance-of-cyber-threat-intelligence.pdf](https://webroot-cms-cdn.s3.amazonaws.com/9114/5445/5911/ponemon-importance-of-cyber-threat-intelligence.pdf)),
    organizations with robust threat intelligence respond to cyberattacks 53% faster,
    highlighting its importance in threat analysis, incident response, and mitigation.
    Simply put, threat intelligence is data that is gathered, processed, and studied
    to figure out why a threat actor does what they do, who they attack, and how they
    do it. Threat intelligence data empowers security operations teams to proactively
    defend against potential security incidents, improving their ability to detect,
    analyze, and eradicate the threat effectively. When you integrate threat intelligence
    capabilities into the Wazuh platform, **security operations center** (**SOC**)
    analysts can get more context for each security alert. In this chapter, we aim
    to enhance Wazuh’s threat intelligence capabilities. To achieve this, we will
    leverage the **Malware Information Sharing Platform** (**MISP**), an open-source
    project designed for the collection and sharing of threat intelligence. Additionally,
    we will incorporate TheHive/Cortex, a comprehensive suite tailored for scalable
    threat analysis and incident response. By integrating these tools with Wazuh,
    we enable security teams to conduct thorough threat analyses and streamline incident
    response processes. This integration facilitates the automation of threat intelligence
    tasks, resulting in reduced response times and enhanced security for organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is threat intelligence?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated threat intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up TheHive and Cortex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an MISP project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Wazuh and TheHive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating TheHive and Cortex with MISP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is threat intelligence?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Threat intelligence**, or **cyber threat Intelligence**, is basically knowledge
    about threat actors (an individual or group of attackers that carry out hacking
    campaigns against companies or government bodies), their motives, and their capabilities.
    Threat intelligence is all about staying on top of the latest threats and risks
    lurking on the internet. Threat intelligence enables us to make faster, more informed,
    data-backed security decisions and change our behavior from reactive to proactive
    in the fight against attackers. Threat intelligence helps every domain of cybersecurity,
    including SOC analysts, intel analysts, **chief information security officers**
    (**CISOs**), etc. By collecting and analyzing threat intelligence information,
    organizations can be empowered through early detection and prevention, informed
    decision-making using context, improved incident response, a better understanding
    of attackers’ tactics, **techniques, and procedures** (**TTPs**), better security
    defense against growing threats, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will talk about:'
  prefs: []
  type: TYPE_NORMAL
- en: Types of threat intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How SOC analysts use threat intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of threat intelligence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constantly changing world of cybersecurity, companies that want to strengthen
    their defenses must stay ahead of new risks and utilize threat intelligence. Threat
    intelligence is mainly offered in three types: *tactical intelligence*, *operational
    intelligence*, and *strategic intelligence*. By using these types of threat intelligence,
    businesses can not only learn about how threat actors’ strategies change over
    time but also plan their defenses to successfully deal with cyber threats that
    are always changing. Let’s understand all three types of threat intelligence in
    detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tactical intelligence**: Tactical intelligence is concerned with the immediate
    future, is technical in nature, and identifies simple **indicators of compromise**
    (**IOC**). IOCs are technical information collected during investigations, threat-hunting
    activities, or malware analyses. IOCs are actual pieces of data, such as IP addresses,
    domains, file hashes, etc. They can even be collected via open source and free
    data feeds such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AlienVault OTX ([https://otx.alienvault.com/](https://otx.alienvault.com/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Abuse.ch ([https://abuse.ch/](https://abuse.ch/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocklist.de ([https://www.blocklist.de](https://www.blocklist.de)), and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Proofpoint Emerging Threats ([https://rules.emergingthreats.net](https://rules.emergingthreats.net)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This tactical intelligence data is consumed by IT analysts and SOC analysts.
    It typically has a very short lifespan because IOCs such as malicious IP addresses
    or domain names can become obsolete in a matter of days or even hours.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operational intelligence**: Every attack has a “*who*,” a “*why*,” and a
    “*how*.” The “*who*” is referred to as identification. The “*why*” is referred
    to as motivation or intent. The “*how*” is made up of the threat actor’s TTPs.
    This gives the blue team or security operations team insight into how adversaries
    plan, conduct, and sustain campaigns and major operations. This is called operational
    intelligence. Tactical intelligence plus human analysis gives this intelligence
    a longer useful lifespan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategic intelligence**: Strategic intelligence assists decision-makers
    in understanding the threats that cyber threats pose to their organizations. With
    this knowledge, they can make cybersecurity investments that protect their organizations
    while also aligning with their strategic priorities. CISOs and management teams
    are the real consumers of this intelligence. Strategic intelligence requires human
    data collection and analysis, which requires a deep understanding of cybersecurity
    and geopolitics. Strategic intelligence is usually prepared in the form of reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining these different types of threat data can help businesses create complete
    and flexible cyber defenses against a wide range of cyber threats.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will focus on how SOC analysts can consume threat intelligence data
    (especially tactical and operational intelligence) for better detection and analysis
    of threats.
  prefs: []
  type: TYPE_NORMAL
- en: How SOC analysts use threat intelligence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we learned how SOC teams utilize both tactical and
    operational intelligence information. Threat intelligence provides valuable information
    about the latest threats, attack methods, malicious actors, and vulnerabilities.
    Let’s talk about the practical steps SOC analysts take when using threat intelligence:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gather observables**: Observables are pieces of possible threat information.
    Examples include IP addresses, domain names, URLs, file hashes, email addresses,
    and more. Observables can be collected via SIEM tools, EDR, email security tools,
    open source and free threat intelligence feeds, etc.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enrichment and context**: After identifying suspicious observables, gather
    context and enrich the information to better understand the threat. For example,
    you discovered an IP address (123.45.67.89) connecting to a newly registered domain
    ([malicious-website.com](http://malicious-website.com)). You begin by enriching
    this data by searching threat intelligence databases and historical data. This
    IP address has previously been linked to several phishing campaigns, and the domain
    is hosted in a high-risk region known for cybercriminal activity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`123.45.67.89`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Domain IOC: [malicious-website.com](http://malicious-website.com)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'URL path IOC: [malicious-website.com/login](http://malicious-website.com/login)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These IOCs are now added to the security tools in your organization, such as
    firewalls, intrusion detection systems, and SIEM solutions. If any of these IOCs
    are matched, it indicates malicious activity that warrants investigation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Detection and response**: With the enhanced IOCs in place, the security systems
    of your organization, such as SIEM, IDS, or XDR, actively monitor network traffic
    and logs for matches against these indicators. When a match is discovered, an
    alert is generated, and the SOC team is prompted to initiate incident response
    procedures. For example, an employee clicks a link that leads to the IOC-mentioned
    URL path ([malicious-website.com/login](http://malicious-website.com/login)).
    This triggers an alert in the intrusion detection system of your organization
    (e.g. Suricata). The SOC team investigates the incident after receiving the alert.
    They verify that the user’s computer has visited a malicious URL and may have
    been exposed to malware. The SOC team isolates the compromised system, initiates
    malware analysis, and initiates the containment and eradication processes to prevent
    further spread.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Continuous improvement**: After the incident has been resolved, the SOC team
    conducts a post-incident analysis. This involves evaluating the efficacy of the
    threat detection process, refining the IOCs, and learning from past responses
    to improve future response strategies. During analysis, the SOC team determines
    that the phishing attempt originated from an email with a subject line referencing
    a fake job offer. They decide to add email subject patterns to their IOCs to detect
    similar phishing campaigns more effectively in the future.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IOCs are not just limited to domains, IP addresses, or URLs; they can also be
    file hashes, email addresses, email subjects and patterns, registry keys, network
    signatures (data payloads or packet headers), behavioral indicators (unusual file
    modification, new user accounts), custom YARA rules, user agents, HTTP headers,
    DNS records, SSL certificates, hosting information, etc.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about how SOC analysts utilize threat intelligence information; however,
    in order to make it more efficient, we need to automate the threat intelligence
    process, including collection, observable analysis, and updates.
  prefs: []
  type: TYPE_NORMAL
- en: Automated threat intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As of now, you might have realized the importance of threat intelligence for
    SOC analysts or blue team. But imagine, if there are thousands of observables
    generated every day, it will be very difficult to manually copy/paste each observable
    and search them in the threat intelligence database or feeds. This brings a lot
    of challenges to SOC, such as delayed threat detection, missed alerts, a lack
    of consistency, and slow response times. In this section, we will design an automated
    threat intelligence system and integrate it with Wazuh. We will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing automated threat intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to MISP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TheHive and Cortex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The workings of threat intelligence and analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing automated threat intelligence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wazuh is a security platform that collects security events from all endpoints.
    To integrate threat intelligence capabilities, we will use an MISP project—an
    open-source threat intelligence sharing platform. The integration between Wazuh
    and MISP can be accomplished by using MISP API, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Proposed integration of Wazuh with MISP](img/B19549_3_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Proposed integration of Wazuh with MISP
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the design will not allow the security team to track every observable
    and security incident. We need to build a system wherein we can take the security
    events from Wazuh and analyze the observables of each event separately against
    threat intelligence feeds. In short, we have three tools in this design:'
  prefs: []
  type: TYPE_NORMAL
- en: Wazuh (security events collection)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A security incident management tool (for receiving alerts from Wazuh and performing
    a lookup with threat intelligence data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A threat intelligence tool (this tool is created to provide threat intelligence
    data to the security incident management tool)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top of Form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the TheHive tool for security incident management and an MISP project
    for threat intelligence management. The following figure gives you an idea of
    the proposed integration of Wazuh with TheHive/Cortex and MISP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Proposed integration of Wazuh with TheHive/Cortex and MISP](img/B19549_3_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Proposed integration of Wazuh with TheHive/Cortex and MISP
  prefs: []
  type: TYPE_NORMAL
- en: 'This integration of Wazuh, TheHive, and MISP has some major advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Centralized threat intelligence**: The integration lets threat intelligence
    from MISP be put together in TheHive, creating a central location for Wazuh to
    store and analyze security events and decide what to do about them. This integration
    lets security teams correlate events with known risks and IOCs, which makes responding
    to incidents more accurate and quicker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable security operations**: The integration streamlines the handling
    of security events, enabling scalable security operations. Through the utilization
    of Wazuh’s detection capabilities, TheHive’s case management skills, and MISP’s
    threat intelligence capabilities, organizations can effectively handle and address
    an increasing volume of security incidents without requiring significantly more
    manual effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated incident response**: Although this chapter is about threat intelligence
    integration, by integrating TheHive, we can also accomplish automated incident
    response capabilities. By utilizing information from MISP, security analysts can
    generate response playbooks in TheHive, which enables them to provide more consistent
    and prompt responses to security incidents identified by Wazuh.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s first quickly understand the capabilities of each of these tools. Then,
    we will set them up and integrate them with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to MISP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**MISP** is an open-source threat intelligence platform that enables organizations
    and security professionals to collect, share, and collaborate on structured threat
    information. MISP has seven core layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data layer**: This layer focuses on gathering detailed information about
    security incidents and threats from the actual threat intelligence data. The primary
    components of the data layer are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Events**: Security events or threat information.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attributes**: Describes aspects of threats such as IP addresses, domains,
    hashes, email addresses, etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objects**: A template that specifies contextualized and organized information
    about threats.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Context layer**: This layer is concerned with creating links and correlations
    between various pieces of threat intelligence data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correlation layer**: This layer is responsible for identifying patterns and
    correlations between various events and properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning list layer**: Warning lists are collections of indicators that are
    considered to be malicious or suspicious.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taxonomies layer**: Taxonomies standardize threat intelligence data categorization
    and classification. They aid in the consistent and orderly organization and description
    of threats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Galaxies layer**: Galaxies are groups of connected information regarding
    various threats, such as threat actors, methods, malware families, and so on.
    They provide contextual information to help you understand dangers better.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feed layer**: Feeds entail incorporating external threat intelligence sources
    into MISP. This layer enables MISP to automatically retrieve and incorporate data
    from a variety of reliable sources, thereby enhancing the threat intelligence
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we discussed earlier, we need TheHive as a broker that accepts the security
    alerts from Wazuh and allows us to analyze each observable against MISP threat
    intelligence data.
  prefs: []
  type: TYPE_NORMAL
- en: 'TheHive consists of two tools: TheHive for incident management and Cortex for
    integration with tons of threat intelligence platforms. TheHive and Cortex constitute
    a potent integration designed for SOC analysts. This integration bridges the gap
    between effective collaboration and advanced threat analysis, thereby enhancing
    the SOC’s ability to identify, mitigate, and respond to cybersecurity threats.'
  prefs: []
  type: TYPE_NORMAL
- en: TheHive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**TheHive** is an incident response platform designed to help SOC analysts
    analyze security alerts and incidents. It facilitates collaboration and information
    sharing among different team members during security investigations and incident
    responses. Some of the important capabilities of TheHive are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Observable analysis**: TheHive can analyze the alerts received from Wazuh,
    and this enables SOC analysts to pre-qualify alerts before deciding whether to
    ignore them or convert them into cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Observable preview](img/B19549_3_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Observable preview
  prefs: []
  type: TYPE_NORMAL
- en: '**Case timeline**: A case timeline illustrates the entirety of the case’s lifecycle,
    including initial alerts, ongoing and completed tasks, identified IOCs, and much
    more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Case timeline in TheHive](img/B19549_3_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Case timeline in TheHive
  prefs: []
  type: TYPE_NORMAL
- en: '**Integration**: TheHive version 5 has strong and default integration capabilities
    with Cortex, Wazuh, and MISP. However, it can also be integrated with IBM QRadar,
    Splunk SIEM, Elasticsearch, VirusTotal, and many more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alert TTPs**: TheHive can contain a set of MITRE ATT&CK TTPs with ATT&CK
    mapping post-integration with MISP. MITRE ATT&CK (standing for **Adversarial Tactics,
    Techniques, and Common Knowledge**) is a framework that classifies cyber threat
    behaviors and techniques employed by attackers at various stages of an attack.
    We will learn more about the MITRE ATT&CK framework in [*Chapter 6*](B19549_06.xhtml#_idTextAnchor163),
    *Threat Hunting* *with Wazuh*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Visualizing TTPs in the TheHive platform](img/B19549_3_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Visualizing TTPs in the TheHive platform
  prefs: []
  type: TYPE_NORMAL
- en: TheHive and Cortex are made to work together without any problems. TheHive can
    send observables from incidents to Cortex so that the preset analyzers can look
    at them. Some jobs can be automated with this integration, which cuts down on
    the amount of work that needs to be done by hand in the incident response process.
    Let’s explore the capabilities of Cortex.
  prefs: []
  type: TYPE_NORMAL
- en: Cortex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Cortex** is a part of the TheHive project. It automates threat intelligence
    and response, providing SOC analysts with the ability to detect and respond to
    threats quickly and effectively. One of the core features of Cortex is its ability
    to integrate several security tools, threat intelligence feeds, security services,
    and more. Cortex serves as a central repository for this intelligence, allowing
    analysts to manage and access the information they require with ease.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cortex has two major components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analyzers**: Analyzers gather and enrich data from various sources to help
    SOC analyst teams. There are many types of analyzers that connect to online security
    services, threat feeds, and databases. After transforming the data, the analyzer
    can enrich it by checking it against a list of known malicious indicators, querying
    online services for more information, or running custom scripts for more advanced
    analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responders**: Responders are used for acting in accordance with the enriched
    data supplied by the analyzers. Responders come in a variety of forms, each intended
    to carry out a particular task, such as blocking an IP address, isolating an infected
    device, or alerting a security analyst.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the workings of automated threat intelligence and analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final design workflow involves all three components: Wazuh, TheHive/Cortex,
    and MISP. This recommended design helps enterprises build an effective and scalable
    incident response system. Some of the important steps involved in this automated
    threat intelligence and analysis design with Wazuh, TheHive/Cortex, and MISP are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event transfer**: Post-integration, TheHive can receive the security events
    from Wazuh. We can also configure Wazuh to send only specific types of alerts,
    such as security alerts matching rule level three or higher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alert triage**: Once the alert is received from Wazuh by TheHive, it can
    invoke Cortex to immediately look at the observables that are linked to it. This
    can include things such as running security scans, comparing observables to MISP
    threat intelligence feeds, or getting more information from the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response action**: TheHive can initiate response actions based on Cortex
    analysis results, such as altering the status of an event, providing tasks for
    analysts, or generating reports. It helps in the automation of portions of the
    incident response workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Workflow of threat intelligence and analysis with Wazuh, TheHive,
    and MISP](img/B19549_3_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Workflow of threat intelligence and analysis with Wazuh, TheHive,
    and MISP
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned the entire flow of automated threat intelligence, incident
    management, and analysis, let’s begin to set up Wazuh, TheHive/Cortex, and MISP
    tools and integrate them to work seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up TheHive and Cortex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The deployment design of TheHive provides companies with flexibility by allowing
    for both standalone server deployments (deployment on a single server) and clustered
    deployments (multiple servers work together to handle the TheHive application
    load). It is recommended to use cluster mode deployment for large production environments.
    Some of the software components of TheHive are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Cassandra**: TheHive utilizes the Apache Cassandra database to store
    its data. Cassandra is a distributed NoSQL database known for its scalability
    and capability to manage massive amounts of data across a cluster of numerous
    nodes. Cassandra is utilized within the framework of TheHive to store data pertaining
    to cases, incidents, and other pertinent information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elasticsearch**: TheHive uses Elasticsearch for indexing. It is a powerful
    analytics and search engine that makes data indexing, querying, and searching
    more effective. It improves TheHive’s search performance and speed, which makes
    it simpler for users to find and evaluate data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S3 MINIO**: When a clustered deployment is necessary or when organizations
    need scalable and distributed file storage, TheHive provides support for S3-compatible
    storage solutions such as **MINIO**. AWS provides a scalable object storage, called
    **S3** (**Simple Storage Service**). An open-source substitute called MINIO is
    compatible with the S3 API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TheHive application, database, index engine, and file storage can be run
    separately so each layer can be a node or cluster. TheHive could be set up in
    a complex clustered architecture using virtual IP addresses and load balancers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set up TheHive and Cortex in different environments, such as Ubuntu
    servers, Docker, Kubernetes, etc. To simplify the installation process, we are
    going to use Docker Compose. We need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker Compose
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the YML script for the TheHive module
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch and test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an organization and user on TheHive
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an organization and user on Cortex
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Docker Compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start with the Ubuntu Server. I’ll use Ubuntu 23.10 and take the following
    steps to install Docker Compose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apt` commands to install Docker dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Set up the official Docker repository**: Although Docker packages are available
    in the default Ubuntu 20.04 repositories, it is recommended that you use the official
    Docker repository. Run the following commands to enable the Docker repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Install Docker with apt command**: We are now ready to install the most recent
    and stable version of Docker from its official repository. Run the following to
    install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installing the Docker package, run the following command to add your
    local user to the Docker group:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify whether the Docker daemon service is running:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Docker Compose on Ubuntu 23.10\. To install Docker Compose on Ubuntu
    Linux, run the following commands sequentially:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the Docker Compose version by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the Docker installation is good, you should see the output with the Docker
    compose version, OpenSSL version, CPython version, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the YML script for the TheHive module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The primary distinction between `docker run` and `docker-compose` is that `docker
    run` is entirely command line-based, whereas `docker-compose` reads configuration
    data from a YAML file. So, the beauty of Docker Compose is that we can install
    all the modules of TheHive with a single YML script, and once this YML script
    is executed by Docker, all the modules will be turned up. Now, let’s prepare our
    TheHive YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`theHive` and change the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Launch and test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To deploy the TheHive, run the following command from the TheHive directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Next, wait for two or three minutes. Open your browser and access TheHive at
    http:://<Server_IP>:9000 and Cortex at `http:://<Server_IP>:9001`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default credentials of TheHive application are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`admin@thehive.local`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`secret`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, Cortex doesn’t provide default credentials; you have to reset the database
    and set a new username and password. These will be our default admin credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have admin credentials for both theHive and Cortex, we will create
    an organization and a user under it and generate an API key.
  prefs: []
  type: TYPE_NORMAL
- en: Create an organization and user on TheHive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you’re logged in, we need to do a few things. We need to first create
    an organization and then a user:'
  prefs: []
  type: TYPE_NORMAL
- en: To create an organization, go to **Organization** and click **Add**. Enter a
    **Name** and **Description** and set the tasks sharing rule to **Manual**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create two users for the haxcamp organization—a user and an API user.
    Go to `admin` and `haxcamp` organizations. Let us assign the user to the `haxamp`
    organizations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s create API users. This user account will be used to integrate TheHive
    with the Wazuh manager. To create an API user, go to `API User` for the `api@haxcamp.local`
    for the login ID, set the account type to `org-admin user`. Once the API user
    is created, click on **Reveal**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Retrieve TheHive API](img/B19549_3_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Retrieve TheHive API
  prefs: []
  type: TYPE_NORMAL
- en: Copy the API key and save it somewhere. We will require this API key when integrating
    TheHive with the Wazuh manager.
  prefs: []
  type: TYPE_NORMAL
- en: Create an organization and user on Cortex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you’ve set your admin credentials on Cortex, you need to create an organization.
    Fill in **Name** and **Description**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Setting up organization details in Cortex](img/B19549_3_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Setting up organization details in Cortex
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a user. To do that, go to **Users**, click on **Add
    user**, and fill in **Login**, **Full name**, **Organizations &** **Roles**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Creating and adding a user in Cortex](img/B19549_3_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Creating and adding a user in Cortex
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login**: This represents the login username or email address of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization**: This represents the organization the user belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roles**: This shows the role of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After creating the user, you can click on **Reveal** to reveal the API key
    and save that for future use when we integrate Cortex with MISP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Retrieving the Cortex API](img/B19549_3_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Retrieving the Cortex API
  prefs: []
  type: TYPE_NORMAL
- en: Alright, now one of the three tools is deployed and ready to use. Let’s work
    on deploying our MISP project before we finally get to Wazuh.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MISP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MISP** is an open source software and there are different ways we can install
    it to build our own threat intelligence and share it with the community. MISP
    can be installed on most Linux distributions, and the MISP community has created
    simple install scripts. MISP has many dependencies and combines various software
    to function properly. This is also known as the **LAMP** stack:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache for web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL relational database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous—PHP, Perl, Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can deploy MISP in different environments ([https://www.misp-project.org/download/](https://www.misp-project.org/download/)),
    such as Docker, VirtualBox VM, and VMware VM. Deploying MISP and its dependencies
    via Docker is by far the simplest installation process I’ve found. VirtualBox
    VM and VMware VM are good for lab and testing environments. Take the following
    steps to set up MISP:'
  prefs: []
  type: TYPE_NORMAL
- en: Fulfill the requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Docker and Docker Compose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up and launch MISP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an organization and users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add feeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fulfill the requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up MISP in the Docker environment, we require Ubuntu Server 22.04.
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker and Docker Compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up Docker and Docker Compose, refer the *step 1* of *Setting* *up TheHive/Cortex*.
  prefs: []
  type: TYPE_NORMAL
- en: Set up and Launch MISP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve installed Docker, we need to install the MISP Docker image and
    configure the environmental variable. This will have four sub-steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the environmental variable file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Docker Compose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch MISP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will initiate the installation of MISP using their official GitHub repository,
    as explained:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clone the Git repository**: Let’s clone the get repository with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open the file and edit it using the GNU nano editor:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final file should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Start Docker Compose**: To start the MISP Docker container, we need to build
    it using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add an organization and users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to create a local organization and add a user to it. Go to **Administration**
    and enter the **Organization** identifier, Generate **UUID**, Upload the company
    logo (optional), and click on **Submit**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Setting up organization details in the MISP platform](img/B19549_3_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Setting up organization details in the MISP platform
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Organization Identifier**: This represents a unique name for each organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UUID**: This is a unique identifier that ensures that each piece of information
    has a global unique identifier. You can even generate UUID online from a website
    such as [www.uuidgenerator.net](http://www.uuidgenerator.net).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, to add a user to your organization, go to **Administration** > **Add User**
    and enter your email, set the password, select your own organization, set the
    role to **Org Admin**, and click on **Create User**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Adding an admin user on MISP](img/B19549_3_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Adding an admin user on MISP
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Email**: This represents the email address of the admin user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization**: This represents the organization’s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role**: This represents the role of the user. In this case, you should set
    it to **admin**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add feeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MISP uses feeds to download threat reports, IOCs, and other information. These
    feeds contain all of the data stored by MISP. Feeds are not enabled by default
    when configuring MISP. To use our feeds, we must import and enable them. Fortunately,
    MISP helps us with some good threat intelligence feeds. This feed information
    is fetched in JSON format and can be downloaded from their official GitHub repository
    at [https://github.com/MISP/MISP/blob/2.4/app/files/feed-metadata/defaults.json](https://github.com/MISP/MISP/blob/2.4/app/files/feed-metadata/defaults.json).
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the raw data. Next, visit the MISP application, go to **Sync Actions**,
    click on **Import Feeds from JSON**, and paste the metadata there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Adding feeds to MISP](img/B19549_3_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Adding feeds to MISP
  prefs: []
  type: TYPE_NORMAL
- en: Here, **Server metadata** represents the JSON value of the threat intelligence
    feeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enable the feeds. To do that, go to **Sync Actions** and click on **List
    Feeds**. Select all the feeds and click on **Enable Selected**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Visualizing feeds in MISP](img/B19549_3_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Visualizing feeds in MISP
  prefs: []
  type: TYPE_NORMAL
- en: Here **List Feeds** represents a list of all the threat intelligence feeds with
    their providers’ details.
  prefs: []
  type: TYPE_NORMAL
- en: This completes our task of setting up MISP applications. Next, we will work
    on integrating Wazuh and MISP with TheHive.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Wazuh with TheHive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will integrate Wazuh with TheHive to automatically send Wazuh alerts to
    TheHive. SOC analysts will then be able to investigate and respond to these alerts,
    as well as create cases if necessary. In this section, we will take the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the TheHive Python script on the Wazuh manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an integration Python script on the Wazuh manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Bash script on the Wazuh manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate TheHive server in Wazuh server configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualize the alerts on TheHive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install TheHive Python script on the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use a Python script that will enable custom integration of TheHive with
    the Wazuh manager. We’ll write in the following step which we will use as a reference.
    This module is operational as of the time of this writing after being tested with
    TheHive version 5.2.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first install the `thehive4py` module using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Create an integration Python script on the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is necessary to build the script `custom-w2thive.py` in the `/var/ossec/integrations/`
    directory to allow for the integration of TheHive with Wazuh. You can find the
    full code from the GitHub repository at [https://github.com/PacktPublishing/Security-Monitoring-using-Wazuh/blob/main/Chapter%203/custom_thehive_integration_Wazuh.py](https://github.com/PacktPublishing/Security-Monitoring-using-Wazuh/blob/main/Chapter%203/custom_thehive_integration_Wazuh.py).
    Let me explain the import statement of this code to clarify how it is being built.
    I have broken down the first part (the import statement).
  prefs: []
  type: TYPE_NORMAL
- en: Import statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This part of the python code defines the imported module or packages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, the lines import various Python modules, including `json`, `sys`, `os`,
    `re`, `logging`, `uuid`, and specific modules from the `thehive4py` package.
  prefs: []
  type: TYPE_NORMAL
- en: User configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section of the code defines the user-configurable parameters as global
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lvl_threshold=0`: This indicates that TheHive will receive all the alerts
    generated by Wazuh. If you have a large network with thousands of monitored agents,
    keep it higher so that you get more relevant alerts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug_enable = False`: This represents the debugging option. In this case,
    it is set to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info_enabled= True`: This is the information logging option. In this code,
    it is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s set proper permissions and ownership using the `chmod` and `chown`
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Create a Bash script on the Wazuh manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To successfully execute the `.py` script developed, we must construct a bash
    script called `custom-w2thive` and place it in `/var/ossec/integrations/custom-w2thive`.
    You can copy the entire code from the GitHub repository at [https://github.com/PacktPublishing/Security-Monitoring-using-Wazuh/blob/main/Chapter%203/custom_thehive_bash_script_Wazuh..sh](https://github.com/PacktPublishing/Security-Monitoring-using-Wazuh/blob/main/Chapter%203/custom_thehive_bash_script_Wazuh..sh).
    Let me break down this bash script to help you understand its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Setting variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this part of the bash script, some variables are defined as shown in the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`WPYTHON_BIN` is set to the path of the Python 3 interpreter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SCRIPT_PATH_NAME` is set to the full path of the script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DIR_NAME` is set to the absolute path of the directory containing the script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SCRIPT_NAME` is set to the base name of the script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the Python script path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This part of the script is used to get the location of the `custom-w2thive.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us break them down the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*/active-response/bin | */wodles*)`: This is a pattern that if matched, sets
    `WAZUH_PATH` and `PYTHON_SCRIPT` to `${DIR_NAME}/${SCRIPT_NAME}.py`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(*/bin)`: This is another pattern that, if matched, sets `WAZUH_PATH` and
    `PYTHON_SCRIPT` to `${WAZUH_PATH}/framework/scripts/${SCRIPT_NAME}.py`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(*/integrations)`: This is the third pattern that, if matched, sets `WAZUH_PATH`
    and `PYTHON_SCRIPT` to `${DIR_NAME}/${SCRIPT_NAME}.py`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the Python script path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the Python script is set in `PYTHON_SCRIPT`, this script executes the
    Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, `(${WAZUH_PATH}/${WPYTHON_BIN})` with any command-line arguments is passed
    to the Bash script (`$@`).
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did earlier, let’s again set the required permissions and ownership using
    `chmod` and `chown`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Integrate the TheHive server in the Wazuh server configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, you need to modify `/var/ossec/etc/ossec.conf` using your favorite text
    editor and insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<integration>`: This specifies the integration with the external applications
    or platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<hootk_url>`: This defines the URL endpoint. In this case, it is the URL of
    the TheHive platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<api_key>`: This represents the API key associated with the integration. In
    this case, it is the API key of the TheHive platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart and test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once complete, you need to restart the Wazuh manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the alerts on TheHive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If everything went according to plan, you should soon start seeing notifications
    generated under the **Alerts** tab in TheHive. As you can see in the screenshot,
    it worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Visualizing alerts on TheHive](img/B19549_3_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Visualizing alerts on TheHive
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to integrate TheHive/Cortex with MISP threat intel to perform
    observable analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating TheHive and Cortex with MISP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TheHive and Cortex are powerful when they work together. TheHive is helpful
    in incident response, case management, collaboration, and threat analysis while
    Cortex is a powerful threat intel aggregator. Once we Integrate TheHive and Cortex
    with MISP, we can even run the observable analyzer directly from TheHive as a
    result; we don’t have to manually perform analysis by going to Cortex. In order
    to achieve this automation, we need to do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrate TheHive with Cortex
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate Cortex with MISP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate TheHive with MISP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate TheHive with Cortex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To integrate TheHive and Cortex, you need to enter the Cortex API key in the
    TheHive settings. I hope you’ve copied the Cortex API key, as explained in the
    earlier section *Setting up TheHive and Cortex* | *Create an organization and
    user on Cortex*. Now, in order to complete the integration, log in with the admin
    account or switch to the admin profile and click on the **Platform Management**
    tab. Test the server connection, as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Testing the server connection between TheHive and Cortex](img/B19549_3_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Testing the server connection between TheHive and Cortex
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API Key**: This represents the API key of the Cortex server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not check Certificate Authority**: It is recommended to keep this disabled
    if you have not installed SSL on the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate Cortex with MISP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Log in to Cortex with your newly created account and then go to `MISP_2_1 Analyzer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Searching for MISP analyzer under Cortex](img/B19549_3_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Searching for MISP analyzer under Cortex
  prefs: []
  type: TYPE_NORMAL
- en: Here, **MISP_2_1** represents the MISP analyzers for performing observable analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on **Edit** and a prompt will appear to configure the MISP integration.
    Enter a name, MISP base URL, and MISP API key, and set **cert_check** to **False**
    (if you haven’t configured the SSL):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Integrating MISP with Cortex](img/B19549_3_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Integrating MISP with Cortex
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: This indicates the name of the MISP analyzer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL**: This represents the URL of the MISP platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key**: This indicates the API key of the MISP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cert_check**: This will dictate whether the Cortex will perform an SSL check
    or not. In this case, we will keep it **False**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, it’s time to verify the integration with a sample analyzer. In the top
    left, you have a **New Analysis** button. Now, set **TLP** to **AMBER**, **PAP**
    to **AMBER**, and **Data Type** to **domain**. Immediately, you get a new **Button
    MISP_2_1**, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Running MISP analyzer on Cortex](img/B19549_3_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Running MISP analyzer on Cortex
  prefs: []
  type: TYPE_NORMAL
- en: Integrate TheHive with MISP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best part about TheHive suite is that MISP is already integrated with it.
    You only need to enter the API key of MISP in the TheHive platform. To complete
    the integration, log in with an admin account or switch to an admin profile and
    click on the **Platform Management** tab. You need to set up the MISP server name,
    server URL, and API key, and then you can test the connection, as shown in the
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Testing the connection between TheHive and MISP](img/B19549_3_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Testing the connection between TheHive and MISP
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server name**: This is the name of the MISP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server url**: This represents the URL of the MISP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API Key**: This indicates the API key of the MISP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Purpose**: This shows how this API integration will be used. It can be **Export**,
    **Import**, or both. In this case, we will set it to **Export** to send queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not check Certificate Authority**: It is recommended to keep this disabled
    if you have not installed SSL on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test server connection**: This runs a connection check between TheHive and
    the MISP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the installation and integration of all three tools—Wazuh, TheHive/Cortex,
    and MISP—is complete. We will now focus on some important use cases of threat
    intelligence and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wazuh and TheHive integration offers a lot of benefits to SOC analysts and
    incident response teams. We will go through different use cases to explore several
    features of TheHive and MISP that work extremely well with Wazuh. We will go through
    some common use cases such as investigating suspicious file and network connections
    and tracking TTPs. In this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-requisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing file observable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing network observable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing TTPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-requisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we get into some use cases of threat intelligence and analysis with
    Wazuh, TheHive, and MISP, we need to ensure these requirements are fulfilled:'
  prefs: []
  type: TYPE_NORMAL
- en: A Wazuh server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ubuntu server running TheHive and Cortex using Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ubuntu server running an MISP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Desktop or Ubuntu Server with the Wazuh agent installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing alert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you integrate Wazuh with TheHive, you will start getting security alerts.
    Before you start investigating alerts or analyzing any observable against the
    MISP server, you need to get a good understanding of TheHive alert attributes.
    You can review all the important attributes of an alert in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Reviewing security alerts on TheHive](img/B19549_3_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Reviewing security alerts on TheHive
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General**: This is a tab that has **Tags**, **Description**, Wazuh **Rule**,
    and Wazuh **Agent** information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observable**: This shows information such as IP addresses, domains, URLs,
    hashes, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TTPs**: This shows MITRE attack tactics and techniques'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Similar Cases**: This will show you existing related cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Similar Alerts**: This will show you similar alerts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responder**: This shows TheHive responder reports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**History**: This shows the history of alerts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the top left, you have action items, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create case from alert**: You can create a brand new case with this alert.
    I recommend you do this only when you’re certain that it is not a false positive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge selection into case**: You can merge alerts into a single case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore new update**: Once selected, you will not get any update on this alert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start**: Once you click on this play button, you can take it ahead without
    creating a case. You can change the status of the alert to **Pending**, add some
    summary notes, and assign it to another analyst or Tier 2 analyst.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Close**: If you are certain that it’s a false positive or duplicate, you
    can close the alert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on your investigation, you can also change the status of the alert, as
    shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Changing the alert status](img/B19549_3_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Changing the alert status
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Status**: This is the alert status, and it can be **New**, **In Progress**,
    **Pending**, **Imported**, **Duplicate**, **False Positive**, or **Ignored**.
    In this case, it is set to **Duplicate**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assignee**: This states whom you want to assign this alert to. It can be
    your team member, SOC Level 2, the threat intelligence team, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you are confident that you need to work on a certain alert, you can either
    create a fresh case or use a case template. Once you click on an empty case, you
    need to enter details such as the case title, severity, tasks, etc. You can create
    multiple tasks and assign them to different team members, as shown in screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Creating a new case in TheHive](img/B19549_3_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – Creating a new case in TheHive
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Suspicious` `File detected`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Severity**: This represents how critical the case is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add a task**: This allows you to add multiple tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing file observables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, observables are initial information that needs to be analyzed before
    it is marked as an IOC. TheHive detects observables from Wazuh security events.
    Then, we can analyze the observables against multiple threat Intelligence feeds.
    The pre-defined observable types are IPs, email addresses, URLs, domain names,
    files, and hashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a case from an alert, observables from alerts are also transferred
    to the theHive case. Even if you don’t have any observables, you can create an
    observable and analyze it against MISP threat intelligence feeds. You can click
    on **Add an Observable** and enter the details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Adding an observable in TheHive](img/B19549_3_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – Adding an observable in TheHive
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`filename`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svchost.exe` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: Write any relevant tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Write a simple and relevant description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, let’s click on hamburger menu on the left of the `filename` observable
    and select **Run analyzers**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Information about the observable](img/B19549_3_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.25 – Information about the observable
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Svchost[.]exe**: This is the sample file and is added as an observable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Svshost[.]exe` and run the analyzer against the MISP server for threat intelligence
    lookup. Once we select **Run analyzers**, you should see **MISP_2_1**. Select
    it and click on **Run Selected Analyzer**, as shown in this screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Executing the MISP analyzer](img/B19549_3_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.26 – Executing the MISP analyzer
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, wait for 10 to 20 seconds and you should get a report under the same
    observable from the MISP Server. Bingo! As shown in the screenshot, you can find
    the result from the MISP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Receiving the threat intelligence result from the MISP server](img/B19549_3_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.27 – Receiving the threat intelligence result from the MISP server
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on it, you will see all eight matching events (threat intel
    feeds) in MISP, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Visualizing the observable analysis report from the MISP Server](img/B19549_3_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.28 – Visualizing the observable analysis report from the MISP Server
  prefs: []
  type: TYPE_NORMAL
- en: 'You can go to any of the MISP events and click on **EventID**. You will be
    redirected to the MISP server for a specific event, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Visualizing the threat intelligence event from the MISP server](img/B19549_3_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.29 – Visualizing the threat intelligence event from the MISP server
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EventID**: This represents the event ID from the MISP server. In this case,
    the event ID is **1125**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**From**: This represents the threat intelligence feed provider. In this case,
    it is **CIRCL**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To explore this specific event even further, we can log in to our MISP server
    and navigate to `1125` and find the result, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – Visualizing the event in the MISP server](img/B19549_3_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.30 – Visualizing the event in the MISP server
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us break down some of the entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Info**: This is a brief and descriptive summary of the event. In this case,
    it is **IECrypt sample analyzed with VMRay Analyzer Report for** **Sample #245141**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date**: This is the date and time when the event was created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat Level**: This represents the severity or criticality of the threat.
    It can be low, medium, or high.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analysis**: This indicates the current analysis state of the event, e.g.,
    initial, ongoing, or completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distribution**: This specifies the distribution level of the event, finding
    out who can access the information, such as only the organization, the sharing
    group, or the community. In this case, it is **All Communities**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: This is a list of tags associated with the event, delivering additional
    categorization or metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing network observables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s suppose you have some IP and domain observables. We can also test
    them in the same manner, or you can add related observables found during the investigation
    of other events. You can navigate to the **Observables** tab and, as you can see
    in the screenshot, we have some IP addresses as observables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31 – Visualizing IP address observables in TheHIve](img/B19549_3_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.31 – Visualizing IP address observables in TheHIve
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us break down the highlighted boxes in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**95[.]154[.]195[.]171**: This is a sample IP address observable that needs
    to be analyzed by the MISP server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**drivgoogle[.]firewall-gateway[.]com**: This is a sample domain name in the
    observable list that needs to be analyzed by the security team'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, wait for 10 to 20 seconds and you should get a report under the same
    observable from the MISP Server. Awesome! As shown in the next screenshot, you
    can find the result from the MISP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.32 – Visualizing the observable analysis report from the MISP Server](img/B19549_3_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.32 – Visualizing the observable analysis report from the MISP Server
  prefs: []
  type: TYPE_NORMAL
- en: Here, `1125`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing TTPs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TTP analysis can aid security teams in detecting and mitigating attacks by
    revealing how threat actors conduct their operations. TTPs are tactics, techniques,
    and procedures used by threat actors. The MITRE ATT&CK framework empowers SOC
    teams to identify and address TTPs they encounter. The MITRE ATT&CK framework
    consists of 14 tactics and hundreds of associated techniques and procedures. TheHive
    imports TTPs from Wazuh events and enhances our security investigation. You can
    also add a new TTP to any case by taking these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to a specific case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on TTPs at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter occur data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the tactic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a technique ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can add a new TTP and enter the relevant information, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33 – Adding TTPs in TheHive](img/B19549_3_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.33 – Adding TTPs in TheHive
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Catalogue**: This represents the category of attack. In this case, we selected
    **Enterprise Attack**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Occur date**: This indicates the date on which the attack happened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technique**: This represents the technique and its ID from the MITRE ATT&CK
    matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Procedure**: This requires you to manually enter the step-by-step instructions
    or sequences of actions that threat actors follow to execute a specific technique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This completes our overview of the use cases of threat intelligence and analysis
    using Wazuh, TheHive, Cortex, and the MISP server. To learn more about the administration,
    features, and integration, you can visit their official websites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'TheHive: [https://docs.strangebee.com/thehive/setup/](https://docs.strangebee.com/thehive/setup/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cortex: [https://docs.strangebee.com/cortex/](https://docs.strangebee.com/cortex/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MISP: [https://www.misp-project.org/documentation/](https://www.misp-project.org/documentation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter on threat intelligence and analysis using MISP provided a comprehensive
    guide to understanding and implementing a practical threat intelligence and analysis
    system. We learned the critical role of MISP—when integrated with Wazuh and TheHive—in
    helping security analysts perform observable analyses and add TTPs. We also covered
    some important use cases of TheHive and Cortex for performing analyses of files,
    IP addresses, domains, etc. against the MISP threat intelligence database.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to enhance Wazuh’s capabilities using
    security automation tools such as Shuffle. We will learn the importance of security
    automation and the integration of Shuffle with Wazuh, and we will also go through
    some use cases as well.
  prefs: []
  type: TYPE_NORMAL
