["```\n     import os\n     os.chmod('example.txt', 0o440)  # Read-only for owner and group\n    ```", "```\n      class User:\n          def __init__(self, username, role):\n              self.username = username\n              self.role = role\n      def check_permission(user, action):\n          role_permissions = {\n              'admin': ['read', 'write', 'delete'],\n              'user': ['read'],\n         }\n         return action in role_permissions.get(user.role, [])\n    ```", "```\n    ufw allow from 192.168.1.0/24 to any port 22\n    ```", "```\n     from cryptography.fernet import Fernet\n     key = Fernet.generate_key()\n     cipher_suite = Fernet(key)\n     encrypted_text = cipher_suite.encrypt(b\"Sensitive data\")\n    ```", "```\n     import re\n     def validate_username(username):\n         return re.match(r'^[a-zA-Z0-9_]{3,30}$', username) is not None\n    ```", "```\n     try:\n         # risky operation\n     except Exception as e:\n         # handle error securely\n         print(\"Operation failed securely:\", e)\n    ```", "```\n     def check_access(user):\n         try:\n             # Perform access check\n             return True\n         except:\n             return False  # Default to deny\n    ```", "```\n     def authenticate_user(username, password):\n         if username and password:\n             # Perform authentication\n             return True\n         return False\n    ```", "```\n     def authenticate(username, password):\n         return validate_credentials(username, password)\n     def validate_credentials(username, password):\n         # Perform credential validation\n         return True\n    ```", "```\n     import sqlite3\n     def get_user(username):\n         conn = sqlite3.connect('example.db')\n         cursor = conn.cursor()\n         cursor.execute(f\"SELECT * FROM users WHERE username = '{username}'\")  # Vulnerable to SQL injection\n         return cursor.fetchone()\n    ```", "```\n     def get_user(username):\n         conn = sqlite3.connect('example.db')\n         cursor = conn.cursor()\n         cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))  # Use parameterized queries\n         return cursor.fetchone()\n    ```", "```\n     import os\n     def list_files(directory):\n         os.system(f'ls {directory}')  # Vulnerable to OS command injection\n    ```", "```\n     import subprocess\n     def list_files(directory):\n         subprocess.run(['ls', directory], check=True)  # Use subprocess with argument list\n    ```", "```\n     def set_password(password):\n         if len(password) < 8:\n             raise ValueError(\"Password too short\")\n    ```", "```\n     import re\n     def set_password(password):\n         if not re.match(r'(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}', password):\n             raise ValueError(\"Password must be at least 8 characters long and include a number, a lowercase letter, and an uppercase letter\")\n    6.\n    ```", "```\n     from flask import Flask, session\n     app = Flask(__name__)\n     app.secret_key = 'super_secret_key'\n     @app.route('/login')\n     def login():\n         session['user'] = 'username'\n    ```", "```\n     app.config.update(\n         SESSION_COOKIE_HTTPONLY=True,\n         SESSION_COOKIE_SECURE=True,\n         SESSION_COOKIE_SAMESITE='Lax',\n     )\n    ```", "```\n     import requests\n     response = requests.post('http://example.com/api', data={'key': 'value'})  # Insecure, HTTP\n     response = requests.post('https://example.com/api', data={'key': 'value'})  # Secure, HTTPS\n    ```", "```\n     def store_password(password):\n         with open('passwords.txt', 'a') as f:\n             f.write(password + '\\n')  # Insecure, plaintext storage\n    ```", "```\n     import hashlib\n     def store_password(password):\n         hashed_password = hashlib.sha256(password.encode()).hexdigest()\n         with open('passwords.txt', 'a') as f:\n             f.write(hashed_password + '\\n')  # Secure, hashed storage\n    ```", "```\n      import re\n      def is_valid_username(username):\n          return re.match(r'^[a-zA-Z0-9_]{3,30}$', username) is not None\n      # Example usage:\n      usernames = [\"validUser_123\", \"invalid user!\", \"anotherValidUser\"]\n      for username in usernames:\n          print(f\"{username}: {'Valid' if is_valid_username(username) else 'Invalid'}\")\n    10.\n    ```", "```\n      def get_user_age(age):\n          if isinstance(age, int) and 0 < age < 120:\n              return age\n          else:\n              raise ValueError(\"Invalid age\")\n      # Example usage:\n      ages = [25, -5, 'thirty', 150]\n      for age in ages:\n         try:\n             print(f\"{age}: {get_user_age(age)}\")\n         except ValueError as e:\n             print(f\"{age}: {e}\")\n    ```", "```\n      def set_temperature(temp):\n          if -50 <= temp <= 150:\n              return temp\n          else:\n              raise ValueError(\"Temperature out of range\")\n      # Example usage:\n      temperatures = [25, -55, 200, 100]\n      for temp in temperatures:\n         try:\n             print(f\"{temp}: {set_temperature(temp)}\")\n         except ValueError as e:\n             print(f\"{temp}: {e}\")\n    ```", "```\n      import html\n      def escape_html(data):\n          return html.escape(data)\n      # Example usage:\n      raw_input = \"<script>alert('xss')</script>\"\n      safe_input = escape_html(raw_input)\n      print(f\"Original: {raw_input}\")\n     print(f\"Escaped: {safe_input}\")\n    ```", "```\n     name = \"John\"\n     print(f\"Hello, {name}\")  # Safe\n     # Example usage:\n     user_inputs = [\"Alice\", \"Bob; DROP TABLE users;\"]\n     for user_input in user_inputs:\n         print(f\"Hello, {user_input}\")\n    ```", "```\n      import sqlite3\n      def get_user_by_id(user_id):\n          conn = sqlite3.connect('example.db')\n          cursor = conn.cursor()\n          cursor.execute(\"SELECT * FROM users WHERE id=?\", (user_id,))\n          return cursor.fetchone()\n      # Example usage:\n     user_ids = [1, \"1; DROP TABLE users;\"]\n     for user_id in user_ids:\n         try:\n             print(f\"User {user_id}: {get_user_by_id(user_id)}\")\n         except sqlite3.Error as e:\n             print(f\"Error: {e}\")\n    ```", "```\n      from markupsafe import escape\n      def display_user_input(user_input):\n          return escape(user_input)\n      # Example usage:\n      raw_input = \"<script>alert('xss')</script>\"\n      safe_output = display_user_input(raw_input)\n      print(f\"Original: {raw_input}\")\n     print(f\"Escaped: {safe_output}\")\n    ```", "```\n      import sqlite3\n      def get_user_by_id(user_id):\n          conn = sqlite3.connect('example.db')\n          cursor = conn.cursor()\n          cursor.execute(\"SELECT * FROM users WHERE id=?\", (user_id,))\n          return cursor.fetchone()\n      # Example usage:\n     user_ids = [1, \"1; DROP TABLE users;\"]\n     for user_id in user_ids:\n         try:\n             user = get_user_by_id(user_id)\n             print(f\"User ID {user_id}: {user}\")\n         except sqlite3.Error as e:\n             print(f\"Error: {e}\")\n    ```", "```\n      from sqlalchemy.orm import sessionmaker\n      from sqlalchemy import create_engine\n      from sqlalchemy.ext.declarative import declarative_base\n      from sqlalchemy import Column, Integer, String\n      Base = declarative_base()\n      class User(Base):\n          __tablename__ = 'users'\n         id = Column(Integer, primary_key=True)\n         name = Column(String)\n     engine = create_engine('sqlite:///example.db')\n     Session = sessionmaker(bind=engine)\n     session = Session()\n     def get_user_by_id(user_id):\n         return session.query(User).filter_by(id=user_id).first()\n     # Example usage:\n     user_ids = [1, \"1; DROP TABLE users;\"]\n     for user_id in user_ids:\n         try:\n             user = get_user_by_id(user_id)\n             print(f\"User ID {user_id}: {user.name if user else 'Not found'}\")\n         except Exception as e:\n             print(f\"Error: {e}\")\n    ```", "```\n      import subprocess\n      def list_files(directory):\n          return subprocess.run(['ls', '-l', directory], capture_output=True, text=True).stdout\n      # Example usage:\n      directories = [\"/tmp\", \"&& rm -rf /\"]\n      for directory in directories:\n          try:\n             output = list_files(directory)\n             print(f\"Listing for {directory}:\\n{output}\")\n         except subprocess.CalledProcessError as e:\n             print(f\"Error: {e}\")\n    ```", "```\n     import subprocess\n      import shlex\n      def secure_command(command):\n          sanitized_command = shlex.split(command)\n          return subprocess.run(sanitized_command, capture_output=True, text=True).stdout\n      # Example usage:\n      commands = [\"ls -l /\", \"rm -rf /\"]\n     for command in commands:\n         try:\n             output = secure_command(command)\n             print(f\"Command '{command}' output:\\n{output}\")\n         except subprocess.CalledProcessError as e:\n             print(f\"Error: {e}\")\n    ```", "```\n  from cryptography.fernet import Fernet\n  # Generate a key\n  key = Fernet.generate_key()\n  cipher_suite = Fernet(key)\n  # Encrypt a message\n  cipher_text = cipher_suite.encrypt(b\"Secret message\")\n  print(f\"Cipher Text: {cipher_text}\")\n # Decrypt the message\n plain_text = cipher_suite.decrypt(cipher_text)\n print(f\"Plain Text: {plain_text.decode()}\")\n```", "```\n  from cryptography.hazmat.primitives.asymmetric import rsa\n  from cryptography.hazmat.primitives import serialization\n  from cryptography.hazmat.primitives.asymmetric import padding\n  from cryptography.hazmat.primitives import hashes\n  # Generate a private key\n  private_key = rsa.generate_private_key(\n      public_exponent=65537,\n      key_size=2048,\n )\n # Generate the corresponding public key\n public_key = private_key.public_key()\n # Serialize the private key\n pem = private_key.private_bytes(\n     encoding=serialization.Encoding.PEM,\n     format=serialization.PrivateFormat.TraditionalOpenSSL,\n     encryption_algorithm=serialization.BestAvailableEncryption(b'mypassword')\n )\n # Serialize the public key\n public_pem = public_key.public_bytes(\n     encoding=serialization.Encoding.PEM,\n     format=serialization.PublicFormat.SubjectPublicKeyInfo\n )\n # Encrypt a message using the public key\n message = b\"Secret message\"\n cipher_text = public_key.encrypt(\n     message,\n     padding.OAEP(\n         mgf=padding.MGF1(algorithm=hashes.SHA256()),\n         algorithm=hashes.SHA256(),\n         label=None\n     )\n )\n print(f\"Cipher Text: {cipher_text}\")\n # Decrypt the message using the private key\n plain_text = private_key.decrypt(\n     cipher_text,\n     padding.OAEP(\n         mgf=padding.MGF1(algorithm=hashes.SHA256()),\n         algorithm=hashes.SHA256(),\n         label=None     )\n )\n print(f\"Plain Text: {plain_text.decode()}\")\n```", "```\n  import hashlib\n  def hash_password(password):\n      return hashlib.sha256(password.encode()).hexdigest()\n  # Example usage:\n  password = \"securepassword\"\n  hashed_password = hash_password(password)\n  print(f\"Hashed Password: {hashed_password}\")\n```", "```\n  import bcrypt\n  def hash_password(password):\n      salt = bcrypt.gensalt()\n      return bcrypt.hashpw(password.encode(), salt)\n  def check_password(password, hashed):\n      return bcrypt.checkpw(password.encode(), hashed)\n # Example usage:\n password = \"securepassword\"\n hashed_password = hash_password(password)\n print(f\"Hashed Password: {hashed_password}\")\n # Verify the password\n is_valid = check_password(\"securepassword\", hashed_password)\n print(f\"Password is valid: {is_valid}\")\n```", "```\n import os\n db_password = os.getenv('DB_PASSWORD')\n if db_password is None:\n     raise ValueError(\"No DB_PASSWORD environment variable set\")\n # Example usage\n print(f\"Database Password: {db_password}\")\n```", "```\n# .env.dev\nDATABASE_URL=postgres://dev_user:dev_password@localhost/dev_db\n# .env.test\nDATABASE_URL=postgres://test_user:test_password@localhost/test_db\n# .env.prod\nDATABASE_URL=postgres://prod_user:prod_password@localhost/prod_db\n```", "```\nrequests==2.25.1\nflask==2.0.1\ncryptography==3.4.7\n```", "```\npip-audit\n```", "```\n  from flask import Flask\n  app = Flask(__name__)\n  @app.route('/')\n  def hello():\n      return \"Hello, Secure World!\"\n  if __name__ == '__main__':\n     app.run(ssl_context=('cert.pem', 'key.pem'))\n```", "```\n# Disable unused services\nsudo systemctl disable --now some_unused_service\n# Restrict permissions\nsudo chmod 700 /path/to/secure/directory\nsudo chown root:root /path/to/secure/directory\n```", "```\n import logging\n logging.basicConfig(level=logging.INFO)\n logger = logging.getLogger(__name__)\n logger.info('Application started')\n logger.warning('This is a warning message')\n logger.error('This is an error message')\n```", "```\n# Example Prometheus configuration\nglobal:\n  scrape_interval: 15s\nscrape_configs:\n  - job_name: 'python_app'\n    static_configs:\n      - targets: ['localhost:8000']\n```"]