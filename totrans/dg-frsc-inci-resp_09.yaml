- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analyzing Network Evidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18571_05.xhtml#_idTextAnchor084) explored how incident responders
    and security analysts can acquire network-based evidence for later evaluation.
    That chapter focused on two primary sources of that evidence: network log files
    and network packet captures. This chapter will show you which tools and techniques
    are available to examine the evidence acquired. Incorporating these techniques
    into an incident response investigation can provide incident response analysts
    with insight into the network activity of possible threats.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following main topics will be addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: Network evidence overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing firewall and proxy logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing NetFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing packet captures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network evidence overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adversaries are bound to the same network protocols that govern normal network
    traffic. Here, adversarial techniques that can be identified by analyzing network
    data properly are addressed.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B18571_05.xhtml#_idTextAnchor084) we focused on the various
    sources of evidence that network devices produce. Most of this evidence is contained
    within the variety of log files produced by switches, routers, and firewalls.
    Depending on the type of environment that responders find themselves in, this
    evidence source can be augmented with NetFlow data and full packet captures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the various sources have been understood, it is important to focus on
    what logs, NetFlow, and packet captures can tell us about an incident. The following
    are several areas of focus where proper logging and evidence collection may provide
    additional context surrounding an incident, as well as potential data points when
    deriving root cause:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reconnaissance and scanning behavior**: There are a plethora of tools available
    to adversaries to automate the process of scanning perimeter devices such as firewalls
    and routers. These scanners attempt to ascertain open ports, vulnerabilities,
    or authentication protocols such as **Secure Shell** (**SSH**) that can be exploited.
    These scans do leave a trace as they will often require connections to the devices.
    Depending on the level of logging and the retention period, responders may be
    able to identify the external infrastructure that is attempting to compromise
    the perimeter systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initial infection**: Adversaries have become very sophisticated in compromising
    systems. They will often make use of multi-stage exploits and malware. The first
    stage will call out to an external infrastructure through a URL and download additional
    exploits. Web proxies and firewalls may have connection data contained within
    the log files that record this activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lateral movement**: Once inside a network, adversaries will often attempt
    to conduct reconnaissance, exploit other systems, and move data around. NetFlow
    logs provide insight into this type of behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command and control**: Once a foothold has been established in the network,
    adversaries require the ability to maintain control over compromised systems.
    Logs, packet captures, and NetFlow data may be leveraged to identify this type
    of behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data exfiltration**: One of the goals of an adversary may be to compromise
    and exfiltrate data. Proxy logs may identify the destination of such data. NetFlow
    may show the flow of data from the internal systems to any external systems. Finally,
    packet captures may be leveraged to identify the exfiltrated files, the source
    of the data, and the destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B18571_05.xhtml#_idTextAnchor084) we discussed the three main
    types of network evidence that can be leveraged in an incident. It is often hard
    for responders that do not know about network traffic to understand its various
    aspects. Think about network traffic as a letter that is sent from one individual
    to another. Log data records the sender’s and receiver’s addresses and mailbox
    numbers at a central location, such as the local post office. This is akin to
    the source and destination IP addresses and ports.
  prefs: []
  type: TYPE_NORMAL
- en: NetFlow records much of the same information about the letter but can also tell
    the individual the weight or relative size of the letter, along with the sender’s
    and receiver’s addresses and mailbox numbers. Finally, a packet capture tells
    us all the same information that’s obtained through logs and NetFlow but will
    also tell the individual the contents of the letter, including (so long as it
    is not encrypted) the actual data contained within.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying a root cause with network evidence is largely dependent on the evidence
    itself. One major drawback to evidence such as packet captures and log files is
    the sheer volume of data that normal network operations create. Often, an incident
    is identified days or even weeks after it has occurred. During this intervening
    period, these log files and packet captures become unavailable. Therefore, it
    is incumbent on responders to fully understand what their organization’s capabilities
    are regarding network evidence.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing firewall and proxy logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adversaries need to make initial and continued connections to their infrastructure.
    Network devices such as firewalls and proxies may provide a source of evidence
    from log files.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18571_05.xhtml#_idTextAnchor084) contained a good deal of information
    concerning the acquisition of network-based evidence and the types of log files
    that are of importance to an incident responder or security analyst. Aside from
    the previously covered packet capture, we focused on the acquisition of log files
    from a variety of sources. These log files can provide some insight into the potential
    indicators of compromise that can aid in an incident investigation. The main challenge
    for analysts, though, is sifting through all of the irrelevant logs to find those
    that have some evidential value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log file analysis can be performed in a variety of ways. The specific method
    that is used may often depend on the type of incident, the tools available, and
    the amount of log data that has to be analyzed. The following are some of the
    methods that can be utilized:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manual log review**: In a manual log review, raw log files are dumped into
    a tool such as a text editor. From there, the analyst will review the logs line
    by line. This is a low-cost solution, but it is only useful with a limited amount
    of data. For example, an analyst would not be able to perform this type of analysis
    on a large enterprise firewall connection log. Rather, it may be useful to determine
    which users logged into a seldom-used web application on a particular day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filtered log review**: Log review tools allow analysts to filter out log
    files in terms of specific parameters. This can include showing a list of any
    known malicious activity. The one drawback is that logs may not immediately indicate
    known malicious activity, but rather are innocuous at the onset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log file searching**: Another key feature in most log analysis tools is the
    ability to search log files for specific expressions. Tools for searching can
    utilize both regex and Boolean expressions and allow the analyst to limit logs
    to a specific period, source IP address, or other specific condition. This allows
    analysts to quickly isolate specific log files. Depending on the search terms,
    this may return a good deal of information that has to then be reviewed manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log file correlation**: Separate log activity can be correlated with other
    logs based on either preconfigured rules or algorithms. Log correlation is often
    made part of log management tools or **Security Information and Event Management**
    (**SIEM**) platforms with rulesets that have been created. This method is very
    powerful as it automates the process, but it does require a good deal of upfront
    labor to configure and tune the specific environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log file data mining**: The next step up from correlation is the ability
    to mine log files and extract meaning from them. This gives greater context and
    insight into the specific activity. At the time of writing, there are several
    tools, such as Elasticsearch and Logstash, that can be integrated into a platform
    for more useful information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of logs that are produced in a network over a month or so can be
    staggering. This quantity only increases with the addition of new sources. Sorting
    through these manually is nearly impossible. In terms of log review, it is better
    to have a solution that provides some measure of automation, even in small networks.
    These tools give analysts the ability to sort through the proverbial haystack
    for that critical needle.
  prefs: []
  type: TYPE_NORMAL
- en: SIEM tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SIEM tools are critical to gaining situational awareness of activity across
    the network. These platforms not only serve as an aggregation point for log files
    from network devices, but they also allow analysts to perform queries on the logs
    that have been aggregated. For example, let’s say that IP addresses associated
    with potential malicious activity were discovered during the analysis of the packet
    capture file. This file was limited to a single host on the internal network.
    One question that analysts would like to answer is, how many other hosts could
    be infected? If the SIEM aggregates connection log files from devices such as
    the exterior facing firewall and web proxy, the analyst would be able to determine
    whether any other internal hosts are connected to those suspect IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: A wide variety of SIEM platforms are available, from freeware solutions to enterprise
    security management platforms. Most of these platforms allow analysts to conduct
    filtered searching and correlation log reviews. Many of the more robust commercial
    platforms provide rulesets for detecting specific types of attacks and updates
    to these rulesets as new attacks become known. Analysts could also query the SIEM
    tool for connection logs for the host IP address to any other systems. This would
    normally be the behavior seen in an incident where malware has infected a machine
    and an attacker is attempting to compromise other machines.
  prefs: []
  type: TYPE_NORMAL
- en: In organizations where incident response personnel are separate from those who
    are responsible for maintaining the SIEM tool, it is a good idea to review the
    communications structure so that incident response analysts have access to these
    platforms. The wealth of information and data that is available can be leveraged
    to determine what activity on the internal network is connected to a possible
    incident, as well as evidence that can be utilized to determine the root cause.
  prefs: []
  type: TYPE_NORMAL
- en: The Elastic Stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alongside the SIEM technology, incident response analysts can also leverage
    a bundle of applications for log analysis. This bundle, referred to as the Elastic
    Stack, combines three tools that allow large sets of data to be analyzed. The
    first of these is Elasticsearch. Elasticsearch is a log-searching tool that allows
    near real-time searching of log data. This is accomplished through full-text searching,
    powered by Lucene. This allows analysts to perform queries against log files for
    elements such as user IDs, IP addresses, or log entry numbers. Another key feature
    of Elasticsearch is the ability of the platform to expand the solution as the
    enterprise grows larger and gains more data sources. This is useful for organizations
    that may want to test this capability and then add data sources and log files
    incrementally.
  prefs: []
  type: TYPE_NORMAL
- en: The next component in the Elastic Stack is Logstash. Logstash is the mechanism
    that handles the intake of log files from the sources across the network, processes
    log entries, and, finally, allows them to be output through a visualization platform.
    Logstash can be configured and deployed easily. The integration of Logstash with
    Elasticsearch allows the incident response analyst to conduct fast queries against
    a large amount of log data.
  prefs: []
  type: TYPE_NORMAL
- en: The final component of the Elastic Stack is Kibana. Kibana serves as the visual
    interface or dashboard of the Elastic Stack. This platform allows analysts to
    gain insight into the data through the use of dashboards. Kibana also allows analysts
    to drill down into specific key data points for detailed analysis. Incident response
    analysts can customize these dashboards so that the most critical information,
    such as intrusion detection logs or connection logs, is immediately available
    for review.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the Kibana dashboard utilizes several pie charts to display log
    activity. Utilizing these provides an overview of what information is available
    to an analyst.
  prefs: []
  type: TYPE_NORMAL
- en: A good tool to augment logs is NetFlow analysis, which we will cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing NetFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetFlow describes the data about connections between devices in the network.
    Used primarily to troubleshoot connectivity and bandwidth issues, NetFlow can
    be used by responders to gain insight into the movement of data precipitating
    an incident.
  prefs: []
  type: TYPE_NORMAL
- en: NetFlow is a feature that was first introduced by Cisco Systems in the 1990s.
    NetFlow collects specific data about packets as they enter or exit an interface
    of a router or switch. This data is then sent to a NetFlow Collector via a NetFlow
    Exporter, which is often made part of switches or routers. The NetFlow Collector
    then aggregates and stores the flow data for analysis. This data is often leveraged
    by network and systems administrators to troubleshoot bandwidth issues, identify
    network congestion, and observe the flow of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample NetFlow output can be seen in the following screenshot. What is included
    with flow data can vary between network device manufacturers as there are several
    versions in the commercial market. The following screenshot shows some of the
    basic information that is captured as part of a NetFlow dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Sample NetFlow data
  prefs: []
  type: TYPE_NORMAL
- en: 'The following components of a NetFlow record can be seen in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Src Addr**: This is the source address that has initiated the connection
    or is sending traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dst Addr**: The destination addresses for the connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sport**: This is the source port for the source address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dport**: This is the destination port. In terms of analyzing NetFlow as part
    of an incident investigation, this is one of the key data points to focus on as
    this often tells responders the service that the source address is connecting
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proto**: This is the protocol in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packets**: The number of packets that are made as part of the flow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bytes**: The total number of bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flows**: This indicates how many flows have been recorded. Flows can be thought
    of as separate TCP connections. For example, a packet capture analyzed with a
    tool such as Wireshark will show individual packets. Flows indicate the TCP session
    that was established. In this circumstance, if an SSH session is interrupted and
    established, two flows would be recorded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When examining the NetFlow data shown in the preceding example, two significant
    data points may be important. The first is the number of SSH connections between
    devices. Secure Shell is a common way for systems to communicate with each other,
    but if this is outside the bounds of normal network behavior, it warrants a follow-up.
    In addition, connections via SMB (port `445`) are commonly abused by adversaries
    to access other systems, deliver ransomware, or access file shares. Even in this
    short example, it becomes very clear that responders gain a great deal of insight
    by just having visibility of the connections that occur on the internal network.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing packet captures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best sources of evidence during an incident is packet captures. Dissecting
    them can uncover data exfiltration, exploits, and command and control.
  prefs: []
  type: TYPE_NORMAL
- en: A great deal of [*Chapter 5*](B18571_05.xhtml#_idTextAnchor084) covered the
    various methods to obtain packet captures from a range of sources and a variety
    of locations. Packet captures contain a great deal of information that is potentially
    valuable to incident response analysts. Some of this information includes source
    and destination IP addresses, domains and ports, and the content of communications
    between hosts. In some instances, incident response analysts can reconstruct actual
    files, such as text documents and images. The main drawback is the sheer amount
    of data that is involved.
  prefs: []
  type: TYPE_NORMAL
- en: Sample packet captures
  prefs: []
  type: TYPE_NORMAL
- en: This chapter refers to several preconfigured packet captures. These packet captures
    have been taken directly from [http://malware-traffic-analysis.net/](http://malware-traffic-analysis.net/)
    by permission of the author. This site contains several packet capture exercises,
    where incident response analysts can practice locating indicators of compromise.
    It should be noted, though, that these captures may contain malware. You should
    only examine the live packet captures in a properly configured sandbox (see [*Chapter
    16*](B18571_16.xhtml#_idTextAnchor284)) or another system not connected to a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several command-line tools can be utilized when analyzing network packet captures.
    During more in-depth or lengthy incident response engagements, analysts may gather
    several packet capture files. It may be beneficial to combine these multiple packet
    captures into a single file to make analysis easier. The Mergecap application
    does just that by combining several packet capture files. Mergecap is offered
    as part of the SANS SIFT workstation and can be executed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another command-line tool that is useful in analyzing packet captures is Editcap.
    Editcap allows analysts to manipulate the packet capture files into smaller segments
    for easier review. For example, an analyst may only want to look at captures that
    are broken up into 50,000 packet segments. This would be helpful if an analyst
    has a large packet capture and dividing would make searching easier. To do this,
    the analyst would type the following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, `editcap` took the `evidence.pcap` evidence file
    and divided it into 50,000 packet segments. Another technique that Editcap can
    be leveraged for is to divide a larger packet capture into time segments. For
    example, if analysts want to divide a packet capture into 10-minute segments,
    they can type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Analysts may also find that, in some circumstances, they may want to isolate
    domain name registration traffic. This is due in large part to a variety of adversarial
    actions such as C2 traffic, data exfiltration, and the possible redirection to
    compromised websites, often leveraging vulnerabilities in the DNS system. The
    `dnstop` application parses packet capture files and ascertains the sources and
    count of DNS queries from internal hosts. To install it on a Linux system, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will download and install `dnstop`. In the following example,
    the packet capture was taken from the Malware Traffic Analysis site located at
    [https://www.malware-traffic-analysis.net/2022/03/21/index2.html](https://www.malware-traffic-analysis.net/2022/03/21/index2.html).
    If an incident response analyst wants to determine whether any IP addresses were
    sending outbound DNS queries for packet capture, they can simply execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – DNS query count
  prefs: []
  type: TYPE_NORMAL
- en: Real Intelligence Threat Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One challenge with working with packet captures is the sheer amount of data
    that is involved. A 24-hour packet capture from even a modest-sized network presents
    problems. One technique is to use tools that focus on key data points. For example,
    beaconing traffic associated with Command and Control is a critical piece of data
    to find as it is the link the adversary has to the internal network.
  prefs: []
  type: TYPE_NORMAL
- en: One tool that can assist is Active Countermeasure’s **Real Intelligence Threat
    Analytics** (**RITA**). This command-line tool uses behavioral analytics to identify
    patterns that are indicative of beaconing behavior so that an analyst can focus
    on a specific IP address or domain name. A key feature of this tool is its ability
    to process large packet captures, such as one obtained over 24 hours. This allows
    analysts to locate even very low and slow Command and Control traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing RITA is very straightforward. In this case, RITA has been installed
    on an Ubuntu desktop. First, make a directory for RITA. Second, download the installation
    script from the GitHub site at [https://github.com/activecm/rita/releases/tag/v4.5.1](https://github.com/activecm/rita/releases/tag/v4.5.1).
    Next, make the file executable by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, execute the install script by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The installation script will install the necessary dependencies, such as the
    Mongo database structure and the packet capture analysis tool Zeek.
  prefs: []
  type: TYPE_NORMAL
- en: Zeek
  prefs: []
  type: TYPE_NORMAL
- en: Zeek is a network monitoring and analysis tool that is used with RITA. For more
    information regarding Zeek, go to [https://docs.zeek.org/en/lts/](https://docs.zeek.org/en/lts/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is processing the packet capture. In this case, two packet captures
    were taken from the Malware Traffic Analysis post at [https://malware-traffic-analysis.net/2022/01/27/index.html](https://malware-traffic-analysis.net/2022/01/27/index.html)
    and were merged into a single file. This file was moved into the RITA directory.
    The following command points Zeek to the packet capture so that it can be processed
    into the various log files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking the files in the directory shows the processed log files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Zeek log files
  prefs: []
  type: TYPE_NORMAL
- en: 'After processing the packet capture with Zeek, the log files need to be imported
    into a database, `IcedID`, that RITA can read with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command is run, the results should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – RITA Zeek log import
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the help menu for RITA, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following commands and associated results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – RITA features
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and see if there are any packets indicating beaconing behavior.
    Run the `show-beacons` command against the database that was previously created
    by running the `IcedID` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – RITA Beacon analysis
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 9**.6*, RITA is indicating that the internal IP address `10.1.28.101`
    has established 234 connections to the IP address `149.255.35.174`. One result
    that is of note is the first number, `0.838`, found at the beginning of the results
    line. This score indicates the confidence level RITA has in these results, from
    0 to 1\. In this case, there’s nearly 84% confidence that the traffic is beaconing
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to run the `show-beacons-fqdn` command, which will show the
    domain names of systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces much of the same results but indicates that the Command and Control
    server has a domain name of `driverpackcdn.com`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – RITA Beacon Fully Qualified Domain Name
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, RITA allows analysts to focus on specific IP addresses and domain
    names as potentially malicious without having to dig through gigabytes of packet
    data. From here, they can pivot directly to the connections that are critical
    in GUI-based tools, which we will focus on next.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkMiner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GUI-based tools that separate packet capture data are easier to navigate than
    command-line tools. One such tool is NetworkMiner, which is available at [https://www.netresec.com/?page=NetworkMiner](https://www.netresec.com/?page=NetworkMiner).
    This tool is available as a commercial or community tool, with the community tool
    having more limited functionality. Despite this, the community edition does have
    some key features that are useful in analyzing packet captures.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demonstration, we will examine the PCAP file associated with a Hancitor
    infection, which can be downloaded from [https://malware-traffic-analysis.net/2022/03/21/index2.html](https://malware-traffic-analysis.net/2022/03/21/index2.html).
    Load the PCAP data by going to **File** and selecting **Open**. Navigate to the
    packet capture and click **Open**. NetworkMiner will process the PCAP and display
    the hosts found in the packet capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – NetworkMiner GUI
  prefs: []
  type: TYPE_NORMAL
- en: 'The next tab, **Files**, shows the files that were contained within the packet
    capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – NetworkMiner’s Files tab
  prefs: []
  type: TYPE_NORMAL
- en: 'If you drill down further into the `b123.exe` file that was downloaded from
    `bor4omkin.ru` with an IP address of `45.8.124.233`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Suspect files
  prefs: []
  type: TYPE_NORMAL
- en: In addition to visualizing files that were contained within the packet capture,
    NetworkMiner also extracts them and places them in the `AssembledFiles` directory,
    broken down by IP address. This allows analysts to quickly identify suspect files
    and analyze them.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkMiner is a useful tool for an initial review of packet captures. It provides
    details about the files, DNS queries, sessions, and other key data points. The
    main advantage that can be leveraged is its ability to quickly focus on key data
    points so that analysts can focus on specific areas, without having to dig through
    an entire packet capture to find the key evidence items.
  prefs: []
  type: TYPE_NORMAL
- en: Arkime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arkime is an open source packet capture and search system that allows analysts
    and responders to examine large network packet captures. By default, Arkime organizes
    the packet captures into the various sessions contained within the capture. Arkime
    can be utilized as a network monitoring system that can be leveraged by importing
    packets into the Elasticsearch infrastructure. From here, responders can examine
    network activity in near-real time. Another method that Arkime can be leveraged
    for is loading offline packet captures for indexing.
  prefs: []
  type: TYPE_NORMAL
- en: Installation instructions for Arkime can be found on GitHub at [https://raw.githubusercontent.com/arkime/arkime/master/release/README.txt](https://raw.githubusercontent.com/arkime/arkime/master/release/README.txt).
    Arkime can be installed on a variety of Linux desktop or server platforms. The
    server option provides larger teams with the ability to share data concerning
    packet captures, as well as evaluate running captures. Desktop installations are
    an option for responders that will be handling offline data and who do not need
    to share the results.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will use Arkime to analyze a packet capture from a system
    related to a phishing attack. This packet capture can be found at [https://malware-traffic-analysis.net/2022/02/25/2022-02-25-Emotet-epoch4-with-spambot-activity.pcap.zip](https://malware-traffic-analysis.net/2022/02/25/2022-02-25-Emotet-epoch4-with-spambot-activity.pcap.zip).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a directory in Arkime for offline packet captures. This can be
    done in the `home` directory. Next, transfer the packet capture using SFTP to
    the offline packet capture directory. Finally, use the Arkime capture binary,
    which can be found in the `/opt/arkime/bin` directory, to process the packet capture
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command takes the `2022-02-25-Emotet-epoch4-with-spambot-activity.pcap`
    file and processes it so that it can be reviewed with the GUI. An important thing
    to note is the `-r` parameter, which only processes a single capture. If there
    are multiple captures, the binary can be run with the `-R` parameter set, which
    recursively processes all the packet captures in the directory. *Figure 9**.11*
    shows the packet capture being processed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Arkime PCAP import
  prefs: []
  type: TYPE_NORMAL
- en: 'Once completed, open a web browser and navigate to the IP address of the server
    or workstation with port `8005`. This will open the Arkime interface. In the top
    left, set the time to **All**. Once the time has been set, the following view
    will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – Arkime GUI dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Arkime is a feature-rich platform. The following steps provide an overview
    of some of the features available in examining offline packet captures:'
  prefs: []
  type: TYPE_NORMAL
- en: 'An examination of the packet capture from the dashboard identifies several
    different sessions where the internal system at `10.2.25.101` is communicating
    with external IP addresses. To narrow down the search results to internet traffic
    over HTTP, the following search query should be entered into the search bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – HTTP port 80 query
  prefs: []
  type: TYPE_NORMAL
- en: 'This shows that there were two TCP sessions with a destination port of `80`.
    These sessions can be sorted by any of the fields present in the dashboard. One
    key piece of data that is useful is the bytes that are transferred as part of
    the session. Large deltas between bytes sent and received may indicate data exfiltration
    if the bytes sent are larger or, in the case of this capture, bytes received,
    which can indicate a file transfer, as seen in these entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – HTTP session data
  prefs: []
  type: TYPE_NORMAL
- en: 'The far right of the dashboard contains URIs and associated information concerning
    the sessions. For example, a check of the sessions over HTTP indicates that the
    local host navigated to what appears to be a Windows update site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – Arkime URI data
  prefs: []
  type: TYPE_NORMAL
- en: 'Arkime provides additional information for the session in the same session
    row as the information URI related to the Windows Update. Clicking on the green
    plus sign box opens the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.16 – Session data
  prefs: []
  type: TYPE_NORMAL
- en: 'Further down, under the **HTTP** heading, is valuable data concerning the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.17 – HTTP session data
  prefs: []
  type: TYPE_NORMAL
- en: 'Another feature that is useful with Arkime is the ability to visualize connections.
    At the top of the Arkime web application is **Connections**. If you click on **Connections**,
    the following will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.18 – Arkime connections graph
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s have a look at how to reset Arkime.
  prefs: []
  type: TYPE_NORMAL
- en: How do I reset Arkime?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the end of the analysis, there are two ways to clear the existing data in
    preparation for subsequent analysis. The first is to deploy Arkime on a virtualization
    platform such as VMware. Here, you can create a new installation and then capture
    a snapshot of the new installation. Once the analysis is complete, you can revert
    to the fresh installation snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another method is to either rerun the `init` or `wipe` command. The steps are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Leave Elasticsearch running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down all running viewer or capture processes so that no new data is recorded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To delete all the SPI data stored in Elasticsearch, use the `db.pl` script
    with either the `init` or `wipe` command. The only difference between the two
    commands is that `wipe` leaves the added users so that they don’t need to be re-added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete the PCAP files. The PCAP files are stored on the filesystem in `raw`
    format. You need to do this on all of the capture machines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The major advantage to Arkime is the ability to view the network traffic in
    a flow view. For a more detailed packet-by-packet view, the best tool to leverage
    is Wireshark, which we will cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wireshark is one of the most popular packet capture analysis tools available
    to incident response analysts. In addition to the ability to capture packets,
    a great many other features are available. As entire volumes and training courses
    are built around this platform, it is impossible to identify every feature. Therefore,
    this chapter will focus on some of the key features of Wireshark that are most
    applicable to an incident investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark resources
  prefs: []
  type: TYPE_NORMAL
- en: Arguably, Wireshark is the packet analyzer of choice for IT and security professionals.
    Due to the ubiquity of the application, there are a wide variety of resources
    available for additional training on Wireshark and its capabilities. The Wireshark
    site at [https://www.wireshark.org/](https://www.wireshark.org/) contains a great
    deal of information. Furthermore, the site at [https://www.chappell-university.com/](https://www.chappell-university.com/)
    contains exercises and training packet captures to hone skills regarding analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Lisa Bock, who authored *Learn Wireshark*, provided an in-depth
    treatment of Wireshark in her book, which is available at [https://www.packtpub.com/product/learn-wireshark-fundamentals-of-wireshark/9781789134506](https://www.packtpub.com/product/learn-wireshark-fundamentals-of-wireshark/9781789134506).
  prefs: []
  type: TYPE_NORMAL
- en: 'Because Wireshark is a feature-rich tool, some settings lend themselves more
    to network traffic analysis that are outside incident response activities. As
    a result, some changes need to be made to better assist the incident response
    analyst with performing packet capture analysis concerning an incident investigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time**: The time setting in Wireshark provides several options. These include
    the time of the packet since 1/1/1970 or since the start of the packet capture.
    One of these options, which can be useful in an incident investigation, is the
    date and time when the individual packets were captured. This allows analysts
    to correlate the date and time of other suspicious or malicious activity with
    the date and time of specific traffic within the packet capture. To enable this,
    navigate to **View** and then to **Time Display Format**. From there, choose one
    of the time options, such as **Date and Time** or **Day or Time of Day**. Another
    option to consider is utilizing the UTC options. This is very useful if the internal
    network utilizes UTC rather than local time. The time can also be set to nanoseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name resolution**: The name resolution setting allows analysts to toggle
    between seeing the IP addresses of the source and destination hosts and hostname
    resolution. This is useful if an analyst is examining a packet capture and wants
    to determine if any suspicious hostnames have been found. For example, if the
    packet capture is open, you will see various IP addresses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – Wireshark IP address view
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine the hostnames, navigate to **View** and then **Name Resolution**.
    Click on **Resolve Network Addresses**. Wireshark will then resolve the IP addresses
    to hostnames:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.20 – Wireshark domain name view
  prefs: []
  type: TYPE_NORMAL
- en: '**Colorize packet list**: This feature allows analysts to toggle between a
    blank background of the packet list or to allow Wireshark to color-code the packets:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.21 – Wireshark – Coloring Rules Classic
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, an exploration of Wireshark will be done while utilizing a
    packet capture that can be found on Malware Traffic Analysis at [https://malware-traffic-analysis.net/2022/04/14/index.html](https://malware-traffic-analysis.net/2022/04/14/index.html).
    This packet capture includes downloading a copy of the Qakbot malware, along with
    Cobalt Strike. For this chapter, several key elements of the packet capture will
    be identified. Before examining the packet capture, Wireshark was configured so
    that the date and time are visible, and so that the hostnames were identified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the features in Wireshark that provide key pieces
    of information from the packet capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ip.src==10.4.14.101` syntax, which displays the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.22 – Source address filter
  prefs: []
  type: TYPE_NORMAL
- en: '**Host identification**: Another key aspect of analyzing packet captures is
    to identify the localhost, if applicable. Considering that this packet capture
    is from a single host, identifying the hostname, IP address, and MAC address is
    straightforward. By double-clicking on the individual packet, a great deal of
    information can be found:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.23 – Packet data
  prefs: []
  type: TYPE_NORMAL
- en: '`80`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http`. Pay attention while entering this in the filter, as several different
    filters will be available. Once the filter has been typed in, click the right-facing
    arrow located at the far right of the dialog box. Wireshark will now limit the
    view of packets to those that are utilizing the HTTP protocol:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.24 – HTTP packet view
  prefs: []
  type: TYPE_NORMAL
- en: '`geobram.com`, may be a suspect URL. Another feature of Wireshark is the ability
    to follow the TCP or HTTP stream of communication between the source and destination
    hosts. If you right-click on the `rozhan-hse.com` hostname, the following will
    appear:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.25 – Follow HTTP Stream
  prefs: []
  type: TYPE_NORMAL
- en: 'A second window will appear; click on **HTTP Stream** and a third window will
    appear. This window contains the HTTP packets in a format that can be read. The
    incident response analyst can review this output to determine what types of files
    may have been sent or received:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.26 – HTTP packet data
  prefs: []
  type: TYPE_NORMAL
- en: '`GET` command is reaching out to the `NO_2950435796.zip` file. An analyst may
    want to extract this file for analysis. Click on **File** and then **Export Objects**,
    and then **HTTP**; a window will appear listing all of the files associated with
    the HTTP connections. This list can be sorted on any of the fields at the top
    of the window. In this case, select the hostname and scroll down until the suspected
    URL is located:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_09_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.27 – Wireshark – Export – HTTP object list
  prefs: []
  type: TYPE_NORMAL
- en: From here, the analyst can click on the file and save it onto the local system
    for later analysis. *Chapter 12* will take select files and evaluate them for
    malicious code.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is a powerful tool for conducting a detailed analysis of packet captures.
    The ability to drill down to individual packets and dissect them allows analysts
    to gain a very detailed sense of what is contained within the traffic running
    to and from external hosts, as well as to and from internal hosts. This visibility
    can afford the analyst possible insight into how an infected host communicates
    with an external host, or even identify other hosts that may have become compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security incidents not only produce trace evidence on host systems but also
    leave traces throughout the devices and traffic flows within a network. The ability
    to analyze this trace evidence will allow incident response analysts to have a
    better understanding of what type of incident they are investigating, as well
    as potential actions that can be taken. This chapter addressed how to evaluate
    log files through the rapid process of blacklist comparison or DNS analysis to
    log analysis utilizing the Elastic Stack or other SIEM systems. To augment this
    primary method of network evidence evaluation, we covered NetFlow analysis, and
    examined packet captures with Arkime and Wireshark. Network evidence is a critical
    component of incident investigation. This trace evidence, taken in conjunction
    with evidence obtained from potentially compromised websites, goes a long way
    in allowing analysts to reconstruct the events of an incident.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will move the focus from network traffic to the host, and memory
    analysis will be explored.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A filtered log review is one where the responder or analyst filters out specific
    logs based on a set parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is not a component of the Elastic Stack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Elasticsearch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Log forwarder
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Logstash
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Kibana
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which packet analysis tool places the packet capture into sessions as the default
    view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NetFlow
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Elastic Stack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Arkime
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Wireshark does not allow for DNS name resolution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following links for more information about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Elasticsearch 7.0 Cookbook - Fourth* *Edition*: [https://www.packtpub.com/big-data-and-business-intelligence/elasticsearch-70-cookbook-fourth-edition](https://www.packtpub.com/big-data-and-business-intelligence/elasticsearch-70-cookbook-fourth-edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Malware traffic* *analysis*: [https://www.malware-traffic-analysis.net](https://www.malware-traffic-analysis.net).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Arkime*: [https://arkime.com/](https://arkime.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chappell* *University*: [https://www.chappell-university.com/](https://www.chappell-university.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cisco IOS* *NetFlow*: [https://www.cisco.com/c/en/us/products/ios-nx-os-software/ios-netflow/index.html](https://www.cisco.com/c/en/us/products/ios-nx-os-software/ios-netflow/index.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
