- en: Data Acquisition from iOS Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An iOS device that's been recovered from a crime scene can be a rich source
    of evidence. Think about how personal a smartphone is to a user; nothing else
    that's digital comes close. We rarely leave our homes or even walk around outside
    them without our smartphones within arm's reach. It's literally a glimpse into
    the most personal aspects of a human, almost like a diary of our everyday activity.
    According to several news references, Oscar Pistorius' iPads were examined by
    a mobile expert and presented during his trial to show his internet activity hours
    before the death of his girlfriend. When an iOS device can provide access to a
    so-called *smoking gun*, you, as the examiner, must ensure that you know how to
    properly handle, acquire, and analyze the device.
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways to acquire forensic data from an iOS device. Though
    each method will have its pluses and minuses, the fundamental principle of any
    acquisition method is to obtain as much data as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: iOS device operating modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password protection and potential bypasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating modes of iOS devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into forensic techniques and acquisition methods, it's important
    to know the different operating modes of an iOS device. Many forensic tools and
    methods require you to place the device in one of the operating modes. Understanding
    the iOS device's operating modes is required in order to perform a particular
    action on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'While most commercial tools will demonstrate the proper steps to get the device
    in a particular mode, you must understand what that mode represents. iOS devices
    are capable of running in different operating modes: normal mode, recovery mode,
    and **Device Firmware Update** (**DFU**) mode. Some forensic tools require you
    to know which mode the device is currently utilizing. We will define each mode
    in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that when the term *iPhone* is mentioned, it should be understood that
    the statement remains true for all iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Normal mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an iPhone is switched on, its operating system is booted; this mode is
    known as normal mode. Most regular activities (calling, texting, and so on) that
    are performed on an iPhone will be run in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an iPhone is turned on, internally, it goes through a *secure boot chain*,
    as shown in the following diagram. This does not occur for jailbroken devices.
    Each step in the boot-up process contains software components that are cryptographically
    signed by Apple to ensure integrity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0a280cd-095e-427c-997b-87d5fd796bd5.png)'
  prefs: []
  type: TYPE_IMG
- en: A secure boot chain of an iPhone in normal mode
  prefs: []
  type: TYPE_NORMAL
- en: '*The boot ROM, in turn, verifies whether the Low-Level Bootloader (LLB) is
    signed by Apple and loads it. The LLB is loaded and verified by the boot ROM,
    but this only occurs on devices with an A9 or earlier A-series processor'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *boot ROM**,* known as the *secure ROM*, is **read-only memory** (**ROM**)
    and is the first significant piece of code that runs on an iPhone ([https://www.apple.com/business/docs/iOS_Security_Guide.pdf](https://www.apple.com/business/docs/iOS_Security_Guide.pdf)).
    An explanation of the boot process for iOS devices is defined in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The boot ROM code contains the Apple root **certificate authority** (**CA**)
    public key, which is used to verify the signature of the next stage before allowing
    it to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the iPhone is started, the application processor executes the code from
    the boot ROM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The boot ROM, in turn, verifies whether the **Low-Level Bootloader** (**LLB**)
    is signed by Apple and loads it. The LLB is loaded and verified by the boot ROM,
    but this only occurs on devices with an A9 or earlier A-series processor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the LLB finishes its tasks, it verifies and loads the second-stage boot
    loader (iBoot). iBoot verifies and loads the iOS kernel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The iOS kernel, in turn, verifies and runs all the user applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When an iOS device is in this state, it's possible to gain a part that is accessible
    to the user through forensic acquisition. Most often, this includes a logical
    acquisition, which will be discussed later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Recovery mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the boot-up process, if one step is unable to load or verify the next
    step, then the boot-up is stopped and the iPhone displays the screen shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e76ee9a8-c570-4b6a-a1b4-b8bf3a0dba6d.png)'
  prefs: []
  type: TYPE_IMG
- en: iOS device recovery mode
  prefs: []
  type: TYPE_NORMAL
- en: 'This mode is known as recovery mode and is required to perform upgrades or
    restore the iPhone. To enter recovery mode, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn off the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold down the iPhone Home button and connect the device to a computer via a
    USB cable. The device should turn on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue holding the Home button until the Connect to iTunes screen appears. Then,
    you can release the Home button (on a jailbroken iOS device, this screen may appear
    with different icons). Most forensic tools and extraction methods will alert you
    regarding the current state of the iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To exit recovery mode, reboot the iPhone. On iPhone 6s and earlier, this can
    be completed by holding down the Home and Sleep/Power buttons until the Apple
    logo appears. On iPhone 7 and iPhone 7 Plus, this can be done by holding the Side
    button and Volume Down button together. On iPhone 8 and later, you do this by
    clicking the Volume Up button, then clicking the Volume Down button, and then
    holding down the Side button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can read more about recovery mode on iOS devices at [https://support.apple.com/en-in/HT201263](https://support.apple.com/en-in/HT201263).
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the process of rebooting returns the iPhone from recovery mode to
    normal mode. This same methodology applies to the Apple Watch. You may experience
    a situation where the iPhone constantly reboots into recovery mode. This is known
    as a recovery loop. A recovery loop may occur when the user or examiner attempts
    to jailbreak the iOS device and an error occurs. To get the device out of a recovery
    loop, the device must be connected to iTunes so that a backup can be restored
    to the device.
  prefs: []
  type: TYPE_NORMAL
- en: This makes changes to the evidence, so ensure that you have validated your acquisition
    methods on a test device prior to attempting to use your methods on real evidence.
  prefs: []
  type: TYPE_NORMAL
- en: DFU mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the boot-up process, if the Boot ROM is unable to load or verify the
    LLB or iBoot (on newer devices), the iPhone enters **Device Firmware Upgrade**
    (**DFU**) mode. DFU mode is a low-level diagnostic mode and is designed to perform
    firmware upgrades for iPhones.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter DFU mode, perform the following steps for iPhone 8 and later:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device to your workstation via a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the Volume Up button and quickly release it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the Volume Down button and quickly release it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold the Side button and press the Volume Down button again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After 5 seconds, release the Side button, but continue holding the Volume Down
    button until you see the Recovery screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow these steps for iPhone 7:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device to your workstation via a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the same time, press and hold the Side and Volume Down buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the Side button, but continue to hold the Volume Down button until you
    see the Recovery screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow these steps for iPhone 6s and earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device to your workstation via a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the same time, press and hold the Home and the Top (or Side) buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the Top (or Side) button and continue holding the Home button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On iPhone 6s and earlier, nothing will be displayed on the screen when the device
    is in DFU mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify whether the iPhone is in DFU mode on macOS, launch a System Reportand
    go to the USB option. You should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/653124b3-6f3d-4e98-a6de-4888459f9038.png)'
  prefs: []
  type: TYPE_IMG
- en: The MacBook system information displaying a device in DFU mode
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will have a quick look at the tools that are required to set up the
    forensic environment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the forensic environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, we have a few tools that can be used by mobile forensic examiners
    to acquire and analyze iOS devices using both macOS and Windows systems as the
    hosts. For example,* Elcomsoft iOS Forensic Toolkit* has both macOS and Windows
    versions; as for free and open source tools, the `libimobiledevice` library can
    be used – not only on macOS and Windows forensic workstations, but even on Linux!
  prefs: []
  type: TYPE_NORMAL
- en: We are going to introduce you to these tools with hands-on exercises, of course,
    including practical logical and filesystem acquisitions, and even jailbreaking,
    later in this chapter. But let's start with password protection and potential
    bypasses, since, without the passcode, we can't extract anything from a modern
    iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Password protection and potential bypasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to start with the bad news: if you are examining an iPhone that runs
    iOS 8 or newer, and especially if it's a newer device, for example, the iPhone
    6s, your chances of unlocking it are not good at all.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are some hardware-based solutions, such as IP-BOX 3, but all
    of them work only occasionally, and using one of them can even result in bricking
    the device. With iOS 11, this problem becomes even more severe – even if the device
    under examination is not passcode protected, you will need the passcode anyway
    as it must be entered to confirm the trust between the device and your workstation.
  prefs: []
  type: TYPE_NORMAL
- en: So, what should a mobile forensic examiner do? Use the lockdown files! The lockdown
    files, which are stored as a `plist` file on *trusted computers*, allow you to
    trick the device into believing it's unlocked or *trusted* on the forensic workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The lockdown files are located in the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/var/db/lockdown` on macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\ProgramData\Apple\Lockdown` on Windows 7 and later releases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must be aware that unlocking with a lockdown file only works if the device
    was unlocked with a passcode at least once after the last reboot.
  prefs: []
  type: TYPE_NORMAL
- en: There are also some advanced techniques that exist. These include fingerprint
    molds to trick Touch ID, masks to trick Face ID, and NAND mirroring to bypass
    passcode entry limits.
  prefs: []
  type: TYPE_NORMAL
- en: The first technique was first demonstrated by Jason Chaikin. He demonstrated
    how to bypass Touch ID by lifting another person's fingerprint with common molding
    materials, such as dental mold and Play-Doh.
  prefs: []
  type: TYPE_NORMAL
- en: The second technique was demonstrated as a proof of concept by the Vietnamese
    cybersecurity firm Bkav. They created a mask that can be used to trick the Face
    ID feature using a combination of three-dimensional printing, makeup, and two-dimensional
    images.
  prefs: []
  type: TYPE_NORMAL
- en: The last technique was demonstrated by Sergei Skorobogatov, a senior research
    associate at the Cambridge Computer Laboratory's Security Group. This technique
    allows you to bypass passcode entry limits by soldering off the iPhone's flash
    memory chip and cloning it. This technique should work on any iOS device up to
    iPhone 6s Plus.
  prefs: []
  type: TYPE_NORMAL
- en: Logical acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A logical acquisition captures a part of what is accessible to the user; in
    other words, what is included in an iTunes backup. It means that we won't get
    any deleted files, but, thanks to SQLite databases' free lists and unallocated
    space, we can recover deleted records, including SMS and other chats, browsing
    history, and so on. We will discuss recovering SQLite data and deleted artifacts
    in [Chapter 5](4f92f4a2-f8f9-4274-96eb-da9174fc6772.xhtml), *iOS Data Analysis
    and Recovery.*
  prefs: []
  type: TYPE_NORMAL
- en: Logical acquisition is the simplest way to ascertain whether the device is unlocked
    as it simply uses the built-in backup mechanism. Most tools and methods that support
    the logical acquisition of iOS devices will fail if the device is locked. Some
    think that if a physical image is captured, there is little to no need for a logical
    acquisition. However, not all data is parsed in a physical image, which is why
    having access to a logical image, which results in readable data, will assist
    you in digging deep into the physical image for artifacts to support your forensic
    investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Logical acquisition is the fastest, easiest, and cheapest way to gain access
    to data stored on an iOS device. There are a variety of tools, ranging from commercial
    to free, that are capable of capturing logical images. Most of these tools require
    that the device be unlocked, or access to the `plist` file from the host machine
    be readily available.
  prefs: []
  type: TYPE_NORMAL
- en: Practical logical acquisition with libimobiledevice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having the theory under your belt is good, but putting this into practice is
    much better. Let's create a logical image of an iPhone running iOS 13.2 with `libimobiledevice`,
    which should already be installed on your workstation, as we used it for device
    information gathering in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s make our backups encrypted. Connect the iOS device to
    your workstation and start the Command Prompt. Change the directory to the one
    containing `libimobiledevice` and type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you see Backup encryption has been enabled successfully, then you've done
    everything right and the backups will be encrypted. This will help you, the forensics
    examiner, to gain more information regarding users' passwords, Safari browsing
    history, and much more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s time to create the backup—our iOS device logical image. To do this, type
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. You can see the logical imaging process in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eb26ad2-4dd8-4db9-8f43-edc5f7f7ec0f.png)'
  prefs: []
  type: TYPE_IMG
- en: iPhone logical imaging with libimobiledevice
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at logical acquisition with the Belkasoft Acquisition Tool.
  prefs: []
  type: TYPE_NORMAL
- en: Practical logical acquisition with the Belkasoft Acquisition Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since logical acquisition is the most common option for modern iOS devices,
    we'll demonstrate how to use a few more free tools. The first one is the Belkasoft
    Acquisition Tool. This tool can be used not only for iOS device acquisition, but
    also for hard drives, and even cloud data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s acquire an iPhone running iOS 13.2.3 using the Belkasoft Acquisition
    Tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the Belkasoft Acquisition Tool and choose the Mobile device option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ecc44deb-2c74-48a8-a99f-cd8f54f2b210.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the source
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next window, choose the Apple option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/155f47fb-e14f-495e-b7a0-15458c26170d.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the mobile type
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, choose the acquisition method and the image path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29aefeb1-0419-4b44-8286-768b480a10fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the acquisition method
  prefs: []
  type: TYPE_NORMAL
- en: The tool is able to create an iTunes backup if the device isn't jailbroken and
    perform filesystem extraction if it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait for the task to finish successfully. You will find your device''s logical
    image in the folder you chose in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db5d235f-d6a8-4255-8e6d-ac10d055f52e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the backup
  prefs: []
  type: TYPE_NORMAL
- en: The backup can be analyzed both by Belkasoft Evidence Center and by many other
    mobile forensic tools.
  prefs: []
  type: TYPE_NORMAL
- en: Practical logical acquisition with Magnet ACQUIRE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another free tool capable of logical acquisition is **ACQUIRE** from Magnet
    Forensics. Let''s perform a logical acquisition again, this time using a device
    running iOS 12.2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Magnet ACQUIRE and choose the device you want to image from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd1fe238-1247-4534-9970-2ae71a92c6a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the device
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the type of image you want to acquire. We want to acquire a logical
    image and our device is not jailbroken, so we are going to choose the Quick option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d166b841-324a-4737-a783-b36cc82d6b66.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the image type
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a description of the evidence source if needed, and choose the
    folder where you want the image to be saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f8d9f8a-86c8-40ed-8bd2-df086b08afb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the destination folder, image name, and image information
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait for the tasks to finish successfully; you''ll see a summary of the acquisition
    process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11f2a674-f0b8-4a30-81f7-563be3b440f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the image
  prefs: []
  type: TYPE_NORMAL
- en: All extracted data will be saved to the destination folder in a ZIP archive.
    Also, the destination folder will contain a TXT file with the acquisition's process
    log and image information.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will walk you through jailbreaking and filesystem acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Filesystem acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Secure Enclave has brought new challenges to iOS forensic examiners. We can't
    extract the encryption keys that are required to decrypt the device image, so
    performing physical acquisition is useless. But there is filesystem acquisition.
    Unfortunately, in most cases, it requires the iOS device to be jailbroken. The
    next section will show you how to jailbreak an iPhone running iOS 11.4.1 with
    Electra and an iPhone running iOS 13.2 with Checkra1n.
  prefs: []
  type: TYPE_NORMAL
- en: Practical jailbreaking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform filesystem acquisition, we need our iOS device to be jailbroken.
    The steps to jailbreak an iOS device running 11.4.1 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download `Electra` from: [https://github.com/coolstar/electra-ipas/raw/master/Electra1141-1.3.2.ipa](https://github.com/coolstar/electra-ipas/raw/master/Electra1141-1.3.2.ipa).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download `Cydia Impactor` ([http://www.cydiaimpactor.com/](http://www.cydiaimpactor.com/)),
    run it, and connect the device to your workstation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a5e89f6-befb-4614-b972-5a33885ecc2a.png)'
  prefs: []
  type: TYPE_IMG
- en: Running Cydia Impactor
  prefs: []
  type: TYPE_NORMAL
- en: Drag and drop the `Electra IPA` file to the `Cydia Impactor` window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type any Apple ID in the new window (you can register a new one for every device
    you examine).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log on with this Apple ID to [https://appleid.apple.com/](https://appleid.apple.com/) and
    generate an app-specific password under the Security section. Paste this password
    into the next window. Wait for the process to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the phone, go to Settings | General | Device Management | Apple ID and tap
    Trust:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d529bb5c-bf6f-4e21-8ad2-1946a8cd8648.png)'
  prefs: []
  type: TYPE_IMG
- en: Verifying the developer
  prefs: []
  type: TYPE_NORMAL
- en: Put the phone into Airplane mode, turn Siri off, and reboot the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tap the Electra icon on the Springboard and then choose Jailbreak. If the process
    finishes successfully, you will find the Cydia icon on the Springboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/611a08f6-bede-4da9-b57b-06bca3b79384.png)'
  prefs: []
  type: TYPE_IMG
- en: Jailbreaking the device
  prefs: []
  type: TYPE_NORMAL
- en: Now, the phone is jailbroken and ready for filesystem acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: '`Checkra1n` is based on a bootrom vulnerability and exploit and supports a
    wide range of iOS devices, even those running the latest (at the time of writing)
    iOS 13.2\. Here are the steps to jailbreak an iOS device running 13.2:'
  prefs: []
  type: TYPE_NORMAL
- en: Download `Checkra1n` from: [https://checkra.in/](https://checkra.in/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application. At the time of writing, `Checkra1n` is only available for
    macOS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the device and put it into DFU mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/370be42e-f715-49dc-8ad7-06e0135ec1ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Putting the device into DFU mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait for the exploitation process to finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e16ecd22-6179-4e31-a1aa-3c84fd7a289a.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploitation process
  prefs: []
  type: TYPE_NORMAL
- en: Once the device has been rebooted, you will find the checkra1n icon on the Springboard
    – the device is now jailbroken and ready for filesystem acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: For more jailbreaking techniques, please refer to the *Jailbreaking* section
    of [Chapter 2](acc4800c-2775-4ca6-9f5f-e447fa5ac0a8.xhtml), *Understanding the
    Internals of iOS Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: Practical filesystem acquisition with free tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to perform filesystem acquisition. All we''ll need is `iproxy` from
    `libimobiledevice`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Command Prompt window and run `iproxy` with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8c762d32-cd21-496e-bbf8-773ff72e3413.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open another Command Prompt window, change the directory to the one you want
    your image to be stored in, and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To connect via SSH, you will be prompted for the necessary password. The default
    password for SSH is *alpine*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the process has finished, you''ll find the created filesystem image in
    the directory you changed to before running the preceding command. It''s a TAR
    archive and can be opened with many archivers, such as 7-Zip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5ba6cb7-7d36-4f65-8ea7-bd0da366cb7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Filesystem image contents
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at the *Elcomsoft iOS Forensic Toolkit*.
  prefs: []
  type: TYPE_NORMAL
- en: Practical filesystem acquisition with Elcomsoft iOS Forensic Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, commercial tools are more stable and reliable. One of the tools that's
    capable of filesystem acquisition is the Elcomsoft iOS Forensic Toolkit. Here,
    we are going to acquire a jailbroken iOS device running iOS 12.4.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to do this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device to your workstation and start `Toolkit.cmd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the port to use for SSH connection (the default is `22`, but since we
    used checkra1n for jailbreaking, the port is `44` instead) and type in the password
    (the default is `alpine`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a87928bc-2348-4f86-9cd2-36c9f4301088.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To acquire the device filesystem, type *F*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdbd5f6d-d1da-4e92-8184-2f13d900bdca.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose the image name and start the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the process has finished, we'll have a filesystem image ready to be analyzed
    with a mobile forensic tool of our choice.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in iOS device forensic examination is to acquire the data from
    the device. There are several different ways to acquire data from an iOS device.
    This chapter covered logical and filesystem acquisition techniques, as well as
    jailbreaking and methods to bypass passcodes.
  prefs: []
  type: TYPE_NORMAL
- en: While filesystem acquisition is the best method for forensically obtaining a
    majority of the data from iOS devices, backup files may exist or be the only method
    to extract data from the device.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will discuss iOS device backup files in detail, including user,
    forensic, encrypted, and iCloud backup files, and the methods that you can perform
    to conduct your forensic examination.
  prefs: []
  type: TYPE_NORMAL
