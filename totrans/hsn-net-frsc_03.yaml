- en: Technical Concepts and Acquiring Evidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the various types of evidence sources.
    In this chapter, we will look at those sources in detail. We will familiarize
    ourselves with the basics of different types of log formats and look at the various
    technical key concepts required to conduct a network forensics exercise successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Inter-networking refresher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposure to various types of logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case studies on logs and packet structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get started with the basics of inter-networking and understand how
    communications take place with respect to the OSI networking model.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the exercises illustrated in this chapter, you will require the
    following software:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Log Viewer ([https://www.apacheviewer.com/](https://www.apacheviewer.com/))
    installed on Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sawmill ([http://www.sawmill.net/cgi-bin/download.pl](http://www.sawmill.net/cgi-bin/download.pl))
    installed on Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux on VMware Workstation/Player or Virtual Box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireshark ([https://www.wireshark.org/download.html?aktime=1551312054](https://www.wireshark.org/download.html?aktime=1551312054))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download files for this chapter from [https://github.com/nipunjaswal/networkforensics/tree/master/Ch2](https://github.com/nipunjaswal/networkforensics/tree/master/Ch2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inter-networking refresher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **open systems interconnection** (**OSI**), model is built for the network
    based digital communication and keeps flexibility and modularity in mind. The
    OSI model is a seven-layered design, starting from the physical layer and ending
    at the application layer. A high-level diagram of the OSI layers can be viewed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17bee791-3350-484b-a16d-6d3709b38a11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The seven layers are responsible for a variety of different communication standards
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: At the physical layer, we are generally speaking about the cables, hubs, optical
    fibers, coaxial cables, and connectors, which are the actual physical carriers
    of data, and the data is represented in bits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the data-link layer, we have **802.11**, **WI-MAX**, **ATM**, **Ethernet**,
    **Token Ring**, **PPTP**, **L2TP**, and much more, which enables establishment
    and termination between the nodes. The data is represented in frames.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the network layer, we have the **IPv4**, **IPv6**, **OSPF**, **ICMP**, and **IGMP**
    sets of protocols, which manage logical, physical address mappings, routing, and
    frame fragmentations. The data is in the form of packets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the transport layer, we have **TCP** and **UDP**, which allow message segmentation,
    message acknowledgment, host-to-host communication, and message-traffic control.
    The data is represented in segments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the session layer, we have **SAP**, **PPTP**, **RTP**, and **SOCKS**. It
    is responsible for session establishment, maintenance, and termination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The presentation layer has **SSL/TLS**, **WEP**, **WPA**, **Kerberos**, **MIME**,
    and other implementations and is generally responsible for character-code translations,
    data conversation, compression, and encryption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the application layer, we have **DHCP**, **FTP**, **HTTP**, **IMAP**, **POP3**,
    **NTP**, **SSH**, and **TELNET**, the end-user programs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OSI model and the TCP/IP model can be collectively viewed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0373936e-14ab-4252-9954-622c1fa0e2f4.png)'
  prefs: []
  type: TYPE_IMG
- en: The mapping of OSI model and TCP/IP model isn't perfect. SSL/TLS, for example,
    contains elements from both the presentation and session layers. From launching
    any of the application on your system which communicates with the outside world
    it all goes through the previously discussed layers. Consider a scenario where
    you want to browse to a particular website.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, when you type a website's address into your browser, which is
    a layer 7 application, the domain name gets resolved to the IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have the IP address of the destination, the data is encapsulated within
    the TCP/UDP data structure consisting of TCP/UDP header and data is passed to
    the transport layer where the OS embeds the source and destination ports data
    into the packet structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, the structure is passed to network layer, where the source and destination
    IP address are embedded to the structure and is encapsulated within an IP packet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The entire packet is changed into an Ethernet frame on layer 2 and then finally
    travels in the form of bits on the wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the receiving end, the bits are first transformed into an Ethernet frame,
    and layer 2 information is removed and is sent to the network layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the network layer, the packet is checked that if it is meant for the system
    and if it is, the system removes the layer 3 information, which is the IP packet
    header, and pushes it to layer 4 from where the OS identifies the port number
    it is meant to be delivered to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, the OS identifies the port, removes the TCP header information, checks
    which program is listening on that port, and delivers the payload to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, when the information travels from one point to the other, it creates
    **traces** (logs) on various devices along the way. These devices can be firewalls,
    proxy servers, routers, switches, or application servers, and since we covered
    some basic packet-based network forensics in the previous chapter, let's look
    at the log-based evidence scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the OSI model, refer to [https://www.webopedia.com/quick_ref/OSI_Layers.asp](https://www.webopedia.com/quick_ref/OSI_Layers.asp).
  prefs: []
  type: TYPE_NORMAL
- en: Log-based evidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we looked at various network protocol captures that
    define evidence in motion or data captured while in action. However, it is crucial
    for a network forensic investigator to have a brief knowledge of the various types
    of logs generated at the endpoints while traveling. These logs prove to be extremely
    handy when the scenario doesn''t contain network captures, and it is up to the
    investigator to deduce and conclude the forensic investigation and reach a definitive
    result. Consider a situation where a company named Acme Inc. has faced a massive
    breach of customer data through its website, and the company hasn''t kept any
    packet-capture files for the incoming data. In such cases, the forensic investigation
    solely relies on the logs generated at various endpoints, such as application
    servers, databases, and firewalls, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2f02246-3cc9-4ad7-91a3-960a727e98f5.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding scenario, we can see that the attacker has attacked an externally-hosted
    application server, which makes a connection to an internal network for database
    access that has limited connectivity to the external world, except for the application
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In such scenarios, the following set of questions needs an answer:'
  prefs: []
  type: TYPE_NORMAL
- en: How was the attacker able to penetrate the application server?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why did the firewall allow access to the external attacker?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What set of queries did the attacker execute on the database?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did the attacker alter the database?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we identify the origin of the attack?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To answer the preceding questions, we will require access to the logs of the
    external application server, and since the firewall permitted access to the attacker,
    we will need access to the firewall logs. The attacker executed queries on the
    database. Therefore, we will expect access to the database logs as well.
  prefs: []
  type: TYPE_NORMAL
- en: Application server logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the previous scenario, the first point of attack was the externally-hosted
    application server. Let''s see what sort of logs are generated by common application
    servers, such as **Apache** and **NGINX**, and what we can deduce from those logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1679418e-a0bb-4f02-b396-f964d886566f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we can see the Apache access logs file that reside
    mostly on the `/var/log/apache2/access.log` path. We can see a variety of incoming
    requests to the application. However, we can see that the logs are kept in a particular
    format, which is the IP address followed by the date and time, request type, requested
    resource file, HTTP version, response code, response length, and user agent. Since
    the user agent of the previous request is `DirBuster`, this denotes that the attacker
    is using `DirBuster` to scan the directory for interesting paths and to find hidden
    directories on the web application. A similar set of logs is available in the
    `error.log` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdb3ec54-248d-447d-bce9-a71c4b66483d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, this log file contains entries that requests have generated errors.
    As we can see, the errors mostly contain permission-denied errors, which will
    result in a 403 response status, which means that the requested resource is forbidden.
    Looking at a raw log file doesn''t make much sense to us, and it will be a pain
    to investigate logs even if the file is as small as 10 MB. Therefore, to further
    investigate and drill down to the conclusions, we will use automated tools, such
    as Apache Logs Viewer ([https://www.apacheviewer.com/features/](https://www.apacheviewer.com/features/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14f6fcbd-dfc7-4476-89ec-65b4db5954b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s analyze the logs by adding the access/error log files to the software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fb9225d-f94c-4615-85da-a715d2508935.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that as soon as we open the log file, the software asks us to define
    any additional options, such as LogFormat and Date Range. Choose Common (default)
    for this analysis and press OK to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91a0bcb9-f73b-4063-9ea1-ffae6e95d53b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have the log file parsed with ease and we can now apply various
    filters to it, such as only listing packets from a particular IP or the response
    status with a particular response code. We will make use of Apache Logs Viewer
    more in the upcoming chapters and exercises.
  prefs: []
  type: TYPE_NORMAL
- en: We can also add the file remotely using the credentials if you have a licensed
    copy of the log viewer, which can be purchased from Apache Logs Viewer website
    at [https://www.apacheviewer.com/unlock/](https://www.apacheviewer.com/unlock/).
  prefs: []
  type: TYPE_NORMAL
- en: Database logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just saw how we could process basic application server logs. Let''s see
    how we can grab database logs and make the most of them in our forensic investigation.
    Database servers, such as MySQL and MS SQL, contain log files with information
    that helps a forensic investigator to understand the chain of events in a much
    better way. General query logs in MySQL present an investigator with all the queries
    that were executed during the time of the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d211ff2-07b5-4026-8a47-e8df0c2064bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the general query log file allows us to view failed attempts
    by the attacker to log into the MySQL server. However, it also suggests that there
    are two successful attempts. Let''s further investigate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3ed5200-1710-4312-977a-436060037088.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that after the failed attempts, the attacker logged in and ran the
    preceding queries on the database. Query log files are convenient for pinpointing
    the actual intent of the attacker. In the upcoming chapters, we will look at numerous
    case study examples on various databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'On XAMPP, general query logs can be enabled by running the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a better way to log all queries in MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Firewall logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are plenty of firewalls you can encounter in a network infrastructure.
    Firewall logs can reveal a lot about an attack. I remember a case where a popular
    bank in Africa was siphoned off for $700,000, and the attackers were sitting inside
    the network for a long time before they executed the attack. After a thorough
    investigation to find the indicators of compromise and a root-cause analysis,
    firewall logs helped me out. I found that the checkpoint firewall logs had entries
    to a particular domain being contracted to by the planted backdoor. We ran a network-wide
    search on the firewall logs to find the first attempt to the domain and found
    out that the first attempt to the malicious attacker's site was at least three
    months before the date of the incident. However, since the computer making that
    connection was only connected to the internal network, we concluded that the attack
    was conducted by someone internally, which narrowed down the scope of our investigation
    to a handful of individuals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parsing firewall logs and driving analytics is a tough task for an investigator.
    Most of the intelligent firewalls today have their analytics engine. However,
    if you need a third-party log parser for firewall logs, **Sawmill** ([http://www.sawmill.net](http://www.sawmill.net))
    would be my choice, as it supports a variety of log formats. Here is an example
    of Palo Alto Network Firewall logs parsed by Sawmill:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac6eba7f-d311-4370-a50d-2f4da238416c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have a variety of options with the parsed logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d636c0d-db11-49b4-b192-22e9ead66907.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have options that include User Summary, Host Summary, Source IPs, Users,
    and Content. We can also view visited pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e627bb2-44d7-45e3-93bd-49c70e59388a.png)'
  prefs: []
  type: TYPE_IMG
- en: Sawmill is a paid product. However, you can download and use the trial version
    free for 30 days. In the upcoming chapters, we will have a look at creating our
    parsers. However, to conduct a network forensic operation professionally, Sawmill
    is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: The Sawmill installation guide can be found at [http://www.sawmill.net/cgi-bin/sawmill8/docs/sawmill.cgi?dp+docs.technical_manual.installation+webvars.username+samples+webvars.password+sawmill](http://www.sawmill.net/cgi-bin/sawmill8/docs/sawmill.cgi?dp+docs.technical_manual.installation+webvars.username+samples+webvars.password+sawmill).
  prefs: []
  type: TYPE_NORMAL
- en: Proxy logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There can be various proxy servers in a network. One that stands out and is
    used widely is the **Squid proxy server**. According to the Squid website, it
    is a caching proxy that greatly reduces bandwidth and response timings in a network
    set up for services such as HTTP, HTTPS, and FTP. We will again use Sawmill to
    investigate proxy logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0702c900-30d9-441b-8046-745cedcd3fa9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have a variety of data, demonstrating the User Summary, Traffic,
    Page views, number of Sessions, and a variety of other useful data, such as Top
    level domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f44aa63-ded6-421d-90f3-7019a3ca0d9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also view the most frequently browsed URLs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d3e35c1-3da2-4623-9dfc-e865a422af18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can filter logs on by date by clicking on Date Picker, selecting Relative
    date, and choosing a time frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9115fb6-c105-42f9-94c6-ae47e2ec0121.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Consider a scenario where you want to view the logs of a particular user on
    a particular URL. You can make use of the Zoom feature by enabling the following
    highlighted filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61fb2154-3cf7-4f59-b7ce-730045e6147a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, the blue circle with a black ring around it is
    the Zoom button, and a leading blue dot generally denotes a zoomed item. In the
    preceding screen, we can see two blue dots: one at the `bbabatop` user and another
    at the `geospecies.org` website. All we need to do next is press the Filter button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d2b9aae-e269-4b2f-9373-b595efcfecb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the selected entries are now added as a filter and we need
    to save and apply to filter the entries out. An example filter on `babayomi` user
    for `yahoo.com` and while selecting Hours of day yields the following set of results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc2e10f4-ab80-48c5-889d-3bebc541aa86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also view Date and time, Years, Months, and Days by building such filters,
    which becomes instrumental during an investigation. Consider a scenario where
    a malicious application is trying to download a payload from a website. In such
    cases, you will easily be able to track the first attempt for the download, thus
    finding the **Indicators of Compromise** (**IOCs**) and the first system that
    was compromised:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fe0efed-f396-46e9-8515-0218f0baa641.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first and only attempt to `windowsupdate.com` was made on September 8,
    2006\. Clicking on Hours of day, we get the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/add4fe67-b2ce-4a3a-86f0-73a2d7b6b40b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Usernames, we will be able to get the users who requested this
    website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac2f55cf-83f4-4743-b299-cffecc8169da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the `nobody` and `femiadedeji` users made hits to the target
    domain. By building a filter on the `femiadedeji` user and the domain, we can
    select the Pages/directories to reveal the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/694dfbf5-e12b-41d6-b83f-975cc1a5eadd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now confirm that the `femiadedeji` user accessed `windowsupdate.com`
    and downloaded files of the `.cab` and `.txt` types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0c01380-a6cb-4294-a2ca-b40afeb33316.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we click on Usage Detail, we get the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2614aac6-b870-4317-952f-e69b3d29346f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we now have plenty of detail related to the events.
  prefs: []
  type: TYPE_NORMAL
- en: IDS logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s make use of Sawmill again, this time to parse snort logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d67ccfc-27fb-4e16-99f7-021da20451a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will select Create New Profile, which will result in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40d55218-88de-4616-91df-badcee8527df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select `Snort logs` and then press Next, which will show us the log-detection
    process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bba69d87-6f99-4e41-87ae-3f165436160e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On successfully detecting the log type, we will get the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32e6e489-5c44-4862-b454-4842a1d9a705.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Sourcefire Snort 2 format and press Next. On the next screen, we will
    be presented with a message that states that the logs are in Syslog format. Now
    choose a name for the profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98993582-1409-4282-8bea-abea8c29b614.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Finish button to start to create a database for the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e624288-90ec-4e5b-a0cb-97aa68387306.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On selecting Process Data & View Reports, the following process gets initiated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65bba61e-d36a-428d-9e89-d30a7779c003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the process is complete, we will be presented with the reports. Since
    we have worked extensively on the filters, I leave it as an exercise for you to
    perform on your own. However, before we move on, let''s discuss the Single-page
    Summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f65c80ca-2f65-41ba-84a5-3a1021dc58aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A Single-page Summary presenting most of the stats. We can see that we have
    the destination and source IP as the filter, and Sawmill has generated a summary
    for us to view. Interestingly, we have the following details in summary as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c63e0e8-76c4-4e23-bd39-44faa7c1550a.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we filtered out a `Network Trojan` alert with ease. Let's now
    look at a case study and make use of the knowledge learned from the preceding
    log-analysis exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – hack attempts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider a simple scenario where you are tasked with finding the origin of
    incoming attacks on a particular web application. The only thing you know about
    the network is that the application is internally hosted and is not connected
    to the outside world. There is a caching proxy running in the network as well.
    As the forensic investigator, the first thing you requested from the client is
    the logs of the application server, which you started to investigate in Apache
    Logs Viewer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e1405ef-ac52-4516-9404-f7f82c2fefe7.png)'
  prefs: []
  type: TYPE_IMG
- en: Apache log viewer
  prefs: []
  type: TYPE_NORMAL
- en: 'We quickly deduce that there are two IP addresses of supreme interest, `192.168.174.157`
    and `192.168.174.150`, and since the User-Agent contains `sqlmap`, it''s a SQL
    injection attempt. We can also see the requests that contain buzzwords, such as `WHERE` and `SELECT`,
    which are typically used in SQL injections on a vulnerable parameter. Upon further
    investigation and talking to the client, we see that the `192.168.174.150` IP
    is a caching proxy server. Therefore, we request the client for the proxy server
    logs, which can be investigated in the Sawmill software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7c5104a-1d49-4ef8-a6aa-ed416636d05a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The attacker has made use of the proxy server to forward all the traffic to
    the target application. Making use of the proxy logs, we will be able to pinpoint
    the original IP that made the requests. Keep the URL as `192.168.174.142` as the
    filter and browsing to the source, which gives us the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45343091-8ff3-48eb-9cbf-9a23d7b2900f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, we get the `192.168.174.157` IP address as the culprit. At this point,
    we are sure that the attack originated internally from this IP, so let''s investigate
    this IP address. Having gone through the server, we see the Apache server running
    on it and hosting a vulnerable app, which is `php-utility-belt`. We are pretty
    sure that someone obtained access to this machine through here. Let''s manually
    investigate the logs from Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48899536-64f1-4f54-ac61-29cdee1c4772.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that only one IP address accessed the application on this server''s
    Apache, which is `192.168.174.152`. Let''s open Wireshark to see whether there
    are still any packets traveling to and from this IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2681a90-953b-44fd-a04b-6910c83280e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Yes, there's plenty going around on port `4433` and `4444`. This confirms that
    the user of `192.168.174.152` is the culprit, as the system is not connected to
    the internet and has only internal access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this case study, we saw how logs could be very helpful during the
    investigation process and reveal a lot about the incoming attacks. Creating a
    root-cause analysis gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70217c38-cf76-497d-bdf4-ed20f1c2dbba.png)'
  prefs: []
  type: TYPE_IMG
- en: The attacker attacked the PHP utility belt application that was running on the `192.168.174.157`
    system and gained access to the machine. Since the compromised system used the
    Squid proxy as a system-wide proxy, all the attacks to the application at the `192.168.174.142`
    server came through the proxy server at `192.168.174.150`. The Apache logs at
    `192.168.174.142` revealed `192.168.174.150`, and the Squid logs at `192.168.174.150`
    revealed `192.168.174.157`. Investigating the Apache logs on `192.168.174.157`
    finally revealed the attacker at `192.168.174.152`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We kicked off this chapter with an OSI model refresher, and since we covered
    basic network forensics scenarios in the previous chapter, we shifted our focus
    toward log-based analysis. We looked at a variety of log structures and learned
    about how we can parse them by making use of various types of software analyzers.
    We explored application-server logs, database logs, firewall logs, proxy server
    logs, and IDS logs. We also made use of the strategies learned in this chapter
    to solve the case study. We are now prepped with the basics of network forensics,
    and soon we'll dive into the advanced concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Questions and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enhance your network forensics skills on log-based evidence, try answering/solving
    the following exercises and problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Try replicating all the exercises for the chapter by downloading the network
    evidence from the chapter's GitHub page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try highlighter tool to extract relevant information from [https://www.fireeye.com/services/freeware/highlighter.html](https://www.fireeye.com/services/freeware/highlighter.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try developing a simple shell script to extract all the unique URLs from the
    Apache logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following resources for more information on the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating parsers**: [https://codehangar.io/smiple-log-and-file-processing-in-python/](https://codehangar.io/smiple-log-and-file-processing-in-python/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log analysis**: Refer to chapter *Log Analysis*, in the book *Cybersecurity
    - Attack and Defense Strategies* ([https://www.amazon.in/Cybersecurity-Defense-Strategies-Infrastructure-security-ebook/dp/B0751FTY5B](https://www.amazon.in/Cybersecurity-Defense-Strategies-Infrastructure-security-ebook/dp/B0751FTY5B))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
