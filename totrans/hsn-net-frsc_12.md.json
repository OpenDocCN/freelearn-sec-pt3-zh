["```\nairodump-ng wlan0mon --bssid 78:44:76:E7:B0:58 -c 11 -w viper\n\n```", "```\n#!/usr/bin/env python \n# Author: Nipun Jaswal\nfrom prettytable import PrettyTable\nimport operator\nimport subprocess \nimport os\nimport math\nimport re\nimport schedule\nimport time\ndef sniffer():\n\n  # iwlist command to scan all the Access Points\n  proc = subprocess.Popen('iwlist wlan0 scan | grep -oE \"(ESSID:|Address:|Channel:|Quality=).*\" 2>/dev/null', shell=True, stdout=subprocess.PIPE, ) \n  stdout_str = proc.communicate()[0]\n  stdout_list=stdout_str.split('\\n')\n\n  #Declaring Lists\n  network_name=[]\n  mac_address=[]\n  channel=[]\n  signal=[]\n  decibel=[]\n  distance=[]\n  frequency=[]\n\n  #Reading all the Lines\n  for line in stdout_list:\n      line=line.strip()\n      #Regex to Match ESSID Value\n      match=re.search('ESSID:\"(\\S+)\"',line) \n      if match: \n          network_name.append(match.group(1)) \n      #Regex to Match Channel Value\n      match=re.search('Channel:(\\S*)',line) \n      if match: \n            channel.append(match.group(1))\n           #Calculating Frequency\n           frequency.append(int(match.group(1))*5 + 2407)\n      #Regex to Match Address Value\n      match=re.search('Address:\\s(\\S+)',line)\n      if match:\n           mac_address.append(match.group(1))\n      #Regex to Match Signal Value\n      match=re.search('Signal level=(\\S+)',line)\n      if match:\n           signal.append(match.group(1))\n           # Sign Correctness\n           decibel.append(abs(int(match.group(1))))\n  i=0\n  x = PrettyTable()\n  x.field_names = [\"ESSID\", \"MAC Address\", \"Channel\", \"Signal\", \"Distance\",\"Frequency\",\"Decibel\"]\n  os.system(\"clear\")\n  while i < len(network_name):\n      # Free Space Path Loss (FSPL)\n      distance= 10 ** ((27.55 - (20 * math.log10(int(frequency[i]))) + int(decibel[i]))/20)\n      # Adding a Row to Pretty Table\n      x.add_row([network_name[i],mac_address[i],channel[i],int(signal[i]),str(float(distance))+ \" mtr\",int(frequency[i]),int(decibel[i])])\n      i=i+1\n  print x.get_string(sort_key=operator.itemgetter(4, 0), sortby=\"Signal\", reversesort=True)\n  i=0\n\n# Main Thread Starts\nschedule.every(5).seconds.do(sniffer)\nwhile 1:\n    schedule.run_pending()\n    time.sleep(1)\n```", "```\nDistance From the Access Point in Meters = 10 ^ ((27.55 - (20 * log10 (frequency)) +decibel)/20) \n```", "```\nFrequency = channel number * gap + frequency of first channel - gap \n```", "```\n= 11 * 5 + 2412 - 5 \n= 55+ 2407 = 2462 MHz \n```", "```\ndistance= 10 ^ ((27.55 - (20 * log10(2462)) + 56)/20) \ndistance= 6.11240259465 \n```"]