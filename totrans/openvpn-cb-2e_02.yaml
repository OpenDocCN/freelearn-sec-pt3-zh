- en: Chapter 2.  Client-server IP-only Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the public and private keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding IPv6 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `client-config-dir` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing - subnets on both sides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting the default gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting the IPv6 default gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an `ifconfig-pool` block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the status file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The management interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy-arp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes in this chapter will cover the most commonly used deployment model
    for OpenVPN: a single server with multiple remote clients capable of routing IP
    traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at several common routing configurations in addition to the
    use of the management interface at both the client and server side.
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe of this chapter will show how it is possible to avoid the use
    of network bridges for most practical use cases.
  prefs: []
  type: TYPE_NORMAL
- en: As a routed TUN-style setup is the most commonly used deployment model, some
    of the sample configuration files presented in this chapter will be reused throughout
    the rest of the book. In particular, the configuration files such as `basic-udp-server.conf`, `basic-udp-client.conf`, `basic-tcp-server.conf`,
    and `basic-tcp-client.conf` from the *Server-side routing* recipe will be reused
    often, as well as the Windows client configuration files `basic-udp-client.ovpn`
    and `basic-tcp-client.ovpn` from the *Using an ifconfig-pool block* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the public and private keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can set up a client/server VPN, we need to set up the public key infrastructure
    (PKI). The PKI comprises the certificate authority, the private keys, and the
    certificates (public keys) for both the client and server. We also need to generate
    a Diffie-Hellman parameter file, which is required for perfect forward secrecy.
  prefs: []
  type: TYPE_NORMAL
- en: To set up PKI, we make use of the `easy-rsa` scripts. These scripts were originally
    supplied with the OpenVPN distribution itself, but nowadays, they can also be
    downloaded and installed separately.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PKI needs to be set up on a trusted computer. This can be the same as the
    computer on which the OpenVPN server is run, but from a security point of view,
    it is best if the PKI is kept completely separate from the rest of the OpenVPN
    services. One option is to keep the PKI certificate authority (CA) key located
    on a separate external disk, which is attached only when required. Another option
    would be to keep the CA private key on a separate computer that is not hooked
    up to any network at all.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe was done on Linux, but can also be done on a Mac OS machine. On
    Windows, the commands are very similar as well. The Linux `easy-rsa` scripts are
    meant to be run from a bash-like shell, so make sure you are not running csh/tcsh
    (UNIX shells).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the directories for the PKI and copy over the `easy-rsa` distribution
    from your OpenVPN installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that there is no need to run these commands as the `root` user, provided
    that the user is allowed to create the above directory path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we set up the `vars` file. Create a file containing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `PKCS11_MODULE_PATH` and `PKCS11_PIN` entries are needed even
    if you are not using smart cards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also note that some `KEY_` variables are set to an empty value. This is required
    for generating certificates in a batch, as we shall see later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default `KEY_SIZE` of 2048 bits is sufficiently secure for the next few
    years. A larger key size (4096 bits) is possible, but the tradeoff is a performance
    penalty. We shall generate a 4096 bit CA private key, as performance is not an
    issue here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adjust the settings (`KEY_ORG`, `KEY_OU`, `KEY_EMAIL`) to reflect your organization.
    The meaning of these settings is explained in more details later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Source the `vars` file and generate the CA private key and certificate, using
    a 4096-bit modulus. Choose a strong password for the CA certificate. After that,
    simply press the *Enter* key every time the script asks for input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sample output is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00338.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, we build the server certificate. As we do not wish to include an e-mail
    address in every certificate, we now set the `KEY_EMAIL` variable to an empty
    value. When the script asks for input, press the *Enter* key. When the script
    asks for the CA private key (`ca.key`) password, enter the password for the CA
    certificate. Finally, when the script asks for a `[y/n]` answer, type `y`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first client certificate is generated in a batch. It is a very fast method
    for generating a client certificate, but it is not possible to set a password
    on the client''s private key file. It is still required to enter the `ca.key`
    password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sample output is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00339.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The second client certificate is generated with a password. Choose a strong
    password (but different from the CA certificate password!). The output is abbreviated
    for clarity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, build the Diffie-Hellman parameter file for the server:![How to do it...](img/image00340.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And finally, generate the `tls-auth` key file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `easy-rsa` scripts are a handy set of wrapper scripts around some of the `openssl
    ca` commands. The `openssl ca` commands are commonly used to set up a PKI using
    X509 certificates. The `build-dh` script is a wrapper for the `openssl dh` command.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `easy-rsa` scripts provide a full PKI setup, supporting different platforms
    and many settings. Some of these are outlined here.
  prefs: []
  type: TYPE_NORMAL
- en: Using the easy-rsa scripts on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use the `easy-rsa` scripts on Windows, a command window (`cmd.exe`) is required
    and the starting `./` needs to be removed from all the commands, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Some notes on the different variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following variables are set in the `vars` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`KEY_SIZE=2048`: This is the cipher strength for all private keys. The longer
    the key size is, the stronger the encryption. Unfortunately, it also makes the
    encryption process slower.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CA_EXPIRE=3650`: This gives the number of days the CA certificate is considered
    valid, thus translating to a period of 10 years. For a medium-secure setup, this
    is fine; however, if stronger security is required, this number needs to be lowered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KEY_EXPIRE=1000`: This gives the number of days for which the client of the
    server certificate is considered valid, thus translating to a period of almost
    3 years.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KEY_COUNTRY="US"`, `KEY_PROVINCE=`, `KEY_CITY=`, `KEY_ORG="Cookbook 2.4"`, `KEY_EMAIL=openvpn@example.com`:
    These variables are all used to form the certificate **Distinguished Name** (**DN**).
    None of them are required, but both OpenVPN and OpenSSL suggest using at least `KEY_COUNTRY`
    to indicate where a certificate was issued.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Chapter 4](part0048.xhtml#aid-1DOR01 "Chapter 4.  PKI, Certificates, and
    OpenSSL"), *PKI, Certificates, and OpenSSL*, for a lengthier introduction to the `easy-rsa`
    scripts and the `openssl` commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a connection in the client or server
    mode using certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. Set up the client and server certificates using the
    previous recipe. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.9 and the client was running Fedora 22 Linux and OpenVPN 2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `example2-2-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy over the public certificates and the server private key from the `/etc/openvpn/cookbook/keys`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that there is no need to run the preceding commands as user `root`, provided
    that write access to these directories has been given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `example2-2-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Transfer the files such as `ca.crt`, `client1.crt`, and `client1.key` to the
    client machine using a secure channel; for example, using the `scp` command:![How
    to do it...](img/image00341.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the connection is established, we can verify that it is working by pinging
    the server (notice the IP address):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the server starts, it configures the first available TUN interface with
    the IP address `10.200.0.1` and with a fake remote address of `10.200.0.2`. After
    that, the server listens on the UDP port `1194` for incoming connections.
  prefs: []
  type: TYPE_NORMAL
- en: The client connects to the server on this port. After the initial TLS handshake,
    using both the client and server certificates, the client is assigned the IP address
    `10.200.0.6` (or rather the mini-network `10.200.0.4` - `10.200.0.7`). The client
    configures its first available TUN interface using this information, after which
    the VPN is established.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the connection is established, you can query the `tun0` interface like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, look for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The IP address `10.200.0.5` is a placeholder address and can never be reached.
    Starting with OpenVPN 2.1, it has also become possible to assign linear addresses
    to the clients that allow you to have more clients in the same range of IP addresses.
    This will be explained in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first address is the VPN client address from a `/30` subnet, and the second
    address is the fake remote endpoint address. Each `/30` subnet has to start at
    a multiple of four, and the VPN client IP address is at the starting address plus
    two:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10.200.0.[0-3]`, the VPN IP is `10.200.0.1`. Normally, this block is for the
    OpenVPN server itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.200.0.[4-7]`, the client IP is `10.200.0.6`. Normally, this block is for
    the first client to connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10.200.0.[8-11]`, `[12-15]`, `[16-19]`, and so on are used for consecutive
    clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of the `/30` subnet for each address, this topology mode is known as **net30**.
    It is still the default topology mode, but this will change in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up server-side routing in client or
    server mode. With this setup, the OpenVPN client will be able to reach all the
    machines behind the OpenVPN server.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the previous recipe, this recipe contains extra settings that are
    often used in production environments including the use of `linear` addresses
    (`topology subnet`).
  prefs: []
  type: TYPE_NORMAL
- en: The configuration files used in this recipe are useful building blocks for other
    recipes throughout this book; therefore, they are named `basic-udp-server.conf`, `basic-udp-client.conf`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. Set up the client and server certificates using the
    previous recipe. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.9 and the client was running Fedora 20 Linux and OpenVPN 2.3.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00342.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `basic-udp-server.conf`. Note that in some Linux distributions,
    the group `nogroup` is used instead of `nobody`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy over the `tls-auth` secret key file from the `/etc/openvpn/cookbook/keys`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure IP-traffic forwarding is enabled on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `basic-udp-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Transfer the `tls-auth` secret key file, `ta.key`, to the client machine using
    a secure channel, such as `scp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a route to the server-side gateway, `gateway1`, so that all VPN traffic
    is sent back to the VPN server. In this recipe, we use a router that understands
    a Linux `ip route` like syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the VPN is established, verify that we are able to ping a machine on
    the remote server LAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The server starts and configures the first available TUN interface with the
    IP address `10.200.0.1`. With the directive `topology subnet`, the fake remote
    address is also 10.200.0.1\. After that, the server listens on the UDP port `1194`
    for incoming connections. For security reasons, the OpenVPN process switches to
    user and group `nobody`. Even if a remote attacker was able to compromise the
    OpenVPN process, the security breach would be contained to the user `nobody` instead
    of the user `root`. When the `user` and `group` directives are used, it is wise
    to add the following as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Otherwise, OpenVPN will not be able to restart itself correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another security measure is the use of the following on the server side (and
    `ta.key 1` on the client side):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This prevents the server from being overloaded by a so-called **Distributed
    Denial of Service** (**DDoS**) attack, as OpenVPN will just ignore those packets
    immediately if the HMAC is not correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following directive sets up a `keepalive` timer on both the client and
    the server side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Every 10 seconds, a packet is sent from the server to the client side and vice
    versa to ensure that the VPN tunnel is still up and running. If no reply is received
    after 60 seconds on the client side, the VPN connection is automatically restarted.
    On the server side, the timeout period is multiplied by two; hence the server
    will restart the VPN connection if no reply is received after 120 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the following directives are very commonly used in a production setup,
    where the OpenVPN process continues to run in the background (daemonizes itself)
    after the operator logs out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: All output of the OpenVPN process is appended to the log file, `/var/log/openvpn.log`.
    You can use the `tail -f` command to monitor the output of the OpenVPN process.
  prefs: []
  type: TYPE_NORMAL
- en: The client connects to the server. After the initial TLS handshake, using both
    the client and server certificates, the client is assigned the IP address `10.200.0.2`.
    The client configures its first available TUN interface using this information
    and updates its routing table so that traffic for the server-side Site B's LAN
    is tunneled over the VPN.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the example files used in this recipe are reused later on, it is useful to
    explain a bit more about the options used.
  prefs: []
  type: TYPE_NORMAL
- en: Linear addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the connection is established, you can query the `tun0` interface like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, look for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is caused by the `topology subnet` directive, which is something new in
    OpenVPN 2.1\. This directive tells OpenVPN to assign only a single IP address
    to each client. With OpenVPN 2.0, the minimum number of IP addresses per client
    is four (as we can see in the previous recipe).
  prefs: []
  type: TYPE_NORMAL
- en: Using the TCP protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous example, we chose the UDP protocol. The configuration files
    in this recipe can easily be converted to use the TCP protocol by changing the
    following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It should be changed to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This should be done in both the client and server configuration files. Save
    these files as `basic-tcp-server.conf` and `basic-tcp-client.conf` for future
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Server certificates and ns-cert-type server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the client side, the `remote-cert-tls server` directive is often used in
    combination with a server certificate that is built using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This is done in order to prevent man-in-the-middle attacks. The idea is that
    a client will refuse to connect to a server that does not have a special server
    certificate. By doing this, it is no longer possible for a malicious client to
    pose as a server. This option also supports certificates with explicit key usage
    and extended key usage, based on the RFC 3280 TLS rules.
  prefs: []
  type: TYPE_NORMAL
- en: Older versions of OpenVPN used the `ns-cert-type server` directive. This option
    is still supported, but it will be deprecated in a future version of OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: Masquerading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, the gateway on the server-side LAN is configured with an extra
    route for the VPN traffic. Sometimes, this is not possible, in which case, the
    Linux `iptables` command can be used to set up masquerading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This instructs the Linux kernel to rewrite all traffic that is coming from the
    subnet `10.200.0.0/24` (that is, our OpenVPN subnet) and that is leaving the Ethernet
    interface `eth0`. Each of these packets has its source address rewritten so that
    it appears as if it's coming from the OpenVPN server itself and not from the OpenVPN
    client. The `iptables` module keeps track of these rewritten packets so that when
    a return packet is received, the reverse is done and the packets are forwarded
    back to the OpenVPN client again. This is an easy method to enable routing to
    work, but there is a drawback when many clients are used, as it is no longer possible
    to distinguish traffic on Site B's LAN if it is coming from the OpenVPN server
    itself, from client1 via the VPN tunnel, or from clientN via the VPN tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Adding IPv6 support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Support for IPv6 addresses is relatively new in OpenVPN. As IPv6 addresses are
    now being used more and more by companies and Internet Service Providers, this
    recipe provides a setup for using IPv6 for tunnel endpoints as well as using it
    inside the tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is a continuation of the previous one. Install OpenVPN 2.3.9 or
    higher on two computers. Make sure the computers are connected over a network.
    Set up the client and server certificates using the previous recipe. For this
    recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9 and the
    client was running Fedora 20 Linux and OpenVPN 2.3.9\. Keep the configuration
    file, `basic-udp-server.conf`, from the previous recipe at hand as well as the
    client configuration file, `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the server configuration file, `basic-udp-server.conf`, by adding a
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `example2-4-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client using the configuration file from the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output showing that OpenVPN has configured an IPv6 address is shown in boldface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that we can reach the server using the `ping6` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPv6 support in OpenVPN works almost exactly like IPv4\. The addressing format
    is different and most options need an extra `-ipv6` suffix.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a couple of useful tricks to keep in mind when using client configuration
    files. Some of these tricks are explained here.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 endpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the server `openvpnserver.example.com` resolves to an IPv6 address and the
    client has a valid IPv6 address, then the connection can be automatically established
    using IPv6\. This is achieved by changing the `proto udp` line in both client
    and server configurations to `proto udp6`. It is then also possible to specify
    an IPv6 address for the server, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note that even with `proto udp6` in the server configuration file, IPv4 clients
    can still connect.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6-only setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even with OpenVPN 2.4, it is not yet possible to set up an IPv6-only VPN. You
    must always supply an (bogus) IPv4 address range for the VPN IP space. However,
    with OpenVPN 2.4, it is possible to set up an OpenVPN server that will accept
    requests only from IPv6-enabled clients. A new flag for the `bind` directive was
    added for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Using client-config-dir files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a setup where a single server can handle many clients, it is sometimes necessary
    to set per-client options that overrule the global options. The `client-config-dir`
    option is very useful for this. It allows the administrator to assign a specific
    IP address to a client; to push specific options, such as compression and DNS
    server, to a client; or to temporarily disable a client altogether.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is a continuation of the previous one. Install OpenVPN 2.3.9 or
    higher on two computers. Make sure the computers are connected over a network.
    Set up the client and server certificates using the previous recipe. For this
    recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9 and the
    client was running Fedora 20 Linux and OpenVPN 2.3.9\. Keep the server configuration
    file, `basic-udp-server.conf`, at hand along with the client configuration file, `basic-udp-client.conf`,
    from the *Server-side routing* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the server configuration file, `basic-udp-server.conf`, by adding a
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `example2-5-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the directory for the `client-config` files and place a file in
    there with the name of the client certificate. This file needs to contain a single
    line with the IP address for the client listed twice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This name can be retrieved from the client certificate file using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client using the configuration file from the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a client connects to the server with its certificate and with the certificate's
    common name `client1`, the OpenVPN server checks whether there is a corresponding
    client configuration file (also known as a CCD file) in the `client-config-dir`
    directory. If it exists, it is read in as an extra set of options for that particular
    client. In this recipe, we use it to assign a specific IP address to a client
    (although there are more flexible ways to do that). The client is now always assigned
    the IP address `10.200.0.7`.
  prefs: []
  type: TYPE_NORMAL
- en: The client configuration file contains a single line, `ifconfig-push 10.200.0.7
    10.200.0.`7, which instructs the OpenVPN server to push the client IP address `10.200.0.7`
    to this particular client. The IP address needs to be listed twice, which is mostly
    due to the legacy of `topology net30` mode.
  prefs: []
  type: TYPE_NORMAL
- en: In this mode, which is still the default in OpenVPN 2.3, a remote endpoint address
    is always needed and it needs to be within a /30 network range of the client's
    VPN IP address. In `topology subnet` mode, it suffices to list the client's VPN
    IP address twice, or to list the client's VPN IP address followed by a netmask.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a couple of useful tricks to keep in mind when using client configuration
    files. Some of these tricks are explained here.
  prefs: []
  type: TYPE_NORMAL
- en: The default configuration file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the following conditions are met, then the `DEFAULT` file is read and processed
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: A `client-config-dir` directive is specified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no matching client file for the client's certificate in that directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A file called `DEFAULT` does exist in that directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that this name is case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Troubleshooting configuration problems with CCD files is a recurring topic
    on the OpenVPN mailing lists. The most common configuration errors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Always specify the full path in the `client-config-dir` directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the directory is accessible and the CCD file, is readable to the user
    which is used to run OpenVPN (`nobody` or `openvpn` in most cases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that the right filename is used for the CCD file, without any extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options allowed in a client-config-dir file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following configuration options are allowed in a CCD file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`push`: This option is used for pushing DNS servers, WINS servers, routes,
    and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push-reset`: This option is used to overrule global push options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iroute`: This option is used for routing client subnets to the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ifconfig-push`: This option is used for assigning a specific IP address, as
    done in this recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disable`: This option is used for temporarily disabling a client altogether'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: This option is used for including another configuration file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing - subnets on both sides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up server-side and client-side routing
    in client/server mode. With this setup, the OpenVPN client will be able to reach
    all the machines behind the OpenVPN server, and the server will be able to reach
    all the machines behind the client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 20 Linux and OpenVPN
    2.3.9\. Keep the server configuration file, `basic-udp-server.conf`, handy along
    with the client configuration file, `basic-udp-client.conf`, from the *Server-side
    routing* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the server configuration file, `basic-udp-server.conf`, by adding these
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `example2-6-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the directory for the client configuration files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place a file in this directory with the name of the client certificate. This
    file will contain a single line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The name of the client certificate can be retrieved from the client certificate
    file using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Thus, for this recipe, the client configuration file needs to be named `client1`,
    without an extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the VPN is established, we need to set up routing on both sides. Enable
    the IP traffic forwarding feature on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a route to LAN B''s Gateway to point to the OpenVPN server itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `10.198.1.1` is the LAN IP address of the OpenVPN server used in this
    recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now set up routing on the client side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And similarly, add a route for the LAN A Gateway:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `192.168.4.5` is the LAN IP address of the OpenVPN client used in this
    recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we verify that we can ping a machine on the remote server LAN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We verify the same vice versa:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a client connects to the server with its certificate and with the certificate''s
    common name, `client1`, the OpenVPN server reads the client configuration file
    (also known as a CCD file) in the `client-config-dir` directory. The following
    directive in this file tells the OpenVPN server that the subnet `192.168.4.0/24`
    is reachable through the client `client1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This directive has nothing to do with a kernel routing table and is only used
    internally by the OpenVPN server process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following server directive is used by OpenVPN to configure the routing
    table of the operating system so that all of the traffic intended for the subnet
    `192.168.4.0/24` is forwarded to the interface with the IP address `10.200.0.1`,
    which is the VPN IP of the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: With the appropriate routing set up on both ends, site-to-site routing is now
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When routing client-side traffic to and from multiple clients, there are several
    caveats to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: Masquerading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could have used masquerading on both ends as well, but with multiple clients
    it becomes very hard to keep track of the network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Client-to-client subnet routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If another VPN client needs to reach the subnet `192.168.4.0/24` behind client `client1`,
    the server configuration file needs to be extended with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This instructs all clients that subnet `192.168.4.0/24` is reachable through
    the VPN tunnel, except for client `client1`. The client `client1` itself is excluded
    due to the matching `iroute` entry.
  prefs: []
  type: TYPE_NORMAL
- en: No route statements in a CCD file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you cannot use the route directive inside a CCD file. This is a long-standing
    missing feature of OpenVPN. It is possible to achieve similar behavior using a
    `learn-address` script, as we will learn in [Chapter 5](part0060.xhtml#aid-1P71O1
    "Chapter 5. Scripting and Plugins"), *Scripting and Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Complete site-to-site setup* recipe from [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1.  Point-to-Point Networks"), *Point-to-Point Networks*, where it is
    explained how to connect two remote LANs via a VPN tunnel using a point-to-point
    setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using a learn-address script* recipe from [Chapter 5](part0060.xhtml#aid-1P71O1
    "Chapter 5. Scripting and Plugins"), *Scripting and Plugins*, where it is explained
    how to use a `learn-address` script to dynamically set and remove server-side
    routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting the default gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very common use of a VPN is to route all of the traffic over a secure tunnel.
    This allows one to safely access a network or even the Internet itself from within
    a hostile environment (for example, a poorly protected, but properly trojaned
    Internet cafÃ©teria).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up OpenVPN to do exactly this. This recipe is very
    similar to the *Server-side routing* recipe, but there are some pitfalls when
    redirecting all of the traffic over a VPN tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 20 Linux and OpenVPN
    2.3.9\. Keep the server configuration file, `basic-udp-server.conf`, at hand along
    with the client configuration file, `basic-udp-client.conf`, from the *Server-side
    routing* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `basic-udp-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example2-7-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In another server terminal, enable IP-traffic forwarding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will observe something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00344.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After the VPN is established, verify that all of the traffic is going over the
    tunnel:![How to do it...](img/image00345.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first address in the `traceroute` output is the address of the OpenVPN server,
    hence all of the traffic is routed over the tunnel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the client connects to the OpenVPN server, a special redirect statement
    is pushed out by the server to the OpenVPN client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration option `def1` tells the OpenVPN client to add three routes
    to the client operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The first route is an explicit route from the client to the OpenVPN server via
    the LAN interface. This route is needed as otherwise all the traffic for the OpenVPN
    server itself would go through the tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: The other two routes are a clever trick to overrule the default route so that
    all of the traffic is sent through the tunnel instead of to the default LAN gateway.
    The existing default route to the LAN gateway is not deleted due to the `def1`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many parameters and flags related to the `redirect-gateway` directive.
    A subset of these parameters is listed here as well as some other special use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Redirect-gateway parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Originally, OpenVPN supported only the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is used to delete the original default route and replace it with a route
    to the OpenVPN server. This may seem like a clean solution, but in some cases,
    OpenVPN was unable to determine the existing default route. This often happened
    to clients connecting through mobile connections. This also used to create routing
    lockups, where all of the traffic was routed through the tunnel, including the
    packets sent by the OpenVPN client itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the current version of OpenVPN, there are several flags for the `redirect-gateway`
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '`local`: This flag tells OpenVPN to not set a direct route from the client
    to the server. It is useful only if the client and server are in the same LAN,
    such as when securing wireless networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block-local`: This flag instructs OpenVPN to block all of the network access
    to the LAN after the VPN tunnel is established. This is achieved by routing all
    of the LAN traffic into the tunnel itself, except for the traffic to the OpenVPN
    server itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bypass-dhcp`: This flag adds a direct route to the local DHCP server. If the
    local DHCP server is on a separate subnet, this will ensure that the DHCP addresses
    assigned to the non-VPN interfaces will continue to be refreshed. This option
    is picked up automatically by a Windows client. On other operating systems, a
    plugin or script is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bypass-dns`: This flag adds a direct route to the local DNS server. In large-scale
    networks, the DNS server is often not found on the local subnet that the client
    is connected to. If the route to this DNS server is altered to go through the
    VPN tunnel after the client has connected, this will cause, at the very least,
    a serious performance penalty. More likely, the entire DNS server will become
    unreachable. It is picked up by a Windows client automatically and requires a
    plugin or script on other operating systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!ipv4`: This flag was added in OpenVPN 2.4 and it instructs OpenVPN to not
    redirect any IPv4 traffic over the VPN tunnel. It is useful only in combination
    with the flag `ipv6`. We will go into detail more in the next recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipv6`: This flag was added in OpenVPN 2.4 and it instructs OpenVPN to also
    redirect all IPv6 traffic over the VPN tunnel. We will go into more detail in
    the next recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The redirect-private option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apart from the `redirect-gateway` directive, OpenVPN has a second, comparatively
    less well-known, option called `redirect-private`. This option takes the same
    parameters as the `redirect-gateway` directive, but it instructs OpenVPN to make
    no changes to the default routes at all. It is used most often in combination
    with the `bypass-dhcp`, `bypass-dns`, `ipv6`, and `block-local` flags.
  prefs: []
  type: TYPE_NORMAL
- en: Split tunneling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In some cases, the `redirect-gateway` parameter is a bit too restrictive. You
    might want to add a few routes to local networks and route all other traffic over
    the VPN tunnel. The OpenVPN `route` directive has a few special parameters for
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`net_gateway`: This is a special gateway representing the LAN gateway address
    that OpenVPN determined when starting. For example, to add a direct route to the
    LAN `192.168.4.0`/`24`, you would add the following to the client configuration
    file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`vpn_gateway`: This is a special gateway representing the VPN gateway address.
    If you want to add a route that explicitly sends traffic for a particular subnet
    over the VPN tunnel, overruling any local routes, you would add the following
    option:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Server-side routing* recipe, where the basic steps of setting up server-side
    routing is explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting the IPv6 default gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advent of IPv6 networks, it is becoming increasingly important to be
    able to set up a VPN that will secure both IPv4 and IPv6 traffic. If only IPv4
    traffic is secured over a VPN tunnel, then it is still possible for traffic to
    leak out over IPv6\. In this recipe, we will set up OpenVPN to secure all IPv6
    traffic as well. Support for this was added in OpenVPN 2.4.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.4 or higher on two computers. Make sure the computers are connected
    over a network. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.4 and the client was running Fedora 20 Linux and OpenVPN 2.4\. For
    the server, keep the IPv6 configuration file, `example2-4-server.conf`, from the *Adding
    IPv6 support* recipe at hand. For the client, keep the configuration file, `basic-udp-client.conf`,
    from the *Server-side routing* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `example2-4-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example2-8-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In another server terminal, enable IP-traffic forwarding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the client connects to the OpenVPN server, a special redirect statement
    is pushed out by the server to the OpenVPN client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration flag `ipv6` tells the OpenVPN client to redirect all of the
    IPv6 traffic over the tunnel, by adding three routes to the client operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: This effectively redirects all of the IPv6 traffic over the VPN tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: The second flag `!ipv4`, tells the OpenVPN client to not redirect IPv4 traffic.
    This was added to this example to demonstrate that it is also possible to redirect
    IPv6 traffic only.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to achieve the same behavior by adding the following lines to
    the server configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'This is supported in OpenVPN 2.3 as well. However, there is a very important
    caveat to this: if the IPv6 address of the server is in the same range as any
    of the preceding addresses, then this setup will fail, as all of the traffic for
    the preceding IPv6 networks will be redirected over the tunnel. To overcome this
    problem, the flag `ipv6` was introduced in OpenVPN 2.4.'
  prefs: []
  type: TYPE_NORMAL
- en: Using an ifconfig-pool block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use an `ifconfig-pool` block to separate regular VPN
    clients from administrative VPN clients. This makes it easier to set up different
    firewall rules for administrative users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the regular VPN client was running Windows 7 64
    bit and OpenVPN 2.3.11 and was assigned to the `192.168.200.0` network. The VPN
    client Admin was running Fedora 20 Linux and OpenVPN 2.3.9 and was on the `192.168.202.0`
    network. Keep the client configuration file, `basic-udp-client.conf`, from the *Server-side
    routing* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `example2-9-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The administrative VPN client will be assigned a special IP address using a
    client-configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the client VPN address is listed twice. This is not a typo; for more
    details on this, refer to the previous recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the `clients` directory needs to be world-readable, as the OpenVPN
    server process will run as user `nobody` after starting up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, start the Linux client using the configuration file from the earlier
    recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The IP address that is assigned to the administrative client is highlighted
    for clarity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a configuration file for the Windows client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then save it as `basic-udp-client.ovpn`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the use of the forward slash (`/`), which is easier to use than the backslash
    (`\`), as the backslash needs to be repeated twice each time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Transfer the `ca.crt`, `client2.crt`, and `client2.key` files along with the `tls-auth`
    secret key file, `ta.key`, to the Windows machine using a secure channel, such
    as `winscp` or the PuTTY `pscp` command-line tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Windows client using the OpenVPN GUI:![How to do it...](img/image00347.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that this client's private key file is protected using a password or
    passphrase. After both the clients are connected, we verify that they can ping
    each other and the server (assuming that no firewalls are blocking access).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the Admin Client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And on the regular client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A server configuration file normally uses the following directive to configure
    a range of IP addresses for the clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'This directive is internally expanded to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: So, by not using the `server` directive, but by specifying our own `ifconfig-pool`
    range, we can override this behavior. We then use a CCD file to assign an IP address
    to the administrative client, which falls outside of the `ifconfig-pool` range.
    By using the appropriate `route` and `push "route"` statements, we ensure that
    all clients are able to ping each other.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we also need to explicitly push the topology in this case, as this
    is no longer done automatically by the `server` directive.
  prefs: []
  type: TYPE_NORMAL
- en: There's more..
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many details to consider when setting up the default configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The OpenVPN GUI application on Windows always starts in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, `C:\Program Files(x86)\..`. when using the 32-bit version of OpenVPN on
    64-bit versions of Windows. Thus, the directory paths in the `basic-udp-client.ovpn`
    configuration file can be omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Client-to-client access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With this setup, the VPN clients can connect to each other even though we did
    not make use of the following directive in the server-side configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: This is possible due to the `route` and `push "route"` statements in the server
    configuration file. The advantage of not using `client-to-client` is that it is
    still possible to filter out unwanted traffic using `iptables` or another firewalling
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is no need for the administrative clients to connect to the regular
    VPN clients (or vice versa), then the netmask can be adjusted to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Now, the networks are completely separated.
  prefs: []
  type: TYPE_NORMAL
- en: Using the TCP protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we chose the UDP protocol. The client configuration file in
    this recipe can easily be converted to use TCP protocol by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Save this file as `basic-tcp-client.ovpn` for future use.
  prefs: []
  type: TYPE_NORMAL
- en: Using the status file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN offers several options to monitor the clients connected to a server.
    The most commonly used method is using a status file. This recipe will show how
    to use and read the OpenVPN's status file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe. This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9\. The first client was running Fedora 20 Linux and OpenVPN
    2.3.9\. The second client was running Windows 7 64 bit and OpenVPN 2.3.11\. For
    the Linux server, keep the server configuration file `basic-udp-server.conf` from
    the *Server-side routing* recipe at hand. For the Linux client, keep the client
    configuration file `basic-udp-client.conf` from the same recipe at hand. For the
    Windows client, keep the corresponding client configuration file, `basic-udp-client.ovpn`,
    from the previous recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `basic-udp-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example2-10-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, start the Linux client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the VPN is established, list the contents of the `openvpn.status` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A sample output is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00348.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Transfer the `ca.crt`, `client2.crt`, and `client2.key` files along with the `tls-auth`
    secret key file, `ta.key`, to the Windows machine using a secure channel, such
    as `winscp` or PuTTY's `pscp` command-line tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the Windows client on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that this client's private key file is protected using a password or
    passphrase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the contents of the status file again on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A sample output is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00349.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each time a client connects to the OpenVPN server, the status file is updated
    with the connection information. The **OpenVPN ** **CLIENT** **LIST** and **ROUTING **
    **TABLE** tables are the most interesting ones, as they provide the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Which clients are connected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From which IP address the clients are connecting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of bytes each client has received and transferred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time at which the client connected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, the routing table also shows which networks are routed to each
    client.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three things to keep in mind when using status files:'
  prefs: []
  type: TYPE_NORMAL
- en: Status parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `status` directive takes two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The filename of the status file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, the refresh frequency for updating the status file. The default
    value of 60 seconds should suffice for most situations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disconnecting clients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that when a client disconnects the status file, it is not updated immediately.
    OpenVPN first tries to reconnect to the client based on the `keepalive` parameters
    in the server configuration file. The server configuration file in this recipe
    uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: This tells the server that it will ping the client every 10 seconds. If it does
    not get a response after 60 seconds * 2, the connection is restarted. The OpenVPN
    server will double the value of the second argument. The server will also tell
    the client to ping every 10 seconds and to restart the connection after 60 seconds
    if it does not get any response.
  prefs: []
  type: TYPE_NORMAL
- en: Explicit-exit-notify
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the lesser-known options of OpenVPN is the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: This can be set on the client side so that when the client disconnects, it will
    send an explicit **OCC_EXIT** message to the server (if at all possible). This
    will speed up the removal of disconnected clients. The optional parameter N indicates
    the number of times the message will be sent. By default, only a single **OCC_EXIT**
    message is sent, which can cause problems as the UDP protocol does not guarantee
    the delivery of packets.
  prefs: []
  type: TYPE_NORMAL
- en: The management interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how an OpenVPN client is managed using the management interface
    from the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe. This recipe uses the PKI files created in the first recipe of this chapter.
    For this recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9\.
    The client was running Windows 7 64 bit and OpenVPN 2.3.10\. For the server, keep
    the server configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe at hand. For the Windows client, keep the corresponding client
    configuration file, `basic-udp-client.ovpn`, from the previous recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the default server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a configuration file for the Windows client by adding a line to the `basic-udp-client.ovpn`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example2-11.ovpn`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Transfer the `ca.crt`, `client2.crt`, and `client2.key` files along with the `tls-auth`
    secret key file, `ta.key`, to the Windows machine using a secure channel, such
    as `winscp` or the PuTTY `pscp` command-line tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The OpenVPN GUI does not support this particular configuration of the management
    interface. Therefore, we start the Windows client on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The OpenVPN client will now ask for a password for the management interface.
    Pick a good password. After that, it will ask for the private key passphrase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the VPN is established, we can connect from the server to the management
    interface of the OpenVPN client using the telnet program on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use *Ctrl* + *]* or quit to exit the `telnet` program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the OpenVPN client connects to the server, a special management interface
    is set up using the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The `tunnel` parameter to bind the management interface to the VPN tunnel itself.
    This is useful for testing purposes and some advanced client setups. On the server
    side, it is best to always specify `127.0.0.1` for the management IP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The port `23000` on which the management interface will be listening.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last parameter is the password file or the special keyword `stdin` to indicate
    that the management interface password will be specified when OpenVPN starts up.
    Note that this password is completely unrelated to the private key passphrases
    or any other user management passwords that OpenVPN uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the management interface comes up, the server operator can connect to
    it using telnet and can query the client. The client can type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: This effectively shuts itself down as if the user has stopped it! This shows
    how important it is to protect the management interface and its password.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The management interface can also be run on the OpenVPN server itself. In that
    case, it is possible to list the connected clients, disconnect them, or perform
    a variety of other OpenVPN administrative tasks.
  prefs: []
  type: TYPE_NORMAL
- en: It is expected that the management interface will become more important in future
    versions of OpenVPN, both on the client and the server side, as the preferred
    method for programmatically interacting with the OpenVPN software.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Management interface* recipe in [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*, explains the
    use of the server-side management interface in more detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy ARP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the `proxy-arp` feature of the Linux kernel to make
    the VPN clients appear as part of the server-side LAN. This eliminates the need
    to use bridging, which is desirable in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    For this recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9\.
    The client was running Windows 7 64 bit and OpenVPN 2.3.10\. For the server, keep
    the server configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe at hand. For the Windows client, keep the corresponding client
    configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server config file by adding the following lines to the `basic-udp-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example2-12-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `proxyarp-connect.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create the `proxyarp-disconnect.sh` script:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that both the scripts are executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, start the Windows client using the OpenVPN GUI:![How to do it...](img/image00351.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a client has successfully connected, the `arp` table on the OpenVPN server
    will have a new entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'From a machine on the server-side LAN, we can now ping the VPN client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Note that no special routing is required on Site B's LAN. The VPN client truly
    appears as being on the LAN itself.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `proxy-arp` feature is supported by most UNIX and Linux kernels. It is used
    most often for connecting dial-in clients to a LAN, and nowadays, also by ADSL
    and cable Internet providers. When the OpenVPN client connects, an IP address
    is borrowed from Site B's LAN range. This IP address is assigned to the OpenVPN
    client. At the same time, a special ARP entry is made on the OpenVPN server to
    tell the rest of the network that the OpenVPN server acts as a proxy for `10.198.1.130`.
    This means that when another machine on Site B's LAN wants to know where to find
    the host with `10.198.1.130`, then the OpenVPN server will respond (with its own
    MAC address).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `proxy-arp` setup has its own set of applications as well as challenges.
    Some of them are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: TAP-style networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `proxy-arp` feature can also be used in a TAP-style network. In combination
    with an external DHCP server, it provides almost the same functionality as that
    of an Ethernet bridging solution without the drawbacks of Ethernet bridging itself.
  prefs: []
  type: TYPE_NORMAL
- en: User nobody
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Note that in this example we did not use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: We did this because it would have prevented the  `proxyarp-*` scripts from working.
    In order to execute the `/sbin/arp` command, root privileges are required. Therefore,
    it is not possible to switch to user `nobody` after the OpenVPN server has started.
    Alternatively, one can configure `sudo` access to the `/sbin/arp` command to circumvent
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast traffic might not always work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sending broadcast traffic over a network where `proxy-arp` is used is tricky.
    For most purposes (for example, Windows Network Neighborhood browsing), `proxy-arp`
    will work. For some applications that require all the clients to be a member of
    a full broadcast domain, using `proxy-arp` might not suffice. In that case, Ethernet
    bridging is a better solution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Checking broadcast and non-IP traffic* recipe from [Chapter 3](part0038.xhtml#aid-147LC1
    "Chapter 3. Client-server Ethernet-style Networks"), *Client-server Ethernet-style
    Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
