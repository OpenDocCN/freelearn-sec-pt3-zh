- en: Windows Phone Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite the fact that Windows Phones are not so widely used nowadays, they may
    still be encountered during forensic investigations. These devices are the most
    affordable on the market, so understanding how to acquire, analyze, and decode
    data from Windows Phones is important. Locating and interpreting digital evidence
    present on these devices requires specialized knowledge of the Windows Phone operating
    system, and may not always be possible. Commercial forensic and open source tools
    provide limited support for acquiring user data from Windows devices. As Windows
    Phones do not occupy much of the mobile market space, most forensic practitioners
    are unfamiliar with the data formats, embedded databases that are used, and other
    artifacts that exist on the device. This chapter provides an overview of Windows
    Phone forensics, describing various methods of acquiring and examining data on
    Windows mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows Phone OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Mobile security model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Phone filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commercial forensic tool acquisition methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting data without the use of commercial tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key artifacts for examination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Phone OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Phone is a proprietary mobile operating system developed by Microsoft.
    It was launched as a successor to Windows Mobile, but it does not provide backward
    compatibility with the previous platform. Windows Phone was launched in October
    2010 with Windows Phone 7\. The version history of the Windows Phone operating
    system then continued with the release of Windows Phone 7.5, Windows Phone 7.8,
    Windows Phone 8.1, and Windows Phone 10.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the fact that Microsoft claims they have stopped developing this mobile
    operating system, excluding security patches, you are likely to face it as a mobile
    forensic examiner.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections will provide more details about Windows Phone, its features,
    and its underlying security model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Android and iOS devices, Windows Phone comes with a new interface, which
    uses so-called *tiles* for apps instead of icons, as shown in the following image.
    These tiles can be designed and updated by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30307387-c6e6-494b-bc37-7c137ded4400.png)'
  prefs: []
  type: TYPE_IMG
- en: The Windows Phone home screen
  prefs: []
  type: TYPE_NORMAL
- en: Similar to other mobile platforms, Windows Phone allows for the installation
    of third-party apps. These apps can be downloaded from the Windows Phone Marketplace,
    which is managed by Microsoft. When comparing the number of apps available for
    iOS and Android devices, Windows Phone pales in comparison. However, applications
    are available and you should expect to see them on Windows Phone devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows Phone introduced new features, making it more similar to other smartphones
    compared to Windows Mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cortana**: This is the personal assistant for the device. It was introduced
    in Windows 8.1 and is still present on Windows 10 devices. Cortana aids the user
    by fielding questions using Bing, setting reminders, sending texts, and essentially
    using all the functionality to provide the user with a better and easier experience.
    Everything that Cortana does leaves a trace on the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wallet**: This stores credit card accounts, boarding passes, tickets, coupons,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geofence and advanced location settings**: These provide the user with additional
    protection as the phone can detect when it is out of a trusted zone and may lock
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additional features**: These are features such as live tiles, enhanced colors,
    and quiet hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other common applications associated with Windows Phone include OneDrive (formerly
    SkyDrive), OneNote, and Office 365 synchronization. OneDrive provides the user
    with access to all of their documents and files from any device. OneNote is essentially
    the same, but it acts as a notebook or diary. Office 365 provides the user with
    constant access to their email, calendar, contacts, and more across multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of data synchronization across multiple devices makes our job
    as forensic examiners difficult. It is our job to determine how the evidence was
    placed on the device. Is it possible to definitively state how an artifact was
    placed on a device? To be honest, this depends. Nobody wants to hear this response,
    but a lot of factors must be considered. What is the app? What OS is running on
    the device? What is the artifact? For example, let's consider OneDrive. If the
    device contains documents from OneDrive, the original author should be contained
    within the metadata. This, together with examining whether or not the content
    was shared with the device, may provide a glimpse into how the artifact was created.
    However, when examining a calendar entry when Office 365 is in place, it may be
    impossible to state whether the user created the entry on their phone, PC, or
    laptop. The synchronization is instantaneous, and status flags stating where the
    artifact was created do not always exist. If this artifact is indeed the *smoking
    gun* of the investigation, you need to apply your skills to uncover other artifacts
    that support your findings. Digging deeper into the data is required. Now that
    we are aware of the details of Windows Phone and its features, let's have a look
    at its security model and see how it keeps the data secure.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 Mobile security model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The security model of Windows Phone is designed to make sure that the user data
    present on the device is safe and secure. The following sections provide a brief
    explanation of the concepts that Windows Phone security is built on.
  prefs: []
  type: TYPE_NORMAL
- en: Chambers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows Phone is heavily built on the principles of least privilege and isolation.
    This has been consistent since the inception of Windows Phone 7\. To achieve this,
    Windows Phone introduced the concept of **chambers**. Each chamber has an isolation
    boundary where processes can run. Depending on the security policy of a specific
    chamber, a process running in this chamber has the privilege of accessing the
    OS''s resources and capabilities ([https://www.msec.be/mobcom/ws2013/presentations/david_hernie.pdf](https://www.msec.be/mobcom/ws2013/presentations/david_hernie.pdf)).
    There are four types of security chambers. The following is a brief description
    of each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trusted Computing Base** (**TCB**): The processes here have unrestricted
    access to most Windows Phone resources. This chamber has privileges to modify
    policies and enforce the security model. The kernel runs in this chamber.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevated Rights Chamber** (**ERC**): This chamber is less privileged than
    the TCB chamber. It has privileges to access all resources except the security
    policy. This chamber is mainly used for services and user-mode drivers, which
    provide functionality intended for use by other applications on the phone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard Rights Chamber** (**SRC**): This is the default chamber for preinstalled
    applications, such as Microsoft Outlook Mobile 2010.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Least Privileged Chamber** (**LPC**): This is the default chamber for all
    the applications that are downloaded and installed through the Marketplace Hub
    (which is also known as the Windows Phone Marketplace).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will be looking at encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Phone 8 introduced BitLocker technology to encrypt all user data that
    is stored on the device via AES 128-bit encryption. The user can simply flip the
    switch to enable this feature, and all of their data residing on the internal
    storage of the device will be encrypted. In addition, the user can encrypt their
    SD card – assuming the device has one – and set a password or PIN on their device.
    Should all of these locks and the encryption be enabled, accessing the data on
    this device may be impossible, unless the password is recovered.
  prefs: []
  type: TYPE_NORMAL
- en: Capability-based model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Capabilities are defined as the resources on the phone (camera, location information,
    microphone, and more) associated with security, privacy, and cost. The LPC has
    a minimal set of access rights by default. However, this can be expanded by requesting
    more capabilities during the installation. Capabilities are granted during the
    app's installation and cannot be modified or elevated during runtime. For this
    reason, it is difficult to side-load applications or force custom boot code to
    the device to gain forensic access, as it is normally rejected prior to bootup.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install an app on a Windows Phone, you need to sign in to the Marketplace
    with a Windows Live ID. During installation, apps are required to ask the user
    for permission before using certain capabilities, an example of which is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6388ff6d-7573-4960-9835-8206c6a585b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows app requesting user permissions (https://i-msdn.sec.s-msft.com/dynimg/IC752370.png)
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the permission model in Android. This gives the user the
    freedom to learn about all the capabilities that an application has before installing
    the application. The list of all capabilities is included in the `WMAppManifest.xml`
    application manifest file, which can be accessed through Visual Studio or other
    methods that are defined at [https://docs.microsoft.com/en-us/previous-versions/windows/apps/ff769509(v=vs.105)](https://docs.microsoft.com/en-us/previous-versions/windows/apps/ff769509(v=vs.105)).
  prefs: []
  type: TYPE_NORMAL
- en: App sandboxing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apps in Windows Phone run in a sandboxed environment. This means every application
    on Windows Phone runs in its own chamber. Applications are isolated from each
    other and cannot access the data of other applications. If any app needs to save
    information to the device, it can do so using the isolated storage, which is restricted
    from access by other applications. Also, the third-party applications installed
    on Windows Phone cannot run in the background; that is, when the user switches
    to a different application, the previously used application is shut down (although
    the application state is preserved). This ensures that the application cannot
    perform activities such as communicating over the internet when the user is not
    using the application. These restrictions also make Windows Phone less susceptible
    to malware, but you should never assume that any device is safe. It is just more
    challenging for malware to function on these devices.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have had a look at the four types of security chambers and we now
    know that Windows Phone 8 uses BitLocker technology for encryption. We have learned
    about the different capabilities granted during the installation of an application
    and saw how every application is isolated from each other. Next, we'll look at
    an important aspect of Windows Phones, which is its filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Phone filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Windows Phone filesystem is more or less similar to the filesystems used
    in Windows 7, Windows 8, and Windows 10\. From the root directory, you can reach
    different files and folders that are available on this device. From a forensic
    perspective, the following are some of the folders that can yield valuable data.
    All the listed directories are located in the root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application data**: This directory contains data of applications on the phone,
    such as Outlook, Maps, and Internet Explorer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications**: This directory contains the apps installed by the user. The
    isolated storage, which is allocated or used by each app, is also located in this
    folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My Documents**: This directory holds different Office documents, such as
    Word, Excel, or PowerPoint files. The directory also includes configuration files
    and multimedia files, such as music or videos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: This directory contains files that are related to the Windows
    Phone operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The acquisition method used here will determine the amount of filesystem access
    that you have to the device. For example, a physical image may provide access
    to several partitions that can be recovered from the data dump. A Windows Phone
    10 device that contains 27 partitions can be seen in the following screenshot.
    Partitions 26 (MainOS) and 27 (Data) contain the relevant data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a01679b0-da6d-490a-bd0e-28a6a3ac4dda.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows Phone 10 partitions
  prefs: []
  type: TYPE_NORMAL
- en: While most artifacts will exist in the Data partition, it is always best practice
    to capture and analyze both when possible.
  prefs: []
  type: TYPE_NORMAL
- en: The MainOS partition in the preceding screenshot, partition 26, contains the
    system data from the Windows Phone. As in all Windows investigations, the system
    data contains artifacts relevant to investigations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, partition 27 contains the User or Data partition. Depending
    on the device, the partition numbers may vary. In our example, the Data partition
    is shown in the following screenshot as partition 27\. Here, the SMS, email, application
    data, contacts, call logs, and internet history were recovered using mobile forensic
    tools. These methods will be discussed later in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ab48656-e301-4baf-90a0-571f40175c3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows Phone 10 Data partition
  prefs: []
  type: TYPE_NORMAL
- en: Windows Phone also maintains the **Windows registry**, a database that stores
    environment variables on the operating system. The Windows registry is basically
    a directory that stores settings and options for the Microsoft operating system.
    Windows Phone is no different. When examining a Windows Phone, you will expect
    to see the `NTUSER.dat`, `SAM`, `SYSTEM`, `SOFTWARE`, `SECURITY`, and `DEFAULT`
    hives. While these hives may be unique to the phone, they can be examined just
    like traditional Windows registry hives.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed case investigation is included in a paper by Cynthia Murphy. This
    involves a criminal case of a home invasion and sexual assault and details the
    efforts of great minds in the forensic community to uncover artifacts that assisted
    in closing the investigation. Sometimes, the mobile device is the most important
    artifact pertaining to the case. For more information, please refer to [https://www.sans.org/reading-room/whitepapers/forensics/windows-phone-8-forensic-artifacts-35787](https://www.sans.org/reading-room/whitepapers/forensics/windows-phone-8-forensic-artifacts-35787).
    Now that we have looked at the file and folder structure, let's learn how to acquire
    data using this knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Data acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acquiring data from a Windows Phone is challenging for forensic examiners, as
    the physical, filesystem, and logical methods that were defined in previous chapters
    are not greatly supported. In addition to this, the phone may need to be at a
    specific battery charge state (%) in order for the commercial tool to recognize
    and acquire the device. This is often one of the most difficult steps in acquiring
    Windows Phones.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common techniques that's implemented by commercial tools attempting
    data acquisition is to install an application or agent on the device, which enables
    two-way communication for commands to be sent to the device in order to extract
    data. This could result in certain changes on the device; nevertheless, this is
    still forensically sound if the examiner follows standard protocols and has tested
    the validity of the tool being used. These protocols include proper testing to
    ensure no user data is changed (and if changed, documenting what occurred), validation
    of the method on a test device, and documenting all steps taken during the acquisition
    process. For this acquisition method to work, the app needs to be installed with
    the privileges of the SRC. This may require you to copy the manufacturer's DLLs,
    which have higher privileges, into the user app. This allows the app to access
    methods and resources that are usually limited to native apps. In addition to
    this, the device must be unlocked, or these methods may not work.
  prefs: []
  type: TYPE_NORMAL
- en: Most examiners rely on forensic tools and methods to acquire mobile devices.
    Again, these practices are not as supported for Windows Phones. Keep in mind that
    to deploy and run an app on Windows Phone, both the device and the developer must
    be registered and unlocked by Microsoft. This restriction can be bypassed by unlocking
    the device using a public jailbreak for Windows Phone 8 to 10 devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'For quite a long time, JTAG and chip-off acquisitions were the only options
    to acquire most Windows Phones. Everything changed in January 2015: Cellebrite implemented
    an acquisition module that allowed mobile forensic examiners to extract data at
    the physical level from most Lumia devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Later, the Windows Phone Internals project presented a way to unlock the bootloader
    of some Lumia devices, including 520, 521, 525, 620, 625, 720, 820, 920, 925,
    928, 1020, and 1320\. This made the physical acquisition of these devices possible.
    You can learn more about this project at [https://www.wpinternals.net/](https://www.wpinternals.net/).
    Now, we will look at some of the commercial tools that are used for acquisition
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Commercial forensic tool acquisition methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few commercial tools available that offer support for the acquisition
    of Windows Phone devices. Cellebrite UFED offers support to acquire Windows Phone
    devices using the physical, filesystem, and logical methods. To determine whether
    the device you are examining is supported by the tool, you can download and use
    the UFED Phone Detective mobile app, which is available for free both in App Store
    and Google Play:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c518b6b-1d90-4e67-9b2e-423447d8881a.png)'
  prefs: []
  type: TYPE_IMG
- en: Searching for supported Lumia devices
  prefs: []
  type: TYPE_NORMAL
- en: Some of these acquisition methods are more robust, obtain a full physical dump
    of the data, and can bypass some lock codes on specific devices. However, some
    device support includes simply extracting contacts and pictures from the device.
    It is important for the examiner to realize that specific steps must be taken,
    as directed by the tool. Acquiring these devices is not easy, and often, you will
    find that the tool will not be successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the tool seems to fail, attempt to acquire the device using the Smartphone/PDA
    option offered in UFED. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch UFED4PC and select Mobile Device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Browse Manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Smartphones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Windows device that you are attempting to acquire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try all the methods that are offered, starting with physical, filesystem, and logical (in
    that order, where possible):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8f9e1fd-4654-4dc2-a8a7-06834b499f67.png)'
  prefs: []
  type: TYPE_IMG
- en: Extraction methods
  prefs: []
  type: TYPE_NORMAL
- en: Follow all the remaining steps and try all offered acquisition methods until
    you're successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Cellebrite may alert you that the acquisition is not successful for several
    reasons. When this occurs, try every option to ensure you have exhausted the commercial
    options available. An example of an acquisition attempt in UFED4PC is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch UFED4PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your Make and Model for the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Physical, File System, or Logical acquisition method (offerings will
    vary, depending on the device model).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this example, only Logical acquisition was supported. Two methods are available.
    The first option uses a cable, while the second uses Bluetooth. In this example,
    a special UFED cable is required. I selected the UFED cable first, as Bluetooth
    requires that additional changes are made to the phone during pairing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/058b870d-c35c-4c72-b1c8-d1fe7c5ffad6.png)'
  prefs: []
  type: TYPE_IMG
- en: UFED4PC Logical extraction options
  prefs: []
  type: TYPE_NORMAL
- en: When attempting to acquire the device with USB cable 100, only multimedia files
    were accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, attempt the same acquisition, but select Bluetooth. Follow the instructions
    given to pair the device with the forensic workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86aa9cb4-5540-4ae2-b569-bbde218e48e4.png)'
  prefs: []
  type: TYPE_IMG
- en: UFED4PC extraction options (Bluetooth)
  prefs: []
  type: TYPE_NORMAL
- en: With this acquisition method, we were able to obtain contacts. Note that there
    are no methods offered to obtain SMS, MMS, Email, IM, Calendar, Call Logs, Apps
    Data, and others. It is suggested you repeat the generic methods listed in the
    previous screenshot using the Smartphone option in UFED4PC. So far, we have looked
    at some acquisition methods using commercial tools. Now, let's learn how to extract
    data without these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting data without the use of commercial tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, the physical acquisition of Windows Phone devices is possible
    only with advance methods, such as JTAG and chip-off. But thanks to the security
    researcher known as Heathcliff, it became possible to perform physical acquisition
    on limited phone models and operating system versions with his tool called **WPinternals**
    ([https://www.wpinternals.net](https://www.wpinternals.net)).
  prefs: []
  type: TYPE_NORMAL
- en: The tool supports the following models of Lumia phones: 520, 521, 525, 620,
    625, 720, 820, 920, 925, 928, 1020, and 1320.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for operating system versions, the following are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: 8.10.12393.890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.12397.895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.14219.341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.14226.359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.14234.375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.15116.125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.15148.160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.10512.1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.10536.1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.10549.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.10581.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.10586.11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.10586.36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is experimental and can result in bricking the device! Despite the
    fact that the percentage of bricked devices is relatively low, we recommend that
    you use it as the last option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step of the acquisition process will be downloading a Windows **Full
    Flash Update** (**FFU**) file and the emergency files for the phone model you
    are working with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff5e0e81-4983-4820-b428-b3f1b3d359fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloading FFU files
  prefs: []
  type: TYPE_NORMAL
- en: 'If the downloaded FFU contains an unsupported OS version, then WPinternals
    will download another FFU to get additional files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad900e87-1dea-44bb-b857-fbff8d783cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting additional files
  prefs: []
  type: TYPE_NORMAL
- en: 'During the unlocking process, the phone may reboot a couple of times, but this
    is a normal behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bd259e5-00c5-4a16-9ea6-0f7d0e02dcd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Scanning for flashing profile
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the profile has been found, the tool flashes the unlocked bootloader:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36b643c3-1685-4568-96bf-60c00b16d9d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Flashing unlocked bootloader
  prefs: []
  type: TYPE_NORMAL
- en: 'If the device has been flashed successfully, it''s put into Mass Storage Mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42157d86-6bf8-4568-9f3d-6c75b7914264.png)'
  prefs: []
  type: TYPE_IMG
- en: Mass Storage Mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the device can be easily imaged, for example, using FTK Imager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c68cc41-109e-4d66-9cf0-cae5447b6f84.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows Phone in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will learn how to extract data from SD cards.
  prefs: []
  type: TYPE_NORMAL
- en: SD card data extraction methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Phones may contain removable SD cards. These cards may be secured with
    a key that prevents the SD card from being removed and used, or accessed via other
    devices (phones, cameras, computers, and more). This is different from the key
    that is created if the user encrypts the SD card. Brute-force and dictionary attacks
    can be run on user-encrypted SD cards in an attempt to access the data. When examining
    a Windows Phone, it is best to research the device to see whether SD card security
    will be a factor when acquiring data from the device. If so, simply follow the
    preceding steps and acquire the SD card data through the phone during forensic
    extraction. Please refer to the following chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'For devices where the SD card can be removed, you have two scenarios to consider.
    If the device is on, should you acquire the phone and the SD card as is? If the
    device is off, should you remove the SD card and acquire the device using FTK
    Imager? The answer is, it depends. In forensics, we use this statement frequently,
    but it remains true. If you leave the device on, it must be isolated from the
    network to ensure that it is not remotely accessed and immediately acquired, or
    the battery will drain and, ultimately, the device may power down. If the device
    is off and you remove the SD card, you must ensure that the card remains tied
    to the device itself and is acquired both externally and internally to ensure
    all data is captured. In a normal situation, the following chart suggests the
    recommended steps to handle SD cards that are found in Windows Phones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a683ede6-7db3-46bc-8ebe-be72342bf9a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Most commercial forensic tools will offer to extract data from SD cards. Often,
    the phone extraction process will only extract data residing on the SD card. This
    is often the case when there is no support for a specific Windows Phone. If the
    SD card is not recognized by the tool and the data is not extracted, it is likely
    that the SD card has been encrypted by the user, and the password for the device
    is different from the password for the SD card. When this occurs, try to crack
    the passcode and reacquire the device. Note that cracking a passcode on an SD
    card may not always be possible, but it's worth a shot trying brute-force and
    dictionary attacks as you would on a standard hard drive or external device.
  prefs: []
  type: TYPE_NORMAL
- en: 'When acquiring an SD that has been removed from a Windows Phone, FTK Imager
    is a free and reliable option to create a forensically sound image that can be
    examined in a variety of tools. To create an SD card image, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the SD card from the device and make sure to document all identifiers
    on the card and the phone to ensure that they are not permanently separated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the SD card into a *write blocker* and insert this into your forensic
    workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch FTK Imager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select File and then Create Disk Image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Physical Drive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0ffba80-5198-4663-912b-95e2451d7974.png)'
  prefs: []
  type: TYPE_IMG
- en: FTK Imager – creating a disk image
  prefs: []
  type: TYPE_NORMAL
- en: Use the drop-down list to select the correct device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the make and size to ensure that you are acquiring the correct device.
  prefs: []
  type: TYPE_NORMAL
- en: Select Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Add and select the image type. For this example, Raw (dd) is going
    to be used as it is supported by most commercial and open source methods for analysis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/319b8ac8-354e-41c4-b157-bf1a92f66710.png)'
  prefs: []
  type: TYPE_IMG
- en: FTK Imager – selecting the image type
  prefs: []
  type: TYPE_NORMAL
- en: Enter the relevant case information and select Next. This can be skipped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the image destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a3360e3-c59a-4fe0-b0c8-94c51a73c683.png)'
  prefs: []
  type: TYPE_IMG
- en: FTK Imager – saving your image file
  prefs: []
  type: TYPE_NORMAL
- en: Select Finish and then select Start. It is recommended that you verify images
    after they are created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once complete, your results will be displayed. We will cover analyzing the SD
    card data in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Key artifacts for examination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to introduce you to the location of some of the
    most common Windows Phone forensic artifacts, including contacts, SMS, and call
    and internet history.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting contacts and SMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the contacts and incoming and outgoing short messages (SMS) in Windows
    Phone 7–10 are stored in the file named `store.vol`, which is present under the
    `\Application Data\Microsoft\Outlook\Stores\DeviceStore` (Windows 7) and `Users\WPCOMMSERVICES\APPDATA\Local\Unistore`
    (Windows 8-10) directories. An example of a Windows 10 `store.vol` file can be
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5ef37dd-b901-4512-b392-55589c92358d.png)'
  prefs: []
  type: TYPE_IMG
- en: The store.vol file in a Windows Phone
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's learn how to extract the call history.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting call history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Call history data can currently be extracted from the `Phone` file. It''s important
    to note that the file doesn''t have an extension and is located at `\Users\WPCOMMSERVICES\APPDATA\
    Local\UserData\`. Here is an example of a Windows 10 `Phone` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e0ffaf3-2aab-4097-865f-e3d3da9ff186.png)'
  prefs: []
  type: TYPE_IMG
- en: The Phone file in a Windows Phone
  prefs: []
  type: TYPE_NORMAL
- en: In a similar manner, we will be extracting internet history in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting internet history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Internet history can be extracted from the `WebCacheV01.dat` file located at `\Users\DefApps\APPDATA\Local\Microsoft\Windows\WebCache\`.
    Here is an example of a Windows 10 `WebCacheV01.dat` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7acde70a-82b6-48cf-9213-3780989c73dc.png)'
  prefs: []
  type: TYPE_IMG
- en: The WebCacheV01.dat file in a Windows Phone
  prefs: []
  type: TYPE_NORMAL
- en: 'These files can be examined manually, for example, with a hex viewer, or can
    be parsed automatically with mobile forensic tools. Here is the `WebCacheV01.dat`
    file being parsed with Magnet AXIOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/506a947f-0e7d-4352-b703-0a7359972ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: WebCacheV01.dat file parsed with Magnet AXIOM
  prefs: []
  type: TYPE_NORMAL
- en: With this, we've covered how to extract SMS, contacts, call, and internet history
    from a Windows Phone.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acquiring data from Windows Phone devices is challenging since they are secure,
    and commercial forensic tools and open source methods do not provide easy solutions
    for forensic examiners like you. Multiple tools, chip-off, JTAG, and the methods
    we defined in this book are some of the methods that provide access to user data
    on Windows Phone devices. Often, you will find that Windows Phone devices require
    multiple extraction methods to acquire accessible data. The biggest challenge
    is getting access to the device to acquire the data. Once the data is available,
    all the extracted information can be analyzed by you.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we covered the interface, important features, and the security
    model of the Windows Phone device. Then, we had a look at the different partitions
    and folder structure within the Windows filesystem. The Windows Phone registry
    is similar to the registry in the Microsoft operating system. We saw how to extract
    data with and without using commercial tools and looked at some common Windows
    Phone forensic artifacts. With this knowledge, you can now extract user data from
    a Windows Phone using multiple extraction methods.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will walk you through parsing third-party application files.
  prefs: []
  type: TYPE_NORMAL
