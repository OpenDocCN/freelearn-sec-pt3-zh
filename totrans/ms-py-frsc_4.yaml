- en: Chapter 4. Using Python for Network Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on the parts of the forensic investigation that
    are specific to the network layer. We will choose one of the most widely used
    Python packages for the purpose of manipulating and analyzing network traffic
    (**Scapy**) as well as a newly released open source framework by the U.S. Army
    Research Laboratory (**Dshell**). For both the toolkits, we have selected the
    examples of interesting evidence. This chapter will teach you the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to search for IOC in network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to extract files for further analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to monitor accessed files through **Server Message Block** (**SMB**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build your own port scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Dshell during an investigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dshell** is a Python-based network forensic analysis toolkit that is developed
    by the U.S. Army Research Laboratory and released as open source at the end of
    2014\. It can help in making the forensic investigations on the network layer
    a little easier. The toolkit comes with a large number of decoders that can be
    used out of the box and are very helpful. Some of these decoders are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dns**: Extracts and summarizes DNS queries/responses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reservedips**: Identifies the DNS resolutions that fall in the reserved IP
    space'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**large-flows**: Displays the netflows that have at least transferred 1MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rip-http**: Extracts the files from the HTTP traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**protocols**: Identifies non-standard protocols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**synrst**: Detects failed attempts to connect (SYN followed by a RST/ACK)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dshell can be installed in our lab environment by cloning the sources from GitHub
    at, [https://github.com/USArmyResearchLab/Dshell](https://github.com/USArmyResearchLab/Dshell)
    and running `install-ubuntu.py`. This script will automatically download the missing
    packages and build the executables that we will need afterwards. Dshell can be
    used against the pcap files that have been recorded during the incidents or as
    a result of an IDS alert. A **packet capture** (**pcap**) file is either created
    by libpcap (on Linux) or WinPcap (on Windows).
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will explain how an investigator can make use of
    Dshell by demonstrating the toolkit with real-world scenarios that are gathered
    from [http://malware-traffic-analysis.net](http://malware-traffic-analysis.net).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first example is a malicious ZIP file that a user has encountered through
    an email link. The user logged in to Gmail and clicked the download link in the
    mail. This can easily be seen with the web decoder of Dshell, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When looking at the previous traffic extract, the ZIP file could be the first
    Indicator of Compromise. Therefore, we should take a deeper look at it. The easiest
    way to do this is to rip the ZIP file out of the pcap file and compare its md5
    hash against the VirusTotal database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this simple case, our first guess was right as the downloaded ZIP file contains
    another executable that part of an infostealer malware kit, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Dshell during an investigation](img/2087_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another really good example is searching for the accessed files on a network
    share via the SMB protocol. This can be very helpful when trying to find out whether
    an attacker was able to access or even exfiltrate the data and—if successful—which
    data has been potentially leaked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the help of the **rip-smb-uploads** decoder, Dshell is also able to automatically
    extract all the uploaded files of the recorded pcap file. Another interesting
    example is searching for the IOC with the help of the snort rules, which can also
    be done by Dshell, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example we opened a potentially malicious Word document that we have
    received within a spam email. The Word document is trying to download the **Vawtrak**
    malware and thereby communicating over the **Tor** network. The snort rule we
    are using originates from Emerging Threats, (refer to [http://www.emergingthreats.net/](http://www.emergingthreats.net/)),
    and is searching for known SSL certificates for the **Tor2Web** service (a service
    to let users access **Tor Onion Services** without using the Tor Browser). Similar
    checks can be done using all available snort rules and can be very helpful if
    you are searching for a specific attack within the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an alternative to the shown pcap files, all the demonstrated examples can
    also be run against an active network connection with the help of the `–i interface_name`
    flag as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are generating the netflow data of an active connection.
    Dshell is purely written in Python, which makes it highly adaptable to all the
    needs of the forensic investigators and can also be used in a chain with other
    tools or predefined processes.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test this, you can download the sample files from [http://www.emergingthreats.net/](http://www.emergingthreats.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Scapy during an investigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another great Python-based tool to analyze and manipulate the network traffic
    is **Scapy**. According to the developer website, [http://www.secdev.org/projects/scapy/](http://www.secdev.org/projects/scapy/):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Scapy is a powerful interactive packet manipulation program. It is able to
    forge or decode packets of a wide number of protocols, send them on the wire,
    capture them, match requests and replies, and much more."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Scapy differs from the standard tools (and also from Dshell) by providing an
    investigator with the ability to write small Python scripts that can manipulate
    or analyze the network traffic—either in a recorded form or in real-time. Furthermore,
    Scapy has the ability to perform deep packet dissection, passive OS fingerprinting,
    or plotting via third-party tools, such as **GnuPlot**, as built-in features are
    already available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Python script, which is taken from *Grow Your Own Forensic Tools:
    A Taxonomy of Python Libraries Helpful for Forensic Analysis*, *SANS Institute
    InfoSec Reading Room*, is a very brief example of how powerful Scapy is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This script records the statistics about the geolocation of the IP address source
    and the destination of an ongoing network connection. After importing the Scapy
    package into our Python script, we call the sniff function and use a filter to
    detect only the IP packets. The last parameter in the sniff function is very important
    if you plan to run Scapy scripts for a long time. With the help of the store parameter,
    you can tell Scapy to not cache all the packages in RAM during the runtime and
    thus make the script faster and resource saving. The subsequent function looks
    up the geolocation of the source and destination IP address that is extracted
    from each packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example, we will illustrate how to build a very simple port scanner
    with the help of Scapy, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This small script is able to scan whole IP ranges for a given open port. If
    you are searching the web servers that are listening on port 80, you can use the
    script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use the **Address Resolution Protocol** (**ARP**) for a reconnaissance
    of the whole network range that our system is connected to. With the help of the
    following script, we get a nicely printed table with all the IP addresses that
    are online and also their corresponding MAC addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When executing the script, we will receive something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Scripts such as these two can be very useful if no port scanner is available
    on the system or if you want to chain a port scanner with the other Python-based
    scripts for your investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided an overview of the domains of network-based forensic investigations
    and the examples with Dshell and Scapy. We have demonstrated how to search for
    suspicious HTTP connections (such as file downloads) or how to search for leaked
    data through the SMB protocol with Dshell. In the second section, we created our
    own port scanner with the help of Scapy and used it to gather more information
    about the potentially compromised systems.
  prefs: []
  type: TYPE_NORMAL
- en: After we discussed the areas of forensic algorithms, Windows and Unix systems,
    as well as the network layer, the following chapter will deal with virtualized
    systems and hypervisors that are becoming an important part of every company.
  prefs: []
  type: TYPE_NORMAL
