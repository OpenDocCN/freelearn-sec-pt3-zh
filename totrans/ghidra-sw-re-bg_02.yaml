- en: '*Chapter 1*: Getting Started with Ghidra'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this introductory chapter, we will provide an overview of Ghidra in some
    respects. Before starting, it would be convenient to know how to acquire and install
    the program. This is obviously something simple and trivial if you want to install
    a release version of the program. But I guess you probably want to know this program
    in depth. In which case, I can tell you in advance that it is possible to compile
    the program by yourself from the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Since the source code of Ghidra is available and ready to be modified and extended,
    you will probably also be interested in knowing how it is structured, what kind
    of pieces of code exist, and so on. This is a great opportunity to discover the
    enormous possibilities that Ghidra offers us.
  prefs: []
  type: TYPE_NORMAL
- en: It is also interesting to review the main functionalities of Ghidra from the
    point of view of a reverse engineer. This will arouse your interest in this tool
    since it has its own peculiarities, and this is precisely the most interesting
    thing about Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: WikiLeaks Vault 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ghidra versus IDA and many other competitors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ghidra overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GitHub repository containing all the necessary code for this chapter can
    be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3qD1Atm](https://bit.ly/3qD1Atm)'
  prefs: []
  type: TYPE_NORMAL
- en: WikiLeaks Vault 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On March 7, 2017, WikiLeaks started to leak **Vault 7**, which became the biggest
    leak of confidential documents on the US **Central Intelligence Agency** (**CIA**).
    This leak included secret cyber-weapons and spying techniques divided into 24
    parts, named Year Zero, Dark Matter, Marble, Grasshopper, HIVE, Weeping Angel,
    Scribbles, Archimedes, AfterMidnight and Assassin, Athena, Pandemic, Cherry Blossom,
    Brutal Kangaroo, Elsa, OutlawCountry, BothanSpy, Highrise, UCL/Raytheon, Imperial,
    Dumbo, CouchPotato, ExpressLane, Angelfire, and Protego.
  prefs: []
  type: TYPE_NORMAL
- en: While Michael Vincent Hayden, the director of the CIA between 2006 and 2009
    and director of the NSA between 1999 and 2005, as the spokesperson, did not confirm
    or deny the authenticity of this enormous leak, some NSA intelligence officials
    anonymously did leak the material.
  prefs: []
  type: TYPE_NORMAL
- en: 'The existence of Ghidra was leaked in the first part of Vault 7: Year Zero.
    This first part consists of a huge leak of documents and files stolen from the
    CIA''s Center for Cyber Intelligence in Langley, Virginia. The leak''s content
    is about the CIA''s malware arsenal, zero-day weaponized exploits, and how Apple''s
    iPhone, Google''s Android, devices Microsoft''s Windows devices, and even Samsung
    TVs are turned into covert microphones.'
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra was referenced three times in this leak ([https://wikileaks.org/ciav7p1/cms/index.html](https://wikileaks.org/ciav7p1/cms/index.html)),
    showing things such as how to install it, a step-by-step tutorial (with screenshots)
    of how to perform a manual analysis of a 64-bit kernel cache by using Ghidra,
    and the latest Ghidra version available at the time, which was Ghidra 7.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: NSA release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As announced during RSA Conference 2019 in San Francisco, Rob Joyce, senior
    advisor for cybersecurity at NSA, explained the unique capabilities and features
    of Ghidra during a session called *Get your free NSA reverse engineering tool*,
    and Ghidra program binaries were also published.
  prefs: []
  type: TYPE_NORMAL
- en: 'During this session, some features were explained:'
  prefs: []
  type: TYPE_NORMAL
- en: Team collaboration on a single project feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The capabilities to extend and scale Ghidra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The generic processor model, also known as `SLEIGH`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The two working modes: interactive and non-GUI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The powerful analysis features of Ghidra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, on April 4, 2019, the NSA released the source code of Ghidra on GitHub
    ([https://github.com/NationalSecurityAgency/ghidra](https://github.com/NationalSecurityAgency/ghidra)),
    as well as on the Ghidra website, where you can download Ghidra release versions
    that are ready to use: [https://ghidra-sre.org](https://ghidra-sre.org). The first
    version of Ghidra that was available on this website was Ghidra 9.0\. Ghidra''s
    website is probably not available to visitors outside the US; if this is the case,
    you can access it by using a VPN or an online proxy such as HideMyAss ([https://www.hidemyass.com/](https://www.hidemyass.com/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately for the NSA, a few hours later, the first Ghidra vulnerability
    was published by Matthew Hickey, also known as `@hackerfantastic`, at 1:20 AM,
    March 6, 2019\. He said the following via Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra opens up JDWP in debug mode listening on port 18001, you can use it to
    execute code remotely (Man facepalming). to fix change line 150 of support/launch.sh
    from * to 127.0.0.1 [https://github.com/hackerhouse-opensource/exploits/blob/master/jdwp-exploit.txt](https://github.com/hackerhouse-opensource/exploits/blob/master/jdwp-exploit.txt).
  prefs: []
  type: TYPE_NORMAL
- en: Then, a lot of suspicions about the NSA and Ghidra arose. However, taking into
    account the cyber-espionage capabilities of the NSA, do you think the NSA needs
    to include a backdoor in its own software in order to hack its users?
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, no. They don't need to do this because they already have cyber-weapons
    for that.
  prefs: []
  type: TYPE_NORMAL
- en: You can feel comfortable when using Ghidra; probably, the NSA only wanted to
    do something honorable to improve its own image and, since Ghidra's existence
    was leaked by WikiLeaks, what better way to do that than to publish it at RSA
    Conference and release it as open source?
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra versus IDA and many other competitors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if you have already mastered a powerful reverse engineering framework,
    such as IDA, Binary Ninja, or Radare2, there are good reasons to start learning
    Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: No single reverse engineering framework is the ultimate one. Each reverse engineering
    framework has its own strengths and weaknesses. Some of them are even incomparable
    to each other because they were conceived with different philosophies (for instance,
    GUI-based frameworks versus command line-based frameworks).
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, you will see how those products are competing with and learning
    from each other all the time. For instance, IDA Pro 7.3 incorporated the `undo`
    feature, which was previously made available by its competitor, Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the epic and full-of-humor `@GHIDRA_RE`
    official Twitter account''s response to IDA Pro''s `undo` feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – IDA Pro 7.3 added an undo feature to compete with Ghidra'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – IDA Pro 7.3 added an undo feature to compete with Ghidra
  prefs: []
  type: TYPE_NORMAL
- en: 'Differences between frameworks are susceptible to change due to the competition,
    but we can mention some current strengths of Ghidra:'
  prefs: []
  type: TYPE_NORMAL
- en: It is open source and free (including its decompiler).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports a lot of architectures (which maybe the framework you are using
    does not support yet).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can load multiple binaries at the same time in a project. This feature allows
    you to easily apply operations over many related binaries (for example, an executable
    binary and its libraries).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows collaborative reverse engineering by design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports big firmware images (1 GB+) without problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has awesome documentation that includes examples and courses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows version tracking of binaries, allowing you to match functions and
    data and their markup between different versions of the binary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In conclusion, it is recommended to learn as many frameworks as possible to
    know and take advantage of each one. In this sense, Ghidra is a powerful framework
    that you must know.
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a similar way as happened at RSA Conference, we will provide a Ghidra overview
    in order to present the tool and its capabilities. You will soon realize how powerful
    Ghidra is and why this tool is not simply another open source reverse engineering
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the latest available version of Ghidra is
    9.1.2, which can be downloaded from the official website mentioned in the previous
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ghidra
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is recommended to download the latest version of Ghidra ([https://ghidra-sre.org/](https://ghidra-sre.org/))
    by clicking on the red **Download Ghidra v9.1.2** button, but if you want to download
    older versions, then you need to click on **Releases**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Downloading Ghidra from the official website'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Downloading Ghidra from the official website
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the Ghidra archive file (`ghidra_9.1.2_PUBLIC_20200212.zip`)
    and decompressing it, you will see the following file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The Ghidra 9.1.2 structure after it is decompressed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The Ghidra 9.1.2 structure after it is decompressed
  prefs: []
  type: TYPE_NORMAL
- en: 'The content can be described as follows (source: [https://ghidra-sre.org/InstallationGuide.html](https://ghidra-sre.org/InstallationGuide.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs`: Ghidra documentation and some extremely useful resources, such as learning
    Ghidra courses for all levels, cheatsheets, and a step-by-step installation guide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Extensions`: Optional Ghidra extensions allowing you to improve its functionality
    and integrate it with other tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ghidra`: The Ghidra program itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GPL`: Standalone GPL support programs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`licenses`: Contains licenses used by Ghidra'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server`: Contains files related to Ghidra Server installation and administration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`support`: Allows you to run Ghidra in advanced modes and control how it launches,
    including launching it to be debugged'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ghidraRun`: The script used to launch Ghidra on Linux and iOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ghidraRun.bat`: Batch script allowing you to launch Ghidra on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE`: Ghidra license file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to downloading a release version of Ghidra (which is precompiled),
    you can compile the program on your own, as will be explained in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Ghidra on your own
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to compile Ghidra on your own, then you can download the source
    code from the following URL: [https://github.com/NationalSecurityAgency/ghidra](https://github.com/NationalSecurityAgency/ghidra).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then build it using Gradle by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce a compressed file containing the compiled version of Ghidra:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Before starting Ghidra, make sure your computer meets the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 4 GB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB storage (for installing Ghidra binaries)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dual monitors strongly recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since Ghidra is written in Java, if it is executed before installing the Java
    11 64-bit runtime and development kit, some of the following error messages could
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When Java is not installed, you will see the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the **Java Development Kit** (**JDK**) is missing, you will see the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Missing JDK error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Missing JDK error
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, if you get any of those messages, please download the JDK from one
    of the following sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot](https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to solve installation issues
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ghidra's step-by-step installation guide, including known issues, can be found
    in Ghidra's documentation directory at `docs\InstallationGuide.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is also available online at the following link: [https://ghidra-sre.org/InstallationGuide.html](https://ghidra-sre.org/InstallationGuide.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that you can report new issues you find in Ghidra through the following
    link: [https://github.com/NationalSecurityAgency/ghidra/issues](https://github.com/NationalSecurityAgency/ghidra/issues).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After installing Ghidra, you will be able to launch it using `ghidraRun` on
    Linux and iOS and `ghidraRun.bat` on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Ghidra's features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will look at an overview of some fundamental Ghidra features
    in order to understand the overall functionality of the program. It is also a
    good starting point to get familiar with it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Ghidra project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you will notice, differently than other reverse engineering tools, Ghidra
    doesn''t work with files directly. Instead, Ghidra works with projects. Let''s
    create a new project by clicking on **File** | **New Project…**. You can also
    do this faster by pressing the *Ctrl* + *N* hotkey (the complete list of Ghidra
    hotkeys is available at [https://ghidra-sre.org/CheatSheet.html](https://ghidra-sre.org/CheatSheet.html)
    and also in Ghidra''s documentation directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Creating a new Ghidra project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Creating a new Ghidra project
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, projects can be non-shared or shared projects. Since we want to
    analyze a `hello world` program without collaboration with other reverse engineers,
    we will choose `hello world`) and where to store it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Choosing a project name and directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Choosing a project name and directory
  prefs: []
  type: TYPE_NORMAL
- en: 'The project is composed of a `hello world.gpr` file and a `hello world.rep`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Ghidra project structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – Ghidra project structure
  prefs: []
  type: TYPE_NORMAL
- en: 'A Ghidra project (the `*.gpr` file) can only be opened by a single user. Therefore,
    if you try to open the same project twice at the same time, the concurrency lock
    implemented using the `hello world.lock` and `hello world.lock~` files will prevent
    you from doing so, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Ghidra''s project locked'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – Ghidra's project locked
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover how to add binary files to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Importing files to a Ghidra project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can start to add files to our `hello world` project. In order to analyze
    an extremely simple application with Ghidra, we will compile the following `hello
    world` program (`hello_world.c`) written in the C programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the following command to compile it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the resulting Microsoft Windows Portable Executable file: `hello_world.exe`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s import our `hello world.exe` file to the project; to do that, we have
    to go to **File** | **Import file**. Alternatively, we can press the *I* key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Importing a file to the Ghidra project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Importing a file to the Ghidra project
  prefs: []
  type: TYPE_NORMAL
- en: 'Ghidra automatically identified the `hello_world.exe` program as an x86 Portable
    Executable binary for 32-bit architectures. As it was successfully recognized,
    we can click **OK** to continue. After importing it, you will see a summary of
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Ghidra project file import result summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – Ghidra project file import result summary
  prefs: []
  type: TYPE_NORMAL
- en: 'By double-clicking the `hello_world.exe` file or clicking on the green Ghidra
    icon of **Tool Chest**, the file will be opened and loaded by Ghidra:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – A Ghidra project containing a Portable Executable file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – A Ghidra project containing a Portable Executable file
  prefs: []
  type: TYPE_NORMAL
- en: After importing files into your project, you can start to reverse engineer them.
    This is a cool feature of Ghidra, allowing you to import more than one file into
    a single project, because you can apply some operation (for example, search) over
    multiple files (for example, an executable binary and its dependencies). In the
    next section, we will see how to analyze those files using Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: Performing and configuring Ghidra analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will be asked whether to analyze the file, and you probably want to answer
    **Yes** to this because the analysis operation recognizes functions, parameters,
    strings, and more. Usually, you will want to let Ghidra get this information for
    you. A lot of analysis configuration options do exist. You can see a description
    of every option by clicking on it; the description is displayed in the upper-right
    **Description** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – File analysis options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – File analysis options
  prefs: []
  type: TYPE_NORMAL
- en: Let's click on **Analyze** to perform the analysis of the file. Then, you will
    see the Ghidra **CodeBrowser** window. Don't worry if you forget to analyze something;
    you can reanalyze the program later (go to the **Analysis** tab and then **Auto
    Analyze 'hello_world.exe'…**).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Ghidra CodeBrowser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ghidra CodeBrowser has, by default, a pretty well-chosen distribution of dock
    windows, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Ghidra''s CodeBrowser window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.13 – Ghidra's CodeBrowser window
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how CodeBrowser is distributed by default:'
  prefs: []
  type: TYPE_NORMAL
- en: As usual, by default in reverse engineering frameworks, in the center of the
    screen, Ghidra shows a disassembly view of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the disassembly level is sometimes a too low-level perspective, Ghidra incorporates
    its own decompiler, which is located to the right of the disassembly window. The
    main function of the program was recognized by a Ghidra signature, and then parameters
    were automatically generated. Ghidra also allows you to manipulate decompiled
    code in a lot of aspects. Of course, a hexadecimal view of the file is also available
    in the corresponding tab. These three windows (disassembly, decompiler, and the
    hexadecimal window) are synchronized, offering different perspectives of the same
    thing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ghidra also allows you to easily navigate in the program. For instance, to go
    to another program section, you can refer to the **Program Trees** window located
    in the upper-left margin of CodeBrowser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you prefer to navigate to a symbol (for example, a program function), then
    go just below that, to where the **Symbols Tree** pane is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to work with data types, then go just below that again, to **Data
    Type Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As Ghidra allows scripting reverse engineering tasks, script results are shown
    in the corresponding window at the bottom. Of course, the **Bookmarks** tab is
    available in the same position, allowing you to create pretty well-documented
    and organized bookmarks of any memory location for quick access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ghidra has also a quick access bar at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom right, the first field indicates the current address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following the current address, the current function is shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to the current address and the current function, the current disassembly
    line is shown to complete the contextual information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, at the topmost part of CodeBrowser, the main bar is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you know the default perspective of Ghidra, it's a good time to learn
    how to customize it. Let's address this in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Ghidra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the default perspective of Ghidra, but you can also modify it. For
    instance, you can add more windows to Ghidra by clicking on the **Window** menu
    and choosing one that piques your interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Some items in the Ghidra Window submenu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.14 – Some items in the Ghidra Window submenu
  prefs: []
  type: TYPE_NORMAL
- en: 'Ghidra has a lot of awesome functionalities – for instance, the bar located
    on the upper-right bar of the disassembly window allows you to customize the disassembly
    view by moving fields, adding new fields, extending the size of a field in the
    disassembly listing, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Disassembly listing configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.15 – Disassembly listing configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'It also allows you to enable a very interesting feature of Ghidra, which is
    its intermediate representation or intermediate language, called **PCode**. It
    allows you to develop assembly language-agnostic tools and to develop automated
    analysis tools in a more comfortable language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Enabling the PCode field in the disassembly listing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.16 – Enabling the PCode field in the disassembly listing
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is enabled, then **PCode** will be shown in the listing. As you will
    soon realize, **PCode** is less human-readable, but it is sometimes better for
    scripting reverse engineering tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Disassembly listing with PCode enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.17 – Disassembly listing with PCode enabled
  prefs: []
  type: TYPE_NORMAL
- en: Discovering more Ghidra functionalities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some powerful features available in other reverse engineering frameworks are
    also included in Ghidra. For instance, as in other reverse engineering frameworks,
    you also have a graph view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Graph view of a hello world program''s main function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_01_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.18 – Graph view of a hello world program's main function
  prefs: []
  type: TYPE_NORMAL
- en: As you will notice, Ghidra has a lot of features and windows; we will not cover
    all of them in this chapter, nor modify and/or extend them all. In fact, we haven't
    mentioned all of them yet. Instead, we will learn about them through practice
    in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we addressed the exciting and quirky origins of Ghidra. Then,
    we covered how to download, install, and compile it on our own from the source
    code. You also learned how to solve issues and how to report new ones to the Ghidra
    open source project.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned the structure of Ghidra and its main functionalities (some
    of them have not been covered yet). Now, you are in a position to investigate
    and experiment a little bit with Ghidra on your own.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter helped you understand the bigger picture of Ghidra, which will
    be useful in the following chapters generally, which are more focused on specifics.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover how to automate reverse engineering tasks
    by using, modifying, and developing Ghidra plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is there one reverse engineering framework that is absolutely better than the
    others? What problems does Ghidra solve better than most frameworks? Cite some
    strengths and weaknesses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you configure the disassembly view to enable PCode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the disassembly view and the decompiler view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
