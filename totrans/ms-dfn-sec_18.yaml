- en: '*Chapter 15*: Leveraging Pentesting for Defensive Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Companies have to invest time and resources in defensive security to identify
    new vulnerabilities that allow them to anticipate the movements of the adversary.
    As Sun Tzu says in The Art of War: "To know your enemy, you must become your enemy."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Dagoberto Herrera, University Dean*'
  prefs: []
  type: TYPE_NORMAL
- en: While pentesting is a task normally reserved for **offensive security teams**
    (also called **red teams**), the truth is that as a master in defensive security,
    you also need to know at least the basics of pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, this chapter is not aimed to make you a pentester. Instead, the goal
    of this chapter is to show you the most popular tools used by pentesters (and
    attackers) to show you how easy and dangerous those attacks can be.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter starts with some mandatory theory to be able to then move on to
    some exacting labs in which you can experiment using your own hands with the simplicity
    and power of those offensive security tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics that we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Knowing your enemy''s best friend: Metasploit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other offensive hacking tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A virtual machine with **Kali Linux** with **Damn Vulnerable Web Application**
    (**DVWA**) installed (could be the same as what we installed in [*Chapter 12*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287),
    *Mastering Web App Security*.
  prefs: []
  type: TYPE_NORMAL
- en: A machine with virtualization software such as **VirtualBox** will be used to
    create a virtual machine with Metasploitable.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before talking about the importance of logs, let's take a few minutes to understand
    some of the core attributes of logs, including their origins, the types, and even
    some standards used in the industry.
  prefs: []
  type: TYPE_NORMAL
- en: Log files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Logs were created as a way to record events in the operating system or applications.
    They started as a great debugging and troubleshooting tool, but now they are used
    for many other purposes, such as *auditing*, *security*, and *compliance*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – View of logs on a Windows system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.1 – View of logs on a Windows system
  prefs: []
  type: TYPE_NORMAL
- en: 'Most log files are simple text files with common attributes such as log type,
    timestamp, ID, and user. Most operating systems and applications categorize the
    different types of logs for ease of analysis. The most common categories are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Error log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In theory, this sounds very simple, right? But in reality, it is not, and let's
    see why. Imagine the following scenario.
  prefs: []
  type: TYPE_NORMAL
- en: You have a server with Windows Server that by itself generates around 500 logs
    per minute, you have a database that generates 400 logs per minute, plus 6 applications
    that, combined, generate another 300 logs per minute. This means that your server
    is generating an average of 1,000 logs per minute, which is about 24,000 logs
    a day or 720,000 logs in a month in only one server. Now, if you multiply this
    by the number of servers in your organization and even other devices such as routers
    and IoT (which also generate logs), then this becomes unmanageable, and this is
    why you must apply **log management techniques**.
  prefs: []
  type: TYPE_NORMAL
- en: Log management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a cybersecurity expert, you must apply log management techniques to take
    advantage of logs. In fact, if they are not properly managed, logs can become
    useless and even a burden on your infrastructure, but if you properly manage them,
    they can become a powerful source of information.
  prefs: []
  type: TYPE_NORMAL
- en: 'But don''t worry because here are the things you need to keep in mind to ensure
    you manage your logs like a master:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log structure**: There are many types of log formats but having logs in different
    formats will only increase the complexity of log management. That is why companies
    try to adhere to one standard to make sure the log structure is the same across
    systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the most famous standards is **Syslog**, which was created as early as
    1980 and became almost a standard for Unix-like systems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Log collection**: A best practice is to have a centralized system to capture
    all logs. This can be done by a third-party system that collects logs from a plurality
    of systems to centralize all logs in a single place. In some cases, a company
    may want to create a server just to collect logs from a critical business activity,
    for example, creating a server to collect all logs from a critical web application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IIS_log_334455`, `SQL_log_01_02_2021`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the size of your infrastructure, this activity can become impossible
    to be done manually, therefore it is highly recommended to use a log management
    solution that allows you to add custom tags to your logs based on the source.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Log analysis**: The real value of logs is the information that we can gather
    from them, and that information can only be obtained by performing a deep analysis
    of the logs. Log analysis will help you to generate metrics, find patterns, and
    even gather threat intelligence by correlating logs between systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More advanced systems will even incorporate an artificial intelligence engine
    that will leverage machine learning techniques to provide better insights and
    even predictions based on your logs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Log storage and archiving**: There are a lot of reasons to archive your logs.
    One of the main reasons is related to compliance and regulations that may require
    the company to keep logs archived for a given period of time. But even if your
    company is not regulated, it is a good practice to create a policy related to
    the archival of logs to determine how long you must keep your logs and even break
    down those times based on the type and importance of logs (to save some space).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, now that we've reviewed the basics of logs and log management, it is time
    to recap the benefits and importance of logs in your role as cybersecurity master.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned before, let''s do a review of the most relevant topics that highlight
    the importance of logs and why you must invest time and resources into log management:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compliance and audit**: You must ensure that your logs are aligned with applicable
    regulations. In fact, missing logs could result in very high fines for your company,
    therefore you must ensure your logs policy is aligned with all local and international
    regulations, such as **Payment Card Industry Data Security Standard (PCI-DSS)**,
    **Healthcare Information Portability and Accountability Act (HIPAA)**, **General
    Data Protection Regulation (GDPR)**, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Troubleshooting**: While this task may be out of your scope (and may be performed
    by the **Information Technology (IT)** department), you should consider this when
    creating your logs policy to ensure this is aligned with the IT department''s
    needs to perform troubleshooting activities. Additionally, you need to ensure
    that they have access only to the logs they need to reduce the risk of other logs
    being altered or deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Investigations**: Logs are a powerful tool to detect wrongdoers, including
    external and internal users. Therefore, you must ensure that critical systems
    are generating logs. Also, you need to ensure that logs are activated on new systems
    (such as **Internet of Things (IoT)** devices) to also keep track of the activity
    on those devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sanctions and legal actions**: Logs are typically used as a legal way to
    prove that some activities were performed by a given user and, therefore, they
    are normally used as evidence to take legal or internal actions. Therefore, archiving
    and ensuring the integrity of logs are essential tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key metrics validation**: Logs can help you to confirm whether a given **Service-Level
    Agreement** (**SLA**) or contract requirement was met or breached. For example,
    logs can confirm whether a service you provide was down and whether the uptime
    was breached or not based on contractual requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support cybersecurity tools**: Many cybersecurity tools such as SIEM use
    logs as their main inputs, therefore good log management will enhance the functionality
    of said tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log integrity**: As we learned, logs are very important, but their effectiveness
    relies on their integrity, so you must ensure that logs remain untouched. There
    are several attacks aimed to alter log files; in fact, this is known as **log
    spoofing**. To learn more about this, please refer to the OWASP page about log
    injection at [https://owasp.org/www-community/attacks/Log_Injection](https://owasp.org/www-community/attacks/Log_Injection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By now, we have reviewed everything you need to know about logs and log management.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to move on to the core of this chapter and get into more technical
    topics to learn all you need to know about one of the best and most famous attack
    frameworks used by attackers: *the great Metasploit*.'
  prefs: []
  type: TYPE_NORMAL
- en: Knowing your enemy's best friend – Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by clarifying that **Metasploit** is a great framework that, like
    any other tool, can be used for good or bad. In fact, chances are that your company
    will receive at least one attack coming from this tool, but the good news is that
    you can leverage this same framework to test your infrastructure by using offensive
    security techniques with Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: But wait, wasn't this book about defensive security? Yes, but as a master in
    defensive security, you also need to understand how to leverage some offensive
    security techniques to keep your infrastructure safe.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have been around the cybersecurity area, then you will have at least
    heard about Metasploit, but what exactly is Metasploit?
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit is an open source framework developed in collaboration between the
    open source community and **Rapid7**.
  prefs: []
  type: TYPE_NORMAL
- en: One of the great features of Metasploit is its functionality with modules that
    enables you to use this framework to launch **exploits**, **payloads**, **scans**,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of exploits, Metasploit has more than 2,000 exploits that are applicable
    to almost all known operating systems, including **Advanced Interactive eXecutive
    (AIX)**, **Solaris**, **Berkeley Standard Distribution (BSD)**, **FreeBSD**, **Hewlett
    Packard Unix (HP-UX)**, **Unix**, and, of course, **Windows**.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Metasploit has more than 500 payloads, which includes **static
    payloads**, **dynamic payloads**, **Command Shell**, and **Meterpreter**.
  prefs: []
  type: TYPE_NORMAL
- en: But those numbers increase constantly because since this is an open source project,
    exploits and payloads are being constantly uploaded by the community and normally
    reviewed by senior community members and Rapid7\.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit will allow you to *find, validate, and test vulnerabilities in your
    systems before others do*! This is very important because it will allow you to
    see the real security status of your systems and infrastructure and act upon the
    findings.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, Metasploit is a very big project and at the beginning, it could
    be very confusing, so let's continue by exploring the different versions of this
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit editions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since its conception in 2003, there have been several editions of Metasploit.
    Some of them are still active while some of them have been retired (such as Metasploit
    Community Edition and Express). Now let's look at the current active editions
    of Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework edition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This can be called *the classic version of Metasploit*. This is a free command-line
    version that comes preinstalled on Kali Linux. This is by far the most popular
    version of Metasploit and there are countless books, videos, and tutorials about
    it. To get more information about this version, you can visit the official site
    at [https://www.metasploit.com/get-started](https://www.metasploit.com/get-started).
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Pro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the paid version of Metasploit, supported by Rapid7, which basically
    adds a plurality of features such as wizards, integrations via a remote API, a
    plurality of automation tools, and a variety of infiltration tools, including
    a testing platform to test the top 10 OWASP vulnerabilities on web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find a detailed comparison of this paid version and the free
    framework version: [https://www.rapid7.com/products/metasploit/download/editions/](https://www.rapid7.com/products/metasploit/download/editions/).'
  prefs: []
  type: TYPE_NORMAL
- en: Armitage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Armitage** allows you to graphically visualize targets and execute a plurality
    of exploits against them using Metasploit in the background. This is a great tool
    to introduce people to Metasploit and to discover the benefits and powers of this
    tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Armitage is also free and can be easily installed on Kali Linux. Next, we will
    show you how.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Armitage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, Armitage is a great way to start your first steps with Metasploit,
    so let's install it on our Kali Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: Now, Kali Linux comes with Metasploit installed by default; however, you need
    to set it up to use for the first time, so before installing Armitage, we need
    to set up Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Metasploit for the first time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Metasploit uses **PostgreSQL** as a database, however the latest versions of
    Kali have this service stopped by default, so the first step will be to start
    PostgreSQL and set it up to run at boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the following figure, `postgresql` is now up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Running PostgreSQL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.2 – Running PostgreSQL
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the following command to create the required databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I highly recommend you check for available updates. In fact, in my case,
    my installation was quite recent and I got more than 120 MB of updates. To get
    them, just type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can successfully launch Metasploit by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything went correctly, then you should see the welcome page of Metasploit,
    as seen in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Metasploit welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.3 – Metasploit welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this screen provides some basic information, such as the number
    of exploits available, payloads, **No OPeration (NOPs)**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Armitage (continued)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OK, now that Metasploit is up and running, let's go back to the installation
    and setup of Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by stopping the Metasploit service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, we would need to do an `apt-get` update, but since we just did it,
    we can go directly to install Armitage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it finishes, you should be able to start Armitage with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will get a prompt screen. Just leave the defaults and click on **Connect**,
    as seen in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Entering Armitage'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.4 – Entering Armitage
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, at this point you have both **Metasploit** and **Armitage**
    up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Armitage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's explore the GUI of Armitage to discover some of the tools that we
    can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, the GUI is very simple and intuitive (which
    is great for starters):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Armitage main screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.5 – Armitage main screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see the main features that we have available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`search smb` on the console, as seen in the following figure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Armitage console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.6 – Armitage console
  prefs: []
  type: TYPE_NORMAL
- en: But the main idea of using Armitage is for the GUI, so let's take a look at
    those options.
  prefs: []
  type: TYPE_NORMAL
- en: '**Modules**: As seen in *Figure 15.5*, there is a series of folders on the
    left side of the screen. Those folders are **modules** that contain all the exploits,
    payloads, auxiliaries, and posts that you can execute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As mentioned before, Metasploit has exploits for almost all operating systems,
    and you can see that list when you expand the **exploit** section, as seen in
    the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Module view listing the exploits by operating system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.7 – Module view listing the exploits by operating system
  prefs: []
  type: TYPE_NORMAL
- en: '**Attacks**: Here, you can find a plurality of attacks that can be launched
    against the targeted machines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosts**: This menu contains a plurality of scans aimed at finding available
    targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's do a quick lab to show you how easily an attacker can launch an attack
    against your systems using Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: Launching an attack with Armitage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we launch an attack, we need to find a vulnerable machine that we own
    so that we can safely run the test, and we can easily achieve this with Metasploitable!
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Metasploitable** is a virtual Unix machine that was designed to be vulnerable
    so it can be used by security experts and enthusiasts (like you) as a playground
    for testing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is super easy to use; in fact, you only need to download the image of the
    virtual machine, load it up on your favorite hypervisor (such as VirtualBox),
    and you are ready to go. The image can be download from here: [https://sourceforge.net/projects/metasploitable](https://sourceforge.net/projects/metasploitable).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's do a scan to see what vulnerabilities we can find on this Metasploitable
    machine. To do that, let's go to **Host** | **Nmap Scans** | **Intense Scan**
    | **all TCP ports**.
  prefs: []
  type: TYPE_NORMAL
- en: Then, select a range of IPs; in this case, I used `192.168.1.0/24`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can see the results of the scan in real time in the console at the bottom
    part of the screen (next to the **Console** tab we talked about earlier) to gather
    additional information about the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the following figure shows the outputs of a scan of a Windows
    7 machine. Notice how the scan was able to gather important data such as the computer
    name, operating system, and service pack information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Outputs of the Nmap scan'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.8 – Outputs of the Nmap scan
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, going back to our scan, you will notice that this scan may take a few
    minutes (depending on the number of devices) but once it finishes, it will show
    you a pop-up message, as seen in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Successful completion of the intense scan'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.9 – Successful completion of the intense scan
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will see all the systems or devices that were found on the scan. In
    our case, the Metasploitable machine was identified with the IP `192.168.1.224`
    and, as seen in the following figure, it added a Linux icon as this machine was
    identified as a Linux computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – Machines found during the scan'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.10 – Machines found during the scan
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s do a right-click to see what type of attacks can be performed against
    each machine. In our example, we can see that the scan was able to find several
    services that can be exploited to gain access to the system, as seen in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 15.11 – List of login services enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.11 – List of login services enabled
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see whether we can log in using VNC. To do that, we will have to
    go to the modules menu at the left of the screen, navigate to `auxiliary/scanner/vnc/vnc_login`,
    and double-click to open it. Then, press **Launch** and wait for the outputs on
    the command view below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Surprise surprise, the system was able to brute force the VNC password, as
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 15.12 – Brute force of the VNC password'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.12 – Brute force of the VNC password
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can open a terminal to test whether we can log in to VNC using that
    password.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve that, just open a terminal and type the following (in your case,
    replace the following IP with the IP of your Metasploitable machine):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, type the password. In this case, type `password` and hit *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will have full access to the target machine, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – Remote accessing the target machine through VNC'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.13 – Remote accessing the target machine through VNC
  prefs: []
  type: TYPE_NORMAL
- en: This was only a quick example to see how easily an attacker can get into an
    unprotected system, and by unprotected, we are talking about a system with an
    operating system that is no longer in support, a non-hardened server, a server
    missing updates or security patches, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are many more options that you can use to experiment with Armitage,
    for example, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather information about the database services running on the system, including
    the version, and even perform a brute force attack against them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gather information about the FTP version, including anonymous login and brute
    force attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute a plurality of exploits based on the operating system of the target
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select from a plurality of payloads to send and many more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now it is time to move back to Metasploit and play around a bit with the real
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: Executing Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Metasploit, there is no GUI like Armitage. Here, you will have to navigate
    to and execute the modules, attacks, and payloads with pure commands.
  prefs: []
  type: TYPE_NORMAL
- en: But don't worry, let's do an example together to see how easy it can be to perform
    an attack on a server using the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will again use our vulnerable Metasploitable machine and
    our aim will be to try to attack their FTP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first step will be to run Metasploit again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s do a search for `ftp` to find the modules available to attack an
    FTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, the query showed more than 170 results so we need to find a way
    to narrow down that list to find the best module for the attack.
  prefs: []
  type: TYPE_NORMAL
- en: One option is to determine the version of the FTP server running on the system
    so that we can do a search for modules related to that specific version. To do
    that, let's use our old friend Nmap (already preinstalled on Kali Linux).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, a normal `nmap` scan will just tell us the port of the services running,
    but if we want to also see the version of those services, we need to use the `-sV`
    parameter, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you should see a result like the one shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.14 – Using Nmap to gather the version of the FTP server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.14 – Using Nmap to gather the version of the FTP server
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go back to Metasploit and do a search for `vsftpd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Great, the search found an exploit for that FTP server, as seen in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – Exploit for vsftpd on Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.15_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.15 – Exploit for vsftpd on Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the `info` command to gather additional information about this
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following figure, we can see a lot of useful information, such as the
    name of the exploit, the platform, the release date, and the authors, but the
    most important part for us is the `RHOST`, which is not set, and `RPORT`, which
    is already set by default to `21`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.16 – Exploring additional information of exploits on Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.16_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.16 – Exploring additional information of exploits on Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 15.16*, we can call the exploit by either using the long
    name or the identifier (in this case `0`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s set `RHOST` to the IP of the target machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the system should reply with a message that `RHOST` was set to the IP address
    specified, but if you want to double-check, you can also use the `show options`
    command, as seen in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.17 – Using show options to confirm the exploit settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.17_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.17 – Using show options to confirm the exploit settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Now everything seems to be ready to execute the exploit with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, as seen in the following figure, we have full access to the target
    machine. In fact, you can see that we can execute a lot of commands on the target
    (victim machine), such as `whoami` (which terrifyingly shows that we are connected
    as root). Also, we did `ifconfig` to confirm that we are issuing the commands
    on the target machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18 – Gathering full remote access with Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.18_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.18 – Gathering full remote access with Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: 'Those were some simple examples to show you how easy it is to attack a system
    using Metasploit. But from the point of view of defensive security, here are some
    takeaways to highlight:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of patching to prevent attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of hardening to prevent the execution of remote exploits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of using offensive tools to test your environment against real threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplicity of the attacks and how easy it is to discover information about
    your systems to tailor an attack against your infrastructure and systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Metasploit is the most famous offensive security framework, there are
    other tools used by attackers to get into your systems, so let's also look at
    other offensive security tools.
  prefs: []
  type: TYPE_NORMAL
- en: Other offensive hacking tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's review the most famous offensive security tools currently available, both
    free and paid.
  prefs: []
  type: TYPE_NORMAL
- en: Searchsploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We talked in previous chapters about [https://www.exploit-db.com/](https://www.exploit-db.com/),
    which is a huge database with more than 44,000 exploits available to download.
    The website is great and it shows a lot of useful information in a friendly way,
    but searching for an exploit on the page, downloading it, and then executing it
    could be a bit time-consuming. Here is where `exploit-db` and run them directly
    from the terminal; yes, it's that easy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do a quick example. Imagine you added a **Joomla** server to your organization
    and you want to test it against known vulnerabilities. You can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `-t` option will just give us results in which the word Joomla is in the
    title of the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, imagine your boss asked you to install a YouTube plugin on your Joomla
    server. Then, let''s see how we can find out about vulnerabilities related to
    that plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the following figure, the tool found three vulnerabilities associated
    with YouTube Joomla plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.19 – Finding vulnerabilities using Searchsploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.19_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.19 – Finding vulnerabilities using Searchsploit
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to run the exploit, which is quite easy. First, you need to
    copy the path of the script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then, as seen in the following figure, you will get a response with the full
    path of the script. Just copy and paste that path and you will be able to run
    the exploit!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.20 – Obtaining the path to execute the exploit on Searchsploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.20_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.20 – Obtaining the path to execute the exploit on Searchsploit
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, executing those exploits is very easy, therefore this is
    one of the reasons why you need to *make sure you test those vulnerabilities before
    they are exploited by an attacker*.
  prefs: []
  type: TYPE_NORMAL
- en: sqlmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**sqlmap** is a very powerful penetration testing tool to detect and exploit
    SQL injection vulnerabilities on database servers. It is packed with a lot of
    cool features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload and download files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump entire database tables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced search for specific tables or columns across databases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumeration of users, password hashes, roles, tables, columns, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognition of password hashes and support to crack them with dictionary-based
    attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, `sqlmap` fully supports most common SQL servers, including MySQL,
    PostgreSQL, Microsoft SQL, Microsoft Access, and SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: '`sqlmap` is already preinstalled on Kali Linux, so if you want to learn more
    about the tool, you can type the following command, which highlights the basic
    commands of the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As a fun fact, notice that the `-g` option allows you to process *Google dork*
    results as target URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Weevely
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Weevely** is a very interesting tool that provides a web shell to attack
    web applications. It has a lot of interesting features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP and HTTPS proxies to browse through the infected web application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to brute force SQL accounts on the targeted system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mount the remote filesystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct shell access to the target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload and download files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File navigation and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am sure that you would love to see an attack with this tool, so let's do a
    quick lab to show you how Weevely works.
  prefs: []
  type: TYPE_NORMAL
- en: For this lab, we will use DVWA as the target machine on our Kali Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 12*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287), *Mastering
    Web App Security*, we covered the installation and setup of DVWA, so if you have
    not installed it, then just go back to that chapter and follow our simple steps
    to get it up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Now, assuming that you have DVWA already installed on your Kali Linux machine,
    then we just need to go ahead and run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step will be to start the database services with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s start the Apache server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s open a web browser to open DVWA using the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '`127.0.0.1/DWVA/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should see the login page of DVWA, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.21 – DVWA login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.21_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.21 – DVWA login page
  prefs: []
  type: TYPE_NORMAL
- en: To log in, just use the admin credentials that you created during the setup
    of DVWA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you are in, let''s go and change the security to low. To do that,
    just go to the left menu and search for **DVWA Security**, then change the drop-down
    menu to **Low** and click on **Submit**, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.22 – Lowering the security level in DVWA'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.22_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.22 – Lowering the security level in DVWA
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our target machine is ready to be attacked!
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the shell, let''s go back to Kali and use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `mypassword` is the password of the shell that we are creating and
    the rest is the path and filename of the shell. In this example, I am saving it
    under my user directory with the name `myshell.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can navigate to your user directory to confirm that the file was created,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.23 – Local copy of the shell created on Weevely'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.23_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.23 – Local copy of the shell created on Weevely
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go back to DVWA to upload our shell.
  prefs: []
  type: TYPE_NORMAL
- en: To do that, just go to `myshell.php`, and click on **Upload**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to copy the location of the file on the server. To do that, just
    copy the first part of the URL (`http://127.0.0.1/DVWA`) and the path highlighted
    in the *successfully uploaded* message (`/hackable/uploads/myshell.php`), as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.24 – Path of the shell on DVWA'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.24_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.24 – Path of the shell on DVWA
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the path should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s again open the console of Kali Linux to execute the shell with
    the following command (notice that here, we are basically adding the path to the
    server plus the password to run the shell):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, as seen in the following figure, you have full access to the server,
    including to see the current user, file navigation, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.25 – Results of the Weevely attack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.25_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.25 – Results of the Weevely attack
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are many more tools used for offensive security and we encourage
    you to discover them, but by now, you should have a clear understanding of the
    power of those tools to attack your infrastructure, including servers, web applications,
    and even databases.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed this chapter as much as I did. Here, we learned about logs,
    why they are important, and even how to successfully manage them (log management).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we moved into the technical side of the chapter to find out more about
    the most famous offensive security tool: Metasploit.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, to get started with Metasploit, we did a hands-on lab using Armitage and
    Metasploitable.
  prefs: []
  type: TYPE_NORMAL
- en: Once we got more immersed in the Metasploit Framework, we did another hands-on
    lab directly with Metasploit in which we got full control over the target machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there was more: we did two more labs, one with Searchsploit and another
    very cool lab with Weevely in which we even used the DVWA that we installed in
    [*Chapter 12*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287), *Mastering Web
    App Security*.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to move on to another super interesting and very technical chapter
    in which we will discover some of the tools and techniques used in **computer
    forensics!**
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to know more about Metasploit and the available versions, visit
    the official site at [https://www.metasploit.com/](https://www.metasploit.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the official GitHub for Metasploit can be found here: [https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework).'
  prefs: []
  type: TYPE_NORMAL
