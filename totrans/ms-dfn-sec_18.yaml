- en: '*Chapter 15*: Leveraging Pentesting for Defensive Security'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*：利用渗透测试增强防御性安全'
- en: '*"Companies have to invest time and resources in defensive security to identify
    new vulnerabilities that allow them to anticipate the movements of the adversary.
    As Sun Tzu says in The Art of War: "To know your enemy, you must become your enemy."*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*“公司必须投入时间和资源于防御性安全，以识别新的漏洞，从而预判敌方的动向。正如孙子在《孙子兵法》中所说：‘知己知彼，百战不殆。’”*'
- en: '*– Dagoberto Herrera, University Dean*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*– 达戈贝尔托·埃雷拉，大学院长*'
- en: While pentesting is a task normally reserved for **offensive security teams**
    (also called **red teams**), the truth is that as a master in defensive security,
    you also need to know at least the basics of pentesting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然渗透测试通常是**进攻性安全团队**（也称为**红队**）的任务，但事实是，作为防御性安全的专家，你也需要至少掌握渗透测试的基础知识。
- en: In fact, this chapter is not aimed to make you a pentester. Instead, the goal
    of this chapter is to show you the most popular tools used by pentesters (and
    attackers) to show you how easy and dangerous those attacks can be.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，本章的目的是不是让你成为一名渗透测试员。相反，本章的目标是向你展示渗透测试员（以及攻击者）使用的最流行的工具，展示这些攻击是多么简单且危险。
- en: The chapter starts with some mandatory theory to be able to then move on to
    some exacting labs in which you can experiment using your own hands with the simplicity
    and power of those offensive security tools.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从一些必修的理论开始，以便随后进入一些精准的实验室练习，你可以亲手实验这些进攻性安全工具的简单性和强大功能。
- en: 'The main topics that we will cover in this chapter are as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主要内容如下：
- en: Understanding the importance of logs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解日志的重要性
- en: 'Knowing your enemy''s best friend: Metasploit'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解敌人的好朋友：Metasploit
- en: Other offensive hacking tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他进攻性黑客工具
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A virtual machine with **Kali Linux** with **Damn Vulnerable Web Application**
    (**DVWA**) installed (could be the same as what we installed in [*Chapter 12*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287),
    *Mastering Web App Security*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一台安装了**Kali Linux**和**Damn Vulnerable Web Application**（**DVWA**）的虚拟机（可能与我们在[*第12章*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287)中安装的相同，*掌握Web应用安全*）。
- en: A machine with virtualization software such as **VirtualBox** will be used to
    create a virtual machine with Metasploitable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一台安装了虚拟化软件，如**VirtualBox**的机器将用于创建一个包含Metasploitable的虚拟机。
- en: Understanding the importance of logs
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解日志的重要性
- en: Before talking about the importance of logs, let's take a few minutes to understand
    some of the core attributes of logs, including their origins, the types, and even
    some standards used in the industry.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论日志的重要性之前，让我们花几分钟时间了解日志的一些核心属性，包括它们的起源、类型，甚至一些行业中使用的标准。
- en: Log files
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志文件
- en: 'Logs were created as a way to record events in the operating system or applications.
    They started as a great debugging and troubleshooting tool, but now they are used
    for many other purposes, such as *auditing*, *security*, and *compliance*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 日志的产生最初是为了记录操作系统或应用程序中的事件。它们最初是作为调试和故障排除的工具，但现在它们也被用于许多其他目的，如*审计*、*安全*和*合规性*：
- en: '![Figure 15.1 – View of logs on a Windows system'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1 – Windows系统中的日志视图'
- en: '](img/Figure_15.1_B16290.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.1_B16290.jpg)'
- en: Figure 15.1 – View of logs on a Windows system
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – Windows系统中的日志视图
- en: 'Most log files are simple text files with common attributes such as log type,
    timestamp, ID, and user. Most operating systems and applications categorize the
    different types of logs for ease of analysis. The most common categories are as
    follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数日志文件是简单的文本文件，包含常见的属性，如日志类型、时间戳、ID和用户。大多数操作系统和应用程序会将不同类型的日志进行分类，以便于分析。最常见的分类如下：
- en: Error log
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误日志
- en: System log
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统日志
- en: Application log
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用日志
- en: Access log
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问日志
- en: Transaction log
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务日志
- en: In theory, this sounds very simple, right? But in reality, it is not, and let's
    see why. Imagine the following scenario.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，这听起来非常简单，对吧？但实际上并非如此，让我们看看为什么。想象一下以下情景。
- en: You have a server with Windows Server that by itself generates around 500 logs
    per minute, you have a database that generates 400 logs per minute, plus 6 applications
    that, combined, generate another 300 logs per minute. This means that your server
    is generating an average of 1,000 logs per minute, which is about 24,000 logs
    a day or 720,000 logs in a month in only one server. Now, if you multiply this
    by the number of servers in your organization and even other devices such as routers
    and IoT (which also generate logs), then this becomes unmanageable, and this is
    why you must apply **log management techniques**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一台运行 Windows Server 的服务器，每分钟生成大约 500 条日志，此外，还有一个每分钟生成 400 条日志的数据库，再加上 6
    个应用程序，它们合起来每分钟生成另外 300 条日志。这意味着你的服务器平均每分钟生成 1,000 条日志，也就是每天大约 24,000 条日志，或者每个月
    720,000 条日志，仅仅是在一台服务器上。现在，如果你将这个数字乘以你组织中服务器的数量，甚至还包括其他设备，如路由器和物联网设备（这些设备也会生成日志），那么这种情况将变得无法管理，这也是为什么你必须应用
    **日志管理技术** 的原因。
- en: Log management
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志管理
- en: As a cybersecurity expert, you must apply log management techniques to take
    advantage of logs. In fact, if they are not properly managed, logs can become
    useless and even a burden on your infrastructure, but if you properly manage them,
    they can become a powerful source of information.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名网络安全专家，你必须应用日志管理技术来充分利用日志。事实上，如果日志没有得到妥善管理，它们可能变得无用，甚至成为你基础设施的负担；但如果你妥善管理它们，它们可以成为强大的信息来源。
- en: 'But don''t worry because here are the things you need to keep in mind to ensure
    you manage your logs like a master:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但别担心，这里有一些你需要记住的要点，帮助你像专家一样管理日志：
- en: '**Log structure**: There are many types of log formats but having logs in different
    formats will only increase the complexity of log management. That is why companies
    try to adhere to one standard to make sure the log structure is the same across
    systems.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志结构**：日志格式有很多种类型，但日志格式不同只会增加日志管理的复杂性。这就是为什么公司会尝试遵循统一标准，以确保日志结构在各系统之间保持一致。'
- en: One of the most famous standards is **Syslog**, which was created as early as
    1980 and became almost a standard for Unix-like systems.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最著名的标准之一是 **Syslog**，它早在 1980 年就被创建，并几乎成为 Unix 类系统的标准。
- en: '**Log collection**: A best practice is to have a centralized system to capture
    all logs. This can be done by a third-party system that collects logs from a plurality
    of systems to centralize all logs in a single place. In some cases, a company
    may want to create a server just to collect logs from a critical business activity,
    for example, creating a server to collect all logs from a critical web application.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志收集**：最佳实践是拥有一个集中化的系统来捕获所有日志。这可以通过一个第三方系统实现，该系统从多个系统收集日志，并将所有日志集中在一个地方。在某些情况下，公司可能会希望创建一个服务器，仅用于收集关键业务活动的日志，例如，创建一个服务器来收集关键
    Web 应用程序的所有日志。'
- en: '`IIS_log_334455`, `SQL_log_01_02_2021`).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IIS_log_334455`，`SQL_log_01_02_2021`）。'
- en: Depending on the size of your infrastructure, this activity can become impossible
    to be done manually, therefore it is highly recommended to use a log management
    solution that allows you to add custom tags to your logs based on the source.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据你基础设施的规模，这项工作可能变得无法手动完成，因此强烈建议使用日志管理解决方案，允许你根据日志的来源添加自定义标签。
- en: '**Log analysis**: The real value of logs is the information that we can gather
    from them, and that information can only be obtained by performing a deep analysis
    of the logs. Log analysis will help you to generate metrics, find patterns, and
    even gather threat intelligence by correlating logs between systems.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志分析**：日志的真正价值在于我们可以从中收集到的信息，而这些信息只能通过对日志进行深度分析来获取。日志分析将帮助你生成度量指标，发现模式，甚至通过关联系统间的日志来收集威胁情报。'
- en: More advanced systems will even incorporate an artificial intelligence engine
    that will leverage machine learning techniques to provide better insights and
    even predictions based on your logs.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更先进的系统甚至会结合人工智能引擎，利用机器学习技术，提供更好的洞察力，甚至根据你的日志进行预测。
- en: '**Log storage and archiving**: There are a lot of reasons to archive your logs.
    One of the main reasons is related to compliance and regulations that may require
    the company to keep logs archived for a given period of time. But even if your
    company is not regulated, it is a good practice to create a policy related to
    the archival of logs to determine how long you must keep your logs and even break
    down those times based on the type and importance of logs (to save some space).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志存储与归档**：归档日志有很多原因。其中一个主要原因与合规性和法规相关，这些规定可能要求公司在一定时间内保存日志。即使公司不受监管，创建与日志归档相关的政策也是一种良好的做法，以确定必须保存日志的时长，并根据日志的类型和重要性将时间划分（以节省一些空间）。'
- en: OK, now that we've reviewed the basics of logs and log management, it is time
    to recap the benefits and importance of logs in your role as cybersecurity master.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经回顾了日志和日志管理的基础知识，是时候总结一下日志在你作为网络安全专家角色中的好处和重要性了。
- en: The importance of logs
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志的重要性
- en: 'As mentioned before, let''s do a review of the most relevant topics that highlight
    the importance of logs and why you must invest time and resources into log management:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，回顾一下最相关的主题，突出日志的重要性，以及为什么你必须投入时间和资源进行日志管理：
- en: '**Compliance and audit**: You must ensure that your logs are aligned with applicable
    regulations. In fact, missing logs could result in very high fines for your company,
    therefore you must ensure your logs policy is aligned with all local and international
    regulations, such as **Payment Card Industry Data Security Standard (PCI-DSS)**,
    **Healthcare Information Portability and Accountability Act (HIPAA)**, **General
    Data Protection Regulation (GDPR)**, and so on.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性与审计**：你必须确保日志符合相关法规。实际上，缺失的日志可能会导致公司面临巨额罚款，因此你必须确保日志政策与所有本地和国际法规一致，例如**支付卡行业数据安全标准（PCI-DSS）**、**健康保险流通与责任法案（HIPAA）**、**通用数据保护条例（GDPR）**等。'
- en: '**Troubleshooting**: While this task may be out of your scope (and may be performed
    by the **Information Technology (IT)** department), you should consider this when
    creating your logs policy to ensure this is aligned with the IT department''s
    needs to perform troubleshooting activities. Additionally, you need to ensure
    that they have access only to the logs they need to reduce the risk of other logs
    being altered or deleted.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障排除**：尽管这项任务可能超出了你的职责范围（并可能由**信息技术（IT）**部门执行），但你在制定日志政策时应考虑这一点，确保其符合IT部门进行故障排除活动的需求。此外，你需要确保他们只能访问他们需要的日志，以减少其他日志被篡改或删除的风险。'
- en: '**Investigations**: Logs are a powerful tool to detect wrongdoers, including
    external and internal users. Therefore, you must ensure that critical systems
    are generating logs. Also, you need to ensure that logs are activated on new systems
    (such as **Internet of Things (IoT)** devices) to also keep track of the activity
    on those devices.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调查**：日志是检测违法行为的强大工具，包括外部和内部用户。因此，你必须确保关键系统正在生成日志。此外，你需要确保新系统（如**物联网（IoT）**设备）也已启用日志记录，以便跟踪这些设备的活动。'
- en: '**Sanctions and legal actions**: Logs are typically used as a legal way to
    prove that some activities were performed by a given user and, therefore, they
    are normally used as evidence to take legal or internal actions. Therefore, archiving
    and ensuring the integrity of logs are essential tasks.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制裁和法律行动**：日志通常作为合法的方式来证明某些活动是由特定用户执行的，因此它们通常作为证据用于采取法律或内部行动。因此，归档和确保日志的完整性是至关重要的任务。'
- en: '**Key metrics validation**: Logs can help you to confirm whether a given **Service-Level
    Agreement** (**SLA**) or contract requirement was met or breached. For example,
    logs can confirm whether a service you provide was down and whether the uptime
    was breached or not based on contractual requirements.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键指标验证**：日志可以帮助你确认某个**服务级别协议**（**SLA**）或合同要求是否得到遵守。例如，日志可以确认你提供的服务是否出现故障，以及是否违反了基于合同的正常运行时间要求。'
- en: '**Support cybersecurity tools**: Many cybersecurity tools such as SIEM use
    logs as their main inputs, therefore good log management will enhance the functionality
    of said tools.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持网络安全工具**：许多网络安全工具，如SIEM，使用日志作为其主要输入，因此良好的日志管理将增强这些工具的功能。'
- en: '**Log integrity**: As we learned, logs are very important, but their effectiveness
    relies on their integrity, so you must ensure that logs remain untouched. There
    are several attacks aimed to alter log files; in fact, this is known as **log
    spoofing**. To learn more about this, please refer to the OWASP page about log
    injection at [https://owasp.org/www-community/attacks/Log_Injection](https://owasp.org/www-community/attacks/Log_Injection).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By now, we have reviewed everything you need to know about logs and log management.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to move on to the core of this chapter and get into more technical
    topics to learn all you need to know about one of the best and most famous attack
    frameworks used by attackers: *the great Metasploit*.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Knowing your enemy's best friend – Metasploit
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by clarifying that **Metasploit** is a great framework that, like
    any other tool, can be used for good or bad. In fact, chances are that your company
    will receive at least one attack coming from this tool, but the good news is that
    you can leverage this same framework to test your infrastructure by using offensive
    security techniques with Metasploit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: But wait, wasn't this book about defensive security? Yes, but as a master in
    defensive security, you also need to understand how to leverage some offensive
    security techniques to keep your infrastructure safe.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have been around the cybersecurity area, then you will have at least
    heard about Metasploit, but what exactly is Metasploit?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit is an open source framework developed in collaboration between the
    open source community and **Rapid7**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: One of the great features of Metasploit is its functionality with modules that
    enables you to use this framework to launch **exploits**, **payloads**, **scans**,
    and more.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In terms of exploits, Metasploit has more than 2,000 exploits that are applicable
    to almost all known operating systems, including **Advanced Interactive eXecutive
    (AIX)**, **Solaris**, **Berkeley Standard Distribution (BSD)**, **FreeBSD**, **Hewlett
    Packard Unix (HP-UX)**, **Unix**, and, of course, **Windows**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Metasploit has more than 500 payloads, which includes **static
    payloads**, **dynamic payloads**, **Command Shell**, and **Meterpreter**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: But those numbers increase constantly because since this is an open source project,
    exploits and payloads are being constantly uploaded by the community and normally
    reviewed by senior community members and Rapid7\.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit will allow you to *find, validate, and test vulnerabilities in your
    systems before others do*! This is very important because it will allow you to
    see the real security status of your systems and infrastructure and act upon the
    findings.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, Metasploit is a very big project and at the beginning, it could
    be very confusing, so let's continue by exploring the different versions of this
    tool.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit editions
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since its conception in 2003, there have been several editions of Metasploit.
    Some of them are still active while some of them have been retired (such as Metasploit
    Community Edition and Express). Now let's look at the current active editions
    of Metasploit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework edition
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This can be called *the classic version of Metasploit*. This is a free command-line
    version that comes preinstalled on Kali Linux. This is by far the most popular
    version of Metasploit and there are countless books, videos, and tutorials about
    it. To get more information about this version, you can visit the official site
    at [https://www.metasploit.com/get-started](https://www.metasploit.com/get-started).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Pro
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the paid version of Metasploit, supported by Rapid7, which basically
    adds a plurality of features such as wizards, integrations via a remote API, a
    plurality of automation tools, and a variety of infiltration tools, including
    a testing platform to test the top 10 OWASP vulnerabilities on web applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find a detailed comparison of this paid version and the free
    framework version: [https://www.rapid7.com/products/metasploit/download/editions/](https://www.rapid7.com/products/metasploit/download/editions/).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Armitage
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Armitage** allows you to graphically visualize targets and execute a plurality
    of exploits against them using Metasploit in the background. This is a great tool
    to introduce people to Metasploit and to discover the benefits and powers of this
    tool.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Armitage is also free and can be easily installed on Kali Linux. Next, we will
    show you how.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Installing Armitage
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, Armitage is a great way to start your first steps with Metasploit,
    so let's install it on our Kali Linux machine.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Now, Kali Linux comes with Metasploit installed by default; however, you need
    to set it up to use for the first time, so before installing Armitage, we need
    to set up Metasploit.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Metasploit for the first time
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Metasploit uses **PostgreSQL** as a database, however the latest versions of
    Kali have this service stopped by default, so the first step will be to start
    PostgreSQL and set it up to run at boot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As seen in the following figure, `postgresql` is now up and running:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Running PostgreSQL'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.2_B16290.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.2 – Running PostgreSQL
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the following command to create the required databases:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, I highly recommend you check for available updates. In fact, in my case,
    my installation was quite recent and I got more than 120 MB of updates. To get
    them, just type the following commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you can successfully launch Metasploit by using the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If everything went correctly, then you should see the welcome page of Metasploit,
    as seen in the following figure:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Metasploit welcome screen'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.3_B16290.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.3 – Metasploit welcome screen
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this screen provides some basic information, such as the number
    of exploits available, payloads, **No OPeration (NOPs)**, and so on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Installing Armitage (continued)
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OK, now that Metasploit is up and running, let's go back to the installation
    and setup of Armitage.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by stopping the Metasploit service:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Normally, we would need to do an `apt-get` update, but since we just did it,
    we can go directly to install Armitage:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once it finishes, you should be able to start Armitage with the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, you will get a prompt screen. Just leave the defaults and click on **Connect**,
    as seen in the following figure:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Entering Armitage'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.4_B16290.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.4 – Entering Armitage
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, at this point you have both **Metasploit** and **Armitage**
    up and running.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Armitage
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's explore the GUI of Armitage to discover some of the tools that we
    can use.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, the GUI is very simple and intuitive (which
    is great for starters):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Armitage main screen'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.5_B16290.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.5 – Armitage main screen
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see the main features that we have available:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '`search smb` on the console, as seen in the following figure:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Armitage console'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.6_B16290.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.6 – Armitage console
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: But the main idea of using Armitage is for the GUI, so let's take a look at
    those options.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '**Modules**: As seen in *Figure 15.5*, there is a series of folders on the
    left side of the screen. Those folders are **modules** that contain all the exploits,
    payloads, auxiliaries, and posts that you can execute.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As mentioned before, Metasploit has exploits for almost all operating systems,
    and you can see that list when you expand the **exploit** section, as seen in
    the following figure:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Module view listing the exploits by operating system'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.7_B16290.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.7 – Module view listing the exploits by operating system
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '**Attacks**: Here, you can find a plurality of attacks that can be launched
    against the targeted machines.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosts**: This menu contains a plurality of scans aimed at finding available
    targets.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's do a quick lab to show you how easily an attacker can launch an attack
    against your systems using Armitage.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Launching an attack with Armitage
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we launch an attack, we need to find a vulnerable machine that we own
    so that we can safely run the test, and we can easily achieve this with Metasploitable!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Metasploitable** is a virtual Unix machine that was designed to be vulnerable
    so it can be used by security experts and enthusiasts (like you) as a playground
    for testing.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'It is super easy to use; in fact, you only need to download the image of the
    virtual machine, load it up on your favorite hypervisor (such as VirtualBox),
    and you are ready to go. The image can be download from here: [https://sourceforge.net/projects/metasploitable](https://sourceforge.net/projects/metasploitable).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's do a scan to see what vulnerabilities we can find on this Metasploitable
    machine. To do that, let's go to **Host** | **Nmap Scans** | **Intense Scan**
    | **all TCP ports**.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Then, select a range of IPs; in this case, I used `192.168.1.0/24`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: You can see the results of the scan in real time in the console at the bottom
    part of the screen (next to the **Console** tab we talked about earlier) to gather
    additional information about the scan.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the following figure shows the outputs of a scan of a Windows
    7 machine. Notice how the scan was able to gather important data such as the computer
    name, operating system, and service pack information:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Outputs of the Nmap scan'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.8_B16290.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.8 – Outputs of the Nmap scan
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, going back to our scan, you will notice that this scan may take a few
    minutes (depending on the number of devices) but once it finishes, it will show
    you a pop-up message, as seen in the following figure:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Successful completion of the intense scan'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.9_B16290.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.9 – Successful completion of the intense scan
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will see all the systems or devices that were found on the scan. In
    our case, the Metasploitable machine was identified with the IP `192.168.1.224`
    and, as seen in the following figure, it added a Linux icon as this machine was
    identified as a Linux computer:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – Machines found during the scan'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.10_B16290.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.10 – Machines found during the scan
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s do a right-click to see what type of attacks can be performed against
    each machine. In our example, we can see that the scan was able to find several
    services that can be exploited to gain access to the system, as seen in the following
    figure:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 15.11 – List of login services enabled'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.11_B16290.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.11 – List of login services enabled
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see whether we can log in using VNC. To do that, we will have to
    go to the modules menu at the left of the screen, navigate to `auxiliary/scanner/vnc/vnc_login`,
    and double-click to open it. Then, press **Launch** and wait for the outputs on
    the command view below.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Surprise surprise, the system was able to brute force the VNC password, as
    shown in the following figure:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 15.12 – Brute force of the VNC password'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.12_B16290.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.12 – Brute force of the VNC password
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can open a terminal to test whether we can log in to VNC using that
    password.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve that, just open a terminal and type the following (in your case,
    replace the following IP with the IP of your Metasploitable machine):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, type the password. In this case, type `password` and hit *Enter*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will have full access to the target machine, as shown in the following
    figure:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – Remote accessing the target machine through VNC'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.13_B16290.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.13 – Remote accessing the target machine through VNC
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: This was only a quick example to see how easily an attacker can get into an
    unprotected system, and by unprotected, we are talking about a system with an
    operating system that is no longer in support, a non-hardened server, a server
    missing updates or security patches, and so on.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are many more options that you can use to experiment with Armitage,
    for example, the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Gather information about the database services running on the system, including
    the version, and even perform a brute force attack against them.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gather information about the FTP version, including anonymous login and brute
    force attacks.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute a plurality of exploits based on the operating system of the target
    system.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select from a plurality of payloads to send and many more.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now it is time to move back to Metasploit and play around a bit with the real
    tool.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Executing Metasploit
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Metasploit, there is no GUI like Armitage. Here, you will have to navigate
    to and execute the modules, attacks, and payloads with pure commands.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: But don't worry, let's do an example together to see how easy it can be to perform
    an attack on a server using the Metasploit Framework.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will again use our vulnerable Metasploitable machine and
    our aim will be to try to attack their FTP server.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first step will be to run Metasploit again:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s do a search for `ftp` to find the modules available to attack an
    FTP server:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unfortunately, the query showed more than 170 results so we need to find a way
    to narrow down that list to find the best module for the attack.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: One option is to determine the version of the FTP server running on the system
    so that we can do a search for modules related to that specific version. To do
    that, let's use our old friend Nmap (already preinstalled on Kali Linux).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, a normal `nmap` scan will just tell us the port of the services running,
    but if we want to also see the version of those services, we need to use the `-sV`
    parameter, as shown here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, you should see a result like the one shown in the following figure:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.14 – Using Nmap to gather the version of the FTP server'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.14_B16290.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.14 – Using Nmap to gather the version of the FTP server
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go back to Metasploit and do a search for `vsftpd`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Great, the search found an exploit for that FTP server, as seen in the following
    figure:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – Exploit for vsftpd on Metasploit'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.15_B16290.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.15 – Exploit for vsftpd on Metasploit
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the `info` command to gather additional information about this
    module:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the following figure, we can see a lot of useful information, such as the
    name of the exploit, the platform, the release date, and the authors, but the
    most important part for us is the `RHOST`, which is not set, and `RPORT`, which
    is already set by default to `21`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.16 – Exploring additional information of exploits on Metasploit'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.16_B16290.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.16 – Exploring additional information of exploits on Metasploit
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 15.16*, we can call the exploit by either using the long
    name or the identifier (in this case `0`):'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s set `RHOST` to the IP of the target machine:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now the system should reply with a message that `RHOST` was set to the IP address
    specified, but if you want to double-check, you can also use the `show options`
    command, as seen in the following figure:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.17 – Using show options to confirm the exploit settings'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.17_B16290.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.17 – Using show options to confirm the exploit settings
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Now everything seems to be ready to execute the exploit with the following
    command:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And now, as seen in the following figure, we have full access to the target
    machine. In fact, you can see that we can execute a lot of commands on the target
    (victim machine), such as `whoami` (which terrifyingly shows that we are connected
    as root). Also, we did `ifconfig` to confirm that we are issuing the commands
    on the target machine:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18 – Gathering full remote access with Metasploit'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.18_B16290.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.18 – Gathering full remote access with Metasploit
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Those were some simple examples to show you how easy it is to attack a system
    using Metasploit. But from the point of view of defensive security, here are some
    takeaways to highlight:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: The importance of patching to prevent attacks
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of hardening to prevent the execution of remote exploits
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of using offensive tools to test your environment against real threats
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplicity of the attacks and how easy it is to discover information about
    your systems to tailor an attack against your infrastructure and systems
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Metasploit is the most famous offensive security framework, there are
    other tools used by attackers to get into your systems, so let's also look at
    other offensive security tools.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Other offensive hacking tools
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's review the most famous offensive security tools currently available, both
    free and paid.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Searchsploit
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We talked in previous chapters about [https://www.exploit-db.com/](https://www.exploit-db.com/),
    which is a huge database with more than 44,000 exploits available to download.
    The website is great and it shows a lot of useful information in a friendly way,
    but searching for an exploit on the page, downloading it, and then executing it
    could be a bit time-consuming. Here is where `exploit-db` and run them directly
    from the terminal; yes, it's that easy!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do a quick example. Imagine you added a **Joomla** server to your organization
    and you want to test it against known vulnerabilities. You can run the following
    command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `-t` option will just give us results in which the word Joomla is in the
    title of the exploit.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, imagine your boss asked you to install a YouTube plugin on your Joomla
    server. Then, let''s see how we can find out about vulnerabilities related to
    that plugin:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As seen in the following figure, the tool found three vulnerabilities associated
    with YouTube Joomla plugins:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.19 – Finding vulnerabilities using Searchsploit'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.19_B16290.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.19 – Finding vulnerabilities using Searchsploit
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to run the exploit, which is quite easy. First, you need to
    copy the path of the script with the following command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, as seen in the following figure, you will get a response with the full
    path of the script. Just copy and paste that path and you will be able to run
    the exploit!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.20 – Obtaining the path to execute the exploit on Searchsploit'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.20_B16290.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.20 – Obtaining the path to execute the exploit on Searchsploit
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, executing those exploits is very easy, therefore this is
    one of the reasons why you need to *make sure you test those vulnerabilities before
    they are exploited by an attacker*.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: sqlmap
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**sqlmap** is a very powerful penetration testing tool to detect and exploit
    SQL injection vulnerabilities on database servers. It is packed with a lot of
    cool features, including the following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Upload and download files.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump entire database tables.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced search for specific tables or columns across databases.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumeration of users, password hashes, roles, tables, columns, and more.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognition of password hashes and support to crack them with dictionary-based
    attacks.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, `sqlmap` fully supports most common SQL servers, including MySQL,
    PostgreSQL, Microsoft SQL, Microsoft Access, and SQLite.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '`sqlmap` is already preinstalled on Kali Linux, so if you want to learn more
    about the tool, you can type the following command, which highlights the basic
    commands of the tool:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As a fun fact, notice that the `-g` option allows you to process *Google dork*
    results as target URLs.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Weevely
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Weevely** is a very interesting tool that provides a web shell to attack
    web applications. It has a lot of interesting features, including the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: HTTP and HTTPS proxies to browse through the infected web application.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to brute force SQL accounts on the targeted system.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mount the remote filesystem.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct shell access to the target.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload and download files.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File navigation and more.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am sure that you would love to see an attack with this tool, so let's do a
    quick lab to show you how Weevely works.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: For this lab, we will use DVWA as the target machine on our Kali Linux machine.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 12*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287), *Mastering
    Web App Security*, we covered the installation and setup of DVWA, so if you have
    not installed it, then just go back to that chapter and follow our simple steps
    to get it up and running.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Now, assuming that you have DVWA already installed on your Kali Linux machine,
    then we just need to go ahead and run it.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step will be to start the database services with the following command:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, let''s start the Apache server with the following command:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let''s open a web browser to open DVWA using the following address:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '`127.0.0.1/DWVA/`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should see the login page of DVWA, as shown in the following figure:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.21 – DVWA login page'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.21_B16290.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.21 – DVWA login page
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: To log in, just use the admin credentials that you created during the setup
    of DVWA.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you are in, let''s go and change the security to low. To do that,
    just go to the left menu and search for **DVWA Security**, then change the drop-down
    menu to **Low** and click on **Submit**, as shown in the following figure:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.22 – Lowering the security level in DVWA'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.22_B16290.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.22 – Lowering the security level in DVWA
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our target machine is ready to be attacked!
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the shell, let''s go back to Kali and use the following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that `mypassword` is the password of the shell that we are creating and
    the rest is the path and filename of the shell. In this example, I am saving it
    under my user directory with the name `myshell.php`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can navigate to your user directory to confirm that the file was created,
    as shown in the following figure:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.23 – Local copy of the shell created on Weevely'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.23_B16290.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.23 – Local copy of the shell created on Weevely
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go back to DVWA to upload our shell.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: To do that, just go to `myshell.php`, and click on **Upload**.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to copy the location of the file on the server. To do that, just
    copy the first part of the URL (`http://127.0.0.1/DVWA`) and the path highlighted
    in the *successfully uploaded* message (`/hackable/uploads/myshell.php`), as shown
    in the following figure:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.24 – Path of the shell on DVWA'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.24_B16290.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.24 – Path of the shell on DVWA
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the path should look like this:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s again open the console of Kali Linux to execute the shell with
    the following command (notice that here, we are basically adding the path to the
    server plus the password to run the shell):'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And now, as seen in the following figure, you have full access to the server,
    including to see the current user, file navigation, and more:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.25 – Results of the Weevely attack'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.25_B16290.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.25 – Results of the Weevely attack
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are many more tools used for offensive security and we encourage
    you to discover them, but by now, you should have a clear understanding of the
    power of those tools to attack your infrastructure, including servers, web applications,
    and even databases.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed this chapter as much as I did. Here, we learned about logs,
    why they are important, and even how to successfully manage them (log management).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we moved into the technical side of the chapter to find out more about
    the most famous offensive security tool: Metasploit.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Then, to get started with Metasploit, we did a hands-on lab using Armitage and
    Metasploitable.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Once we got more immersed in the Metasploit Framework, we did another hands-on
    lab directly with Metasploit in which we got full control over the target machine.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'But there was more: we did two more labs, one with Searchsploit and another
    very cool lab with Weevely in which we even used the DVWA that we installed in
    [*Chapter 12*](B16290_12_Final_JC_ePub.xhtml#_idTextAnchor287), *Mastering Web
    App Security*.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to move on to another super interesting and very technical chapter
    in which we will discover some of the tools and techniques used in **computer
    forensics!**
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to know more about Metasploit and the available versions, visit
    the official site at [https://www.metasploit.com/](https://www.metasploit.com/).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the official GitHub for Metasploit can be found here: [https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework).'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
