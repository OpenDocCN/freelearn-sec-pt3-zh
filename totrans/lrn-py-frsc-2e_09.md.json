["```\n>>> from dateutil import parser as duparser\n>>> d = duparser.parse('Tuesday December 8th, 2015 at 6:04 PM')\n>>> d.isoformat()\n'2015-12-08T18:04:00'\n>>> d2 = duparser.parse('12/08/2015 18:04')\n>>> d2.isoformat()\n'2015-12-08T18:04:00' \n```", "```\n>>> import datetime\n>>> time_diff = datetime.datetime(1970,1,1) - datetime.datetime(1601,1,1)\n>>> print (time_diff.days * 86400000000)\n11644473600000000 \n```", "```\n>>> from Tkinter import *\n```", "```\n>>> from tkinter import *\n```", "```\nimport sys\nif sys.version_info[0] == 2:\n    from Tkinter import *\nelif sys.version_info[0] == 3:\n    from tkinter import *\n```", "```\n>>> import sys\n>>> if sys.version_info[0] == 2:\n>>>     from Tkinter import *\n>>>     import ttk\n>>> elif sys.version_info[0] == 3:\n>>>     from tkinter import *\n>>>     import tkinter.ttk as ttk\n>>> root = Tk() \n```", "```\n>>> first_label = ttk.Label(root, text=\"Hello World\")\n```", "```\n>>> first_label.pack()\n```", "```\n>>> first_label.config(padding=(10,10)) \n```", "```\n>>> root.geometry('200x100+30+60') \n```", "```\n>>> text = StringVar()\n```", "```\n>>> text.set(\"Enter Text Here\")\n>>> text_entry = ttk.Entry(root, textvariable=text)\n>>> text_entry.pack()\n>>> text.get()\n'Hello World!' \n```", "```\n>>> def clicked(): \n...     print \"The button was clicked!\" \n...  \n>>> go = ttk.Button(root, text=\"Go\", command=clicked) \n>>> go.pack() \nThe button was clicked! \n```", "```\n>>> class SampleClass(object):\n...     def __init__(self, init_cost):\n...         self.cost = init_cost\n...     def number_of_nickels(self):\n...         return int(self.cost * 20)\n... \n```", "```\n>>> s1 = SampleClass(24.60)\n>>> s1.cost\n24.6\n>>> s1.number_of_nickels()\n492\n>>> s1.cost = 15\n>>> s1.number_of_nickels()\n300\n>>> s2 = SampleClass(10)\n>>> s2.number_of_nickels()\n200 \n```", "```\n001 \"\"\"Example usage of Tkinter to convert dates.\"\"\"\n002 import datetime\n003 import logging\n004 import sys\n005 if sys.version_info[0] == 2:\n006     from Tkinter import *\n007     import ttk\n008 elif sys.version_info[0] == 3:\n009     from tkinter import *\n010     import tkinter.ttk as ttk\n011 from dateutil import parser as duparser\n...\n042 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n043 __date__ = 20181027\n044 __description__ = '''This script uses a GUI to show date values\n045     interpreted by common timestamp formats'''\n046 logger = logging.getLogger(__name__)\n```", "```\n049 class DateDecoder(object):\n...\n054     def __init__():\n...\n074     def run():\n```", "```\n084     def build_input_frame():\n...\n119     def build_output_frame():\n```", "```\n151     def convert():\n...\n175     def convert_unix_seconds():\n...\n203     def convert_win_filetime_64():\n...\n239     def convert_chrome_time():\n...\n183     def output():\n```", "```\n286 if __name__ == '__main__':\n287     \"\"\"\n288     This statement is used to initialize the GUI. No\n289     arguments needed as it's a graphic interface\n290     \"\"\"\n291     # Initialize Logging\n292     log_path = 'date_decoder.log'\n293 \n294     logger.setLevel(logging.DEBUG)\n295     msg_fmt = logging.Formatter(\"%(asctime)-15s %(funcName)-20s\"\n296         \"%(levelname)-8s %(message)s\")\n297     fhndl = logging.FileHandler(log_path, mode='a')\n298     fhndl.setFormatter(fmt=msg_fmt)\n299     logger.addHandler(fhndl)\n300 \n301     logger.info('Starting Date Decoder v. {}'.format(__date__))\n302     logger.debug('System ' + sys.platform)\n303     logger.debug('Version ' + sys.version.replace(\"\\n\", \" \"))\n304 \n305     # Create Instance and run the GUI\n306     dd = DateDecoder()\n307     dd.run()\n```", "```\n049 class DateDecoder(object):\n050     \"\"\"\n051     The DateDecoder class handles the construction of the GUI\n052     and the processing of date & time values\n053     \"\"\"\n054     def __init__(self):\n055         \"\"\"\n056         The __init__ method initializes the root GUI window and\n057         variable used in the script\n058         \"\"\"\n```", "```\n059         # Init root window\n060         self.root = Tk()\n061         self.root.geometry(\"500x180+40+40\")\n062         self.root.config(background = '#ECECEC')\n063         self.root.title('Date Decoder')\n```", "```\n065         # Init time values\n066         self.processed_unix_seconds = None\n067         self.processed_windows_filetime_64 = None\n068         self.processed_chrome_time = None\n069 \n070         # Set Constant Epoch Offset\n071         self.epoch_1601 = 11644473600000000\n072         self.epoch_1970 = datetime.datetime(1970,1,1)\n```", "```\n074     def run(self):\n075         \"\"\"\n076         The run method calls appropriate methods to build the\n077         GUI and set's the event listener loop.\n078         \"\"\"\n079         logger.info('Launching GUI')\n080         self.build_input_frame()\n081         self.build_output_frame()\n082         self.root.mainloop() \n```", "```\n084     def build_input_frame(self):\n085         \"\"\"\n086         The build_input_frame method builds the interface for\n087         the input frame\n088         \"\"\"\n089         # Frame Init\n090         self.input_frame = ttk.Frame(self.root)\n091         self.input_frame.config(padding = (30,0))\n092         self.input_frame.pack()\n```", "```\n094         # Input Value\n095         ttk.Label(self.input_frame,\n096             text=\"Enter Time Value\").grid(row=0, column=0)\n```", "```\n098         self.input_time = StringVar()\n099         ttk.Entry(self.input_frame, textvariable=self.input_time,\n100             width=25).grid(row=0, column=1, padx=5)\n```", "```\n102         # Radiobuttons\n103         self.time_type = StringVar()\n104         self.time_type.set('raw')\n105 \n106         ttk.Radiobutton(self.input_frame, text=\"Raw Value\",\n107             variable=self.time_type, value=\"raw\").grid(row=1,\n108                 column=0, padx=5)\n109 \n110         ttk.Radiobutton(self.input_frame, text=\"Formatted Value\",\n111             variable=self.time_type, value=\"formatted\").grid(\n112                 row=1, column=1, padx=5)\n```", "```\n114         # Button\n115         ttk.Button(self.input_frame, text=\"Run\",\n116             command=self.convert).grid(\n117                 row=2, columnspan=2, pady=5)\n```", "```\n119     def build_output_frame(self):\n120         \"\"\"\n121         The build_output_frame method builds the interface for\n122         the output frame\n123         \"\"\"\n124         # Output Frame Init\n125         self.output_frame = ttk.Frame(self.root)\n126         self.output_frame.config(height=300, width=500)\n127         self.output_frame.pack()\n```", "```\n129         # Output Area\n130         ## Label for area\n131         self.output_label = ttk.Label(self.output_frame,\n132             text=\"Conversion Results\")\n133         self.output_label.config(font=(\"\", 16))\n134         self.output_label.pack(fill=X)\n```", "```\n136         ## For Unix Seconds Timestamps\n137         self.unix_sec = ttk.Label(self.output_frame,\n138             text=\"Unix Seconds: N/A\")\n139         self.unix_sec.pack(fill=X)\n140 \n141         ## For Windows FILETIME 64 Timestamps\n142         self.win_ft_64 = ttk.Label(self.output_frame,\n143             text=\"Windows FILETIME 64: N/A\")\n144         self.win_ft_64.pack(fill=X)\n145 \n146         ## For Chrome Timestamps\n147         self.google_chrome = ttk.Label(self.output_frame,\n148             text=\"Google Chrome: N/A\")\n149         self.google_chrome.pack(fill=X)\n```", "```\n151     def convert(self):\n152         \"\"\"\n153         The convert method handles the event when the button is\n154         pushed. It calls to the converters and updates the\n155         labels with new output.\n156         \"\"\"\n157         logger.info('Processing Timestamp: {}'.format(\n158             self.input_time.get()))\n159         logger.info('Input Time Format: {}'.format(\n160             self.time_type.get()))\n```", "```\n162         # Init values every instance\n163         self.processed_unix_seconds = 'N/A'\n164         self.processed_windows_filetime_64 = 'N/A'\n165         self.processed_chrome_time = 'N/A'\n166 \n167         # Use this to call converters\n168         self.convert_unix_seconds()\n169         self.convert_win_filetime_64()\n170         self.convert_chrome_time()\n171 \n172         # Update labels\n173         self.output()\n```", "```\n175     def convert_unix_seconds(self):\n176         \"\"\"\n177         The convert_unix_seconds method handles the conversion of\n178         timestamps per the Unix seconds format\n179         \"\"\"\n180         if self.time_type.get() == 'raw':\n181             try:\n182                 dt_val = datetime.datetime.fromtimestamp(\n183                     float(self.input_time.get())).strftime(\n184                         '%Y-%m-%d %H:%M:%S')\n185                 self.processed_unix_seconds = dt_val\n186             except Exception as e:\n187                 logger.error(str(type(e)) + \",\" + str(e))\n188                 self.processed_unix_seconds = str(\n189                     type(e).__name__)\n```", "```\n191         elif self.time_type.get() == 'formatted':\n192             try:\n193                 converted_time = duparser.parse(\n194                     self.input_time.get())\n195                 self.processed_unix_seconds = str(\n196                         (converted_time - self.epoch_1970\n197                     ).total_seconds())\n198             except Exception as e:\n199                 logger.error(str(type(e)) + \",\" + str(e))\n200                 self.processed_unix_seconds = str(\n201                     type(e).__name__)\n```", "```\n203     def convert_win_filetime_64(self):\n204         \"\"\"\n205         The convert_win_filetime_64 method handles the\n206         conversion of timestamps per the Windows FILETIME format\n207         \"\"\"\n208         if self.time_type.get() == 'raw':\n209             try:\n210                 base10_microseconds = int(\n211                     self.input_time.get(), 16) / 10\n212                 datetime_obj = datetime.datetime(1601,1,1) + \\\n213                     datetime.timedelta(\n214                         microseconds=base10_microseconds)\n215                 dt_val = datetime_obj.strftime(\n216                     '%Y-%m-%d %H:%M:%S.%f')\n217                 self.processed_windows_filetime_64 = dt_val\n218             except Exception as e:\n219                 logger.error(str(type(e)) + \",\" + str(e))\n220                 self.processed_windows_filetime_64 = str(\n221                     type(e).__name__)\n```", "```\n223         elif self.time_type.get() == 'formatted':\n224             try:\n225                 converted_time = duparser.parse(\n226                     self.input_time.get())\n227                 minus_epoch = converted_time - \\\n228                     datetime.datetime(1601,1,1)\n229                 calculated_time = minus_epoch.microseconds + \\\n230                     (minus_epoch.seconds * 1000000) + \\\n231                     (minus_epoch.days * 86400000000)\n```", "```\n232                 self.processed_windows_filetime_64 = str(\n233                     hex(int(calculated_time)*10))\n234             except Exception as e:\n235                 logger.error(str(type(e)) + \",\" + str(e))\n236                 self.processed_windows_filetime_64 = str(\n237                 type(e).__name__)\n```", "```\n239     def convert_chrome_time(self):\n240         \"\"\"\n241         The convert_chrome_time method handles the\n242         conversion of timestamps per the Google Chrome\n243         timestamp format\n244         \"\"\"\n245         # Run Conversion\n246         if self.time_type.get() == 'raw':\n247             try:\n248                 dt_val = datetime.datetime.fromtimestamp(\n249                         (float(self.input_time.get()\n250                     )-self.epoch_1601)/1000000)\n251                 self.processed_chrome_time = dt_val.strftime(\n252                     '%Y-%m-%d %H:%M:%S.%f')\n253             except Exception as e:\n254                 logger.error(str(type(e)) + \",\" + str(e))\n255                 self.processed_chrome_time = str(type(e).__name__)\n```", "```\n257         elif self.time_type.get() == 'formatted':\n258             try:\n259                 converted_time = duparser.parse(\n260                     self.input_time.get())\n261                 chrome_time = (converted_time - self.epoch_1970\n262                     ).total_seconds()*1000000 + self.epoch_1601\n263                 self.processed_chrome_time = str(int(chrome_time))\n264             except Exception as e:\n265                 logger.error(str(type(e)) + \",\" + str(e))\n266                 self.processed_chrome_time = str(type(e).__name__)\n```", "```\n268     def output(self):\n269         \"\"\"\n270         The output method updates the output frame with the\n271         latest value.\n272         \"\"\"\n273         if isinstance(self.processed_unix_seconds, str):\n274             self.unix_sec['text'] = \"Unix Seconds: \" + \\\n275                 self.processed_unix_seconds\n276 \n277         if isinstance(self.processed_windows_filetime_64, str):\n278             self.win_ft_64['text'] = \"Windows FILETIME 64: \" + \\\n279                 self.processed_windows_filetime_64\n280 \n281         if isinstance(self.processed_chrome_time, str):\n282             self.google_chrome['text'] = \"Google Chrome: \" + \\\n283                 self.processed_chrome_time\n```"]