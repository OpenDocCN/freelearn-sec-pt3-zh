["```\n01\\. Function fn = getFunctionAt(currentAddress);\n```", "```\n02\\. Instruction i = getInstructionAt(currentAddress);\n```", "```\n03\\. while(getFunctionContaining(i.getAddress()) == fn){\n```", "```\n04.     String nem = i.getMnemonicString();\n```", "```\n05.     if(nem.equals(\"CALL\")){\n```", "```\n06.         Object[] target_address = i.getOpObjects(0);\n```", "```\n07.         if(target_address[0].toString().equals(\"EBP\")){\n```", "```\n08.             // Do your deobfuscation here.\n```", "```\n09.         }\n```", "```\n10.     }\n```", "```\n11.     i = i.getNext();\n```", "```\n12\\. }\n```", "```\n01\\. fn = getFunctionAt(currentAddress)\n```", "```\n02\\. i = getInstructionAt(currentAddress)\n```", "```\n03\\. while getFunctionContaining(i.getAddress()) == fn:\n```", "```\n04.     nem = i.getMnemonicString()\n```", "```\n05.     if nem == \"CALL\":\n```", "```\n06.         target_address = i.getOpObjects(0)\n```", "```\n07.         if target_address[0].toString()=='EBP':\n```", "```\n08.             # Do your deobfuscation here.\n```", "```\n09.     i = i.getNext()\n```", "```\n>>> apiname = \"lstrlenW\"\n```", "```\n>>> hash = 0\n```", "```\n>>> for c in apiname:\n```", "```\n...     hash = hash << 7 & 0xffffff00 | ( (0xFF&(hash << 7)) | (0xFF&(hash >> 0x19)) ^ ord(c))\n```", "```\n...\n```", "```\n>>> print(hex(hash))\n```", "```\n0x2d40b8f0L\n```", "```\nclass AlinaAPIHash {\n```", "```\n\tpublic static void main(String args[]) {\n```", "```\n\t\tint hash = 0;\n```", "```\n\t\tString apiName = \"lstrlenW\";\n```", "```\n\t\tfor (int i=0; i<apiName.length(); i++) {\n```", "```\n\t\t\thash = (hash << 7 &\n```", "```\n                        0xFFFFFF00 | hash << 7 &\n```", "```\n                        0xFF | hash >> 0x19 &\n```", "```\n                        0xFF ^ apiName.charAt(i)\n```", "```\n                 );\n```", "```\n\t\t\tSystem.out.println(String.format(\"0x%08X\",\n```", "```\n                                                 hash)\n```", "```\n                 );\n```", "```\n\t\t}\n```", "```\n\t\tSystem.out.println(String.format(\"0x%08X\", hash))\n```", "```\n\t}\n```", "```\n}\n```", "```\n01 import pefile\n```", "```\n02 pe=pefile.PE(\"c:\\windows\\system32\\kernel32.dll\")\n```", "```\n03 exports=set()\n```", "```\n04 for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:\n```", "```\n05    exports.add(exp.name.encode('ascii'))\n```", "```\nexports = set(['GetThreadPreferredUILanguages', 'ReleaseMutex', 'InterlockedPopEntrySList', 'AddVectoredContinueHandler', 'ClosePrivateNamespace', … ])\n```", "```\n01\\. from ghidra.program.model.symbol import SourceType\n```", "```\n02\\. from ghidra.program.model.address.Address import *\n```", "```\n03\\. from struct import pack\n```", "```\n04.\n```", "```\n05\\. exports = set(['GetThreadPreferredUILanguages', 'ReleaseMutex', 'InterlockedPopEntrySList', 'AddVectoredContinueHandler', 'ClosePrivateNamespace', 'SignalObjectAndWait', …])\n```", "```\n06\\. def getHash(provided_hash):\n```", "```\n07.     for apiname in exports:\n```", "```\n08.         hash = 0\n```", "```\n09.         for c in apiname:\n```", "```\n10.             hash = hash << 7 & 0xffffff00 | ( (0xFF&(hash << 7)) | (0xFF&(hash >> 0x19)) ^ ord(c))\n```", "```\n11.             if(provided_hash==pack('<L', hash)):\n```", "```\n12.                 return apiname\n```", "```\n13.     return \"\"\n```", "```\n14\\. fn = getFunctionAt(currentAddress)\n```", "```\n15\\. i = getInstructionAt(currentAddress)\n```", "```\n16\\. while getFunctionContaining(i.getAddress()) == fn:\n```", "```\n17.     nem = i.getMnemonicString()\n```", "```\n18.     if nem == \"CALL\":\n```", "```\n19.         target_address = i.getOpObjects(0)\n```", "```\n20.         if target_address[0].toString()=='EBP':\n```", "```\n21.             current_hash = bytes(pack('<L', getInt(currentAddress.add(int(target_address[1].toString(),16)))))\n```", "```\n22.             current_function_from_hash = getHash(current_hash)\n```", "```\n23.             setEOLComment(i.getAddress(), current_function_from_hash)\n```", "```\n24.             print(i.getAddress().toString() + \" \" + nem + \"[EBP + \"+target_address[1].toString()+ \"]\" + \" -> \" + current_function_from_hash)\n```", "```\n25.     i = i.getNext()\n```"]