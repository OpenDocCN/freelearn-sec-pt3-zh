- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Building Automated Security Pipelines with Python Using Third-Party Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方工具构建自动化安全管道
- en: In the previous chapter, we talked about cloud security, data extraction, and
    exploitation. This part is all about making it easier. This chapter looks into
    how Python’s different libraries and tools can be used to create efficient automated
    security pipelines. By incorporating third-party tools, we may improve the functionality
    and scope of these pipelines, assuring comprehensive protection and efficient
    security operations. We’ll discuss being proactive, which includes anticipating
    future problems. In doing so, we’ll use Python, and we’ll combine it with additional
    tools to automate jobs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了云安全、数据提取和利用。本部分内容旨在使这些过程变得更简单。本章将探讨如何利用 Python 的不同库和工具创建高效的自动化安全管道。通过结合第三方工具，我们可以提升这些管道的功能和范围，确保全面的保护和高效的安全操作。我们还将讨论如何采取主动措施，包括预测未来可能出现的问题。在此过程中，我们将使用
    Python，并结合其他工具来实现自动化。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主要内容：
- en: The art of security automation – fundamentals and benefits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全自动化的艺术——基础与益处
- en: What is an application programming interface (API)?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是应用程序接口（API）？
- en: Designing end-to-end security pipelines with Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 设计端到端的安全管道
- en: Integrating third-party tools for enhanced functionality
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成第三方工具以增强功能
- en: Ensuring reliability and resilience in automated workflows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保自动化工作流的可靠性和韧性
- en: Monitoring and continuously improving security pipelines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控并持续改进安全管道
- en: The art of security automation – fundamentals and benefits
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全自动化的艺术——基础与益处
- en: '**Cybersecurity automation** is a method of automating security tasks to reduce
    the time and effort required to respond to threats. This approach leverages advanced
    technologies to detect, prevent, contain, and recover from cyber threats with
    greater efficiency and precision. By automating repetitive and time-consuming
    security tasks, organizations can focus on more strategic initiatives and respond
    to incidents in real time. Automation in cybersecurity not only improves the speed
    and accuracy of threat detection and response but also helps in managing the growing
    complexity and volume of security threats.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络安全自动化**是一种通过自动化安全任务来减少应对威胁所需时间和精力的方法。该方法利用先进技术以更高效、更精确的方式检测、预防、遏制和恢复网络威胁。通过自动化重复且耗时的安全任务，组织可以专注于更具战略性的工作，并实时应对事件。网络安全自动化不仅提高了威胁检测与响应的速度和准确性，还帮助管理日益复杂和庞大的安全威胁。'
- en: The benefits of cybersecurity automation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络安全自动化的好处
- en: 'Automating cybersecurity processes offers numerous advantages, especially in
    busy environments with high workloads. Here are the key benefits:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化网络安全流程在高工作负荷的环境中尤为有益，特别是在繁忙的环境中。以下是主要的好处：
- en: '**Enhanced efficiency**: Automation streamlines tasks in cybersecurity departments,
    reducing the need for manual intervention. This efficiency boost allows professionals
    to allocate time to more critical areas, minimizing the workload and associated
    costs.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高效率**：自动化简化了网络安全部门的任务，减少了手动干预的需求。这一效率提升使专业人员能够将时间分配到更为关键的领域，从而减少工作负担及相关成本。'
- en: '**Proactive cyber threat defense**: Automated systems can detect and thwart
    potential cyberattacks in real time, preventing escalation. Continuous network
    monitoring provides a robust defense against unauthorized access and safeguards
    sensitive data.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动网络威胁防御**：自动化系统可以实时检测并阻止潜在的网络攻击，防止事态升级。持续的网络监控提供了强大的防御，防止未授权访问并保护敏感数据。'
- en: '**Error reduction**: Human error is a common risk in cybersecurity. Automation
    eliminates the potential for mistakes such as forgetting password updates or neglecting
    software upgrades, enhancing overall system reliability.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误减少**：人为错误是网络安全中常见的风险。自动化消除了可能出现的错误，如忘记更新密码或忽视软件升级，从而提高整体系统的可靠性。'
- en: '**Threat intelligence and analysis**: Automated cybersecurity systems provide
    rapid identification of emerging threats. By storing detailed activity logs, these
    systems offer valuable insights into attack patterns, enabling proactive measures
    to fortify data security.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**威胁情报与分析**：自动化网络安全系统能够快速识别新兴威胁。通过存储详细的活动日志，这些系统提供有关攻击模式的宝贵见解，帮助采取积极措施强化数据安全。'
- en: In summary, cybersecurity automation not only improves operational efficiency
    but also fortifies defenses, reduces errors, and empowers businesses with actionable
    threat intelligence.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，网络安全自动化不仅提高了运营效率，还强化了防御，减少了错误，并为企业提供了可操作的威胁情报。
- en: Functions of cybersecurity automation
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络安全自动化的功能
- en: 'Cybersecurity automation streamlines various business operations through the
    following functions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全自动化通过以下功能简化了各项业务操作：
- en: '**Detection and prevention**: One of the primary roles of cybersecurity automation
    is fortifying business defenses against potential threats. It swiftly identifies
    risks and employs automated solutions to halt further damage. While automation
    is crucial, a comprehensive strategy may also involve integrating specific tools
    such as **Residential Proxies** for enhanced protection in areas such as **IP
    Masking**, **Malware Defense**, **Email Filtering**, **Web Application Firewalls**
    (**WAFs**), and **Intrusion Detection** **Systems** (**IDSs**).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检测与预防**：网络安全自动化的主要角色之一是加强企业防御潜在威胁。它迅速识别风险并使用自动化解决方案来阻止进一步的损害。虽然自动化至关重要，但一个全面的战略也可能涉及集成特定工具，如**住宅代理**，以增强在**IP伪装**、**恶意软件防御**、**邮件过滤**、**Web应用防火墙**（**WAFs**）和**入侵检测系统**（**IDSs**）等领域的保护。'
- en: '**Forensics and incident response**: Automation, particularly powered by AI,
    plays a crucial role in forensics, gathering evidence to understand system breaches.
    Incident response involves reacting effectively to such incidents and ensuring
    a well-prepared plan for network attacks. Automated systems aid in comprehending
    the extent of breaches and guide teams on the necessary steps during and after
    an attack.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取证和事件响应**：自动化，尤其是由AI驱动的自动化，在取证中发挥着至关重要的作用，用于收集证据以了解系统漏洞。事件响应涉及有效应对这些事件，并确保网络攻击发生时有一个充分准备的应对计划。自动化系统帮助理解漏洞的范围，并在攻击发生期间及之后指导团队采取必要的步骤。'
- en: '**Remediation**: Automated remediation accelerates problem resolution. In the
    aftermath of an attack, manual tasks can be time-consuming and error-prone. Automated
    remediation allows IT teams to swiftly address issues, enabling a faster return
    to normal operations. It ensures accuracy and efficiency in each step, preventing
    repeated mistakes through automatic detection and immediate alerts if anything
    goes awry during tasks such as software patching or updates.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复**：自动化修复加速了问题的解决。在攻击发生后，手动任务可能既耗时又容易出错。自动化修复使IT团队能够迅速处理问题，从而更快恢复正常操作。它确保每个步骤的准确性和效率，通过自动检测和在任务如软件修补或更新过程中出现问题时立即发出警报，防止重复的错误。'
- en: '**Compliance**: Cybersecurity automation serves as a robust tool for enforcing
    security policies and procedures, demonstrating a commitment to information security
    compliance. In regulated industries such as healthcare or finance, automation
    becomes essential for showcasing due diligence and adherence to best practices.
    It provides a proactive approach to security, highlighting a dedication to maintaining
    a secure network and potentially reducing accountability concerns.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性**：网络安全自动化是执行安全政策和程序的有力工具，体现了对信息安全合规性的承诺。在医疗保健或金融等受监管行业，自动化对于展示尽职调查和遵循最佳实践至关重要。它提供了一种积极的安全方法，强调了维护安全网络的承诺，并可能减少责任问题。'
- en: Incorporating cybersecurity automation into your strategy not only enhances
    overall security but also contributes to operational efficiency and regulatory
    compliance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将网络安全自动化纳入你的战略，不仅能提升整体安全性，还能促进运营效率和合规性。
- en: Cybersecurity automation best practices
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络安全自动化最佳实践
- en: 'Implementing cybersecurity automation requires adherence to best practices
    to effectively scale your security efforts and adapt to the dynamic cyber threat
    landscape. Here are some key guidelines to keep you on the right track:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实施网络安全自动化需要遵循最佳实践，以有效扩展你的安全工作并适应动态变化的网络威胁环境。以下是一些关键指导原则，帮助你保持正确的方向：
- en: '**Establish a comprehensive** **security automation plan**: Develop a clear
    plan for integrating automation into your cybersecurity strategy and adhere to
    it consistently.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建立全面的** **安全自动化计划**：制定清晰的计划，将自动化集成到你的网络安全战略中，并始终如一地执行。'
- en: '**Regularly test automated processes**: Conduct routine tests to ensure that
    automated processes are functioning as intended and are capable of responding
    effectively to emerging threats.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期测试自动化流程**：进行例行测试，确保自动化流程按预期工作，并能够有效应对新出现的威胁。'
- en: '**Evaluate the benefits and drawbacks of automation**: Consider the advantages
    of automation in enhancing security and also assess potential drawbacks that may
    arise if automation is not utilized appropriately.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估自动化的利弊**：考虑自动化在增强安全性方面的优势，并评估如果自动化使用不当可能带来的潜在缺点。'
- en: '**Phased implementation**: Roll out automation gradually, starting with addressing
    commonly occurring security threats. This phased approach allows for smoother
    integration and adaptation.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分阶段实施**：逐步推行自动化，从解决常见的安全威胁开始。此分阶段方法可以实现更顺利的集成和适应。'
- en: '**Integration with existing systems**: Integrate automation seamlessly with
    your existing systems to create a cohesive and efficient cybersecurity infrastructure.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与现有系统的集成**：将自动化与现有系统无缝集成，构建一个统一高效的网络安全基础设施。'
- en: '**Centralized data storage**: Utilize a centralized database for critical data
    storage. This facilitates quick identification of issues and enables prompt resolution.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式数据存储**：使用集中式数据库存储关键数据。这有助于快速识别问题，并能够迅速解决问题。'
- en: '**Engage third-party service providers**: Consider outsourcing cybersecurity
    processes to a reputable third-party service provider. This can relieve your organization
    of the technical complexities associated with maintaining an effective cyber defense
    program.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聘请第三方服务提供商**：考虑将网络安全流程外包给一个信誉良好的第三方服务提供商。这可以减轻贵公司在维护有效的网络防御计划时所面临的技术复杂性。'
- en: '**Employee training**: Educate your staff, particularly the security team,
    on effectively utilizing automated cybersecurity systems. Clearly define the roles
    of both humans and machines in the cybersecurity framework.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**员工培训**：培训员工，特别是安全团队，如何有效使用自动化网络安全系统。明确界定人在网络安全框架中与机器的角色。'
- en: In conclusion, embrace the power of cybersecurity automation to enhance your
    organization’s security posture. Detect threats early, prevent attacks, and minimize
    damage with this powerful tool.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，拥抱网络安全自动化的力量来增强贵组织的安全态势。通过这个强大的工具，早期检测威胁、预防攻击并最小化损害。
- en: Before getting straight into automation, you should be familiar with APIs. Understanding
    APIs is essential because they form the backbone of automated workflows, facilitating
    data exchange, triggering automated actions, and enhancing the overall efficiency
    of security operations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始自动化之前，你应该熟悉API。理解API至关重要，因为它们构成了自动化工作流的核心，促进数据交换、触发自动化操作，并提高安全操作的整体效率。
- en: What is an API?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是API？
- en: An API is essentially a contract between two software applications. It specifies
    how software components should interact, what data they can request, and what
    actions they can perform. APIs enable the integration of different software systems,
    allowing them to work together seamlessly. APIs let developers use certain features
    or get data from a service without needing to know how that service works inside.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: API本质上是两个软件应用之间的契约。它规定了软件组件如何互动、它们可以请求哪些数据以及可以执行哪些操作。API使不同的软件系统能够集成，允许它们无缝协作。API让开发者能够使用某些功能或从服务中获取数据，而不需要了解该服务的内部工作原理。
- en: 'APIs have the following components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: API包含以下组件：
- en: '**Endpoints**: Specific URLs or URIs that an API exposes for different functionalities.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端点**：API为不同功能暴露的特定URL或URI。'
- en: '**Request methods**: HTTP methods such as **GET**, **POST**, **PUT**, **DELETE**,
    and others. These are used to perform different actions on the resources.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求方法**：如**GET**、**POST**、**PUT**、**DELETE**等HTTP方法。这些方法用于对资源执行不同的操作。'
- en: '**Request and response formats**: APIs define how data should be structured
    when it’s sent to the API (request) and how the API will structure its response.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求和响应格式**：API定义了数据在发送到API时应如何构造（请求），以及API如何构造其响应。'
- en: 'Let’s imagine an API for a book catalog, and discuss the aforementioned components
    for it. In this API, we might have different endpoints representing various functionalities:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设有一个图书目录的API，并讨论上述组件。在这个API中，我们可能有不同的端点，表示各种功能：
- en: '**/books**: This endpoint could be used to retrieve a list of all the books
    in the catalog.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/books**：此端点可用于检索目录中所有图书的列表。'
- en: '**/books/{id}**: This endpoint could be used to retrieve details about a specific
    book, where **{id}** is the unique identifier of the book.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/books/{id}**：此端点可用于检索特定图书的详情，其中**{id}**是图书的唯一标识符。'
- en: 'So, the API might expose the following URLs:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，API可能会公开以下URL：
- en: '**https://api.example.com/books**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**https://api.example.com/books**'
- en: '**https://api.example.com/books/123** (assuming **123** is the ID of a specific
    book)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**https://api.example.com/books/123**（假设**123**是特定图书的ID）'
- en: 'Now, coming to request methods, HTTP methods such as `GET`, `POST`, `PUT`,
    and `DELETE` are used to perform different actions on the resources represented
    by the endpoints. Let’s look at some examples:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，讲到请求方法，HTTP方法如`GET`、`POST`、`PUT`和`DELETE`用于对由端点表示的资源执行不同的操作。让我们来看一些示例：
- en: '**GET /books**: Retrieves a list of all books'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET /books**：检索所有图书的列表'
- en: '**GET /books/123**: Retrieves details about the book with ID **123**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET /books/123**：获取ID为**123**的图书详情'
- en: '**POST /books**: Adds a new book to the catalog'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POST /books**：向目录中添加一本新书'
- en: '**PUT /books/123**: Updates the details of the book with ID **123**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PUT /books/123**：更新ID为**123**的图书详情'
- en: '**DELETE /books/123**: Deletes the book with ID **123** from the catalog'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DELETE /books/123**：从目录中删除ID为**123**的图书'
- en: As for the request and response formats, APIs define how data should be structured
    when it’s sent to the API (request) and how the API will structure its response.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 至于请求和响应格式，API定义了数据在发送到API时（请求）应如何结构化，以及API如何结构化其响应。
- en: 'For example, when adding a new book (`POST` request), the request might be
    in JSON format, specifying details such as title, author, and genre. The API might
    expect a request similar to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当添加一本新书（`POST`请求）时，请求可能采用JSON格式，指定诸如标题、作者和类别等详细信息。API可能会期望类似以下的请求：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In response to a `GET` request for a specific book, the API might return information
    in a structured format, such as JSON:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 针对特定图书的`GET`请求，API可能以结构化格式返回信息，例如JSON：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In summary, the combination of endpoints, request methods, and request/response
    formats allows developers to interact with an API in a standardized way. It provides
    a clear and consistent means of accessing and manipulating data in the book catalog,
    or any other system for which the API is designed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，端点、请求方法和请求/响应格式的组合使得开发人员可以以标准化的方式与API进行交互。它提供了一个清晰一致的方式来访问和操作图书目录中的数据，或者任何其他API所设计的系统。
- en: With this fundamental understanding of APIs, we can move on to the next section,
    where we will cover the design and development of security pipelines.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对API的基本理解，我们可以进入下一个部分，在那里我们将涵盖安全管道的设计和开发。
- en: Designing end-to-end security pipelines with Python
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python设计端到端的安全管道
- en: A **security pipeline** can be envisioned as a strategic assembly line of automated
    processes and tools that are designed to fortify applications against potential
    threats and vulnerabilities. It extends beyond the traditional boundaries of development,
    reaching into deployment and operational phases. The essence lies in integrating
    security seamlessly into the software development lifecycle, embodying the principles
    of **DevSecOps**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全管道**可以被视为一个战略性的自动化流程和工具的组装线，旨在加强应用程序对潜在威胁和漏洞的防护。它超越了传统开发的界限，延伸到部署和操作阶段。其核心在于将安全无缝集成到软件开发生命周期中，体现了**DevSecOps**的原则。'
- en: 'The significance of a security pipeline in the context of cybersecurity can
    be outlined as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络安全的背景下，安全管道的重要性可以概述如下：
- en: '**Early detection of vulnerabilities**: By integrating security checks into
    the development process, vulnerabilities can be identified early in the lifecycle,
    reducing the cost and effort required to fix them. This proactive approach is
    crucial in preventing security issues from reaching production.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞的早期检测**：通过将安全检查集成到开发过程中，可以在生命周期的早期发现漏洞，从而减少修复漏洞所需的成本和努力。这种主动的方式对于防止安全问题进入生产环境至关重要。'
- en: '**Consistent security practices**: Security pipelines enforce consistent security
    practices across the development, deployment, and operation phases. This consistency
    helps in maintaining a robust security posture and reduces the risk of overlooking
    security measures.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致的安全实践**：安全管道在开发、部署和运营阶段强制执行一致的安全实践。这种一致性有助于维护强健的安全态势，并减少忽视安全措施的风险。'
- en: '**Automation of security processes**: Security pipelines automate various security
    processes, such as code analysis, vulnerability scanning, and compliance checks.
    Automation not only accelerates the development pipeline but also ensures that
    security measures are consistently applied without relying solely on manual efforts.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全过程的自动化**：安全管道自动化了各种安全过程，如代码分析、漏洞扫描和合规性检查。自动化不仅加速了开发流程，还确保了安全措施的一致应用，而不完全依赖于手动操作。'
- en: '**Continuous monitoring and improvement**: A security pipeline facilitates
    continuous monitoring of applications and systems for security issues. This continuous
    feedback loop allows teams to adapt to evolving threats, update security controls,
    and improve the overall security posture over time.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续监控与改进**：安全管道促进了对应用程序和系统的持续安全监控。这个持续的反馈环路允许团队适应不断变化的威胁，更新安全控制，并随着时间的推移改进整体的安全态势。'
- en: '**Integration with DevOps practices**: Security pipelines align with DevOps
    principles by seamlessly integrating security into the **continuous integration**/**continuous
    deployment** (**CI**/**CD**) workflows. This integration ensures that security
    is not a bottleneck but rather an integral part of the rapid and iterative development
    process.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与DevOps实践的集成**：安全管道通过无缝集成安全到**持续集成**/**持续部署**（**CI**/**CD**）工作流中，遵循DevOps原则。这种集成确保了安全不会成为瓶颈，而是快速迭代开发过程中的一个不可或缺的部分。'
- en: 'An end-to-end security pipeline covers the entire software development lifecycle,
    from the initial stages of code development to deployment, as well as ongoing
    operations. It involves the following key stages:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端安全管道涵盖了整个软件开发生命周期，从代码开发的初始阶段到部署，以及持续的运营。它涉及以下关键阶段：
- en: '**Development phase**: Security checks begin in the development phase, where
    secure coding practices are enforced. Developers utilize tools for static code
    analysis, identifying and addressing security vulnerabilities in the early stages
    of writing code.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开发阶段**：安全检查从开发阶段开始，在该阶段强制执行安全编码实践。开发人员利用静态代码分析工具，识别并解决代码编写初期的安全漏洞。'
- en: '**Build and integration phase**: During the build and integration phase, the
    security pipeline performs automated tests, including **Dynamic Application Security
    Testing** (**DAST**), **Dependency Scanning**, and other security checks. This
    ensures that the built artifacts are free from vulnerabilities before the deployment
    stage takes place.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建和集成阶段**：在构建和集成阶段，安全管道执行自动化测试，包括**动态应用安全测试**（**DAST**）、**依赖扫描**以及其他安全检查。这确保了在部署阶段之前，构建的工件不含漏洞。'
- en: '**Deployment phase**: Security controls are applied as part of the deployment
    process, ensuring that the application is configured securely and that no new
    vulnerabilities are introduced during deployment. Container security checks may
    also be included if the application is containerized.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署阶段**：安全控制作为部署过程的一部分进行应用，确保应用程序配置安全，并且在部署过程中不会引入新的漏洞。如果应用程序采用容器化，容器安全检查也可能包括在内。'
- en: '**Operations and monitoring phase**: Continuous monitoring is a key component
    of an end-to-end security pipeline. Security measures such as log analysis, intrusion
    detection, and anomaly detection help with identifying and responding to security
    incidents promptly.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运营与监控阶段**：持续监控是端到端安全管道的关键组成部分。安全措施，如日志分析、入侵检测和异常检测，帮助及时识别和应对安全事件。'
- en: '**Feedback loop and iterative improvement**: The security pipeline provides
    a feedback loop that allows teams to continuously improve security measures. Lessons
    learned from security incidents or vulnerabilities discovered in production are
    fed back into the development cycle, fostering a culture of continuous improvement.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反馈环路与迭代改进**：安全管道提供了一个反馈环路，允许团队不断改进安全措施。从生产中发现的安全事件或漏洞所获得的经验教训会反馈到开发周期中，促进持续改进的文化。'
- en: In summary, an end-to-end security pipeline is a comprehensive approach to integrating
    security into every phase of the software development lifecycle. It ensures that
    security is not a one-time consideration but a continuous and integral part of
    the development and operational processes, contributing to a more resilient and
    secure application or system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，端到端的安全流水线是将安全性整合到软件开发生命周期各个阶段的全面方法。它确保安全性不是一次性的考虑，而是开发和运营过程中持续且不可或缺的一部分，从而有助于构建更具韧性和安全性的应用程序或系统。
- en: Even though the use of Python in creating a DevSecOps pipeline is minimal, we
    can always use Python to write intermediate scripts for various purposes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在创建 DevSecOps 流水线时 Python 的使用较少，但我们始终可以使用 Python 编写中间脚本，用于各种目的。
- en: To build upon this foundation, next, we’ll explore how to integrate third-party
    tools to enhance the functionality and effectiveness of our security pipeline.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，接下来我们将探索如何集成第三方工具，以增强我们安全流水线的功能和效果。
- en: Integrating third-party tools for enhanced functionality
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成第三方工具以增强功能
- en: This section covers the process of using Python so that you can include the
    popular web application security scanner ZAP in your security workflow. You can
    speed up vulnerability assessments and easily incorporate them into your development
    cycle by automating ZAP scans. We chose ZAP because it is the most widely used
    web application scanner on the market, is open source, and is extremely powerful.
    Additionally, we’ll explore how to leverage CI/CD for automation and how to integrate
    Beagle Security, a proprietary automated penetration testing tool for web applications
    and APIs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容介绍了如何使用 Python 将流行的 Web 应用程序安全扫描器 ZAP 集成到您的安全工作流中。通过自动化 ZAP 扫描，您可以加速漏洞评估并轻松将其融入开发周期。我们选择
    ZAP 是因为它是市场上最广泛使用的 Web 应用程序扫描器，开源且功能强大。此外，我们还将探讨如何利用 CI/CD 进行自动化，以及如何集成 Beagle
    Security —— 一个专有的 Web 应用程序和 API 渗透测试自动化工具。
- en: ZAP is a widely used open source web application security scanner. It helps
    in identifying security vulnerabilities in web applications during the development
    and testing phases. ZAP provides a range of features, including automated scanning,
    passive scanning, active scanning, and API access, making it an excellent tool
    for integrating into automated security pipelines.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP 是一个广泛使用的开源 Web 应用程序安全扫描器，帮助在开发和测试阶段识别 Web 应用程序中的安全漏洞。ZAP 提供了多种功能，包括自动扫描、被动扫描、主动扫描和
    API 访问，使其成为集成到自动化安全流水线中的理想工具。
- en: Why automate ZAP with Python?
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用 Python 自动化 ZAP？
- en: 'Automating ZAP using Python offers several advantages:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 自动化 ZAP 有几个优势：
- en: '**Efficiency**: Automation reduces the manual effort required for security
    testing, allowing teams to focus on other critical tasks.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：自动化减少了进行安全测试所需的人工工作，使团队能够专注于其他关键任务。'
- en: '**Consistency**: Automated tests ensure that security scans are performed consistently
    across different environments and iterations.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：自动化测试确保在不同环境和版本中始终如一地执行安全扫描。'
- en: '**Integration**: Python’s extensive libraries and frameworks make it easy to
    integrate ZAP into existing CI/CD pipelines and toolchains.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成**：Python 的广泛库和框架使得将 ZAP 集成到现有的 CI/CD 流水线和工具链中变得容易。'
- en: '**Customization**: Python allows you to easily customize ZAP scans to fit specific
    project requirements.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制化**：Python 允许您轻松定制 ZAP 扫描，以满足特定项目的需求。'
- en: '**Scalability**: Automated scans can be easily scaled to accommodate large
    and complex web applications.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：自动化扫描可以轻松扩展，以适应大型复杂的 web 应用程序。'
- en: Setting up the ZAP automation environment
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 ZAP 自动化环境
- en: 'Before we dive into automating ZAP with Python, let’s set up our environment:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨如何使用 Python 自动化 ZAP 之前，先来设置我们的环境：
- en: '**Install ZAP**: Download and install ZAP from the official website ([https://www.zaproxy.org/](https://www.zaproxy.org/)).'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 ZAP**：从官方网站 [https://www.zaproxy.org/](https://www.zaproxy.org/) 下载并安装
    ZAP。'
- en: '**Python environment**: Ensure you have Python installed on your system. You
    can download Python from [https://www.python.org/](https://www.python.org/) and
    set up a virtual environment for your project.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Python 环境**：确保您的系统已安装 Python。您可以从 [https://www.python.org/](https://www.python.org/)
    下载 Python，并为您的项目设置虚拟环境。'
- en: '**ZAP API key**: Generate an API key in ZAP. This key will be used to authenticate
    API requests from our Python scripts.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ZAP API 密钥**：在 ZAP 中生成 API 密钥。该密钥将用于对我们的 Python 脚本发出的 API 请求进行身份验证。'
- en: Automating ZAP with Python
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 自动化 ZAP
- en: 'Now, let’s look into the process of automating ZAP using Python:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解如何使用 Python 自动化 ZAP 的过程：
- en: '**Install the required Python packages**: We’ll need the **python-owasp-zap-v2**
    package to interact with ZAP programmatically. Install it using **pip**:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装所需的 Python 包**：我们需要 **python-owasp-zap-v2** 包来以编程方式与 ZAP 进行交互。使用 **pip**
    安装它：'
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Initialize a ZAP session**: In our Python script, we’ll start by initializing
    a session with ZAP:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化 ZAP 会话**：在我们的 Python 脚本中，我们将首先初始化与 ZAP 的会话：'
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Configure target URLs**: Specify the URLs of the web applications you want
    to scan:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置目标 URL**：指定你要扫描的网页应用程序的 URL：'
- en: '[PRE4]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Perform an active scan**: Next, we’ll trigger an active scan on the specified
    target URL:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行主动扫描**：接下来，我们将在指定的目标 URL 上触发一个主动扫描：'
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Get scan results**: Once the scan is complete, we can retrieve the scan results:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取扫描结果**：一旦扫描完成，我们可以检索扫描结果：'
- en: '[PRE6]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Generate a report**: Finally, we can generate a report of the scan’s findings:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成报告**：最后，我们可以生成扫描结果的报告：'
- en: '[PRE7]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s enhance the provided script by adding a function to send the result to
    a webhook. This will allow us to integrate it seamlessly with communication platforms
    such as Slack or Microsoft Teams, which typically require specific formats to
    accept and display the results effectively. You can format the result however
    you see fit. So, let’s add that function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加一个功能来增强提供的脚本，该功能可以将结果发送到 webhook。这将允许我们与 Slack 或 Microsoft Teams 等通信平台无缝集成，这些平台通常需要特定的格式才能有效地接受和展示结果。你可以根据需要格式化结果。那么，让我们添加这个功能：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this updated script, I’ve defined a `send_webhook_notification` function
    that takes the generated report as input and sends it to the specified webhook
    URL using an HTTP POST request. The `main` function remains the same, but after
    generating the report, it calls the `send_webhook_notification` function to send
    the report to the webhook endpoint.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更新后的脚本中，我定义了一个 `send_webhook_notification` 函数，它以生成的报告为输入，并使用 HTTP POST 请求将其发送到指定的
    webhook URL。`main` 函数保持不变，但在生成报告后，它会调用 `send_webhook_notification` 函数将报告发送到 webhook
    端点。
- en: Note that you should replace `'https://your.webhook.endpoint'` with the actual
    URL of your webhook endpoint.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你应该将 `'https://your.webhook.endpoint'` 替换为实际的 webhook 端点 URL。
- en: With this addition, the script will now send the scan results to the specified
    webhook endpoint after completing the security scan. Make sure your webhook endpoint
    can receive and process the incoming data accordingly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这个功能后，脚本将在完成安全扫描后将扫描结果发送到指定的 webhook 端点。确保你的 webhook 端点能够接收并处理传入的数据。
- en: Now, let’s explore CI/CD, the method we’ll use to integrate ZAP into the development
    workflow.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索 CI/CD，作为将 ZAP 集成到开发工作流中的方法。
- en: CI/CD – what is it and why is it important for security automation?
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD——它是什么，为什么它对安全自动化如此重要？
- en: '**CI** means developers regularly add their code changes to a shared code base.
    Each time this happens, automated tests are run to catch any mistakes early. **CD**
    goes a step further, automatically putting those changes into action in the real
    world after they pass all tests.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI** 意味着开发人员定期将他们的代码更改添加到共享代码库中。每次发生这种情况时，都会运行自动化测试来尽早发现任何错误。**CD** 更进一步，在所有测试通过后，自动将这些更改投入实际应用。'
- en: 'Let’s take a look at why CI/CD is important for security automation:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为什么 CI/CD 对安全自动化如此重要：
- en: '**Faster updates**: CI/CD lets us deliver updates to our software quickly and
    safely.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的更新**：CI/CD 使我们能够快速、安全地交付软件更新。'
- en: '**Better quality**: Automated testing helps us find and fix problems before
    they affect users.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的质量**：自动化测试帮助我们在问题影响用户之前发现并修复它们。'
- en: '**Less manual work**: With automation, we spend less time doing repetitive
    tasks.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更少的手动工作**：通过自动化，我们可以花更少的时间做重复性的工作。'
- en: '**Team collaboration**: CI/CD brings developers, testers, and operations teams
    together to work more efficiently.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队协作**：CI/CD 将开发人员、测试人员和运维团队聚集在一起，更高效地工作。'
- en: Now, let’s see how we can use Jenkins to automate ZAP.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用 Jenkins 来自动化 ZAP。
- en: Introduction to Jenkins
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jenkins 简介
- en: Jenkins is a free tool that helps set up and manage CI/CD pipelines. It’s easy
    to customize and works with many other tools. Jenkins makes it simple to automate
    tasks such as building, testing, and deploying software.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一个免费的工具，帮助设置和管理 CI/CD 流水线。它容易定制并且可以与许多其他工具配合使用。Jenkins 简化了自动化任务，比如构建、测试和部署软件。
- en: 'Let’s understand why we should use Jenkins for security automation:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解一下为什么我们应该使用 Jenkins 进行安全自动化：
- en: '**Free and open source**: Jenkins doesn’t cost anything to use, and anyone
    can contribute to its development.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免费和开源**：Jenkins 使用时不收取任何费用，任何人都可以为其开发做出贡献。'
- en: '**Flexible**: Jenkins can be customized to work with different tools and technologies,
    making it adaptable to different projects.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：Jenkins 可以根据不同的工具和技术进行定制，使其适应不同的项目。'
- en: '**Supportive community**: There’s a big community of Jenkins users who share
    tips and help each other out.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持性社区**：Jenkins 用户有一个庞大的社区，他们分享技巧并互相帮助。'
- en: '**Scales easily**: Jenkins can handle projects of all sizes, from small teams
    to large organizations.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻松扩展**：Jenkins 可以处理各种规模的项目，从小型团队到大型组织。'
- en: 'Integrating the ZAP automation script into a Jenkins pipeline involves defining
    stages and steps in `Jenkinsfile` format to execute the script as part of the
    pipeline. Let’s learn how to set up a Jenkins pipeline to run the ZAP automation
    script:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ZAP 自动化脚本集成到 Jenkins 管道中，涉及到在 `Jenkinsfile` 格式中定义阶段和步骤，以将脚本作为管道的一部分执行。让我们学习如何设置
    Jenkins 管道来运行 ZAP 自动化脚本：
- en: '**Configure Jenkins**: First, ensure that Jenkins is set up and configured
    correctly on your system.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置 Jenkins**：首先，确保 Jenkins 已正确安装并配置在你的系统中。'
- en: '**Create a Jenkins pipeline**: Create a new pipeline project in Jenkins and
    configure it to use a **Jenkinsfile** file from source control (for example, a
    Git repository).'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建 Jenkins 管道**：在 Jenkins 中创建一个新的管道项目，并将其配置为使用源代码管理中的 **Jenkinsfile** 文件（例如
    Git 仓库）。'
- en: '**Define the stages and steps in a Jenkinsfile**: The following is an example
    **Jenkinsfile** that defines the stages and steps to execute the ZAP automation
    script:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 Jenkinsfile 中定义阶段和步骤**：以下是一个示例 **Jenkinsfile**，它定义了执行 ZAP 自动化脚本的阶段和步骤：'
- en: '[PRE9]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Script execution**: Here’s a breakdown of the execution process to provide
    context for each substep:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**脚本执行**：以下是执行过程的详细说明，以便为每个子步骤提供背景：'
- en: The **agent any** directive tells Jenkins to execute the pipeline on any available
    agent.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**agent any** 指令告诉 Jenkins 在任何可用的代理上执行管道。'
- en: The **stages** block defines the different stages of the pipeline.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**阶段**块定义了管道的不同阶段。'
- en: The **Initialize** stage checks out the source code from the repository if needed.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化**阶段会从仓库中检出源代码（如果需要的话）。'
- en: The **ZAP Scan** stage executes the ZAP automation script. In this example,
    it activates a Python virtual environment, installs the required packages, and
    executes the script (**zap_scan.py**).
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ZAP 扫描**阶段执行 ZAP 自动化脚本。在此示例中，它激活了一个 Python 虚拟环境，安装所需的包，并执行脚本（**zap_scan.py**）。'
- en: Ensure that **zap_scan.py** and the Jenkinsfile are present in the source code
    repository.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 **zap_scan.py** 和 Jenkinsfile 已存在于源代码仓库中。
- en: '**Save and run the pipeline**: Save the **Jenkinsfile** file, configure any
    additional settings if necessary, and run the pipeline.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保存并运行管道**：保存 **Jenkinsfile** 文件，配置任何额外的设置（如有必要），并运行管道。'
- en: '**View the results**: Once the pipeline execution is complete, you can view
    the results, including the ZAP scan report and webhook notifications if configured.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查看结果**：管道执行完成后，你可以查看结果，包括 ZAP 扫描报告和配置的 webhook 通知。'
- en: Important note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Ensure that the Jenkins environment has Python installed and that it has access
    to the internet to download the required packages.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Jenkins 环境已安装 Python，并且可以访问互联网以下载所需的包。
- en: Customize the pipeline script according to your project’s requirements, such
    as configuring Git repository details, specifying Python versions, and adjusting
    paths as needed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目需求定制管道脚本，例如配置 Git 仓库详细信息、指定 Python 版本，并根据需要调整路径。
- en: Set up webhook endpoints to receive notifications from the pipeline as required.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 webhook 端点，以根据需要接收来自管道的通知。
- en: By following these steps, you can integrate the ZAP automation script into a
    Jenkins pipeline to automate security testing in your CI/CD workflow.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，你可以将 ZAP 自动化脚本集成到 Jenkins 管道中，以自动化 CI/CD 工作流中的安全测试。
- en: We have successfully created an automated pipeline with the open source tools
    ZAP and Jenkins. With a few minor code modifications, you can integrate this into
    your development cycle as the concept remains the same – just the tools you explicitly
    require have to be identified.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地创建了一个使用开源工具 ZAP 和 Jenkins 的自动化管道。通过少量代码修改，你可以将其集成到开发周期中，因为概念保持不变——只需要明确识别你所需的工具。
- en: This time, let’s integrate Beagle Security, a proprietary program, into our
    workflow.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将把 Beagle Security，一款专有程序，集成到我们的工作流中。
- en: Integrating Beagle Security into our security pipeline
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we’ll explore how to automate the process of testing an application
    using Beagle Security’s API and Python. Beagle Security provides a comprehensive
    suite of APIs that enable developers to seamlessly integrate security testing
    into their CI/CD pipelines or automation workflows. By leveraging these APIs,
    developers can initiate tests, monitor their progress, retrieve results, and much
    more, all done programmatically.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Beagle Security’s API
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we delve into the automation process, let’s familiarize ourselves with
    the key endpoints provided by Beagle Security’s API:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '**Start a test** (**POST /test/start**):'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initiates a security test for a specified application
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires the application token
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the status URL, result URL, result token, and a message indicating the
    success or failure of the test start
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stop a test** (**POST /test/stop**):'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Halts a running test
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires the application token
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns a status code and a message indicating the success or failure of the
    stop request
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get test result** (**GET /test/result**):'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieves the result of a completed test in JSON format
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires the application token and result token
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the test result in JSON format, along with a status code and a message
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To fully utilize the potential of the Beagle Security platform, you can benefit
    from the versatile and user-friendly design of the v2 APIs. The whole API documentation
    is available at [https://beaglesecurity.com/developer/apidoc](https://beaglesecurity.com/developer/apidoc);
    however, we will only be using a selection of them in this chapter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a clear understanding of the API endpoints provided by Beagle
    Security, let’s proceed with automating the testing process using Python.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Automating testing with Python
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To automate the testing process, we’ll utilize Python’s `requests` library
    to interact with Beagle Security’s API endpoints. The following is a step-by-step
    guide on how to implement each part of the automation process:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '**Retrieve projects and create new ones**: Before we can begin testing methods,
    we must check that our project is present within Beagle Security. If it is missing,
    we will quickly create a replacement:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s take a closer look at this code snippet:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We import the **requests** module to handle HTTP requests.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The **get_projects** function sends a **GET** request to the Beagle Security
    API to retrieve existing projects associated with the provided access token.
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The **create_project** function sends a **POST** request to create a new project
    with the specified name.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, we fetch the existing projects and create a new one if the
    desired project name is not found in the list of projects retrieved.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create a new application**: Once the project framework has been constructed,
    we will proceed to build a new application beneath it:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s take a closer look at this code:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **create_application** function sends a **POST** request to create a new
    application under the specified project.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It requires parameters such as **project_id**, **name**, and **url** for the
    new application.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the usage example, we provide the project ID, application name, and URL to
    create a new application.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Verify the domain**: Before testing, domain ownership verification is required
    to guarantee proper ownership and authorization for security assessments:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s take a look at this code example:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **verify_domain** function sends a **GET** request to obtain the domain
    verification signature for the specified application token.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It constructs the URL dynamically using f-strings to include the application
    token in the request.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the usage example, we provide the application token to retrieve the domain
    verification signature.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Start the test**: After domain validation, we begin the security test for
    our application:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here’s an explanation for this code:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **start_test** function sends a **POST** request to initiate the security
    test for the specified application token.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It includes the application token in the request payload.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the usage example, we pass the application token to start the test.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s merge all of these functions into a single script that we can use
    for our automated workflow:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `main()` function serves as the entry point of our Python script. It orchestrates
    the various steps involved in automating application testing using Beagle Security’s
    API. Let’s break down each part of the `main()` function in detail:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '**Argument validation**: The function begins by checking if the user has provided
    the required command-line arguments. In this case, we expect at least two arguments:
    the script name and the project name. If fewer than two arguments are provided,
    the function prints a usage message and exits with an error code.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project name extraction**: If the correct number of arguments is provided,
    the script extracts the project name from the command-line arguments. This is
    done using **sys.argv[1]**, which retrieves the second command-line argument (the
    first argument is always the script’s name).'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Additional variables are defined**: Next, we define additional variables,
    such as **application_name**, **application_url**, and **webhook_url**. These
    variables represent the name, URL, and webhook URL of the application being tested,
    respectively. These values are placeholders and should be replaced with actual
    values relevant to your application.'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code block is related to the previous three points and demonstrates
    their implementation in Python:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Retrieve or create a project**: The script calls the **get_projects()** function
    to retrieve a list of existing projects from Beagle Security. It then attempts
    to find the project specified by the user. If the project does not exist (**project_id**
    is **None**), the script creates a new project using the **create_project()**
    function and assigns the obtained project ID to **project_id**:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Create the application**: Once we know the project exists, the script proceeds
    to create a new application under the specified project. It calls the **create_application()**
    function, passing the project ID, application name, and URL as arguments. The
    function returns a dictionary containing information about the newly created application,
    from which we extract the application token (**applicationToken**):'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Verify the domain**: The script verifies domain ownership for the newly created
    application by calling the **verify_domain()** function with the application token
    as an argument. This step ensures that the security tests are conducted by the
    rightful owner:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Start the test**: With domain ownership verified, the script initiates a
    security test for the application by calling the **start_test()** function with
    the application token as an argument. It then extracts **result_token** from the
    response, which is needed to retrieve the test results later:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Send the results to a webhook**: Finally, the script sends the test results
    to a webhook URL by calling the **send_results_to_webhook()** function with the
    application token, result token, and webhook URL as arguments. It prints the status
    code of the webhook’s response for verification purposes:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By using Beagle Security’s API and Python, we built a fully automated flow that
    we will now put into our CI/CD flow while using GitHub Actions as our tool of
    choice.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions enables you to define workflows directly within your repository’s
    code base, automating tasks such as building, testing, and deploying your applications.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s create a GitHub Actions workflow so that we can start a test on code
    push to the repository:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a workflow file**: Begin by creating a **.github/workflows** directory
    in your repository if it doesn’t already exist. Inside this directory, create
    a YAML file where you will define your GitHub Actions workflow. You can name this
    file whatever you like – for example, **beagle_security_test.yml**.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Define the workflow’s steps**: Define the steps of your workflow within the
    YAML file. These steps will include tasks such as checking out the code, running
    tests, and interacting with Beagle Security’s API:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that the GitHub Actions workflow is set up, we can integrate automated testing
    into the workflow using Beagle Security.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a Python script (`beagle_security_test.py`) to interact with Beagle
    Security’s API and automate the testing process. The Python script contains functions
    to interact with Beagle Security’s API, including retrieving projects, creating
    applications, verifying domains, and starting tests.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the GitHub Actions workflow, add a step to execute the Python script,
    ensuring that the necessary dependencies (for example, the `requests` library)
    are installed:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: By integrating automated testing with Beagle Security into GitHub Actions, you
    can speed up the process of delivering high-quality, safe software while reducing
    manual effort and increasing overall efficiency.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: While APIs are designed to be flexible and for custom use cases, Beagle Security
    also offers plugins for all CI/CD tools to speed up the process for you. You can
    find the full documentation at [https://beaglesecurity.com/developer/devsecopsdoc](https://beaglesecurity.com/developer/devsecopsdoc).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, in this section, we identified OWASP ZAP and Beagle Security as
    our automated DAST tools, and we built two security pipelines while utilizing
    Jenkins and GitHub Actions. We only covered basic routines here; however, we can
    modify them to meet our needs.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll learn how to achieve resilience and reliability in
    our automated workflows.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring reliability and resilience in automated workflows
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reliability and resilience are fundamental aspects of any automated workflow,
    especially in the context of DevOps, where CI/CD pipelines are prevalent. In this
    section, we will delve into various strategies and best practices that you can
    use to ensure the reliability and resilience of your automated workflows.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Robust error-handling mechanisms
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Error handling is crucial in automated workflows to gracefully manage unexpected
    failures and errors. The following are some robust error-handling mechanisms:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '**Exception handling**: Implement **try**-**except** blocks to catch and handle
    exceptions that may occur during script execution. This allows for graceful degradation
    and prevents the entire workflow from failing due to isolated errors.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: Incorporate logging mechanisms to record errors, warnings, and
    informational messages. Detailed logs facilitate troubleshooting and provide valuable
    insights into the execution flow of automated workflows.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Meaningful error messages**: Ensure that error messages are informative and
    actionable, providing relevant details about the nature of the error and potential
    resolution steps.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing retry logic
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Transient failures, such as network timeouts or temporary service disruptions,
    are common in distributed systems. Implementing retry logic helps mitigate the
    impact of such failures:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '**Exponential backoff**: Use exponential backoff strategies when retrying failed
    operations to prevent overwhelming the system with repeated requests. Gradually
    increasing the interval between retries reduces the likelihood of exacerbating
    the issue.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retry limits and expiry**: Define sensible limits on the number of retries
    and the maximum duration for retry attempts. Excessive retries can prolong downtime
    and increase resource consumption, while indefinite retries may indicate a systemic
    issue that requires manual intervention.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building idempotent operations
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Designing idempotent operations ensures that repeated executions produce the
    same outcome, regardless of the previous state:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '**Idempotent scripts**: Structure scripts and workflows so that they’re idempotent,
    meaning they can be safely rerun without causing unintended side effects or inconsistencies
    in the system’s state. This is particularly important in scenarios where retries
    or re-executions are necessary.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transactional integrity**: Group related operations into transactional units
    to maintain atomicity and ensure data integrity. If a transaction fails midway,
    mechanisms should be in place to roll back or compensate for partial changes to
    avoid data corruption.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated testing and validation
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuous testing is integral to verifying the reliability and correctness
    of automated workflows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '**Test automation**: Integrate automated tests, including unit tests, integration
    tests, and end-to-end tests, into the CI/CD pipeline to validate changes and configurations.
    Automated testing ensures that new features or modifications do not introduce
    regressions or unexpected behavior.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test environments**: Maintain separate environments for testing and validation,
    mirroring production as closely as possible. Automatically provisioning and tearing
    down test environments helps ensure consistency and reproducibility across tests.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation and knowledge sharing
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Comprehensive documentation and knowledge sharing promote understanding and
    collaboration among team members:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation standards**: Document workflows, scripts, configurations, and
    dependencies thoroughly to aid in onboarding and troubleshooting. Include information
    on prerequisites, inputs, outputs, and expected behavior to facilitate usage and
    maintenance.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowledge-sharing culture**: Foster a culture of knowledge-sharing and collaboration
    within the team. Conduct regular code reviews, share best practices, and organize
    training sessions to disseminate knowledge and promote continuous improvement.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security and access control
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ensuring the security of automated workflows involves safeguarding access to
    sensitive resources and data:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '**Access controls**: Implement robust access controls and authentication mechanisms
    to restrict access to critical resources. Use **Role-Based Access Control** (**RBAC**)
    to grant permissions based on user roles and responsibilities.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secret management**: Securely manage credentials, API keys, and other sensitive
    information using dedicated secret management solutions. Avoid hardcoding secrets
    in scripts or configuration files and utilize encryption and secure storage options.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By incorporating these strategies and best practices into your automated workflows,
    you can enhance their reliability, resilience, and security, thereby enabling
    smoother and more efficient software delivery processes.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the strategies and best practices discussed in the previous sections,
    let’s enhance the Beagle Security automation code to ensure reliability and resilience
    in the automated workflow. We’ll implement error handling and recovery in the
    existing code and explain the changes in detail to help you better understand
    their practical application:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s take a closer look at this code:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '**Error handling mechanisms**: We added robust error handling using **try**-**except**
    blocks to catch exceptions and handle HTTP errors gracefully. This ensures that
    the script doesn’t crash abruptly and provides meaningful error messages.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retry logic**: We implemented retry logic for network-related issues, such
    as timeouts or intermittent connectivity problems. The script retries failed requests
    for a predefined number of attempts before exiting.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By incorporating error handling and retry mechanisms into the automated workflow,
    we ensure reliability and resilience, thereby minimizing the impact of failures
    and enhancing the overall robustness of the system. These practices enable smoother
    execution, effective troubleshooting, and continuous improvement of the automated
    processes.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at how to add logging as part of continuously improving our
    pipeline. We will work on the same code and learn how to make it work.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a logger for security pipelines
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuously monitoring automated workflows is required to detect errors and
    performance issues early. In this section, we’ll look at the necessity of implementing
    logging in our tools. Later, these logs can be utilized to monitor critical metrics,
    performance indicators, and system health in real time.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s implement a logger in our code:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let’s take a closer look at this code:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging**: We introduced logging to record events, errors, and status information
    during the execution of the automated workflow. Logging ensures visibility into
    the workflow’s behavior and aids in troubleshooting and analysis.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error logging**: We configured the script so that it logs errors, including
    exceptions and traceback information, in the specified log file. This enables
    operators to identify and address issues effectively.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centralized monitoring**: By centralizing logs in a dedicated log file (**automation.log**),
    operators can easily monitor the script’s execution and identify any anomalies
    or failures.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we implemented a logger for just one function. However, you
    can implement this logger for all the functions in the program. Later, these centralized
    logs can be used for monitoring, a process we can undertake by using the monitoring
    tools that will be explained in detail in later chapters.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explored the use of Python and third-party tools to create automated
    security pipelines. We looked at how to use Python’s adaptability and third-party
    tools to automate several elements of security testing, such as vulnerability
    scanning and penetration testing. We discussed how Python can be integrated with
    popular third-party security solutions such as OWASP ZAP and Beagle Security’s
    API. We used various examples and code snippets to show how Python scripts may
    interact with these tools to automate processes such as vulnerability detection,
    compliance testing, and security assessment.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we went over best practices for creating resilient and dependable
    automated security pipelines. We investigated solutions for handling errors, logging,
    and monitoring to ensure the resilience of our automated workflows.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Overall, this chapter gave you a comprehensive understanding of how to leverage
    Python and third-party tools to automate and enhance your security processes while
    learning practical techniques for building and maintaining robust security pipelines,
    ensuring your applications are secure and resilient.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter acts as a continuation of this chapter. There, you’ll learn
    how to design security automation tools that are aligned with your requirements.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
