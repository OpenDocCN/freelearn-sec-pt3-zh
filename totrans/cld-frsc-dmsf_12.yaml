- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Common Attack Vectors and TTPs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As organizations increasingly rely on cloud infrastructures, security teams
    and incident responders find themselves confronting some unique vulnerabilities
    and attack patterns in the cloud. Attackers capitalize on these vulnerabilities
    and employ **Tactics, Techniques, and Procedures** (**TTPs**) that are sometimes
    tailored specifically to cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter dives deep into these common attack vectors in the cloud, offering
    insights to empower and refine our response strategies in the face of ever-evolving
    threats. Misconfigured virtual machine instances and storage buckets, unprotected
    API endpoints, and inadequate authentication protocols are just a few of the vulnerabilities
    that threat actors target. To exploit these weaknesses, attackers employ TTPs
    ranging from privilege escalation and server-side request forgery to zero-day
    exploits tailored for cloud infrastructures. Grasping these specific threats is
    indispensable for cloud security and effective incident response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will discuss the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: MITRE ATT&CK framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forensic triage collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host-based forensics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Misconfigured virtual machine instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Misconfigured storage buckets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud administrator portal breach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack vectors and TTPs in the cloud, for the most part, echo those in on-premises
    environments. However, the decentralized nature of the cloud introduces distinct
    vulnerabilities. Misconfigured virtual machine instances can expose entire virtual
    environments, while improperly secured storage buckets can become gateways for
    data breaches. The cloud’s accessibility brings forth issues such as weak authentication
    mechanisms, which can lead to unauthorized access. While the core principles of
    cybersecurity remain consistent, these cloud-centric issues demand specialized
    attention and understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We’ll look at common attack vectors and TTPs for cloud productivity suites in
    more detail in [*Chapter 12*](part0032_split_000.html#_idTextAnchor227).
  prefs: []
  type: TYPE_NORMAL
- en: MITRE ATT&CK framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MITRE ATT&CK framework is a knowledge base of attacker tactics and techniques
    based on real-world observations from security researchers. It’s a tool that’s
    used by security teams to better understand attack behavior and to improve defense
    and response strategies. In the context of cloud environments, the MITRE ATT&CK
    framework outlines specific techniques that adversaries use against **cloud service
    providers** (**CSPs**) such as AWS, Azure, and GCP.
  prefs: []
  type: TYPE_NORMAL
- en: The MITRE ATT&CK framework is particularly useful for cloud forensics because
    it allows responders to anticipate attacker behavior and plan their forensic investigations
    accordingly. By aligning with this framework, organizations can identify gaps
    in their defensive posture and better understand how to detect, respond to, and
    mitigate cloud-specific threats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the scope of cloud infrastructures, the MITRE ATT&CK framework provides
    a matrix of known attacker TTPs, which includes, but is not limited to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial access**: Techniques that use various entry vectors to gain a foothold
    within a cloud environment. For example, Exploit Public-Facing Application (T1190)
    could be linked to vulnerabilities in web applications hosted in the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution**: The execution phase encompasses techniques that result in adversary-controlled
    code running on a local or remote system. This could involve Server Software Component
    (T1505), where an attacker might execute code through a web server plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistence**: In the cloud, attackers often exploit features to remain logged
    in to an environment, as seen in Create Cloud Instance (T1578), where an adversary
    creates a new instance within an existing account to maintain their operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privilege escalation**: Techniques that allow an adversary to gain higher-level
    permissions on a system or network. An example is Abuse Elevation Control Mechanism
    (T1548), which could involve an attacker taking advantage of overly permissive
    **Identity and Access Management** (**IAM**) roles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defense evasion**: This involves techniques that adversaries use to avoid
    detection throughout their compromise. Techniques such as Disabling Security Tools
    (T1562) might be used to switch off monitoring and logging capabilities in the
    cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To further illustrate how the MITRE ATT&CK framework fits within a cloud attack
    scenario, consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Misconfiguration and Unauthorized Access (T1580)**: As discussed later in
    this chapter, attackers often take advantage of misconfigurations in cloud storage
    services such as AWS S3 buckets or Azure Blob Storage. By enumerating these services
    and exploiting open permissions, attackers can read, modify, or delete sensitive
    data stored in these resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By incorporating the MITRE ATT&CK framework into cloud security practices, organizations
    can more effectively structure their response to incidents and align their forensic
    efforts with industry-standard nomenclature and tactics. Doing so not only enhances
    the incident response plan but also aligns with global best practices, helping
    to ensure a more resilient defense against cloud-based attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Incident responders will likely have to map all forensic findings to MITRE
    numbers in an easy tabular format for defense teams to better understand how an
    attack occurred in their environment. As an example, the following table demonstrates
    a sample MITRE ATT&CK table for a hypothetical cloud compromise:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **MITRE ATT&CK** **Technique Number** | **Technique Name** | **Description**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **T1190** | Exploit Public-Facing Application | Attacking a server or service
    that is accessible from the internet to gain access. For example, attackers could
    target specific web applications or services exposed to the internet, such as
    a web portal or API gateway hosted in the cloud. The focus is often on exploiting
    vulnerabilities in web modules or application code to gain unauthorized access
    to underlying cloud resources or sensitive data. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1136.003** | Use of Service Principal | Creating or compromising cloud
    identities to maintain access to cloud resources. This could involve creating
    or hijacking cloud identity services, such as Azure AD service principals or AWS
    IAM roles. Attackers may establish fake identities or compromise existing ones
    to gain persistent access to cloud resources, enabling them to access or manipulate
    workloads and services. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1580** | Cloud Infrastructure Discovery | Scanning for information about
    cloud services and assets to plan further attacks. Attackers typically conduct
    reconnaissance on cloud environments, targeting specific cloud services such as
    AWS EC2 or Azure Virtual Machines. They scan for exposed APIs, unsecured storage
    buckets, or misconfigured cloud resources to identify potential entry points or
    valuable data. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1078** | Valid Accounts | Using stolen account credentials to gain unauthorized
    access to cloud systems. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1090** | Proxy | Utilizing intermediary systems to disguise the origin
    of malicious traffic. Attackers use intermediary cloud-based services or virtual
    machines as proxies to conceal their origin. This technique may involve spinning
    up cloud instances to route malicious traffic, making it harder to trace back
    to the source. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1526** | Cloud Service Dashboard | Gaining access to cloud service management
    interfaces for control or reconnaissance. By gaining access to cloud management
    interfaces, such as the AWS management console or the Azure portal, attackers
    can monitor and control cloud resources. This might involve tracking workloads,
    modifying configurations, or gaining insights into security controls. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1548.004** | Cloud Service Abuse | Exploiting cloud services or resources
    to support malicious operations. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1562.007** | Disable or Modify Cloud Firewall | Modifying or disabling
    cloud-based firewalls to allow malicious traffic or block security responses.
    Attackers modify or disable cloud-based firewalls, such as AWS WAF or Azure Firewall,
    to permit malicious traffic or impede security responses. This could involve changing
    rules to allow access to specific ports or services, or disabling protective measures
    around critical cloud assets. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1578** | Modify Cloud Compute Infrastructure | Making changes to cloud
    compute services such as instances and virtual machines to establish persistence
    or escalate privileges, as well as making unauthorized alterations to cloud compute
    services, such as modifying virtual machine configurations or injecting malicious
    code into containerized applications. This technique aims to establish persistence,
    escalate privileges, or create backdoors in cloud environments. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1583** | Acquire Infrastructure: Cloud Accounts | Purchasing or otherwise
    obtaining cloud accounts for malicious purposes. |'
  prefs: []
  type: TYPE_TB
- en: '| **T1608.001** | Stage Data for Exfiltration: Cloud Storage | Placing stolen
    data in cloud storage services in preparation for exfiltration, as well as placing
    stolen or illicitly obtained data in cloud storage services, such as Amazon S3
    buckets or Azure Blob Storage, in preparation for exfiltration. This step often
    precedes large-scale data breaches or data theft operations, leveraging the cloud
    for staging and dissemination of compromised data. |'
  prefs: []
  type: TYPE_TB
- en: Table 9.1 – Example of an incident MITRE ATT&CK table
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'All attacker TTPs can be mapped to the appropriate number under the ATT&CK
    framework. This can be found on the MITRE organization’s site: [https://attack.mitre.org/](https://attack.mitre.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Forensic triage collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest pain points incident responders will face is data acquisition
    at the individual host level, especially when it pertains to operating system
    artifacts. CSPs such as Azure, AWS, and GCP offer various logging mechanisms to
    aid in monitoring and auditing actions on their resources. However, these logs
    often capture activities related to the infrastructure or services utilized. By
    default, they do not capture the granular details of user activities or system
    operations at the operating system level (except for cloud ecosystem-connected
    EDR agents such as Microsoft Defender for Endpoint). Even in a cyber incident
    that involves cloud resources, the reality is that most of an incident’s **indicators
    of compromise** (**IoCs**) will come from host-level artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen throughout this book, cloud log sources primarily focus on the
    cloud resources’ interactions. This means detailed host-level activities, such
    as specific Windows Event Logs, file modifications, memory operations, and user
    command executions are not captured (that is, accessible from the cloud) by default.
    The exception to this is if host artifacts and logs have been set to be forwarded
    to cloud services such as AWS CloudWatch or an Azure Log Analytics workspace.
    Most likely, incident responders will be responding to an incident that will require
    capturing all forensic artifacts at the host level (that is, the virtual machine
    instance hosted in the cloud environment). The operating system artifacts offer
    a more detailed picture of what happened on a virtual machine instance and piecing
    together the analysis of multiple virtual machines will allow incident responders
    to understand the extent to which their cloud infrastructure was impacted by the
    incident.
  prefs: []
  type: TYPE_NORMAL
- en: 'These artifacts can include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Filesystem metadata**: Details about file creation, modification, or deletion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory artifacts**: Information about running processes, network connections,
    and loaded modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry artifacts (for Windows)**: Details about installed applications,
    user activities, and system configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shell histories (for Linux)**: Command execution histories, which can provide
    insights into user activities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application logs**: Specific applications might generate logs that haven’t
    been captured or aggregated by the CSP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The absence of these artifacts from the CSP makes it crucial to use tools such
    as **Kroll Artifact Parser and Extractor** (**KAPE**, [https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape](https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape))
    or **Collect Your Logs Remotely** (**CyLR**) for triage and forensic analysis.
  prefs: []
  type: TYPE_NORMAL
- en: KAPE and CyLR are both free triage tools that collect and process forensically
    relevant artifacts swiftly. They are highly customizable and enable incident responders
    to target specific artifacts based on the nature of the cyber incident. They are
    lightweight and do not require much computational power to be run on a system.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: KAPE requires an enterprise license when used on a third-party network and/or
    as part of a paid engagement. It is free for any local, state, federal, or international
    government agency, as well as educational and research uses.
  prefs: []
  type: TYPE_NORMAL
- en: You can download KAPE and find its usage instructions at [https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape/](https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape/).
  prefs: []
  type: TYPE_NORMAL
- en: You can download CyLR and find its usage instructions on GitHub at [https://github.com/orlikoski/CyLR/](https://github.com/orlikoski/CyLR/).
  prefs: []
  type: TYPE_NORMAL
- en: Host-based forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the context of the cloud, a host refers to a virtual or physical machine
    that runs user applications and serves as an endpoint for user and application
    activities. It can be an individual server, a virtual machine, or a container,
    depending on the specific cloud model being utilized. While in traditional on-premises
    scenarios, a host would often refer to a tangible physical server or machine,
    in the cloud, hosts can be ephemeral and rapidly spun up or down based on the
    demand and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will concentrate on Windows-based systems. Linux systems
    will have different host-based artifacts that can be collected and analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: Host-based forensics in the cloud focuses on retrieving and analyzing data from
    these individual hosts or endpoints, aiming to identify signs of intrusions, lateral
    movements, malicious code executions, and other TTPs. Given that a host is the
    primary point of execution for applications and often the entry or pivot point
    for attackers, it is a rich source of forensic data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several artifacts in the Windows operating system can provide a wealth of information
    regarding activities on a host:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prefetch**: This is used to speed up the Windows boot process and application
    startup times. By examining prefetch files, incident responders can determine
    which programs were executed on a host and when.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AmCache**: AmCache contains information about executed applications and can
    provide insights into program execution and user activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ShimCache**: Also known as Application Compatibility Cache, ShimCache contains
    a list of recently executed applications. It is valuable for understanding what
    ran on a system, especially after a system reboot, as some other artifacts might
    be purged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Event Logs**: These logs, especially the security, system, and application
    logs, can offer a plethora of information about security-related events, system
    startups, shutdowns, application crashes, and more. They are critical for identifying
    patterns related to potential security incidents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many more artifacts can be analyzed, but these are the most useful from an incident
    responder’s point of view. We will utilize these artifacts to analyze common intrusions
    on cloud resources discussed throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch, AmCache, ShimCache, and Windows Event Logs are some of the many artifacts
    collected by KAPE and CyLR.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of analyzing host-based logs can be broken down into the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log collection**: Gather the data from the target host. This is the initial
    step where all the necessary entries are extracted for analysis. These logs are
    also captured when generating forensic triage packages.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data preparation**: Utilize a parsing tool to convert the raw data into a
    readable and analyzable format.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Analysis and correlation**: This considers key aspects such as user activity,
    file paths, execution flags, file modification times, and file sizes/attributes
    for any anomalies or red flags. Cross-reference log data with other forensic artifacts
    to contextualize findings within the broader scope of the investigation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Outcome**: Document the analysis results, identifying any potential indicators
    of compromise. Based on the findings, determine the appropriate response actions,
    which could include further detailed investigation, system remediation, or initiating
    security protocols to prevent future breaches.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These steps can be visualized in the following process map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Host-based forensic analysis process](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Host-based forensic analysis process
  prefs: []
  type: TYPE_NORMAL
- en: Evidence of intrusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Determining evidence of execution is often a crucial initial step in ascertaining
    evidence of intrusion on a host system. Threat actors, in their pursuit of system
    compromise and subsequent exploitation, frequently seek to execute unauthorized
    applications, particularly malware, to establish a foothold or gain elevated privileges.
    The unauthorized execution of these applications can serve as clear indicators
    of a breach or intrusion.
  prefs: []
  type: TYPE_NORMAL
- en: To pinpoint such unauthorized executions, incident responders rely on certain
    intrinsic artifacts, such as Prefetch, AmCache, and ShimCache. These artifacts
    store data about executed programs, offering invaluable insights into the history
    of application runs. By meticulously analyzing these artifacts, professionals
    can discern any discrepancies or anomalies pointing to unauthorized executions,
    thus revealing potential evidence of system intrusion by malicious actors. The
    focus is not just on identifying malware but also on understanding the breadth
    and depth of any intrusion, allowing for a more comprehensive security response.
  prefs: []
  type: TYPE_NORMAL
- en: In 2013, a large American retailer experienced a significant data breach where
    attackers stole credit card and personal information from millions of customers.
    In this incident, forensic artifacts such as Prefetch, AmCache, ShimCache, and
    Windows Event Logs were integral to the investigation. Prefetch files likely provided
    insights into the execution of malware and hacking tools used by the attackers,
    revealing patterns of malicious activity. AmCache entries, detailing executed
    programs, could have helped in identifying unauthorized binaries associated with
    the breach. ShimCache might have offered additional evidence of malicious executable
    runs, which would have been useful for understanding the malware’s compatibility
    strategies across the retailer’s systems. Windows Event Logs, which record a wide
    range of system activities, were crucial in reconstructing the breach’s timeline,
    including login attempts, system changes, and network activities. These artifacts,
    when combined, enabled investigators to piece together the attackers’ movements,
    ascertain the methods used in the breach, and comprehend the full extent of the
    intrusion, thus playing a pivotal role in unraveling one of the most significant
    cyberattacks in the retail sector.
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prefetching is an optimization technique that’s employed by the Windows operating
    system to expedite the startup of applications. It achieves this by predicting
    which files an application will need and loading them into memory pre-emptively.
    After an application’s initial execution, the system populates the `Prefetch`
    directory with a corresponding `.pf` file. These files can be found in the `C:\Windows\Prefetch`
    directory on a standard Windows installation. The directory will contain files
    with the `.pf` extension, each named after the executable it corresponds to. For
    instance, if you have run `notepad.exe`, you might find a corresponding `NOTEPAD.EXE.pf`
    file in the `Prefetch` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing these prefetch files provides insights into the applications that
    have been run on the system, making them valuable for both performance diagnostics
    and forensic investigations. These files are generated based on observations made
    by the cache manager, which keeps track of all the files and directories an application
    references during its run. Consequently, these `.pf` files become invaluable containers
    of historical data regarding application execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Forensic importance of prefetch files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.pf` file records both the initial execution date and the last executed date
    for the respective application. These timestamps are crucial during forensic investigations
    as they can help trace back when a potentially malicious application was first
    introduced and subsequently run on a system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pf` file itself can also provide forensic clues. While the creation date
    often aligns with the first execution of the application, the modification date
    typically corresponds with the last execution date. By comparing these dates,
    investigators can ascertain the consistency and frequency of an application’s
    usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the most popular open source tools for prefetch analysis is **PECmd**,
    which is written and maintained by Eric Zimmerman. This tool parses prefetch files
    and provides detailed output, including file paths, timestamps, run counts, and
    more. Another common (but licensed) tool to parse prefetch files is Magnet AXIOM.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can download PECmd and find its usage details at [https://github.com/EricZimmerman/PECmd](https://github.com/EricZimmerman/PECmd).
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a scenario where a suspicious file named `malicious.exe` was executed
    on a Windows-based virtual machine instance that is being hosted on an organization’s
    cloud tenant. Upon retrieving the corresponding prefetch file (perhaps from one
    of the triage tools we discussed earlier), `MALICIOUS.EXE.pf`, and analyzing it
    with PECmd, the output might resemble something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The output provided by PECmd after analyzing a prefetch file such as `MALICIOUS.EXE.pf`
    is a rich source of forensic data. PECmd decodes the information stored within
    the prefetch file and presents it in a human-readable format, which includes a
    timestamp of the first and last time the application was run, the total number
    of times it was executed, and the files that were accessed during execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some attacker TTPs to look out for when analyzing prefetch output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time stamping**: Prefetch files contain timestamps indicating the last time
    a particular application was run. This can help investigators correlate application
    execution times with other events on the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application frequency**: By examining the run count within a prefetch file,
    analysts can determine how often an application is executed. Unusual frequencies
    can signal anomalous or malicious activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volume information**: Prefetch files also store details about the volume
    from which an application was executed. This can be useful to trace back to potentially
    malicious external devices or volumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application source path**: Identifying where an application was executed
    (for example, from a USB device or a specific directory) can help in piecing together
    an attacker’s movement or actions on a host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File and directory references**: Prefetch files list other files and directories
    that were accessed during the application’s startup. This can highlight any dependent
    or associated files, which might also be malicious or compromised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefetch files, though designed as a performance optimization feature, have
    cemented themselves as indispensable artifacts for incident responders.
  prefs: []
  type: TYPE_NORMAL
- en: AmCache analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AmCache, akin to prefetch, is a forensic artifact unique to Windows systems,
    particularly Windows 8 and above. The `AmCache.hve` file is a Windows registry
    hive that primarily serves the Windows Application Experience program, a feature
    aimed at ensuring software compatibility. Typically located at `C:\Windows\AppCompat\Programs\Amcache.hve`,
    this hive logs detailed metadata about executed applications, as well as information
    about connected hardware such as USB devices. While its primary function is software
    compatibility, the rich data it holds makes it an indispensable tool in forensic
    investigations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s its forensic importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary metadata**: AmCache contains comprehensive metadata about executed
    binaries, such as the file path, last modification time, creation time, SHA-1
    hash, and more. This helps forensic analysts trace the origin and history of executable
    files on the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware footprints**: The hive also maintains records of plugged-in hardware
    devices, potentially allowing investigators to trace the insertion of malicious
    USB devices or external storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correlation with execution**: By analyzing AmCache, forensic experts can
    correlate binary metadata with execution traces from other artifacts, offering
    a cohesive timeline of system activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the go-to tools for AmCache parsing is AmcacheParser, which is also part
    of Eric Zimmerman’s suite of forensic tools. Like PECmd, it’s open source and
    offers thorough parsing of the `AmCache.hve` file. Another licensed tool that
    offers robust AmCache parsing capabilities is Magnet AXIOM.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can download AmcacheParser and find its usage details at [https://github.com/EricZimmerman/AmcacheParser](https://github.com/EricZimmerman/AmcacheParser).
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine the execution of a malicious file named `malicious_mansoor.exe` on
    a Windows virtual machine hosted on a cloud. On obtaining the `AmCache.hve` file
    and parsing it with AmcacheParser, the output might look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some key TTPs to look for when analyzing AmCache:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary hashes**: SHA-1 hashes in AmCache provide an opportunity to match
    known malicious hashes from threat intelligence feeds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File paths**: Unusual or suspicious file paths, especially ones located in
    temporary or uncommon directories, can hint toward malicious activities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File creation and modification**: Timestamps can be correlated with other
    system events to map out an attacker’s actions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Associated files**: Like Prefetch, AmCache also provides references to files
    related to an executable, assisting in mapping out potentially malicious dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AmCache hive, although created for compatibility, holds significant forensic
    potential. Alongside Prefetch, AmCache has proven its worth as a goldmine of information
    for incident response and digital forensics.
  prefs: []
  type: TYPE_NORMAL
- en: ShimCache analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ShimCache, formally known as Application Compatibility Cache, is a component
    of the Windows operating system that’s designed to allow backward compatibility
    for applications designed for older versions of Windows. When Windows executes
    a program, it checks ShimCache to determine whether the application requires any
    “shims” or compatibility fixes to run correctly. ShimCache, in doing so, maintains
    a list of executables that have been run on the system, making it an invaluable
    resource for digital forensic analysts. The ShimCache information is stored within
    the Windows registry at `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session
    Manager\AppCompatibility\AppCompatCache`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s its forensic importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Execution history**: ShimCache maintains a list of the most recently executed
    applications, aiding forensic analysts in tracing which executables ran on the
    system. This list includes the file path, last modification time, and file size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistence mechanism detection**: Malware often leverages various persistence
    mechanisms. Observing recurring entries in ShimCache for uncommon or suspicious
    paths can hint toward such persistence mechanisms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correlation with other artifacts**: Like AmCache, data from ShimCache can
    be cross-referenced with other forensic artifacts to provide a holistic view of
    the system’s execution history and potential incidents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A popular tool for extracting and parsing ShimCache entries is ShimCacheParser,
    also part of Eric Zimmerman’s suite of forensic tools. It provides a structured
    output of the ShimCache entries, facilitating quick forensic analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can download ShimCacheParser and find its usage details at [https://github.com/mandiant/ShimCacheParser](https://github.com/mandiant/ShimCacheParser).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a scenario where a malicious file named `malicious_mansoor.exe` is
    found on a Windows system. By extracting the ShimCache data and analyzing it using
    ShimCacheParser, the output might resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Based on this output, incident responders and forensic experts could say with
    high confidence that the malicious file was executed and at what point the malicious
    binary, `malicious_mansoor.exe`, may have been created or last changed on the
    filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key TTPs to look for when analyzing ShimCache:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File paths**: The presence of executables from uncommon or suspicious directories
    in ShimCache is often a red flag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution flag**: While ShimCache logs executables, not all are necessarily
    executed. The execution flag distinguishes between mere presence and actual execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File modification time**: Anomalies in file modification times, especially
    if they correlate with known intrusion events, can be of significance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File size and attributes**: Any deviations in file size or attributes from
    known good baselines can hint at potential tampering or malicious replacements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ShimCache, which was designed for application compatibility, has evolved into
    an essential forensic artifact. Paired with other artifacts such as Prefetch and
    AmCache, ShimCache offers invaluable insights into system activities, aiding in
    thorough incident response and investigations.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Event Logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows Event Logs is a centralized system logging facility, inherent to Microsoft
    Windows systems. It provides detailed records of systems, security, applications,
    and other events. Whether it’s tracking user activity, diagnosing system issues,
    monitoring security incidents, or ensuring regulatory compliance, Event Logs play
    a crucial role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the location:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Windows\System32\winevt\Logs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\Windows\System32\winevt\Logs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some important Windows Event Logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security logs**: Capture security-related events such as logons, logoffs,
    object access, account management, and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System logs**: Reflect system components’ activities, including drivers and
    services, capturing alerts on system failures, resource depletion, or other system-wide
    occurrences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application logs**: Register application events, errors, warnings, and informational
    messages from installed applications and services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PowerShell logs**: Specifically record activities related to PowerShell commands,
    scripts, and modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terminal services (RDP)**: Pertain to **Remote Desktop Protocol** (**RDP**)
    sessions, capturing login successes and failures, disconnections, and other RDP-specific
    happenings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the forensic importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security logs**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account logins**: Reveal when an account was authenticated'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4624**: A successful logon'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4625**: An account failed to log in'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account management**: Show when user accounts or groups are created, changed,
    or deleted:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4720**: A user account was created'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privilege use**: Indicate the use of special privileges'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4672**: Special privileges assigned to a new logon'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object access**: Detail when specific objects (files, directories) were accessed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4663**: An attempt was made to access an object'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terminal** **services (RDP)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4778**: A session was reconnected to a window station'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4779**: A session was disconnected from a window station'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PowerShell logs**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4103**: Indicate that a PowerShell command or script block was executed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lateral movement**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 5140**: A network share was accessed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 5145**: A network share object was checked to see whether an object
    can be granted the desired access'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistence via** **scheduled tasks**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4698**: A scheduled task was created'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process/code execution**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event ID 4688**: A new process has been created'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To analyze Event Logs, you can use evtxECmd, an open source tool by Eric Zimmerman
    that provides extensive parsing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can download evtxECmd and find its usage details at [https://github.com/EricZimmerman/evtx](https://github.com/EricZimmerman/evtx).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a quick example of how you might determine which accounts have logged
    in to a host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be a CSV file with parsed Security Event Logs and columns corresponding
    to the fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Example of parsed security Event Logs (out.csv)](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Example of parsed security Event Logs (out.csv)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key TTPs to look for when analyzing Windows Event Logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account enumeration**: A high volume of failed login attempts, especially
    with various usernames, can indicate account enumeration attempts. Look for multiple
    events with event ID 4625.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suspicious RDP activity**: Frequent remote logins, especially during odd
    hours, can signal malicious activity. Event ID 4778 and event ID 4779 can assist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lateral movement**: A surge in network share access logs from unfamiliar
    systems may indicate lateral movement. Focus on event ID 5140 and event ID 5145.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unusual PowerShell execution**: The execution of unexpected or rarely used
    PowerShell commands, tracked via event ID 4103, can hint at potential malicious
    activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task scheduling for persistence**: Event ID 4698 indicates task scheduling.
    If a task is scheduled repeatedly, especially from unfamiliar sources or at high
    frequencies, it can signal a persistence mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code execution outside norms**: Anomalies in process creation events, especially
    from uncommon directories or unknown binaries, can be a red flag. Use event ID
    4688 for this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Event Logs are incredibly rich data sources that can provide a detailed
    view of nearly all activities on a system. Coupled with the right tools and an
    understanding of key events and indicators, they’re indispensable in any serious
    forensic investigation or incident response.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing memory dumps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Memory dump forensics involves analyzing a snapshot of a system’s volatile memory.
    It can reveal a treasure trove of evidence about a system’s state at the time
    of the snapshot, from running processes to open network connections, in-memory
    artifacts, and even encryption keys or malware payloads that haven’t been written
    to disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of memory dumps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Full memory dump**: Captures the entire contents of physical memory (RAM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kernel memory dump**: Contains only the kernel-mode read/write pages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Small memory dump**: Records the smallest set of useful data, making it faster
    to save and easier to manage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, memory dumps are first saved to the host’s local disk, a choice driven
    by the speed and reliability of local storage, especially given the potentially
    large size of dump files. This is particularly relevant for full memory dumps,
    which capture the entire contents of physical memory (RAM) and thus are directly
    proportional in size to the amount of RAM in the system. For example, a system
    with 16 GB of RAM will result in a full memory dump of approximately the same
    size, necessitating substantial storage space.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel memory dumps, containing only kernel-mode read/write pages, are smaller
    as they exclude user-mode applications and processes. Their size depends on the
    kernel footprint, usually much less than the total RAM but still sizeable. On
    the other hand, small memory dumps are significantly smaller, often just a few
    MBs, recording only the most essential data. They are quicker to save and manage,
    though they offer less comprehensive information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the forensic importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active processes**: List all the processes running on the system, providing
    a real-time view of what was happening when the dump was taken.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network connections**: Determine which remote systems the machine was communicating
    with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loaded modules**: Identify all drivers and dynamic link libraries (DLLs)
    loaded into memory. This can reveal injected DLLs or rootkits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decrypted data**: Sensitive data that might be encrypted on disk (e.g., passwords,
    encryption keys) can be found unencrypted in memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malware artifacts**: Discover remnants of malware that might reside solely
    in memory and avoid being written to the filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat actors increasingly leverage techniques such as fileless malware, which
    operates entirely in memory, to evade traditional file-based detection methods.
    This makes memory forensics an essential component of incident response, especially
    in cases where not all evidence of compromise is written to the filesystem or
    captured in artifacts such as Prefetch, AmCache, ShimCache, and Event Logs. The
    importance of memory dump analysis depends on the nature of the compromise: for
    sophisticated attacks, especially those employing **advanced persistent threats**
    (**APTs**), memory analysis is often indispensable for uncovering the full extent
    of the compromise and the techniques used by the attackers. The caveat with memory
    forensics is that because they are run on the memory allocated by the RAM and
    not on the filesystem (and therefore the hard drive), they are cleared if the
    device is powered off.'
  prefs: []
  type: TYPE_NORMAL
- en: The open source tool **Volatility** is a popular choice for memory dump forensics.
    It offers extensive plugin support, making it adaptable for various incident response
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can download Volatility and find its usage details at [https://www.volatilityfoundation.org/releases](https://www.volatilityfoundation.org/releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at a sample analysis using Volatility:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify the image profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will suggest suitable profiles for further analysis – for example, if there
    are profiles for Windows 10 architectures.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the processes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This displays active processes. Look for unusual or unexpected processes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View network connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Review the established connections for any suspicious activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here are the key TTPs to look for when analyzing memory dumps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process injection**: Unusual child processes or unexpected parent-child process
    relationships can indicate process injection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hidden processes**: Malware often tries to hide its processes. Detecting
    these can point to rootkit activity or evasion techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unexpected network connections**: Look out for those, especially to known
    malicious IPs or unfamiliar foreign addresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hooks**: Some malware types use hooks to intercept system calls. Detecting
    these can be indicative of rootkits or certain types of spyware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strings analysis**: Extracting and analyzing strings from a memory dump can
    reveal paths, commands, URLs, and other malware indicators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In-memory file extraction**: Extracting files that exist only in memory can
    unveil malicious payloads that avoid the filesystem or any artifacts that were
    deleted from the disk but linger in memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory dump forensics offers unique insights that aren’t always obtainable from
    disk-based forensics. This form of analysis can be crucial, especially when dealing
    with advanced threats that use in-memory evasion or reside solely in volatile
    memory. Proper tools and a keen eye for anomalies make memory forensics a formidable
    weapon in the arsenal of every incident responder.
  prefs: []
  type: TYPE_NORMAL
- en: Misconfigured virtual machine instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the prevalent entry points for attackers in cloud environments is through
    misconfigured virtual machine instances. The beauty of the cloud is how rapid
    the deployment of VMs can be. However, the downside of this is that configurations
    may be overlooked or improperly set. Such oversights grant threat actors unintended
    access or provide them with information to further their intrusions. Let’s look
    at some common misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: Unnecessary ports left open
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open ports function as communication endpoints for virtual machines. Each port
    allows a specific type of communication, such as HTTP traffic on port `80`. However,
    leaving unused or unnecessary ports open expands the potential attack surface.
    An attacker can exploit open ports by identifying vulnerabilities associated with
    the services listening on these ports. It’s essential to ensure that only required
    ports are open and accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some indicators to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host** **level (Windows)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows event ID 5156 (Windows Filtering Platform has permitted a connection)
    can be monitored to detect allowed network connections
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows event ID 5157 (Windows Filtering Platform has blocked a connection)
    can alert to blocked connection attempts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS**: VPC Flow Logs, as discussed previously, can be used to observe the
    traffic that is reaching the virtual machine'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: NSG Flow Logs, as discussed previously, can offer insights into
    network traffic targeting the virtual machines'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Default credentials left unchanged
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual machines often come with default administrator credentials for initial
    setup and access. While this is convenient for deployment, leaving these default
    credentials unchanged poses a significant security risk. Attackers are well aware
    of default credentials for many systems and can easily gain unauthorized access
    if they aren’t updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an indicator to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host level (Windows)**: Windows event ID 4625 (an account failed to log on)
    can be monitored to detect and respond to failed login attempts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outdated or unpatched software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regularly updating and patching software and operating systems is a fundamental
    security practice. Over time, vulnerabilities in software are discovered, and
    patches are released to address them. Running outdated or unpatched software exposes
    the virtual machine to known vulnerabilities, creating opportunities for exploitation
    by attackers who target these weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some indicators to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host** **level (Windows)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows event ID 4375 (Windows Installer updated an installed product) can provide
    insights into patch installations and software updates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Software inventories and/or vulnerability scans using tools such as Nessus
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS**: AWS Systems Manager Patch Manager can be utilized for automated patching
    based on set policies.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: Azure Security Center highlights unpatched virtual machines and
    recommends relevant security patches.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GCP:** GCP’s operating system patch management service, Patch, allows for
    the scheduling and automation of patch deployment across virtual machine instances
    in Google Cloud. It provides features for patch compliance reporting and configuration
    of patch rollout schedules, ensuring that virtual machines are updated with the
    latest security patches.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Publicly exposed sensitive data (or metadata)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data exposure is a critical issue, especially when sensitive or personal data
    is involved. Whether due to incorrect access controls, oversight, or misconfigured
    settings, public exposure of sensitive data can lead to data breaches, reputational
    damage, and potential regulatory repercussions. Ensuring strict access controls
    and regular audits is imperative to prevent unintentional data exposure. Let’s
    take a closer look:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host** **level (Windows)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows event ID 4663 (an attempt was made to access an object) can be monitored
    to detect unusual or unexpected access attempts to sensitive files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Application logs at the software application level
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS**: Amazon has additional services that are designed to discover, classify,
    and safeguard sensitive data within AWS S3 – for example, Amazon Macie.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: Azure storage logging through Azure Monitor helps monitor and analyze
    requests made to storage resources, ensuring only authorized access.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GCP**: GCP’s Sensitive Data Protection suite of services helps in discovering
    and classifying sensitive data across GCP services. Google Cloud Storage also
    offers detailed logging and monitoring capabilities through Cloud Audit Logs,
    allowing requests to storage resources to be tracked and analyzed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By understanding these areas of misconfiguration and by actively monitoring
    for the associated indicators, organizations can greatly enhance their virtual
    machine security posture in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Misconfigured storage buckets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Misconfigured storage buckets have emerged as a significant vulnerability in
    cloud environments. Cloud storage solutions, such as Amazon’s S3 buckets or Azure
    Blob Storage, are often set up with ease and speed in mind. However, without rigorous
    security configurations, they can inadvertently become publicly accessible or
    easily breached. Such misconfigurations expose sensitive data, leading to potential
    data leaks and compromising organizational integrity. Let’s look at some common
    misconfigurations that may allow unauthorized access.
  prefs: []
  type: TYPE_NORMAL
- en: Public permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storage resources are typically created with a default private setting, ensuring
    that only properly authenticated and authorized entities can access the stored
    data. However, sometimes, these permissions are altered, either for convenience
    or by mistake, leading to unintentional public exposure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some indicators to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to the Amazon S3 console. Check the **Access** column for each bucket.
    If any of them are labeled as **Public**, then there’s potential exposure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The AWS CLI can be used as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'If `Grantee: Group` has a URI of `http://acs.amazonaws.com/groups/global/AllUsers`,
    then the bucket has public permissions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Azure**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Azure portal, under **Blob Service** | **Containers**, check the **Public
    Access Level** property of each container.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use the Azure CLI as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: If the output is `Blob` or `Container`, there’s public accessibility.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exposed API keys or credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storage buckets sometimes mistakenly contain sensitive files that hold API keys,
    credentials, or other secrets. If an attacker gains access to these, they could
    compromise systems or data associated with those keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some indicators to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*.pem`, `*.json`, `credentials`, `keys`, and so on within your S3 buckets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the following AWS CLI sample to list all the files in a bucket:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can use the following Azure CLI sample to list blobs in a container:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Improper use of IAM policies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IAM controls who or what can perform actions on specific resources. Improper
    IAM configurations could give users or roles more access than they need, violating
    the principle of least privilege.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some indicators to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`s3:*` actions on `s3:::YOUR_BUCKET_NAME/*`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the following AWS CLI sample to list policies for a user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Azure**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review **role-based access control** (**RBAC**) assignments on the storage account.
    Ensure there are no overly permissive roles such as Owner or Contributor assigned
    to identities that don’t need them.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the following Azure CLI sample to list role assignments for a storage
    account:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: By regularly reviewing and ensuring the correct configurations of storage buckets
    and associated permissions, organizations can reduce the risk of data exposure
    and potential compromises.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud administrator portal breach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Gaining access to the cloud administrator portal is akin to handing over the
    keys to the entire cloud kingdom. An attacker with such access can not only view
    sensitive data but can manipulate configurations, delete crucial resources, and
    potentially incur huge costs by spawning large amounts of resources. Let’s take
    a closer look at what attacks can be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Brute-force attacks**: Attackers use software to try as many combinations
    as possible to gain access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indicator**: Multiple failed login attempts from the same IP address in a
    short period'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Credential stuffing**: Attackers use previously breached usernames and passwords'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indicator**: Login attempts with multiple usernames from the same IP address'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Phishing attacks**: Attackers deceive users into providing their login credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indicator**: Users accessing cloud portals from unfamiliar referrer URLs
    or logging in from unfamiliar locations'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Token theft**: Attackers steal authentication tokens or session cookies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indicator**: Unusual user agent strings or unexpected locations paired with
    familiar user accounts'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'AWS detections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`eventName` such as `ConsoleLogin` paired with `errorMessage` such as `Failed
    authentication` for failed logins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple `sourceIPAddresses` for the same `userIdentity` in a short period might
    suggest suspicious activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS management console sign-in URL redirection, which can be an indicator of
    phishing attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnauthorizedAccess:IAMUser`/`ConsoleLogin`, which indicates suspicious console
    logins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure detections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure activity log**: Provides incident responders with insight into operations
    that were performed on resources. Search for the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activities with a status of **Failed** linked with **Sign-in** operations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unusual IP addresses or regions associated with successful sign-ins
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure AD sign-ins**: This provides incident responders with access to the
    sign-in activity within the tenant. Look for the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple failed sign-in attempts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign-in attempts from unfamiliar locations or unusual devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By understanding the TTPs and regularly monitoring the relevant logs, incident
    responders and defenders can detect and potentially prevent breaches due to weak
    authentication in cloud environments. Even though secure multi-factor authentication
    has become more common, the cybersecurity landscape is fast evolving and new threats
    may emerge that may require incident responders to respond to complete administrator
    portal takeovers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the challenges and risks that come with cloud
    security. We discussed how cloud environments, despite their advantages, have
    unique security issues. From misconfigured virtual machine instances to unprotected
    storage buckets, we highlighted the areas where mistakes can happen and how they
    can be exploited by attackers.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve also gained insights into host-based forensics, diving into key indicators
    such as prefetch, AmCache, ShimCache, Windows Event Logs, and memory dumps. We
    touched on the importance of securing virtual machines, covering open ports, default
    credentials, and outdated software. Storage bucket configurations and their potential
    pitfalls were also discussed. Lastly, we delved into the crucial topic of authentication,
    emphasizing the serious outcomes of a cloud administrator portal breach.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition to the next chapter on cloud evidence acquisition, we’ll focus
    on collecting evidence in cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MITRE ATT&CK matrix for cloud-based techniques: [https://attack.mitre.org/matrices/enterprise/cloud/](https://attack.mitre.org/matrices/enterprise/cloud/).'
  prefs: []
  type: TYPE_NORMAL
