- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remote Evidence Collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preferred method for the acquisition of memory is through direct contact
    with the suspect system. This allows for adaptability by incident response analysts
    in the event that a tool or technique does not work. This method is also faster
    at obtaining the necessary files since it doesn’t depend on a stable network connection.
    Although this is the preferred method, there may be geographical constraints,
    especially with larger organizations where the incident response analysts are
    a plane ride away from the location containing the evidence.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of remote acquisition, incident response analysts can leverage the
    same tools that are utilized in local acquisition. The one change is that incident
    response analysts are required to utilize remote technology to access the suspect
    systems and perform the capture. As with any method that is utilized, incident
    response analysts should ensure that they document any use of remote technology.
    This will allow for the proper identification of legitimate versus suspect connections
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise incident response challenges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endpoint detection and response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velociraptor overview and deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velociraptor scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise incident response challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapter focused on acquiring evidence when an analyst or a responder
    has physical access to the system. The reality of the situation is that this is
    often not the case. Infrastructure moved to cloud services such as **Amazon Web
    Services** (**AWS**) or the move toward a remote workforce creates a situation
    where responders most likely will not have physical access to plug a USB device
    in and run their tools to acquire evidence.
  prefs: []
  type: TYPE_NORMAL
- en: Compounding this challenge is the need to get more actionable information much
    quicker than what traditional digital forensics can provide. For example, a traditional
    digital forensics methodology has analysts make a full image of an infected system,
    and capture the memory and other artifacts. These are then transferred to an analysis
    workstation and, over the course of hours or days, the analyst can obtain the
    necessary data. In situations where an incident may be localized or more detailed
    intrusion analysis needs to take place, this may be necessary. In other circumstances,
    this type of analysis methodology does not scale when looking at hundreds or even
    thousands of systems that may be impacted.
  prefs: []
  type: TYPE_NORMAL
- en: Moving away from this *traditional* digital forensics and investigation model
    is one that focuses on *Live Triage*. In this methodology, data is collected from
    systems that are suspected of being compromised. The focus here is on collecting
    high-value data in a central location where it can be indexed and analyzed. With
    the data in a central location, the analysts can then leverage tools and techniques
    to scale their investigation. Leveraging this technique will allow analysts to
    focus their efforts on systems with the greatest evidentiary value. It is on these
    systems that analysts can apply the full focus of digital forensics to gain the
    best understanding of the adversary and their behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint detection and response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ransomware has arguably been the one key threat that has changed how an incident
    response is conducted. The speed and widespread impact of such attacks has highlighted
    the need for tools that provide analysts with a method to search across the entire
    network infrastructure. This is where **endpoint detection and response** (**EDR**)
    tools come into the picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'EDR tools grew out of the traditional signature-based antivirus that permeated
    the industry for nearly two decades. Building on the capability to match hash
    values and other signatures, EDR tools bring much-needed distributed capabilities
    to security and incident response teams. There are a variety of commercially available
    EDR platforms, each with distinctive features, but at a high level, they can generally
    perform the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`regsvr32.exe` binary to bypass Windows protection mechanisms and execute malicious
    code ([https://attack.mitre.org/techniques/T1218/010/](https://attack.mitre.org/techniques/T1218/010/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated response**: Another key function of EDR platforms is to automate
    response actions. For example, a malicious file detection may be set to trigger
    the isolation of an endpoint so that the adversary can not use it to move laterally.
    Other automated actions include banning malicious binaries from executing or cutting
    off network connections for specific processes. Another key automated feature
    that EDR platforms have is the ability to notify specific individuals through
    email or instant messaging for a quicker response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digital forensic acquisition and analysis**: The main advantage of EDR platforms
    for incident response analysts is the ability to acquire and analyze digital evidence
    remotely. For example, EDR platforms will have the ability to show binaries that
    have recently been executed or additional files added to the system. Analysts
    would be able to search for indicators such as these over the entirety of the
    network versus attempting to find these files on individual systems. An additional
    advantage is to also be able to acquire evidence such as individual files suspected
    of malicious activity or entire forensic packages. This functionality significantly
    reduces the time necessary to collect evidence while also allowing for searching
    and collection at scale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the EDR platform, organizations also have flexibility in terms
    of deployment. The primary method of deployment is using a cloud management console
    that individual endpoints communicate with via an agent. This type of deployment
    can monitor both internal and cloud-based systems and provides flexibility for
    remote analysts and incident responders.
  prefs: []
  type: TYPE_NORMAL
- en: The one major disadvantage of EDR platforms is cost. This functionality does
    not come without a cost. Given the visibility and functionality of EDR platforms,
    they are quickly becoming a critical tool for organizations of all sizes and an
    important asset to incident responders to quickly gain incident awareness and
    the ability to investigate widespread adversary activity across the entire network.
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor overview and deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from commercial platforms, there are open source tools that incident response
    teams can use that provide at least some of the functionality found in EDR platforms.
    One of these is **Velociraptor**. This tool uses a combination of a central server
    that endpoint agents connect to, as seen in *Figure 7**.1*. These endpoint agents,
    called **clients**, manage the search of artifacts on remote systems. This places
    the load for searching and evidence acquisition on the endpoint, reducing the
    load on the server, and allowing for concurrent searches across multiple remote
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor documentation
  prefs: []
  type: TYPE_NORMAL
- en: This chapter can only cover a limited portion of the features of Velociraptor.
    For a full breakdown of the features, including additional digital forensic use
    cases, review the Velociraptor documentation at [https://docs.velociraptor.app/](https://docs.velociraptor.app/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Velociraptor setup
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate some of the functionality of Velociraptor, a server will be configured.
    After that, a Windows client will be created and deployed to a Windows endpoint.
    From there, we will look at how Velociraptor can be used to gain data on an endpoint’s
    behavior and extract meaningful evidence for further investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first portion of the Velociraptor tool is the server, which manages the
    agents that will later be installed on the endpoint. There are detailed instructions
    on deployment available on the Velociraptor GitHub page at [https://github.com/Velocidex/velociraptor](https://github.com/Velocidex/velociraptor).
    There are also several options for deploying the server, including using Windows
    and Linux OS and Docker. In this case, the server application will be installed
    on an Ubuntu 20.04 LTS server. After installing the server, go through the following
    steps to install the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Static IP
  prefs: []
  type: TYPE_NORMAL
- en: One key consideration before getting started is to give Velociraptor a static
    IP address. The agents that will be configured later will need to have this IP
    address and any changes will make the agents useless.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Linux server is configured, either use the console or SSH into the
    server and install Velociraptor. First, create a directory for the Velociraptor
    files with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change to the Velociraptor directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the Velociraptor package from GitHub via the Linux `wget` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, enter the following command to allow the Velociraptor package to execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the Velociraptor has been set to run, the next step is to create the
    YAML configuration file that contains the setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The configuration file needs to be edited to include the IP address for the
    GUI and to communicate with the agents that will communicate with the server.
    Using VIM or Nano, edit the file. For example, Nano will be used here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `velocirpator.config.yaml` file, there are two entries for localhost.
    Find these and replace them with the IP address of your server. Next, there are
    three entries for the IP address `127.0.0.1`; again, replace these with the IP
    address of the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the configuration file into the `/``etc` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, set an administrator password to access the Velociraptor GUI. Enter a
    password when prompted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start the Velociraptor frontend GUI, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the installation was successful, you should be able to log in to the GUI,
    which opens the following dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Velociraptor welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: As the previous directions show, setting up Velociraptor is easy. Further, the
    server can be deployed in either the internal network or within a cloud infrastructure
    such as AWS or Azure. This allows incident response analysts to collect data from
    any system with connectivity to the internet. This also removes the need to maintain
    a system as Velociraptor can be deployed as necessary in the event of an incident
    or maintained as a virtual system and powered up as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the server has been configured, let’s go ahead and build a Windows
    collector that will allow an analyst to examine a remote Windows system.
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor Windows collector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Velociraptor collector is the agent that is installed on monitored endpoints
    and is connected to the server. To configure a collector, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before a client can be configured, the Velociraptor application needs to be
    able to accept a self-signed SSL certificate. Access the `velociraptor.config.yaml`
    file that was moved to the `/``etc` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line after the `nonce` line for the first certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the following screenshot for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Configuring the Velociraptor YAML file
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Velociraptor server command line, change to the `velociraptor` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the Windows executable file from GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following command takes the Windows executable and combines it with the
    configuration file so that the Windows endpoint can communicate with the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, ensure that the Secure Shell service is installed on the Velociraptor
    server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The collector is now configured. To get the collector off the Velociraptor
    server, simply use any SFTP to transfer it off the system. Then, transfer it to
    the Windows endpoint or endpoints that you would like to monitor. Next, install
    the Velociraptor service using the Windows Command Prompt `Velociraptor_Agent.exe
    service install` command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Velociraptor Agent intallation
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Velociraptor is a feature-rich platform that can be leveraged for a wide range
    of digital forensics and incident response tasks. For the purposes of this discussion,
    the focus will be on using Velociraptor to access the remote system command line
    to return data along with running evidence collection binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor evidence collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Velociraptor is a feature-rich tool with a wide range of capabilities. In this
    chapter, the focus will be on getting basic information about the endpoint, evidence
    acquisition through the command line, and finally, acquiring an evidence package
    for further analysis. This should be enough to at least gain some familiarity
    with Velociraptor. In later chapters, we will look at using Velociraptor for analysis
    and threat hunting.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Windows command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One tool that is often overlooked when conducting an initial triage analysis
    is the Windows command line. From here, an analyst can examine running processes
    and network connections and extract files. Velociraptor has the capability for
    an analyst to run commands and evidence tools via the command line on a remote
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the home screen, navigate to the **Search clients** box and select the
    down arrow. Select **Show All** for hosts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Searching for clients
  prefs: []
  type: TYPE_NORMAL
- en: 'This will show all the systems that Velociraptor is communicating with. Those
    systems with a green button are currently communicating with Velociraptor. If
    there are red buttons, this means that the endpoint agent is not communicating
    with the server and needs to be restarted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Client list
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the analyst wants to review the hostname **DESKTOP-9SK5KPF**.
    Clicking on the corresponding Client ID reveals the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Client information
  prefs: []
  type: TYPE_NORMAL
- en: 'One feature of Velociraptor that is useful for initial triage and investigation
    is the ability to leverage the Windows command line and PowerShell terminals on
    the Velociraptor server. To access this feature, navigate to the upper-right corner
    of the windows and click on the **>****_Shell** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Accessing Shell
  prefs: []
  type: TYPE_NORMAL
- en: 'This opens a window where the analyst can access the command line, PowerShell,
    Bash, or VQL. In this case, the analyst runs the `netstat` command against the
    target system by entering the command and clicking on **Launch**. This will produce
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Windows netstat command output
  prefs: []
  type: TYPE_NORMAL
- en: This feature is useful when conducting an initial analysis or triage of a system.
    Checking the network connections or running processes may reveal the presence
    of malware or command and control. This enables the analyst to focus on systems
    that may have those indicators. Another technique for evidence gathering is running
    tools that were discussed in the previous chapter from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: CyLR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A simple way to acquire evidence from a remote system is to use the CyLR tool
    that was discussed in the previous chapter. In this case, the results can be sent
    to a remote server or workstation using SFTP. Simply run CyLR with the following
    command with the destination server username and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: One technique that is useful is to send all the evidence to a central server
    where multiple analysts can work. In *Chapter 12*, CyLR will be combined with
    additional tools available on the Skadi platform.
  prefs: []
  type: TYPE_NORMAL
- en: WinPmem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WinPmem can be deployed on remote systems through native applications such
    as Remote Desktop or PsExec. Once installed on the remote system, the output of
    WinPmem can be piped to another system utilizing NetCat. For example, suppose
    that the incident response analyst is utilizing a system located at `192.168.0.56`.
    If the analyst is able to access the compromised host via PSExec or RDS, they
    can establish a NetCat connection back to their machine by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command tells the system to perform the capture and send the output
    via NetCat to the incident response analyst workstation over port `4455`. The
    drawback of this technique is that it requires access to Command Prompt, as well
    as the installation of both NetCat and WinPmem. This may not be the best option
    if the incident response analyst is dealing with a system that is suspected of
    being compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual filesystem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another key feature of Velociraptor is the **virtual file system** (**VFS**).
    This allows analysts to examine the file structure on a remote system. This is
    a handy feature for instances where the analysts know a specific file or files
    that they would like to collect in relation to an alert or incident. In the following
    example, the analyst has been alerted to a suspicious DLL file located on a remote
    system and has been tasked with collecting it for analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the same window as the previous example, click on the **VFS** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Accessing the VFS
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the connection, this may take a few minutes to load. When it finishes
    loading, click on the **ntfs** portion, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – The VFS
  prefs: []
  type: TYPE_NORMAL
- en: 'When navigating the filesystem, if there is an error message saying **No data
    available**, click on the folder icon, which will refresh the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Refresh buttons
  prefs: []
  type: TYPE_NORMAL
- en: In addition to refreshing the directory, the additional icons from left to right
    will either recursively refresh the directory, recursively download the directory,
    or view the artifacts collected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating to the `C:\Program Files\Common Files\System` directory shows a
    few DLL files. The one that stands out is the `bghe21.dll` file, which has a modified
    date and time of **2022-05-04** at **09:44:20 UTC**. This stands out as the other
    DLL files appear to have been modified much earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Suspect DLL
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the **Collect from the client** button will download the suspect DLL
    from the system for analysis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Collecting files
  prefs: []
  type: TYPE_NORMAL
- en: The VFS is useful for those events and incidents where the analyst has some
    data pointing to a specific file or directory to search for evidence. This feature
    significantly decreases the time necessary to acquire specific files. There are
    some circumstances though where the analyst needs to acquire an evidence package
    from a remote system. In this case, Velociraptor can be leveraged to acquire a
    range of files and other data related to an incident investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Velociraptor evidence collection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last feature that this chapter will look at is gathering evidence from
    a remote system for analysis. This feature gives the analyst a significant advantage
    in gathering this data remotely without the need to use the **sneaker-net** approach.
    In this case, Velociraptor will be used to gather KAPE evidence collection from
    a remote system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from the beginning, to collect evidence from a system, click on the
    corresponding Client ID for the suspect system – in this case, **DESKTOP-9SK5KPF**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Client list
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left pane, click on the bottom reverse clock icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – Collection icon
  prefs: []
  type: TYPE_NORMAL
- en: 'In the new window, click on the **New Collection** plus sign at the top-left
    under the navigation bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Starting a new collection
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the **New Collection: Select Artifacts to collect** window.
    There is a wide range of evidence items and sets that can be collected. In this
    instance, the analyst wants to collect the KAPE **Targets** artifacts. Navigate
    to **Windows.KapeFiles.Targets**, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – Selecting artifacts
  prefs: []
  type: TYPE_NORMAL
- en: 'When clicking on the artifacts, the following dialog box opens in the right-hand
    pane. This information details what parameters can be set. This matches the collection
    types that were seen in the previous discussion on KAPE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – KAPE Targets details
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the screen, click **Configure Parameters**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Collection parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **New Collection: Configuration Parameters** window, click on **Windows.KapeFiles.Target**.
    This will open the window in *Figure 7**.21*. This window allows the analyst to
    select the specific KAPE targets that were discussed in the last chapter. In this
    case, a basic collection will be performed by clicking on the checkbox next to
    **_BasicCollection**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Collection parameters detail
  prefs: []
  type: TYPE_NORMAL
- en: 'Review the **Specify Resources** window. In this case, the defaults can be
    left but this allows the analyst to configure how the agent will utilize resources.
    Click on the **Review** button to review the collection request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – Collection request review
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Launch** button. While the collection is running, an hourglass
    icon will appear in the window with a unique Flow ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – Collection request progress
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the collection has been completed, the files can be downloaded by clicking
    on the file cabinet icon in the results pane. This will make the downloads available
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – KAPE Targets ready for download
  prefs: []
  type: TYPE_NORMAL
- en: 'The files can then be examined on an analyst’s workstation using KAPE or other
    tools that will be discussed later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image_B18571_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Acquired evidence
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have come to the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A major challenge of digital forensic acquisition is scaling it to remote systems
    and being able to quickly analyze the data. Even with this challenge, incident
    response analysts can leverage tools such as Velociraptor both as a standalone
    solution and by integrating the tools that they already have. Through this combination,
    they are able to quickly focus their efforts on those systems that have the greatest
    evidentiary value. This provides decision-makers with an understanding of the
    nature of the adversary's actions and what measures they can take without having
    to wait for a full analysis that is severely limited due to the remote nature
    of IT operations today.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how endpoint detection and response tools can
    provide analysts with the ability to conduct investigations at scale. Building
    on this, we examined the open source tool Velociraptor, going through the setup
    and configuration, agent deployment, and several scenarios where Velociraptor
    can aid in the gathering of evidence and analysis related to an incident. Keep
    these scenarios in mind when we discuss ransomware investigations in [*Chapter
    17*](B18571_17.xhtml#_idTextAnchor304).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will examine how to properly image a system’s storage
    for follow-on analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: In an incident investigation, it may not be necessary to obtain a full disk
    or memory image before an analysis can be conducted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following are not advantages of an EDR platform?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cost
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scalability of investigation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Event alerting
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Central management
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The one advantage to Velociraptor is that all of the processing is done on the
    Velociraptor server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
