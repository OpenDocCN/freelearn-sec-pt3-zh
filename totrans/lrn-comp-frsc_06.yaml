- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Artifact Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The world runs on the Microsoft Windows operating system, with Microsoft accounting
    for nearly 90 percent of the operating system market share ([https://netmarketshare.com/](https://netmarketshare.com/)).
    In my personal experience, I have examined far more Windows operating systems
    than any other operating system; macOS would be the next most common operating
    system, with Linux running a distant third. While you have to be prepared to analyze
    all operating systems, whichever is the most common within the realm you are working
    in is where you should focus your attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will provide you with an understanding of the Windows operating
    system and the artifacts you may find. There are entire books written about the
    Windows operating system; this chapter’s goal is to provide you with an understanding
    of the more common operating system artifacts you may encounter during your investigation.
    You will start by going through user profiles where an examiner can find most
    user data. Then, we will look at the Windows Registry to identify the Windows
    settings. You will also look at artifacts to determine the user’s activities and
    learn how to identify which USB devices were used on the system. Finally, we will
    cover all of this in the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding user profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Windows Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining account usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining file knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying physical locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring program execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding USB/attached devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An operating system manages the hardware resources and allows the user to run
    other applications that are essentially programs within the operating system environment.
    It can be a treasure trove of artifacts to recreate user or system activity at
    any given moment in time. When we discuss the Windows operating system, this topic
    could cover multiple versions. At the time of writing, the current version of
    the Windows operating system is Windows 11, but Windows 10 is still on the majority
    of systems. That does not mean every system you examine will have Windows 10 installed
    on it. It is possible that even in a corporate environment, you could still examine
    a Windows XP client, although Microsoft released it in 2001 and no longer supports
    it.
  prefs: []
  type: TYPE_NORMAL
- en: I will focus on Windows 7, 8, and 10 for the rest of this chapter. First, however,
    there may be references to Windows XP because of Microsoft’s legacy support for
    the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The first item I want to discuss is the different types of user profiles and
    where the operating system will store the user’s data.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding user profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the Windows operating system is installed, it creates a default folder
    structure to store user and application data. Sometimes, just looking at the folder
    structure can tell you which version is or isn’t installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are looking for user account profiles, the location can vary depending
    on the version of the operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: For Windows XP, WinNT, and Win2000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\Documents and Settings\%UserName%`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Windows Vista, 7, 8, and 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\Users\%UserName%`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the user first logs on to the system, it will create a user profile. That
    profile will then be used for any subsequent logins and is now the user’s environment
    for their activity on the system. Microsoft defines the different types of user
    profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local user profile**: This profile is created when the user logs on to a
    computer for the first time. You will find the profile stored on the hard disk.
    When changes are made to the profile, the changes will be specific to the user
    and stored on the local computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roaming user profile**: This profile is an administrator-created, network-based
    profile. The profile will be downloaded to the localhost when the user logs in
    to the system. When any changes are made to the profile on the localhost, changes
    will also be made to the server copy when the user logs off from the localhost.
    This profile type removes the requirement on the part of the user to create a
    profile when they log on to different hosts on the network. (You will only find
    this type of profile in Enterprise environments.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mandatory user profile**: This profile is a profile created by the network
    administrators to lock users down to a specific set of settings when they use
    a host on the network. The user will not be allowed to change the profile without
    the administrator’s approval. Any changes made by the user to the localhost environment
    will be lost when the user logs off from the localhost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Temporary user profile**: This profile is created when an error occurs when
    the system loads the user’s profile. When the user logs off, the profile is deleted.
    You will find the use of temporary profiles on computers running Windows 2000
    and later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each user profile will have a registry hive – `NTUSER.DAT` – and is mapped to
    the system registry key of **HKEY Current User** when the user logs in. This registry
    hive contains the user’s preferences and configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each user profile contains the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Users\$USER$\Documents`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\Music`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\Pictures`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\Videos`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `AppData` folder is a hidden folder that contains user-specific preferences
    and profile configurations and is further divided into three subfolders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Local`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\LocalLow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Roaming` folder contains data that can be synced within the server environment.
    Data such as web browser favorites or bookmarks will travel with the user as they
    log on to different workstations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\Cookies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\Network Shortcuts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\Printer Shortcuts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\Recent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\SendTo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\Start Menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Roaming\Microsoft\Windows\Templates`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Local` folder contains data related to the installation of programs. It
    is workstation specific and will not sync with the server (in a server environment).
    Temporary files are also stored here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Local`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Local\Microsoft\Windows\History`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Users\$USER$\AppData\Local\Microsoft\Windows\Temporary Internet Files`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `LocalLow` folder includes low-level access data, such as the temporary
    files of your browser when running in protected mode.
  prefs: []
  type: TYPE_NORMAL
- en: That completes our discussion on user accounts, so let’s move on to the registry,
    which is the heart and soul of the Windows operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Windows Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Windows Registry is the very heart of the Windows operating system and will
    be the source of many artifacts we will discuss later in the chapter. First, I
    will provide a high-level view of the registry. Then, suppose you want to dig
    deeper into the nuts and bolts of the registry. In that case, I highly recommend
    Harlan Carvey’s book *Windows Registry Forensics – Advanced Digital Forensic Analysis
    of the Windows Registry*. Harlan Carvey is also the developer of the tool RegRipper,
    which is a tool we will use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What is the registry? Microsoft defines the registry as a central hierarchical
    database. This database is used to store configuration information about users,
    hardware devices, and applications.
  prefs: []
  type: TYPE_NORMAL
- en: But what does that mean for the forensic investigator? Windows continually references
    the information in the registry during operations. Information in the registry
    will contain profiles for each user, installed applications, different document
    types, and property settings for folders and application icons. The registry will
    also contain information about the hardware on the system, including networking
    information such as the ports used.
  prefs: []
  type: TYPE_NORMAL
- en: Wow. That was a mouthful, but in simple terms, the registry contains information
    about… almost everything on the computer system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The components of the registry are found in the `%SystemRoot%\System32\Config`
    folder and are called hive files. You will find the `SAM`, `SECURITY`, `SOFTWARE`,
    and `SYSTEM` hives. Below is a brief description of the hives:'
  prefs: []
  type: TYPE_NORMAL
- en: The `SAM` hive is the Security Accounts Manager and contains login information
    about the users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SECURITY` hive contains security information and, potentially, password
    information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SOFTWARE` hive contains information about application information and the
    default Windows settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SYSTEM` hive includes information on the hardware and system configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an additional hive, `NTUser.dat`, which is stored in the root of the
    user profile. This hive contains information about user behavior and their settings.
  prefs: []
  type: TYPE_NORMAL
- en: Another file in the hive format is the `UsrClass.dat` file, which is found in
    the `\AppData\Local\Microsoft\Windows` folder of the user account. You will find
    information concerning **user access control** (**UAC**) configuration and information
    about the **graphical user interface** (**GUI**) display for the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: The hive comprises subkeys that contain the **Value**, **Type**, and specific
    **Data** or settings being saved. This will give us a frame of reference as we
    explore the artifacts contained within the registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, it is difficult to decipher the
    meanings of the subkeys and values and what they represent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Registry Editor showing the USBSTOR registry key'
  prefs: []
  type: TYPE_NORMAL
- en: As we go through the artifacts, I will show you the view you will see with the
    Registry Viewer and the easier-to-read parsed version created by the forensic
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use some open-source tools during this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: RegRipper (available for download from [https://github.com/keydet89/RegRipper3.0](https://github.com/keydet89/RegRipper3.0)),
    created by Harlan Carvey.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Zimmerman (whose work is available for download from [https://ericzimmerman.github.io/#!index.md](https://ericzimmerman.github.io/#!index.md))
    has created several open-source utilities to parse Windows artifacts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are several categories in which we look for artifacts. I like to use
    the SANS catalog descriptions of the artifacts, which can be found at [https://digital-forensics.sans.org/community/posters](https://digital-forensics.sans.org/community/posters)
    and are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Account usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Program execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB/drive usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser usage (which we will discuss in *Chapter 9*, *Internet Artifacts*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this understanding of the user profile, we will now discuss the artifacts
    that determine what actions are associated with the user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Determining account usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identifying the user behind the keyboard is one of the hardest things you must
    do when conducting a digital forensic examination. You will have to parse through
    many artifacts to help make that determination. First, you will want to gather
    as much information about the user account in question and see whether you can
    relate it to the physical person. You will want to gain as much information about
    that user account and its activity related to the matter you are investigating.
    We will now go over some artifacts from a Windows-based operating system that
    will help you determine and identify that account activity starting with the user’s
    last login or password change.
  prefs: []
  type: TYPE_NORMAL
- en: Last login/last password change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following path will contain information about the user accounts on the
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To navigate to the location that contains the user account information, I will
    use Eric Zimmerman’s Registry Explorer. I have exported the registry hive files
    from the forensic image to run Registry Explorer and RegRipper.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see that I have already opened the folder
    path and the subkeys, and within the **Users** subkey, there are folders with
    hexadecimal names and a folder entitled `Names`. Within the `Names` subkey, you
    see a listing of the accounts on the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18329_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Registry Explorer showing the USERS key and subkeys'
  prefs: []
  type: TYPE_NORMAL
- en: It lists the names in English, so they are easily readable. Out of the six accounts
    being shown, one has been deleted (`defaultuser0`), and one has the username of
    `jcloudy`. The value for the `jcloudy` subkey will point to the subkeys with the
    hexadecimal values. Here, `jcloudy` points to `x3E9`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In subkey `x3E9`, as shown in the following screenshot, I see that I have an
    **F** and a **V** value and below that, I can see information pertaining to the
    user’s passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18329_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Registry subkey X3E9'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it easier, we can run RegRipper and see whether we can get an easier-to-read
    output. An example of the output for the `jcloudy` account is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18329_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: RegRipper output for the jcloudy account'
  prefs: []
  type: TYPE_NORMAL
- en: RegRipper parses the data and presents it in an easy-to-read format. And we
    can see when the account was created, the password hint, the last time the user
    logged in, and the number of times the user has logged in to the system.
  prefs: []
  type: TYPE_NORMAL
- en: As you look at the username `jcloudy`, you can see the numerals `1001`, and
    below that, an entry marked `SID`.
  prefs: []
  type: TYPE_NORMAL
- en: '**SID** is the **security identifier** used by the Windows operating system
    to identify objects within. This is how Windows addresses components internally.
    At the end of the SID is the **relative identifier** (**RID**), which is the last
    digits after the SID. For example, if you see `500` as the RID, that will identify
    the administrator account for that system. The guest account would have an RID
    of `501`. In this case, as shown in the following diagram, we see the RID of `1001`.
    This informs me that the `jcloudy` account is user-created, and is not an account
    created by the system through an automated process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18329_06_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Breakdown of the SID'
  prefs: []
  type: TYPE_NORMAL
- en: When doing your exam, the most commonly looked at portion of the SID is the
    RID. We can associate the RID with a specific user account. As the user creates
    accounts on the system, the RID will increase by one digit. For example, we could
    have a user, `user X`, with an RID of `1005`, and if I cannot find accounts `1001`
    through `1004`, it is possible that someone/something deleted those user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: We are going through the registry to find artifacts that support (or do not
    support) our hypothesis about what occurred. Another source of information to
    help determine what happened on the system are the event logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows categorizes events into three different classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System**: Information generated by the Windows operating system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application**: Information generated by applications on the local machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Information related to login attempts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Windows Vista through Windows 10, we can find the event logs at the following
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A common excuse that users give when they are accused of using the system for
    criminal or inappropriate reasons is that someone else had access to their system.
    **Remote Desktop Protocol** (**RDP**) is a way to access a host from another location.
    The security log will record any access using the RDP protocol. You will want
    to look for event ID numbers **4778** and **4779**, which would show you when
    the service connected/reconnected and when it disconnected.
  prefs: []
  type: TYPE_NORMAL
- en: You can also search for the type of logon into the system. For example, when
    we examine the security log for event ID **4624**, this will tell us the day,
    time, username, and the means with which the login was successful. As you can
    see in the following screenshot of **Event Viewer**, you can use this application
    to review the exported log files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have loaded the selected log file you want to examine, you can filter
    the results only to show the events that are relevant to your investigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Event Viewer displaying event information'
  prefs: []
  type: TYPE_NORMAL
- en: The type of logon is also significant. Was the user sitting at the keyboard,
    or did the user log in from a remote site? Event ID `4624` will identify the login
    type used by the user. In the following screenshot, you can see the output of
    Event Viewer showing when the user logged in and the login type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, it shows the user’s login was type 2, which is “interactive”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with low confidence](img/B18329_06_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Event Viewer showing the logon type'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list from Microsoft of the other logon types you may encounter,
    together with their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18329_06_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: Microsoft logon types'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also want to establish the attempted login events to determine whether
    an attacker compromised the account. The following event IDs will help you make
    that determination:'
  prefs: []
  type: TYPE_NORMAL
- en: '`4624` - Successful logon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4625` - Unsuccessful logon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4634` - Logon session terminated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4647` - Logon session terminated by the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4648` - User logon was attempted by a user using different credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4672` - User logon with Admin rights'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4720` - User account created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A full list of Microsoft Windows Event IDs can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/)'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you see many failed logins, or a user was granted administrator rights
    when they usually do not possess superuser rights. In that case, these event ID
    clues provide you with additional investigative avenues to determine what occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve examined the user’s account activity, next we will discuss the
    artifacts associated with user account file access.
  prefs: []
  type: TYPE_NORMAL
- en: Determining file knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some incidents you investigate may deal with contraband images, stolen data,
    or unlawful access to data. You will have to determine whether the user had knowledge
    of the file(s) in question, or whether the file(s) existed on the user’s system.
  prefs: []
  type: TYPE_NORMAL
- en: We will now talk about some artifacts you can find in the Windows operating
    system that will help you make that determination.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the thumbcache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A thumbcache is a database of thumbnail images created when using Windows Explorer
    in a thumbnail view. Depending on the size of the thumbnail, you may have multiple
    databases with the same image but with different sizes. It depends on the view
    the user selected while in Windows Explorer. The existence of an image found in
    the database is not substantial proof that the user knew the image was on the
    system. The system can add a thumbnail to the cache without the user’s knowledge.
    The thumbcache can be found in the user’s profile at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Your commercial forensic tools will process the thumbcache with no issues. If
    you want to use an open-source utility, you can use Thumbcache Viewer (which can
    be downloaded at [https://thumbcacheviewer.github.io/](https://thumbcacheviewer.github.io/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the output of Thumbcache Viewer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Thumbcache Viewer output'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the thumbnail does not have the same filename as the source
    image. To identify the original file that was used to create the thumbnail, we
    need to look in the Windows Search Indexing database, `Windows.edb`, which can
    be found at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will need an additional tool to find the information about the image used
    to create the thumbnail. You can use `ESEDatabaseView` (located at [https://www.nirsoft.net/utils/ese_database_view.html](https://www.nirsoft.net/utils/ese_database_view.html)).
  prefs: []
  type: TYPE_NORMAL
- en: The thumbnail name is `96 5a be bc cc 2b f2 27`, which is made up of hexadecimal
    characters. We need to reverse the values to search the database, so we will want
    to search for `27 f2 2b cc bc be 5a 96`. The information we are looking for is
    in different locations depending on the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: On a Windows 7 system, you want to examine the contents of the table `SystemIndex_0A`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a Windows 8/10 computer, you want to examine the contents of the table `SystemIndex_PropertyStore`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we input the hexadecimal values into the filter, it reduces the data to
    a single row:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18329_06_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: Filtered database results'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see that the file came from the desktop
    of the user `jcloudy`. The name of the image is `MyTiredHead.jpg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18329_06_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: Filename display in the database'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can verify that this is the correct file when
    we look in the `System_ThumbnailCacheID` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: Thumbnail name in the database'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the discussion on the thumbcache. We will now explore the artifacts
    created by the Edge/Internet Explorer/File Explorer browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Microsoft browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft uses the same method to record a user’s file activity and internet
    history with the Internet Explorer/File Explorer/Edge browsers. In addition, it
    records local and remote file access. Most commercial forensics tools parse these
    files easily. Depending on the version, the history file will be in the following
    areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18329_06_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: IE Locations'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see that the user is using version 10/11
    because of the existence of the `WebCacheV01.dat` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, table  Description automatically generated](img/B18329_06_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: File Explorer showing the WebCacheV01.dat file'
  prefs: []
  type: TYPE_NORMAL
- en: The `.dat` file is an ESE database. If you want to use a single-use forensic
    tool, you can export the `.dat` file out of the forensic image and view it with
    an open-source forensic tool such as `ESEDatabaseView`.
  prefs: []
  type: TYPE_NORMAL
- en: (Located at [https://www.nirsoft.net/utils/ese_database_view.html](https://www.nirsoft.net/utils/ese_database_view.html))
  prefs: []
  type: TYPE_NORMAL
- en: 'You will want to navigate to the `Containers` table. The following screenshot
    is the output from X-Ways Forensics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18329_06_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: X-Ways display of the contents of the WebCache'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a date and timestamp and the file path of the file that
    was viewed. We have one offline HTML file (the first line), which was located
    on the user’s desktop. We see the user opened two PDF files, two JPEG files, one
    HTML file, and one DOCX file.
  prefs: []
  type: TYPE_NORMAL
- en: There are additional artifacts that show that a user account accessed a file,
    which we will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Determining most recently used/recently used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **MRU** (**Most Recently Used**) is a list of recently used files stored
    in the user’s **NTUSER.DAT** hive. When you open an application and see the history
    list of prior files that the application has used, you are looking at an MRU.
    There are a lot of MRU lists stored within the registry file. We will go over
    some more common locations.
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenSavePidlMRU** from the user’s **NTUSER.DAT** file tracks the last 20
    files opened/saved via the Windows Common Dialogue (these are the commonly encountered
    **Open/Save As** dialog boxes). In the following example, we can see the last
    20 files used by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: Content of NTUSER.DAT key - OpenSavePidlMRU'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another key to look at is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This key contains a list of files executed/opened by the user through the Windows
    Explorer application. You will also have subkeys, based on file extensions, listing
    those files that were executed/opened. The system will store the entries in chronological
    order of when the files were executed/opened by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'When looking at the last entry/modified time of the key, it will correspond
    to the last entry in the list. This key will keep track of the previous 150 files
    that were opened/executed. The following is the output of the key (I am only showing
    the top-level entries for brevity’s sake):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18329_06_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Recent Docs entries'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the file extension subkeys I described earlier, and it
    shows the recently used CSV files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![A picture containing application  Description automatically generated](img/B18329_06_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18: Content of NTUSER.DAT key - Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs
    for CSV files'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the file extension subkeys I described earlier, and it
    shows the recently used DOCX files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Text  Description automatically generated](img/B18329_06_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.19: Content of NTUSER.DAT key - Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.docx'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the file extension subkeys I described earlier, and it
    shows the recently used HTML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Text  Description automatically generated with medium confidence](img/B18329_06_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.20: Content of NTUSER.DAT key - Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also an additional subkey, `\Folder`, that lists when the user opened
    folders on the system, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18329_06_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.21: Content of NTUSER.DAT key - Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\Folders'
  prefs: []
  type: TYPE_NORMAL
- en: Entries of potential interest include OneDrive and CloudLog. If I am looking
    for evidence of specific files, the subject may store the data in cloud storage.
    When I see artifacts showing the use of cloud storage, it provides additional
    locations that I will have to locate and acquire the digital evidence to continue
    my digital forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, these are great artifacts to see what files were accessed by
    the user, but what happens when the user deletes a file? That leads us on to our
    next topic, the Recycle Bin.
  prefs: []
  type: TYPE_NORMAL
- en: Looking into the Recycle Bin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Recycle Bin** is Microsoft’s effort to protect users from their actions.
    It provides an intermediary step for when a user deletes a file. Windows will
    move the file into a holding area known as the **Recycle Bin**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Recycle Bin** is a hidden folder stored in the root directory of every
    fixed disk on the system. The folder name is `$Recycle.Bin`. On an NTFS formatted
    disk, there will be sub-folders named with the user’s SID. These sub-folders are
    created whenever a user logs on to the system for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$Recycle.Bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S-1-5-21-2734969515-1644526556-1039763013-1001`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user deletes a file, the original file gets renamed and becomes part
    of a set of `Recycle.Bin` files. The system will rename the original file with
    `$R` and then six random alphanumeric characters for the filename. The file extension
    will remain the same. The system will create a second file, which will start with
    `$I` and then have the same six alphanumeric characters that the `$R` file has.
    The `$I` file will also have the same file extension as the `$R` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `$I` file will track the time of deletion and the path to the original
    file location:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Size**: 4.9 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Moved to recycle bin**: `04/05/2018 02:20:17 +0 C:\Users\jcloudy\Desktop\Larry
    King_ Time to Repeal the ''Poorly Written'' Second Amendment_files`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, we have the size of the original file, when the user deleted
    it, and the original path that includes the filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a user deletes a directory, you will still have the `$R` and `$I` files
    for the directory. The `$R` file will contain all the subdirectories and all the
    files with the original names, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.22: Deleted directory'
  prefs: []
  type: TYPE_NORMAL
- en: The user can empty the **Recycle Bin**. When that occurs, the filesystem updates
    that the clusters are now available for use. Until the system overwrites the data,
    you may recover data from the unallocated clusters. Just be aware that the `$I`
    (on an NTFS volume) will be resident data in the MFT. NTFS is very efficient in
    reusing the file entries in the MFT, so it’s challenging to recover the information
    in the `$I` file.
  prefs: []
  type: TYPE_NORMAL
- en: If the **Recycle Bin** is emptied, other artifacts may be referencing the file(s).
    That brings us to our next topic, link (LNK) files.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding shortcut (LNK) files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `.lnk` file is used by the Windows operating system as a shortcut or link
    to files, applications, or resources. It is a simple, easy-to-use method for users
    to gain access to frequently used documents or applications. The link file will
    contain useful information for the digital forensic investigator, including the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: File MAC times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This information will remain even if the destination file has been deleted.
    The system will create a link file every time the file is double-clicked or when
    using the **File Open** dialog box. These link files will be stored in the `Recent`
    folder located at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Most commercial forensic tools can analyze link files. An open-source option
    is Eric Zimmerman’s LECmd tool (which can be found at [https://ericzimmerman.github.io/](https://ericzimmerman.github.io/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'When we analyze the contents of the link file, we can see a large amount of
    information that could be helpful to the digital forensic investigator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18329_06_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.23: Link File contents'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the destination file is a Microsoft Word document stored on
    the user’s desktop. When we look at the field ID list, we can also see the file’s
    internal metadata (MAC values). This data can be fundamental when trying to tie
    knowledge of the file to a specific user. We can also see the date/time when the
    system created the link file. Additional information is the volume type/serial
    number and hostname, which allow us to tie this link file to the specific location
    of the destination file. Be aware that this is an option that the user or systems
    administrator can turn off. Another artifact similar to LNK files is the JumpList.
  prefs: []
  type: TYPE_NORMAL
- en: Deciphering JumpLists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JumpLists were introduced with Windows 7 and are very similar to the `Recent`
    folder (which we discussed with LNK files). They allow the user to access frequently
    used/recently used files from the Windows taskbar. Even if the user clears out
    the `Recent` folder, it will not clear out the information stored in the JumpLists.
  prefs: []
  type: TYPE_NORMAL
- en: 'JumpLists can be found at the following paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%UserProfile%\AppData\Roaming\Microsoft\Windows\Recent\Automaticdesti nations`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%UserProfile%\AppData\Roaming\Microsoft\Windows\Recent\CustomDestinations`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two types of JumpLists:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic – system-created. Records information about file usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom – application-created. Records task-specific information about the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the `AutomaticDestinations` folder,
    and inside the folder will be files containing the JumpLists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.24: JumpList display'
  prefs: []
  type: TYPE_NORMAL
- en: The system names the JumpLists based on their JumpLists IDs. For example, in
    the preceding screenshot, we see `5d696d521de238c3.automaticDestinations-ms`.
    A search of the JumpLists ID list (which can be found at [https://community.malforensics.com/t/list-of-jump-list-ids/158](https://community.malforensics.com/t/list-of-jump-list-ids/158))
    shows that this is the JumpLists ID for the Google Chrome browser.
  prefs: []
  type: TYPE_NORMAL
- en: Most commercial forensic tools will parse out the JumpLists. An open-source
    option is Eric Zimmerman’s JumpList Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: (Located at [https://ericzimmerman.github.io/](https://ericzimmerman.github.io/))
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the information contained in the file. You can see that the
    user was using Chrome to view PDF files and offline HTML files. It also contains
    the date/time the user opened the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`7 04/06/2018 03:56:32 +0 C:\Users\jcloudy\Desktop\LeftUsesBoycotts.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6 04/06/2018 03:55:00 +0 C:\Users\jcloudy\Desktop\AMEN.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5 04/05/2018 05:51:41 +0 C:\Users\jcloudy\Desktop\UKknifeBan.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4 04/05/2018 05:48:40 +0 C:\Users\jcloudy\Desktop\SelfDefenseisMurder.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3 03/30/2018 04:32:25 +0 C:\Users\jcloudy\Desktop\Cubs'' Anthony Rizzo Praises
    Parkland Kids, Says ''It''s too Easy to Get a Gun''.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2 03/30/2018 04:29:48 +0 C:\Users\jcloudy\Desktop\Larry King_ Time to Repeal
    the ''Poorly Written'' Second Amendment.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1 03/27/2018 09:51:18 +0 C:\Users\jcloudy\OneDrive\Getting started with OneDrive.pdf
    desktop-pm6c56d`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JumpLists are artifacts for files; the next artifact will show which folders
    the user accessed.
  prefs: []
  type: TYPE_NORMAL
- en: Opening shellbags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Shellbags are a set of registry keys that remember the size and location of
    the folders and libraries that the user has accessed via the GUI. In addition,
    you may find artifacts showing user interaction with network devices, removable
    media, or encrypted containers.
  prefs: []
  type: TYPE_NORMAL
- en: You will find them in a registry hive called `USRCLASS.DAT`, located in the
    users, `AppData\Local\Microsoft\Windows` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Most commercial forensic tools will parse out the shellbags from the `USRCLASS.DAT`
    file, but the presentation of the artifact will be different. I like to use Eric
    Zimmerman’s Shellbag Explorer as an open-source alternative.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the graphical representation of the
    folders the user accessed via the Windows GUI. This screenshot is taken from Shellbag
    Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.25: Shellbag Explorer: a graphical representation of shellbags'
  prefs: []
  type: TYPE_NORMAL
- en: You cannot determine whether the user accessed any files from within the folder
    through this artifact. What this artifact shows is that the user accessed the
    folder. As I look at the display, I see that the user was using three cloud storage
    services. We have seen prior artifacts for Box Sync and Dropbox, but this is the
    first reference I have seen regarding Google Drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following output from RegRipper, we can see the access date and timestamps
    and the date/time of the first access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18329_06_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.26: RegRipper output Google Drive'
  prefs: []
  type: TYPE_NORMAL
- en: This artifact is important if the subject states that they did not know about
    a file/folder location. This artifact is created by the user’s actions. The next
    artifact can also be used to show user knowledge of a file.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding prefetch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prefetch is a feature Microsoft introduced to enhance the user experience with
    the Windows operating system. It allows faster response times by preloading data
    into the RAM in anticipation of its demand by the user or system. You will find
    the prefetch files at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The files will have a file extension of `.pf`. In addition, the prefetch file
    will contain information about the executable file associated with it, such as
    the list of files used by the executable, the number of times the user ran the
    executable, and the last date/time when the user ran the executable.
  prefs: []
  type: TYPE_NORMAL
- en: Most commercial forensic tools will parse out the prefetch files. For an open-source
    option, you can use NirSoft’s **WinPrefetchViewtool**.
  prefs: []
  type: TYPE_NORMAL
- en: (Located at [https://www.nirsoft.net/utils/win_prefetch_view.html](https://www.nirsoft.net/utils/win_prefetch_view.html))
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we are looking at the output of `WinPrefetchView`.
    You can see the date and timestamp and the process path of the executable (be
    aware that due to the method with which the system monitors the prefetch files,
    you may have to subtract 10 seconds from the created/modified times to get an
    accurate time):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.27: Prefetch files displayed by WinPrefetchView'
  prefs: []
  type: TYPE_NORMAL
- en: By using these artifacts, you can determine which applications are being used
    by the user, which may lead to the discovery of hidden partitions, mobile devices,
    encrypted containers, or cloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: As operating systems change or are updated, the artifacts may move or be removed.
    You will have to stay current as changes become known. We will now look at artifacts
    that help us determine the physical location of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying physical locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing the system’s physical location may help you prove or disprove the allegations
    against the subject you are investigating. For example, there was an investigation
    into a compromise of the organization’s network. A former employee was the suspect
    in the attack because of their threats during the termination process. When the
    suspect was interviewed, he denied being in the area and stated he was out of
    state. A judge authorized a search warrant for the suspect’s mobile device and
    laptop computer. When conducting the forensic analysis of the laptop, the examiner
    found it to have been recently restored to a new version of the operating system.
    Artifacts in the unallocated space led us to believe the user had wiped the device.
    (The user overwrote all available sectors with hexadecimal 00 characters.) The
    suspect had not tampered with the mobile device, and we could analyze the device.
    We were able to map out the Wi-Fi hotspots the device had accessed in the immediate
    neighborhood when the suspect was allegedly out of state. When confronted with
    the digital evidence, the suspect confessed and admitted he forgot about his mobile
    device and that it was automatically connecting to Wi-Fi hotspots.
  prefs: []
  type: TYPE_NORMAL
- en: We will now talk about some artifacts you can look at in a system to help determine
    their physical location at the time of an incident.
  prefs: []
  type: TYPE_NORMAL
- en: Determining time zones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Time zone information on the system allows you to have a starting point with
    which to correlate activity that is recorded with the date/time that the incident
    occurred. All the internal dates and timestamps will be based on the time zone
    information recorded in the registry. We can find the time zone information within
    the system hive. We can find the key at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output, courtesy of RegRipper:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18329_06_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.28: RegRipper output - SYSTEM\CurrentControlSet\Control\TimeZoneInformation'
  prefs: []
  type: TYPE_NORMAL
- en: '`Tzres.dll` is the time zone resource `DLL`. You have the fields of `Bias`
    and `ActiveTimeBias`, which show the values of `300` and `240`, respectively,
    which is the number of minutes offset from GMT. And then you have the time zone
    common name, which in this case is `Eastern Standard Time`.'
  prefs: []
  type: TYPE_NORMAL
- en: Time zones are not always accurate – the user can set the time zone to the zone
    of their choice. The next artifact we will examine may help in locating a physical
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring network history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Knowing which networks, be they wired or wireless, the suspect has connected
    to might give you location information about their whereabouts at the time in
    question. You will find the relevant information in the `Software hive` or an
    XML document managed by the operating system. The Wi-Fi document will be found
    at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This directory contains subfolders (using the GUID naming convention) for each
    interface. The XML document will contain the **SSID** (**Service Set Identifier**)
    of the networks the interface has connected to. The following output is consistent
    with the information you would find in the XML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.29: XML Output of WLAN Profile'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the SSID of the network is `Net 2.4` and it is using `WPA2PSK`
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to the registry location, you will find sub hives that will contain
    networking information such as the `Profiles` subkey, which gives us additional
    information about the wireless network(s) the subject connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the RegRipper output of the `networklist` sub hive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.30: RegRipper output - SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList'
  prefs: []
  type: TYPE_NORMAL
- en: 'The registry hive gives us a little bit more information, including the MAC
    address date and timestamp of when the last connection was made. There is also
    an additional log file we can examine: the WLAN event log.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the WLAN event log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft Windows also keeps an event log of wireless connections. The log
    can be found at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This log contains SSID information, MAC addresses, and the date and timestamps
    of the connection. The following event ID numbers may be pertinent to your investigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`11000` - Wireless network association'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8001` - Connected to a wireless network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8002` - Failed to connect to wireless network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8003` - Disconnected from a wireless network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6100` - Network diagnostics (System log)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: Everything you ever wanted to know about Microsoft Windows can be found at [https://docs.microsoft.com/en-us/](https://docs.microsoft.com/en-us/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following output is consistent with what you will see in the event log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.31: Event log for WIFI access'
  prefs: []
  type: TYPE_NORMAL
- en: This is an `11000` event ID, which is the start of a wireless connection. So,
    based on this specific artifact, you can articulate that a connection was made
    to the wireless network `Net 2.4` on March 27, 2018, at 12:15:58 (GMT) by the
    computer `SYSTEM`.
  prefs: []
  type: TYPE_NORMAL
- en: If you know where the wireless network `Net 2.4` is located, you can associate
    this computer with that physical location.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss the artifacts that allow us to determine whether the user
    executed a specific program.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring program execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Program execution artifacts indicate programs or applications that were run
    on the system. The user could cause the execution, or an autostart/run event managed
    by the system. Some categories overlap with the file knowledge category we discussed
    earlier in the chapter. I am not going to re-examine those specific artifacts
    in this section. Just be aware that the artifacts from recent apps, JumpLists,
    an MRU, and prefetch files will also contain information about program/application
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: Determining UserAssist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UserAssist` is a registry key in the user’s `NTUSER.DAT` file and can be found
    at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The key tracks the GUI-based applications that were launched in the system.
    The system encodes the data in the key with ROT 13 encoding. RegRipper will decode
    the data automatically. The following represents the output you will see from
    RegRipper:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_06_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.32: Contents of NTUSER.DAT\Software\Microsoft\Windows\Currentversion\Explorer\UserAssist'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding output, you can see the date and timestamp of the
    last execution and the path of the executable. The number in parentheses at the
    end indicates the number of times the user/system has activated the executable.
    Next, we will discuss the Shimcache, which also contains information about executed
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Shimcache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the default location of the Shimcache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The Shimcache is used to track compatibility issues with executed programs.
    Some information that is stored in this cache is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: File path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$Standard` Information Attribute Modify Time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The update time of the Shimcache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following represents the output you will see from RegRipper:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text, letter  Description automatically generated](img/B18329_06_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.33: Shimcache output'
  prefs: []
  type: TYPE_NORMAL
- en: The artifacts found in the Shimcache can provide supporting evidence to the
    other artifacts found throughout the system, that is, the registry, event logs,
    filesystem, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the user will have programs or files contained within a portable
    device. The next set of artifacts will deal with the use of USB devices.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding USB/attached devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several security risks associated with a USB device. They are small,
    portable, high-capacity storage devices that can be used to exfiltrate data from
    an organization, or they can be used to deliver malware to an organization to
    compromise its security protocols.
  prefs: []
  type: TYPE_NORMAL
- en: As a digital forensic investigator, you will want to know whether there were
    any USB devices attached to the host you are examining. We will now talk about
    some Windows system artifacts that will allow you to identify USB device usage
    on the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now look at the results for two registry keys. The first key can be
    found at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This registry key identifies the USB devices attached to the system, as shown
    in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated with medium confidence](img/B18329_06_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.34: Content of Registry key - SYSTEM\CurrentControlSet\Enum\USB'
  prefs: []
  type: TYPE_NORMAL
- en: We can see there were two USB devices attached to the system at different times.
    We have different volume serial numbers and the last write times from when the
    system accessed the devices. The volume serial number found in the registry is
    not the physical device serial number.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: Devices that do not have a unique volume serial number will have an `&` as the
    second character of the volume serial number.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next registry key you want to look at is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When we look at the values in `USBSTOR`, we get some additional information
    about the devices, including the commercial name of the device. We also confirm
    the serial numbers of the devices with these two entries in the `SYSTEM` hive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18329_06_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.35: Content of Registry key - SYSTEM\CurrentControlSet\Enum\USBSTOR'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MountedDevices` key in the `SYSTEM` hive, which can be found in `SYSTEM\MountedDevices`,
    we can map the USB device(s) via the serial number to a drive letter on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18329_06_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.36: Content of Registry key - SYSTEM\MountedDevices'
  prefs: []
  type: TYPE_NORMAL
- en: When we analyze the data, we can see that two USB devices (serial numbers `AA010215170355310594`
    and `AA010603160707470215`) were connected to the system. One was recognized as
    the `D:` drive and the second device was recognized as the `E:` drive.
  prefs: []
  type: TYPE_NORMAL
- en: Does the question remain as to which user account was responsible for the USB
    device usage? To determine the answer to that question, we would have to take
    the GUID from each of the USB devices and compare them to the user’s `NTUSER.DAT`
    file. The GUIDs we are searching for are `3869c27a-31b8-11e8-9b12-ecf4bb487fed`
    and `5c3108bb-31c0-11e8-9b10-806e6f6e6963`.
  prefs: []
  type: TYPE_NORMAL
- en: 'RegRipper will also analyze the `NTUSER.DAT` file and give us the information
    about the devices that were used and associated with the user’s account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18329_06_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.37: Content of Registry key - Software\Microsoft\Windows\CurrentVersion\Explorer\MountPoints2'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we find both GUIDs in the registry entry, which shows when the
    devices were last mounted. So we can now say that the user used a specific USB
    device on the system while the `jcloudy` account was logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed how to locate artifacts on a Microsoft Windows-based
    operating system to determine the subject’s culpability in the matter being investigated.
    You have learned about the different categories of artifacts and what actions
    of the user/system they represent. Using the knowledge you have gained from this
    chapter will allow you to quickly determine which accounts were active during
    the timeframe you are investigating and whether the incident involved a removable
    storage device. In addition, you have learned about the artifacts to analyze in
    determining whether a user had knowledge of a specific file or application. Finally,
    we have used several commercial and open-source forensic tools to access the artifacts.
    As a result, you now know how to find and analyze digital evidence found on a
    Microsoft Windows-based operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will deal with memory forensics.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where would you find the registry files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%SystemRoot%\System32\Config`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%SystemRoot%\System32`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%SystemRoot%\\Config\System32`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%SystemRoot%\System64\Config`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When examining log files, which event ID identifies a successful logon?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '4624'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '4625'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '4672'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '4642'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A thumbcache is a ______________.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Database of toenail images
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Database of thumbnail images
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Database of deleted thumbnail images
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Database of deleted images
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The user can use Internet Explorer/Edge to view files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following will you find in a link (LNK) file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Volume serial number
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Router name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Date of deletion
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Volume details
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following Microsoft Windows operating systems uses JumpLists?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows 98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows ME
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows 7
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows 2000
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In which registry hive would we find artifacts relating to USB devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NT USER.DAT
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SYSTEM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SOFTWARE
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SECURITY
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The answers can be found at the rear of the book under *Assessments*.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following links for more information on topics covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Altheide, C., Carvey, H. A., and Davidson, R. (2011). *Digital Forensics with
    Open Source Tools*. Amsterdam: Elsevier/Syngress (available at [https://www.amazon.com/Digital-Forensics-Open-Source-Tools/dp/1597495867](https://www.amazon.com/Digital-Forensics-Open-Source-Tools/dp/1597495867))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Carvey, H. A. (2005). *Windows forensics and incident recovery*. Boston: Addison-Wesley
    (available at [https://www.amazon.com/Windows-Forensics-Incident-Recovery-Harlan/dp/0321200985](https://www.amazon.com/Windows-Forensics-Incident-Recovery-Harlan/dp/0321200985))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bunting, S. (2012). *EnCase Computer Forensics: The Official EnCE: EnCase Certified
    Examiner; Study Guide*. Indianapolis, IN: Wiley (available at [https://www.amazon.com/EnCase-Computer-Forensics-Official-EnCE/dp/0470901063](https://www.amazon.com/EnCase-Computer-Forensics-Official-EnCE/dp/0470901063))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Chapter 6 Owl Exercise.e01`'
  prefs: []
  type: TYPE_NORMAL
- en: Software needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Autopsy - [https://www.autopsy.com/](https://www.autopsy.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a jurisdiction where owls are illegal to trade and buy, two users are discussing
    the illegal trade of owls. A computer is taken into evidence belonging to a user
    who is attempting to purchase owls illegally. It has been requested that you conduct
    an analysis of the digital evidence. A forensic image has been obtained and is
    ready for you. You may use Autopsy or any other tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some artifacts you may want to look for include:'
  prefs: []
  type: TYPE_NORMAL
- en: Web searches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shopping searches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chat clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LNK files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recycle Bin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shellbag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Potential keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: Owl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Owlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feathers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eggs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crossbreeding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nocturnal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hoot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conservation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wingspan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/CyberSec](https://packt.link/CyberSec)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code3852467292877112093.png)'
  prefs: []
  type: TYPE_IMG
