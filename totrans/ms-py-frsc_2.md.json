["```\nuser@lab:~$ echo -n This is a test message | md5sum\nfafb00f5732ab283681e124bf8747ed1\n\nuser@lab:~$ echo -n This is A test message | md5sum\naafb38820e0a3788eb41e9f5805e088e\n\n```", "```\nuser@lab:~$ echo -n This is a test message | ssdeep\nssdeep,1.1--blocksize:hash:hash,filename\n3:hMCEpFzA:hurs,\"stdin\"\n\nuser@lab:~$ echo -n This is A test message | ssdeep\nssdeep,1.1--blocksize:hash:hash,filename\n3:hMCkrzA:hOrs,\"stdin\"\n\n```", "```\nuser@lab:~$ ssdeep -b malware-sample01.apk > signature.txt\n\nuser@lab:~$ cat signature.txt\nSsdeep,1.1--blocksize:hash:hash,filename\n49152:FTqSf4xGvFowvJxThCwSoVpzPb03++4zlpBFrnInZWk:JqSU4ldVVpDIcz3BFr8Z7,\"malware-sample01.apk\"\n\nuser@lab:~$ ssdeep â€“mb signature.txt malware-sample02.apk\nmalware-sample02.apk matches malware-sample01.apk (75)\n\n```", "```\nuser@lab:~$ md5sum /path/to/originalfile /path/to/forensic_copy_of_sdb.img\n\nuser@lab:~$ sha256sum /path/to/originalfile /path/to/forensic_copy_of_sdb.img\n\n```", "```\n#!/usr/bin/env python\n\nimport hashlib\nimport sys\n\ndef multi_hash(filename):\n    \"\"\"Calculates the md5 and sha256 hashes\n       of the specified file and returns a list\n       containing the hash sums as hex strings.\"\"\"\n\n    md5 = hashlib.md5()\n    sha256 = hashlib.sha256()\n\n    with open(filename, 'rb') as f:\n        while True:\n            buf = f.read(2**20)\n            if not buf:\n                break\n            md5.update(buf)\n            sha256.update(buf)\n\n    return [md5.hexdigest(), sha256.hexdigest()]\n\nif __name__ == '__main__':\n    hashes = []\n    print '---------- MD5 sums ----------'\n    for filename in sys.argv[1:]:\n        h = multi_hash(filename)\n        hashes.append(h)\n        print '%s  %s' % (h[0], filename)\n\n    print '---------- SHA256 sums ----------'\n    for i in range(len(hashes)):\n        print '%s  %s' % (hashes[i][1], sys.argv[i+1])\n```", "```\nuser@lab:~$ python multihash.py /bin/{bash,ls,sh}\n---------- MD5 sums ----------\nd79a947d06958e7826d15a5c78bfaa05  /bin/bash\nfa97c59cc414e42d4e0e853ddf5b4745  /bin/ls\nc01bc66da867d3e840814ec96a137aef  /bin/sh\n---------- SHA256 sums ----------\ncdbcb2ef76ae464ed0b22be346977355c650c5ccf61fef638308b8da60780bdd  /bin/bash\n846ac0d6c40d942300de825dbb5d517130d8a0803d22115561dcd85efee9c26b  /bin/ls\ne9a7e1fd86f5aadc23c459cb05067f49cd43038f06da0c1d9f67fbcd627d622c  /bin/sh\n\n```", "```\n#!/usr/bin/env python\n\nfrom datetime import datetime\nimport os\nfrom os.path import join, getsize\nimport sys\nfrom multihash import multi_hash\n\ndef dir_report(base_path, reportfilename):\n    \"\"\"Creates a report containing file integrity information.\n\n    base_path -- The directory with the files to index\n    reportfilename -- The file to write the output to\"\"\"\n\n    with open(reportfilename, 'w') as out:\n        out.write(\"File integrity information\\n\\n\")\n        out.write(\"Base path:      %s\\n\" % base_path)\n        out.write(\"Report created: %s\\n\\n\" % datetime.now().isoformat())\n        out.write('\"SHA-256\",\"MD5\",\"FileName\",\"FileSize\"')\n        out.write(\"\\n\")\n\n        for root, dirs, files in os.walk(base_path):\n            write_dir_stats(out, root, files)\n\n        out.write(\"\\n\\n--- END OF REPORT ---\\n\")\n\ndef write_dir_stats(out, directory, files):\n    \"\"\"Writes status information on all specified files to the report.\n\n    out -- open file handle of the report file\n    directory -- the currently analyzed directory\n    files -- list of files in that directory\"\"\"\n\n    for name in files:\n        fullname = join(directory, name)\n        hashes = multi_hash(fullname)\n        size = getsize(fullname)\n        out.write('\"%s\",\"%s\",\"%s\",%d' % (hashes[1], hashes[0], fullname, size))\n        out.write(\"\\n\")\n\nif __name__ == '__main__':\n    if len(sys.argv) < 3:\n        print \"Usage: %s reportfile basepath\\n\" % sys.argv[0]\n        sys.exit(1)\n\n    dir_report(sys.argv[2], sys.argv[1])\n```", "```\nuser@lab:/home/user/dirhash $ python dirhash.py report.txt .\nuser@lab:/home/user/dirhash $ cat report.txt\nFile integrity information\n\nBase path:      .\nReport created: 2015-08-23T21:50:45.460940\n\n\"SHA-256\",\"MD5\",\"FileName\",\"FileSize\"\n\"a14f7e644d76e2e232e94fd720d35e59707a2543f01af4123abc46e8c10330cd\",\"9c0d1f70fffe5c59a7700b2b9bfd50cc\",\"./multihash.py\",879\n\"a4168e4cc7f8db611b339f4f8a949fbb57ad893f02b9a65759c793d2c8b9b4aa\",\"bcf5a41a403bb45974dd0ee331b1a0aa\",\"./dirhash.py\",1494\n\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"d41d8cd98f00b204e9800998ecf8427e\",\"./report.txt\",0\n\"03047d8a202b03dfc5a310a81fd8358f37c8ba97e2fff8a0e7822cf7f36b5c83\",\"416699861031e0b0d7b6d24b3de946ef\",\"./multihash.pyc\",1131\n\n--- END OF REPORT ---\n\n```", "```\nuser@lab:~$ gpg --clearsign report.txt\n\n```", "```\nType;App_Name;md5;TargetSdkVersion;Package_Name;Process_Name;APK_Location;Version_Code;Version_Name;Certificate_Info;Certificate_SN;InstallTime;LastModified\n\nSystemApp;Chrome;4e4c56a8a7d8d6b1ec3e0149b3918656;21;com.android.chrome;com.android.chrome;/data/app/com.android.chrome-2.apk;2311109;42.0.2311.109;CN=Android, OU=Android, O=Google Inc., L=Mountain View, ST=California, C=US;14042372374541250701;unknown;unknown\n\n```", "```\n#!/usr/bin/env python\n\nimport sys, requests\n\n# Authentication Parameters\n# if you need an API key and user name please contact @m_spreitz\nAPI_FORMAT = 'json'\nAPI_USER = ''\nAPI_KEY = ''\n\n# parsing input parameters\nif (len(sys.argv) < 3):\n    print \"Get infos to a specific Android app from the Mobile-Sandbox.\"\n    print \"Usage: %s requests [type (md5,sha256)] [value]\" % sys.argv[0]\n    sys.exit(0)\n\n# building the payload\npayload = {'format':API_FORMAT,\n           'username':API_USER,\n           'api_key':API_KEY,\n           'searchType':str(sys.argv[1]),   # has to be md5 or sha256\n           'searchValue':str(sys.argv[2])}\n\n# submitting sample hash and getting meta data\nprint \"--------------------------------\"\nr = requests.get(\"http://mobilesandbox.org/api/bot/queue/get_info/\", params=payload)\n\n# printing result and writing report file to disk\nif not r.status_code == requests.codes.ok:\n    print \"query result: \\033[91m\" + r.text + \"\\033[0m\"\nelse:\n    for key, value in r.json().iteritems():\n        print key + \": \\033[94m\" + str(value) + \"\\033[0m\"\nprint \"--------------------------------\"\n```", "```\n(labenv)user@lab:~$ ./get_infos_mobilesandbox.py md5 4e4c56a8a7d8d6b1ec3e0149b3918656\n\n--------------------------------\nstatus: done\nmin_sdk_version: 0\npackage_name: com.android.chrome\napk_name: Chrome.apk\nAV_detection_rate: 0 / 56\ndrebin_score: benign (1.38173)\nsample_origin: user upload\nandroid_build_version: Android 1.0\nssdeep: 196608:ddkkKqfC+ca8eE/jXQewwn5ux1aDn9PpvPBic6aQmAHQXPOo:dBKZaJYXQE5u3ajtpvpeaQm1\nsha256: 79de1dc6af66e6830960d6f991cc3e416fd3ce63fb786db6954a3ccaa7f7323c\nmalware_family: ---\nmd5: 4e4c56a8a7d8d6b1ec3e0149b3918656\n--------------------------------\n\n```", "```\n\"3CACD2048DB88F4F2E863B6DE3B1FD197922B3F2\",\"0BEA3F79A36B1F67B2CE0F595524C77C\",\"C39B9F35\",\"TWAIN.DLL\",94784,14965,\"358\",\"\"\n```", "```\nuser@lab:~$ nsrlupdate your/path/to/NSRLFile.txt\n\n```", "```\nuser@lab:~$ nsrlsvr\n\n```", "```\n    OK 101\n\n    ```", "```\n#!/usr/bin/env python\n\nimport socket\n\nNSRL_SERVER='127.0.0.1'\nNSRL_PORT=9120\n\ndef nsrlquery(md5hashes):\n    \"\"\"Query the NSRL server and return a list of booleans.\n\n    Arguments:\n    md5hashes -- The list of MD5 hashes for the query.\n    \"\"\"\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((NSRL_SERVER, NSRL_PORT))\n\n    try:\n        f = s.makefile('r')\n        s.sendall(\"version: 2.0\\r\\n\")\n        response = f.readline();\n        if response.strip() != 'OK':\n            raise RuntimeError('NSRL handshake error')\n\n        query = 'query ' + ' '.join(md5hashes) + \"\\r\\n\"\n        s.sendall(query)\n        response = f.readline();\n\n        if response[:2] != 'OK':\n            raise RuntimeError('NSRL query error')\n\n        return [c=='1' for c in response[3:].strip()]\n    finally:\n        s.close()\n```", "```\nimport nsrlquery\nhashes = ['86d3d86902b09d963afc08ea0002a746',\n          '3dcfe9688ca733a76f82d03d7ef4a21f',\n          '976fe1fe512945e390ba10f6964565bf']\nnsrlquery.nsrlquery(hashes)\n```"]