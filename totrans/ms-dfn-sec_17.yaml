- en: '*Chapter 14*: Malware Analysis'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"The target of a malware infection is to exploit a system, therefore malware
    analysis becomes very important as a mechanism to better understand the malware
    to reduce the probability and impact of future attacks."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Patricia Herrera, MSc in Cybersecurity*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Malware analysis** is considered by many as an offensive security task. However,
    as a master in defensive security, you must know the basics of this process so
    that you can leverage it in your defensive security strategy.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, while this chapter aims to cover the basics of malware analysis,
    we will also cover some advanced topics, including a hands-on activity to show
    you how to perform basic malware analysis, but more importantly, how to gather
    (and interpret) the most valuable information resulting from the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are details of the main topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of malware analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware basics, including functionality, objectives, and backdoors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of malware analysis (static, dynamic, and hybrid)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categories of malware analysis (static, interactive, automated, and manual)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of the best malware analysis tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on experience performing basic malware analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need a Windows machine to execute a hands-on analysis
    of the malware.
  prefs: []
  type: TYPE_NORMAL
- en: Why should I analyze malware?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by defining malware analysis as a process to analyze malware (software,
    script, **Uniform Resource Locator** (**URL**), and so on) to gather as much information
    as possible about the threat.
  prefs: []
  type: TYPE_NORMAL
- en: This is considered a very technical task that demands highly skilled professionals,
    and these resources could be very expensive for companies to afford. Additionally,
    this task could also be very time-consuming, which increases the cost of performing
    this analysis even more. However, even companies with strong budgets may not invest
    in malware analysis, and the reason is that they have not realized the benefits
    of this investment.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, let's start by describing the main benefits and outputs of performing
    malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Malware functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the main goals of malware analysis is to discover the inner functionality
    of the malware. This step is of the uttermost importance because *it will support
    the containment efforts after an infection*. The main goals of this step are described
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover which are the vulnerabilities used by the malware to infect the systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the mechanisms used by the malware to spread between systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine whether the malware has any advanced features, such as *self-destruction*,
    *morphing capabilities*, *propagation*, **artificial intelligence** (**AI**),
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As part of this analysis, you will be able to determine the objective of the
    malware and this will help you to *determine the best mitigation required for
    each case*. Some examples are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data corruption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data encryption (ransomware)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data deletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System malfunction (cyberwarfare)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System disruption (hacktivism)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System damage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another key aspect of malware analysis is determining *who* created the malware
    and where the exfiltrated data is going.
  prefs: []
  type: TYPE_NORMAL
- en: This is important for two main reasons. The first is about the legal aspect,
    because in most countries, the distribution of malware is a crime, and *therefore
    identifying the group that is trying to compromise your systems is vital*.
  prefs: []
  type: TYPE_NORMAL
- en: The second reason is about using this information to *block and blacklist the*
    **Internet Protocol** *(***IP***) addresses used by the malware as that will prevent
    further attacks*.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this data (IPs, server names, and so on) can be *used as threat
    intelligence* that can be used by open source (crowdsource) systems to prevent
    attacks in other companies and industries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – IP blacklisting'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – IP blacklisting
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, blacklisting IP addresses may help to stop
    an ongoing attack, but also may prevent future attacks from the same group. It
    is also important to remember that blacklisting will also prevent a **command-and-control**
    (**C&C**) attack.
  prefs: []
  type: TYPE_NORMAL
- en: Malware backdoors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common characteristic of malware is to create backdoors. While the usage and
    objectives of those backdoors may vary, it is very important to determine any
    trail of backdoors to *reduce the possibility of further infections or data compromise*.
  prefs: []
  type: TYPE_NORMAL
- en: Affected systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another important factor to analyze concerns the systems (OS, software, or hardware)
    that will be impacted by the malware. This is very important because some malware
    may remain *inactive* till a given condition or system is present (for example,
    Stuxnet).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are aware of the benefits and importance of malware analysis, it's
    time to understand the types of malware analysis, as well as their categories.
  prefs: []
  type: TYPE_NORMAL
- en: Types and categories of malware analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a considerable number of tools that can be used for malware analysis,
    so to better understand them, let's start by describing the three types (actually,
    two) of malware analysis tools.
  prefs: []
  type: TYPE_NORMAL
- en: Static malware analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This type of analysis is based on a review of the code to determine the potential
    indication of threats. Those indicators can be hashes, IP addresses, code signatures,
    code patterns, strings, functions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The main characteristic of this analysis is that it does not execute the code,
    and while this is an advantage in terms of resources, the scope is also limited
    because it will not fully test the impact and actions executed by the malware.
  prefs: []
  type: TYPE_NORMAL
- en: Another downside is that sophisticated malware may include advanced features
    aimed to bypass this static analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic malware analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This type of testing requires more resources in terms of skilled professionals,
    but also in terms of technology because it requires an isolated environment to
    run a test, called a **sandbox**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Sandboxes are very sensitive because if they are not properly configured and
    isolated, they can cause a catastrophic event. Therefore, they must only be used
    by experienced and trained experts.
  prefs: []
  type: TYPE_NORMAL
- en: In this type of testing, the malware is executed on the sandbox to discover
    almost all characteristics of the malware explained in the previous heading.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the main advantage of dynamic malware analysis is that it provides
    better insights into the malware, which helps to discover additional information
    that will be impossible to obtain with static tests.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are some advanced malware that can bypass `xxx.xxx.xxx.xxx`—making
    the dynamic test unreliable.
  prefs: []
  type: TYPE_NORMAL
- en: To overcome that problem, organizations are now using a hybrid approach.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid malware analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As seen in the following screenshot, a hybrid approach is based on a combination
    of the two methods already explained, to take advantage of their benefits while
    also covering their weak spots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Types of malware analysis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – Types of malware analysis
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, an advanced malware may deceive a sandbox by using code to prevent
    full execution while in the sandbox environment; however, static analysis using
    **heuristics** or signatures might be able to detect that behavior, allowing the
    analyst to modify the sandbox to execute even those *hidden* features or actions
    of the malware.
  prefs: []
  type: TYPE_NORMAL
- en: What is heuristic malware analysis?
  prefs: []
  type: TYPE_NORMAL
- en: Heuristics were introduced as a way to detect new threats such as unknown malware,
    modified malware, and even polymorphic malware. They basically work by analyzing
    the code of a file to look for either pieces of known viruses or common functions
    or code that are only present on malware, such as encrypting an entire drive,
    disabling the antivirus, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: I know you want to know more about malware tools, but before jumping into them,
    we need to understand the stages of malware analysis, as this may serve as a way
    to categorize the different tools available.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's explore the different categories of malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Static properties analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a simple type of analysis, aimed at analyzing some basic characteristics
    of the malware (metadata) to understand more about the malware.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, this is the first step to determine if additional analysis is needed,
    and even to determine which analysis is more suitable.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive behavior analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interactive behavior analysis is a very complex type of analysis in which the
    analyst interacts with the malware to better understand it (impact, connections,
    and so on). This type of testing is performed in a protected and isolated environment
    created specifically to perform this test. This enables the analyst to determine
    changes caused by the malware in the **Operating System (OS)**, registry keys,
    processes, service interdependencies, backdoors, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Fully automated analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a set of predetermined tests that can be executed over a given malware
    to gather some additional information. This test is normally *cloud-based* (as
    a service) and provided by a third party.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main advantages is that it will produce an easy-to-read report, which
    means that no special skills are required to execute this type of testing. Additionally,
    this analysis is highly recommended when the company needs to analyze a big number
    of malware samples in a convenient and quick way.
  prefs: []
  type: TYPE_NORMAL
- en: Manual code reversing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is probably the most complex type of malware analysis as it requires reverse-engineering
    the code using debuggers, dissemblers, or compilers.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, even advanced cryptographic skills may be required to perform
    this testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The different categories of malware analysis are shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Categories of malware analysis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – Categories of malware analysis
  prefs: []
  type: TYPE_NORMAL
- en: As highlighted in the preceding figure, code reversing is the most complex and
    time-consuming analysis.
  prefs: []
  type: TYPE_NORMAL
- en: OK—now that you are a pro on the concepts of malware analysis (including their
    categories and types of analysis), it's time to move on to the next topic and
    finally see the tools used to perform malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Best malware analysis tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's do a review of the top five tools used for malware analysis. This compilation
    includes tools from all types and categories of malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Process Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tool is basically a *super task manager* that provides you with a lot of
    information about the processes running in your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'It tells you the location of the file, the **autorun** settings, a dedicated
    performance graph of the process (useful to find anomalous patterns), and, as
    seen in the following screenshot, it has an option to check every process with
    the database of [VirusTotal.com](http://VirusTotal.com), which is very useful
    if you want to test suspicious processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Checking a running process using Process Explorer with VirusTotal.com'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – Checking a running process using Process Explorer with VirusTotal.com
  prefs: []
  type: TYPE_NORMAL
- en: This tool is basic but is free and supported by Microsoft, so it is definitely
    a good place to start.
  prefs: []
  type: TYPE_NORMAL
- en: To download it, visit the official site at [https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer).
  prefs: []
  type: TYPE_NORMAL
- en: Process Monitor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Process Monitor** (**ProcMon**) is another great tool by Microsoft (formerly
    Sysinternals) that allows you to monitor in real time all activity related to
    filesystems, processes, and threat activity. The executable file can be downloaded
    for free through this link: [https://docs.microsoft.com/en-us/sysinternals/downloads/procmon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon).'
  prefs: []
  type: TYPE_NORMAL
- en: However, this tool can record thousands of events in a second, so there is a
    risk that you may bypass an event. However, to overcome this, you can export the
    results to a **comma-separated values** (**CSV**) file that you can use to visualize
    offline, using a tool such as *ProcDOT*.
  prefs: []
  type: TYPE_NORMAL
- en: ProcDOT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned before, there are great tools, such as **ProcMon** and even **Wireshark**,
    that provide great insights to uncover potential malware; however, these two tools
    produce thousands of records, which makes the process of analysis of the data
    very complex and time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: 'But here is where **ProcDOT** comes in, as it enables you to correlate the
    data from those two sources (ProcMon and Wireshark) using interactive graphs,
    which greatly helps during the analysis process. Additionally, the tool has the
    following key features:'
  prefs: []
  type: TYPE_NORMAL
- en: Animation mode (great to easily understand timing aspects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart following algorithms (help you focus on relevant items)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection and visualization of thread injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correlation of network activities (and the causing processes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity timeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters to clean up noise (global- and session-wise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of visual analysis and correlation
    from ProcDOT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – ProcDOT visual analysis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 – ProcDOT visual analysis
  prefs: []
  type: TYPE_NORMAL
- en: 'Oh, and this tool is also free and available at the following link: [https://www.procdot.com/index.htm](https://www.procdot.com/index.htm).'
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ghidra** is a great **software reverse engineering** (**SRE**) suite developed
    by the **National Security Agency** (**NSA**) and distributed for free as open
    software since 2019\. One of the main characteristics of the software is its ability
    to disassemble the code without executing it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, Ghidra also has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiplatform analysis of compiled code in Windows, macOS, and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disassembly, assembly, and decomplication of code, graphing, and scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for multiple architectures, including **Advanced RISC Machines** (**ARM**),
    PowerPC, **Million Instructions Per Second** (**MIPS**), Java, 6800, x86, x64,
    **Reduced Instruction Set Computer** (**RISC**), and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation files and **frequently asked questions** (**FAQ**) can be found
    on the official web page, at [https://ghidra-sre.org/](https://ghidra-sre.org/).
  prefs: []
  type: TYPE_NORMAL
- en: PeStudio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PeStudio** is a great tool for *performing static malware analysis on Windows
    machines*.'
  prefs: []
  type: TYPE_NORMAL
- en: A cool feature is that *you don't need to install it* as it runs as a portable
    executable file on Windows. Also, consider that there is a basic version of the
    software available for free, while there is a premium version that can be purchased
    for a low price.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's do a deep dive into this tool by doing hands-on malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Performing malware analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's start by downloading the executable files from their site at [https://www.winitor.com/download](https://www.winitor.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the executable files, just double-click on them to run them.
    Then, you will be able to see the main interface, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – PeStudio GUI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.6 – PeStudio GUI
  prefs: []
  type: TYPE_NORMAL
- en: Now, as seen in the preceding screenshot, we just need to drag and drop the
    file that we want to analyze.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Malware analysis is a dangerous task that may harm your computer or even your
    entire network, so before starting, you need to follow some security measures,
    as we highlight next.
  prefs: []
  type: TYPE_NORMAL
- en: Security measurements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some security rules that must be followed to reduce the risk when
    performing malware analysis. Here is a compilation of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Never use your personal or work computer to perform malware analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the machine used for testing is isolated from the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of an isolated virtual sandbox environment is recommended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a new sandbox for each analysis wherever possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a **virtual machine** (**VM**) hosted on a machine isolated from the network
    that has a fresh image installed and with no other data stored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the VM when the analysis is complete.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new VM for each analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wipe out the disk of the host computer and perform a new OS installation when
    dealing with dangerous malware and performing dynamic analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the malware is identified, check if the malware is capable of hiding on
    the boot sector of the **hard disk drive** (**HDD**) and if yes, take the necessary
    remediation steps to completely wipe the malware, because a normal disk wipe may
    not be sufficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK—now that the safety measures are clear, let's start with the execution of
    the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this case, we will perform several types of analyses with different file
    types so that we can explore the different types of data that we can gather with
    this tool.
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is to walk through the tool and determine the information that
    we need to look for when performing the analysis; therefore, it is an unnecessary
    risk to perform this example with real malware. Instead, we will use known safe
    files to perform the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: For the first one, I will use a registry file (for example, you can use the
    one on the installation package of PeStudio).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, the main screen will give you some
    basic information such as hashes (which can be useful to contrast with a database
    of known hashes):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – Basic output from PeStudio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.7 – Basic output from PeStudio
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, and as seen in *Figure 14.8*, there is a great section called
    **virustotal** that provides an integration with the VirusTotal **application
    programming interface** (**API**) to tell you how this file is rated by different
    antivirus software. Here, you need to consider that it connects to an external
    server for this query; therefore, the results here may take some time to be displayed.
    However, if someone else has already scanned the file, then the output is almost
    immediate. Now, this also tells you something about the file because if it is
    not found, then you are either facing a very new threat or a modified file used
    to attack your infrastructure, so this may serve as evidence that you are under
    a targeted attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting piece of data here is the **age** column because it shows
    you when it was scanned by each antivirus and, as shown in the following screenshot,
    there is one scan from more than 2 years ago, which means that this file has been
    out for quite some time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – Scan results from VirusTotal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.8 – Scan results from VirusTotal
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the **strings** section is super important because it reads the actual
    content of the file, so you can explore it without having to open it. For example,
    in the following screenshot, we can see the value of the registry key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Checking the value of a registry file without opening it'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.9 – Checking the value of a registry file without opening it
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example is that you can determine whether the content of the file has
    encoded any URL (such as a C&C server), as shown in the following screenshot.
    Another interesting item to highlight in this screenshot is that the tool also
    shows long strings, which can be considered a threat. This is very useful because
    it saves you time by showing you this information in a very clean way that would
    otherwise be very difficult to find (manually):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – URL pattern found inside a file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.10 – URL pattern found inside a file
  prefs: []
  type: TYPE_NORMAL
- en: OK—now, let's scan a more complex file, such as a `.dll` file.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 14.11*, PeStudio now shows many more categories with a lot
    of useful information.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the **strings** section has a lot of interesting information,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Interaction or actions with registry keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interaction or actions with files including permissions (for example, get file
    size, delete file, write file, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution of system actions (open a process, delete a process, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Window (GUI) management (close a window, send a popup, get popup data, and so
    on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input and output** (**I/O**) actions (get active windows, mouse or keyboard
    actions, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another important category to review is `.dll` files associated with this file,
    which is super important for determining the scope of the malware. Additionally,
    PeStudio allows you to copy the name of the `.dll` file. If you are not familiar
    with `.dll`, you can google it for more help (or go directly to **Microsoft Developer
    Network** (**MSDN**).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see an overview of PeStudio here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – Analysis of libraries on PeStudio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.11 – Analysis of libraries on PeStudio
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the **sections** category, you would be able to see advanced attributes
    of the malware, such as whether the file is writable, executable, shareable, or
    discardable (denoted by an **X** symbol). Another common characteristic of malware
    that you can see in this section is self-modifying, which is a common attribute
    of morphing malware.
  prefs: []
  type: TYPE_NORMAL
- en: The **file-header** category also shows a very important piece of information
    about when the file was compiled. Also, keep in mind that some malware has auto-compiling
    characteristics, so if you have a very recent date, then you may be facing advanced
    auto-compiling malware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Oh, and one more thing: if any of the antivirus engines of [VirusTotal.com](http://VirusTotal.com)
    detected the file as malware (as seen in the following screenshot), then you have
    the option to go to the **virustotal** category to get additional information
    about the malware:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – View of VirusTotal scan results on PeStudio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.12 – View of VirusTotal scan results on PeStudio
  prefs: []
  type: TYPE_NORMAL
- en: The **virustotal** category also gives you a lot of super useful data that you
    can correlate against your own analysis. For example, **virustotal** will show
    you the registry keys affected, deleted, or updated by the malware, as well as
    other actions such as the processes killed by the malware.
  prefs: []
  type: TYPE_NORMAL
- en: '*And before we finish this chapter, remember to always follow the required
    safety measurements BEFORE performing malware analysis.*'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned a lot about malware analysis, but more importantly,
    about how we can gather and understand the outputs from the tools used for the
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: While malware analysis is mostly performed by a specialized team (with specialized
    tools and environments), the knowledge obtained about this process has given you
    the skills to better manage a global cybersecurity strategy like a pro!
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to move on to another exciting chapter in which we will learn
    how to leverage pentesting tools and techniques in defensive security.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find out more about malware analysis, you can read the following book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/product/mastering-malware-analysis/9781789610789](https://www.packtpub.com/product/mastering-malware-analysis/9781789610789)'
  prefs: []
  type: TYPE_NORMAL
