- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RAM Memory Forensic Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RAM is a vital source of digital evidence that has been neglected and ignored
    historically. As our knowledge of digital evidence grew, examiners realized the
    source of potential digital evidence that existed in RAM. Ultimately, you have
    an additional multi-gigabyte source of information that needs to be examined and
    may contain digital artifacts that do not exist in the traditional locations of
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover the fundamentals of memory. We will then look
    at the different sources of memory and learn to capture RAM using RAM capture
    tools. By the end of this chapter, you will understand the various methods and
    tools that can process volatile memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random access memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying sources of memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring RAM analyzing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamentals of memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What information does **random access memory** (**RAM**) contain? It will give
    you information about the current running state of the system before you shut
    it down. It will contain information about any running programs; these could be
    legitimate processes, and it could contain running malware processes as well.
    If attackers have compromised the host, the malware may be a resident in the RAM.
  prefs: []
  type: TYPE_NORMAL
- en: You will also find information related to the host’s network connections with
    other peers. This could be a legitimate use of peer-to-peer file sharing, or it
    could show a link to the attacker’s host. These connections are breadcrumbs for
    you to follow. The user could also be sharing illicit images. Again, the connection
    to other computers will allow you to follow and investigate additional users for
    the same crime.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is using cloud services, we may never find the data they are creating
    on the physical disk in the system. Instead, we may only see the evidence of the
    data being hosted in the cloud in the form of RAM.
  prefs: []
  type: TYPE_NORMAL
- en: RAM is the kitchen table of the computer system. Any action the user/system
    takes will access the RAM. For example, every mouse click and every keyboard button
    that’s pushed will be processed through the RAM, and you can recover entire files,
    passwords, and the text that was placed into the clipboard. All of these are potential
    sources of digital evidence. Sometimes, you can recover the encryption keys for
    closed encrypted containers that the user has created.
  prefs: []
  type: TYPE_NORMAL
- en: In 2004, Rajib K. Mitra was convicted of jamming police radios. The investigation
    resulted in the seizure of multiple pieces of digital evidence. The lead detective,
    Cindy Murphy, learned in 2009 that it was possible to recover encryption keys
    that may have existed only in RAM. Detective Murphy was able to go back and reexamine
    the evidence and was able to identify the encryption keys Mitra had used to secure
    his encrypted container. When Detective Murphy opened the encrypted container,
    she found many illicit images, which led to Mitra being convicted of possessing
    the images.
  prefs: []
  type: TYPE_NORMAL
- en: How is analyzing RAM different from analyzing a hard drive? RAM is a snapshot
    of a live running system, whereas a hard drive examination is static. When examining
    a hard drive, we have shut the system down and we are examining data on the physical
    device. RAM is much more transient, and if you were to take a forensic image of
    RAM at two different points of time, you would get different results. Capturing
    the data in RAM will lead to the loss of potential evidence. You are changing
    evidence when you collect RAM.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s talk about what RAM is.
  prefs: []
  type: TYPE_NORMAL
- en: Random access memory?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RAM temporarily stores working data/code on an active computer system. Unlike
    on traditional storage devices such as hard drives, data can be read/written on
    RAM at extremely fast speeds. Current technology allows the RAM chips to be created
    around an integrated circuit chip with metal oxide semiconductor cells. The data
    stored within the RAM chips is volatile.
  prefs: []
  type: TYPE_NORMAL
- en: We lose volatile data when the computer system is no longer powered on. This
    is a significant reason the *pull the plug* tactic is no longer recommended when
    responding to a scene involving activated computer systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may run into two different types of RAM: **static RAM** (**SRAM**) and
    **dynamic RAM** (**DRAM**). SRAM is considered faster and more efficient in terms
    of energy use, whereas DRAM is cheaper to produce than SRAM. Therefore, you will
    typically find SRAM used as cache memory for the CPU and DRAM chips used as memory
    chips for the computer system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a representation of a DRAM chip you may come across in your
    investigations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text, electronics, circuit  Description automatically
    generated](img/B18329_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: DRAM image'
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse RAM with **read-only memory** (**ROM**). ROM permanently stores
    data within the memory chips and is not volatile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following: a 32-bit Microsoft Windows-based computer system has
    a limitation of 4 GB of RAM, while a 64-bit Microsoft Windows-based computer system
    has a limit of 128 GB of RAM. That is a considerable amount of potential evidence
    that, historically, has not been analyzed.'
  prefs: []
  type: TYPE_NORMAL
- en: For the CPU to access the data/execute code being stored in the memory chips,
    there must be a unique identifier for the location of that data. When we start
    examining raw memory dumps, we will be dealing with the physical address, which
    is an offset of the memory dump.
  prefs: []
  type: TYPE_NORMAL
- en: Data stored in RAM is stored in pages that are 4 kilobytes in size (but can
    vary in size), and as the system processes add/read data to the pages in RAM,
    they are utilizing virtual addressing.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the operating systems access RAM in the same general manner. So let’s talk
    about some concepts that are common to an operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Privilege separation**: Privilege determines what a user, user account, and
    the process are allowed to access. It is a form of access control, and when used
    by the operating system, it helps provide system stability by isolating users
    and the CPU kernel’s actions. The operating system operates in trusted mode, that
    is, kernel mode, while the user applications operate in untrusted mode, that is,
    user mode, when executing commands in the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System calls**: To access resources controlled by the operating system’s
    kernel, the user application must request access. This is done through a system
    call to the kernel. It is a bridge between the application and the operating system
    to allow the untrusted mode to become trusted for a specific instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process management**: Program code is executed in memory. The operating system
    is responsible for managing the processes. Current operating systems operate as
    multi-programming systems, allowing multiple processes to be executed simultaneously.
    As we analyze the memory dumps, we are looking at which processes were being executed
    at the time of capture and analyzing the data stored within RAM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threads**: A process can have multiple threads. It is the basic unit of using
    the system’s resources, such as the CPU. When we analyze the memory dumps, we
    are looking for the processes timestamps and starting addresses, which will help
    identify the code in the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The contents of RAM may include artifacts of what is or has occurred on the
    system. This can include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typed commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unencrypted data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chat conversations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can tell, with the collection of RAM, there is great potential to acquire
    significant evidence. Where do we find data that is stored in RAM? There are several
    different sources, all of which we will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying sources of memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What happens if you are not the investigator on the scene when the digital evidence
    is collected in the RAM, and they do not collect volatile data? Is it possible
    to still access the RAM, despite having the system shut down? While you cannot
    analyze the RAM, it is possible to examine other sources containing the same data
    stored in the RAM. This option may not always be viable, depending on the specific
    set of circumstances surrounding the seizure of the digital evidence.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to know that there are potential additional sources containing the
    same or similar data in RAM. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hibernation file (hiberfill.sys)**: Hibernation is the process of powering
    down the computer while still maintaining the current state of the system. In
    Windows, the RAM is compressed and stored in a `hiberfill.sys` file. This will
    allow the system to power down completely, but when the system is reactivated,
    the contents of the `hiberfill.sys` file will be placed back into RAM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are examining a laptop, hibernation is usually initiated by closing the
    laptop. In a desktop, this will be user-initiated. The file header for the `hiberfill.sys`
    file can be `hibr`, `HIBR`, `wake`, or `WAKE`. When the system is repowered, the
    header of the file is zeroed out. The `hiberfill.sys` file is a compressed file
    and will have to be decompressed before you can analyze it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When analyzing the `hiberfill.sys` file, the last modification date/timestamp
    will show when the contents of RAM was added to the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another option if you are on scene and cannot do a live capture of the RAM is
    to place the system into hibernation, which will then create the `hiberfill.sys`
    file where the current state of the system is saved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Pagefile (pagefile.sys)**: Paging is a method of storing/retrieving data
    used in the RAM chips with a virtual memory file stored on a traditional storage
    device. While not as fast as using RAM alone, it allows programs to exceed the
    physical memory capacity. When using paging, the system will transfer data in
    pages. The data stored in the page file is typically the least requested data
    used in memory. When the requests for that data are processed, it places the data
    back into the physical memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Windows operating system, the paging file, `pagefile.sys`, is stored
    at the root of the operating system volume. Be aware that the user can change
    this location. Typically, the page file can be one to three times larger than
    the amount of physical memory on the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Swapfile (Swapfile.sys)**: With Microsoft Windows 8, Microsoft introduced
    the `Swapfile.sys` file. It is similar to the page file we just discussed but
    with some differences. The Swapfile was created so that the operating system can
    use it for paging operations with suspended modern Windows applications. When
    the application is suspended, the system will write the application data in its
    entirety into the swapfile. This frees up space in the physical memory, and when
    the application is resumed, it moves the data back into physical memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crash dump (memory.dmp)**: If you have used any version of Microsoft Windows,
    you might have experienced a system crash or a **blue screen of death** (**BSoD**).
    When that occurs, it may create a dump of memory to store information about the
    system’s state at the time of the crash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending on the settings, you may get one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Complete memory dump**: The data contained within the physical memory. (Not
    very common because of issues with the capacity of the physical memory chips.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kernel memory dump**: Will only contain pages of data that were in kernel
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Small dump files**: Contains information about running processes/loaded drivers
    at the time of the crash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `SYSTEM` hive will contain the key to determine which memory dumps exist
    on the system you are examining. The key you’ll want to explore is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The dump files will be in a proprietary format and will need a third-party tool
    to convert them (available at [https://www.comae.com](https://www.comae.com)).
    So far, we have discussed the locations that will provide sources of RAM. Ultimately,
    you will want to capture the data within the RAM chips, which is our next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing RAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the decision is made to capture the RAM from the system, several factors
    need to be considered before moving forward. The most significant issue is that
    you will be changing the system’s state when you collect the volatile data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Scientific Workgroup on Digital Evidence** (**SWGDE**) has explored the
    collection of volatile data and offers the following considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: The application used to collect the data in memory will overwrite some memory
    contents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The larger the tool and associated files are, the more data it overwrites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system may load the USB device driver into memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system may load the USB device driver into the registry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application used to collect the data in memory will show up in some **Most
    Recently Used** (**MRUs**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is the potential that the collection of RAM may cause a system lockup
    or instability in the system. Therefore, the digital forensic investigator must
    know how the tool may affect different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: After calculating the risk versus the reward, you have decided to go forward
    and collect the contents of the RAM. What do you need to accomplish this task?
    It would be best to decide which tool works best in the environment in which you
    will create the memory dump. One consideration regarding your tool selection is
    how big a footprint the tool will leave on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the capturing device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To successfully image the RAM, you will need three things:'
  prefs: []
  type: TYPE_NORMAL
- en: A capturing device (such as a USB device)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrator privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the amount of RAM installed on the system will dictate the size
    of your external storage device. If the system has 16 GB of RAM, your external
    storage device will need to be greater than 16 GB. The memory dump will be the
    same size as the amount of installed RAM.
  prefs: []
  type: TYPE_NORMAL
- en: You will want to prepare your external storage device before responding to the
    scene. Your device should be formatted as an NTFS partition. This will alleviate
    any file size issues you might encounter if you formatted the device in FAT 32.
  prefs: []
  type: TYPE_NORMAL
- en: We will now discuss some tools to create a raw forensic image of the RAM.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring RAM capture tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I will briefly discuss some tools that you can use to capture RAM. There are
    additional commercial and open-source tools available. We could write an entire
    book (and there are some) about some tools used for memory forensics. The goal
    here is to give you an overview and the skills necessary to accomplish a successful
    memory dump, but be aware that you can go into much greater detail than I will
    go into in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The following tools are all open source and freely available.
  prefs: []
  type: TYPE_NORMAL
- en: Using DumpIt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DumpIt (available at [https://github.com/thimbleweed/All-In-USB/tree/master/utilities/DumpIt](https://github.com/thimbleweed/All-In-USB/tree/master/utilities/DumpIt))
    was originally developed by MoonSols. Then Comae was maintaining the project.
    As of 2021, DumpIt appears to have been rolled into the Comae Platform V2.0 Closed
    Beta. It is a combination of `Win32dd` and `Win64dd` in one executable. The end
    user isn’t given any options to configure. This tool is fast, small, and portable.
    It leaves the least significant form of footprint on the RAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'DumpIt is the simplest of all the tools to use. Once you have created your
    external device and have responded to the scene, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert your thumb drive into the target host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `cmd` (as shown in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Search bar](img/B18329_07_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Search bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on **Command Prompt** so that you can run it as an administrator
    (as shown in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Image administrator](img/B18329_07_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: Run as administrator'
  prefs: []
  type: TYPE_NORMAL
- en: Once Command Prompt comes up, navigate to the folder on your USB device that
    contains the executable. You will then type in the `cmd` command and execute it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The system will then present you with a screen showing the amount of physical
    memory and the amount of space on the device. It will then ask you if you want
    to continue. Select `y`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18329_07_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: DumpIt screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The amount of RAM installed will dictate the amount of time it will take to
    create the dump of the RAM. Once the process has been completed, the program will
    notify you that it was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18329_07_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: DumpIt successful'
  prefs: []
  type: TYPE_NORMAL
- en: DumpIt is not the only tool available. There are additional open-source alternatives,
    such as FTK Imager, which we will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Using FTK Imager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FTK Imager Lite (available at [http://accessdata.com](http://accessdata.com))
    is a GUI-based utility that allows a user to dump the memory of a computer system
    running either a Windows 32-bit or 64-bit operating system. This tool is easy
    to use and deployable on a thumb drive. This tool also allows us to mount binary
    dump files for viewing. Since it is GUI-based, it leaves a significant footprint
    on the RAM.
  prefs: []
  type: TYPE_NORMAL
- en: FTK Imager is also relatively easy to use. Remember that it is GUI-based, so
    as you launch the executable from your external storage device, it will overwrite
    more data in memory than a CLI-based tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have responded to the scene, you will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert your thumb drive into the target host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If **File Explorer** does not automatically launch, use the *Windows* + *E*
    keyboard shortcut to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch FTK Imager, left-click on **File**, and select **Capture Memory...**,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18329_07_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: FTK Imager menu'
  prefs: []
  type: TYPE_NORMAL
- en: The **Memory Capture** window will appear as shown in the following screenshot.
    Here, you can fill in the destination path:![FTK Imager memory capture ](img/B18329_07_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.7: FTK Imager memory capture'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: However, ensure that you select your external storage device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You also have the option to choose the `pagefile`. There is no reason not to.
    Check that box and then left-click on **Capture Memory**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the tool has finished, you will receive a success notification, as shown
    in the following screenshot. This will store the memory file on your external
    storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![FTK Image successful ](img/B18329_07_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.8: FTK Image successful'
  prefs: []
  type: TYPE_NORMAL
- en: No matter which tool you used to collect the memory, once you have collected
    it, you need to get a hash value of the file you just created. You do not want
    to use the suspect’s system because any commands you issue will change the state
    of the evidence. You will want to use your forensic laptop or your forensic workstation
    at your laboratory to generate the hash value.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created a memory dump of the RAM, what tools will you use
    to analyze it? Let’s talk about some tools that can be used to analyze RAM.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring RAM analyzing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like when we analyze forensic images created from traditional storage
    devices, you have the choice of open source or commercial software. It comes down
    to the examiner’s preferences (and sometimes budget) on what tool they wish to
    use to analyze the dataset. We will go over some available tools, but this is
    not an all-inclusive list. Most commercial tools will analyze a memory file; we
    will discuss some open-source options that are available here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bulk Extractor: Bulk Extractor (available at [http://digitalcorpora.org/downloads/bulk_extractor](http://digitalcorpora.org/downloads/bulk_extractor))
    scans the target media (disk image, file, directory) and extracts what it believes
    to be useful information. It ignores the filesystem structure, which allows it
    to process different parts of the source dataset in parallel. This makes it very
    fast compared to traditional forensic tools. As Bulk Extractor finds data it believes
    to be relevant, it creates a histogram of the artifacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volatility: Volatility (available at [https://www.volatilityfoundation.org](https://www.volatilityfoundation.org))
    is an open-source framework for incident response and malware analysis. Volatility
    supports a wide variety of memory dumps from multiple operating systems. Volatility
    is very powerful and has numerous plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VOLIX II v2: VOLIX II (available at [https://www.fh-aachen.de/en/people/schuba/forschung/it-forensik/projekte/volix-en](https://www.fh-aachen.de/en/people/schuba/forschung/it-forensik/projekte/volix-en))
    is a GUI frontend for Volatility. It allows you to combine commands to enhance
    usability and speed. It saves you the effort of working with a CLI and enables
    you to point and click to achieve the same result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss the use of some of these open-source options.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bulk Extractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at how Bulk Extractor works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bulk Extractor’s documentation lists the following information about its output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18329_07_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.9: Bulk Extractor output options'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to left-click on **Tools** and select **Run bulk_extractor…**
    to start analyzing your memory dump, as shown in the following screenshot. When
    you run Bulk Extractor, the viewer will present itself:![](img/B18329_07_10.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.10: Bulk Extractor menu – the run bulk extractor option'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It will then present you with the **Run bulk_extractor** menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Direct the tool to the location of your image file and the output directory
    you wish to use. As shown in the following screenshot, you can see the numerous
    scanners that the Bulk Extractor tool uses to look for artifacts within the memory
    file:![A picture containing graphical user interface  Description automatically
    generated](img/B18329_07_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.11: Bulk Extractor menu options to run'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can check or uncheck a given specific artifact search as your needs dictate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you are satisfied with the setup, left-click on the **Submit Run** button
    to start the extraction process. Once the extraction has started, it will present
    you with the extraction window, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Bulk Extraction successful extraction window ](img/B18329_07_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.12: Bulk Extraction window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Left-click on the **Close** button to go back to the viewer. The following
    screenshot shows the **Bulk Extractor Viewer**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18329_07_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.13: Bulk Extractor Viewer – extracted content'
  prefs: []
  type: TYPE_NORMAL
- en: On the left-hand side, we can see the specific artifacts recovered by the tool.
    In the preceding screenshot, I selected the `email_histogram.txt` file, which
    gives us a list of times it found a particular email address. By looking at the
    histogram window, I can see that it found the `jcloudy1` email address over 8,000
    times. As you go through the email list, you may find emails of evidentiary interest
    to follow up while using traditional media.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk Extractor is a quick and efficient tool used to extract data strings that
    you can follow up in your investigation. The following tool we will discuss is
    Volix II.
  prefs: []
  type: TYPE_NORMAL
- en: Using VOLIX II
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Volix is a GUI frontend for the Volatility framework. It makes it a bit easier
    for those who are not comfortable using a **command-line interface** (**CLI**).
    Once the program has been downloaded and you start it for the first time, it will
    present you with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Volix settings ](img/B18329_07_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.14: Volix settings'
  prefs: []
  type: TYPE_NORMAL
- en: Then, you will be pointed to the location of the Volatility framework. You can
    use either the standalone executable or the binary files to run the Python scripts.
    Here, I have already downloaded the standalone executable and have pointed Volix
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: The other options you can select include the language you wish to use Volix
    in. If you have a VirusTotal API key, you can insert it on that page. This will
    compare the data captured from RAM and see if it matches any malware being tracked
    by VirusTotal.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also have the option of pointing Volix to the John the Ripper executable.
    If you want to decode/decrypt potential passwords that may be stored in the RAM,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve selected **Case**, choose **New**. It will ask you the location
    of the memory file you wish to analyze, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Volix RAM location ](img/B18329_07_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.15: Volix RAM location'
  prefs: []
  type: TYPE_NORMAL
- en: If you click on **Reporting**, you can specify the path for the report file
    that Volix will generate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you select **OK**, the Volix wizard screen will appear. You now have the
    option of going through a questionnaire to determine what options you wish to
    run on the memory file. You can also select one of the pre-created scripts to
    search for that specific artifact, such as **Virus detection** or **Decrypt SAM
    Hashes**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18329_07_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.16: VOLIX wizard'
  prefs: []
  type: TYPE_NORMAL
- en: 'I selected **Complete Scan**. You can see the results in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18329_07_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.17: Volix scan results'
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, you can see I have selected `getsids`. Below
    this on the screen, it has pulled out the SIDs that were in memory at the time
    of collection.
  prefs: []
  type: TYPE_NORMAL
- en: How many artifacts you ask it to search for at once will dictate the length
    of time for the application to complete. Overall, it is a relatively quick search
    compared to other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the cornucopia of artifacts you can recover
    from RAM. You learned about the different tools you can use for the collection
    process and the tools you can use for analysis. Remember that the tools are constantly
    changing with the technology, and as new operating systems are released, your
    primary tool may not be able to collect RAM data. Always have a backup plan in
    case something like that occurs.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the skills to identify and capture RAM in a manner that conforms
    to best practices. As you analyze the RAM you have captured, you may find artifacts
    showing the user’s activity on the system, such as social media artifacts and
    passwords or encryption keys that can be recovered.
  prefs: []
  type: TYPE_NORMAL
- en: You may even find information relating to the user’s use of email, which will
    lead us to our next chapter, which is all about email forensics.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following are sources of RAM data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Physical memory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pagefile.mem`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Swapfile.page`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ROM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which file is created when the computer goes to sleep?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pagefile.sys`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Swapfile.sys`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Hiberfill.sys`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Hibernation.sys`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When should you capture RAM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every hour
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Every week
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In every digital forensic investigation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you deem it important
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In general, how many items do you need in order to collect RAM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '3'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '4'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DumpIt is a GUI tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It is acceptable to install DumpIt on the suspect’s computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following are analysis tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DumpIt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: FTK Imager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Volatility
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MD5 hash
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ligh, M. H., Case, A., Levy, J., & Walters, A. (2014). *The Art of Memory Forensics:
    Detecting Malware and Threats in Windows*, Linu. John Wiley & Sons. (Available
    at [https://www.amazon.com/Art-Memory-Forensics-Detecting-Malware/dp/1118825098](https://www.amazon.com/Art-Memory-Forensics-Detecting-Malware/dp/1118825098).)'
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/CyberSec](https://packt.link/CyberSec)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code3852467292877112093.png)'
  prefs: []
  type: TYPE_IMG
