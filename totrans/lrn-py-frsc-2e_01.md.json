["```\n# open the database\n  # read from the database using the sqlite3 library\n  # store in variable called records\n  for record in records: \n    # process database records here\n```", "```\n>>> type('what am I?')\n<class 'str'> \n```", "```\n>>> dir(str) \n['__add__', '__class__', '__contains__', '__delattr__',\n'__doc__', '__eq__', \n...\n'swapcase', 'title', 'translate', 'upper', 'zfill']\n\n>>> help(str.title)\nHelp on method_descriptor:\n\ntitle(...)\n S.title() -> str\n\n Return a titlecased version of S, i.e. words start with title case characters, all remaining cased characters have lower case.\n\n>>> 'what am I?'.title()\n'What Am I?' \n```", "```\n>>> number = 5\n>>> type(number)\n<class 'int'>\n\n>>> dir(number)\n>>> ['__abs__', '__add__', __and__', '__class__', '__cmp__', '__coerce__',\n...\n'denominator', 'imag', 'numerator', 'real']\n\n>>> help(number.__add__)\n__add__(...)\nx.__add__(y) <==> x+y\n```", "```\n>>> number.__add__(3)\n8\n>>> number + 3\n8\n```", "```\n001 print(\"Hello World!\")\n```", "```\n001 print(\"Hello World!\")\n```", "```\n001 print \"Hello World!\"\n```", "```\n001 from __future__ import print_function\n002 print(\"Hello World!\") \n```", "```\n# This is a comment\nprint(5 + 5) # This is an inline comment.\n# Everything to the right of the # symbol\n# does not get executed\n\"\"\"We can use three quotes to create \nmulti-line comments.\"\"\"  \n```", "```\n>>> type('Hello World!')\n<class 'str'>\n>>> type(\"Foo Bar 1234\")\n<class 'str'> \n```", "```\n>>> \"\"\"This is also a string\"\"\" \nThis is also a string\n>>> '''it \n can span \n several lines''' \nit\\ncan span\\nseveral lines \n```", "```\n>>> 'Hello' + ' ' + 'World'\nHello World\n>>> \"Are we there yet? \" * 3\nAre we there yet? Are we there yet? Are we there yet?\n```", "```\n# This will remove colon (`:`) from the beginning and end of the line\n>>> ':HelloWorld:'.strip(':')\nHelloWorld\n\n# This will remove the colon (`:`) from the line and place a \n# space (` `) in it's place\n>>> 'Hello:World'.replace(':', ' ')\nHello World \n```", "```\n>>> 'a' in 'Chapter 2'\nTrue\n>>> 'Chapter 1'.startswith('Chapter')\nTrue\n>>> 'Chapter 1'.endswith('1')\nTrue \n```", "```\n>>> print(\"Hello, World!\".split(','))\n[\"Hello\", \" World!\"] \n```", "```\n>>> \"{} {} {} {}\".format(\"Formatted\", \"strings\", \"are\", \"easy!\")\n'Formatted strings are easy!'\n```", "```\n>>> \"{:06d}\".format(42)\n'000042' \n```", "```\n>>> \"{:=^20}\".format('')\n'====================' \n```", "```\n>>> type(1010)\n<class 'int'>\n>>> 127*66\n8382\n>>> 66/10\n6\n>>> 10 * (10 - 8)\n20 \n```", "```\n>>> 11**2\n121\n>>> 11 % 2 # 11 divided by 2 is 5.5 or 5 with a remainder of 1\n1\n>>> abs(-3)\n3\n```", "```\n>>> type(0.123)\n<class 'float'>\n>>> 1.23 * 5.23\n6.4329\n>>> 27/8.0\n3.375\n```", "```\n>>> bool(0)\nFalse\n>>> bool(1)\nTrue\n>>> None\n>>> \n```", "```\n>>> type(['element1', 2, 6.0, True, None, 234])\n<class 'list'>\n>>> list((4, 'element 2', None, False, .2))\n[4, 'element 2', None, False, 0.2]\n>>> len([0,1,2,3,4,5,6])\n7\n>>> ['hello_world', 'foo bar'][0]\nhello_world\n>>> ['hello_world', 'foo_bar'][-1]\nfoo_bar \n```", "```\n>>> ['cat', 'dog'].append('fish')\n# The list becomes: ['cat', 'dog', 'fish']\n>>> ['cat', 'dog'].insert(0, 'fish')\n# The list becomes: ['fish', 'cat', 'dog']  \n```", "```\n>>> [0, 1, 2].pop()\n2\n# The list is now [0, 1]\n\n>>> [3, 4, 5].pop(1)\n4\n# The list is now [3, 5]\n>>> [1, 1, 2, 3].remove(1)\n# The list becomes: [1, 2, 3] \n```", "```\n>>> 'cat' in ['mountain lion', 'ox', 'cat']\nTrue\n>>> ['fish', 920.5, 3, 5, 3].count(3)\n2 \n```", "```\na[x:y:z]\n```", "```\n>>> [0,1,2,3,4,5,6][2:5]\n[2, 3, 4]\n>>> [0,1,2,3,4,5,6][2:]\n[2, 3, 4, 5, 6]\n>>> [0,1,2,3,4,5,6][:5]\n[0, 1, 2, 3, 4] \n```", "```\n>>> [0,1,2,3,4,5,6][::2]\n[0, 2, 4, 6]\n>>> [0,1,2,3,4,5,6][::-1]\n[6, 5, 4, 3, 2, 1, 0]  \n```", "```\n>>> type({'Key Lime Pie': 1, 'Blueberry Pie': 2})\n<class 'dict'>\n>>> dict((['key_1', 'value_1'],['key_2', 'value_2']))\n{'key_1': 'value_1', 'key_2': 'value_2'}\n>>> a = {'key1': 123, 'key2': 456}\n>>> a['key1']\n123 \n```", "```\n>>> a['key3'] = 789\n>>> a\n{'key1': 123, 'key2': 456, 'key3': 789}\n>>> a.pop('key1')\n123\n>>> a\n{'key2': 456, 'key3': 789} \n```", "```\n>>> a.keys()\ndict_keys(['key2', 'key3'])\n>>> a.values()\ndict_values([456, 789])\n>>> a.items()\ndict_items([('key3', 789), ('key2', 456)])\n```", "```\n>>> type(set([1, 4, 'asd', True]))\n<class 'set'>\n>>> g = set([\"element1\", \"element2\"])\n>>> g\n{'element1', 'element2'}\n>>> g.pop()\n'element2'\n>>> g\n{'element1'}\n>>> tuple('foo')\n('f', 'o' , 'o')\n>>> ('b', 'a', 'r')\n('b', 'a', 'r')\n>>> ('Chapter1', 22)[0]\nChapter1\n>>> ('Foo', 'Bar')[-1]\nBar \n```", "```\n>>> int('123456') # The string 123456\n123456 # Is now the integer 123456\n>>> str(45) # The integer 45\n'45' # Is now the string 45\n>>> float('37.5') # The string 37.5\n37.5 # Is now the float 37.5 \n```", "```\n>>> tuple_1 = (0, 1, 2, 3, 3)\n>>> tuple_1\n(0, 1, 2, 3, 3)\n>>> set_1 = set(tuple_1)\n>>> set_1\n{0, 1, 2, 3}\n>>> list_1 = list(tuple_1)\n>>> list_1\n[0, 1, 2, 3, 3]\n>>> list_2 = list(set_1)\n>>> list_2\n[0, 1, 2, 3]\n```", "```\nThis is a simple test for file manipulation.\nWe will often find ourselves interacting with file objects.\nIt pays to get comfortable with these objects.\n```", "```\n>>> in_file = open('file.txt')\n>>> print(in_file.read())\nThis is a simple test for file manipulation.\nWe will often find ourselves interacting with file objects.\nIt pays to get comfortable with these objects.\n>>> in_file.seek(0)\n>>> print(in_file.readline())\nThis is a simple test for file manipulation.\n>>> in_file.seek(0)\n>>> print(in_file.readlines())\n['This is a simple test for file manipulation.\\n', 'We will often find ourselves interacting with file objects.\\n', 'It pays to get comfortable with these objects.'] \n```", "```\n>>> out_file = open('output.txt', 'w')\n>>> out_file.write('Hello output!')\n>>> data = ['falken', 124, 'joshua']\n>>> out_file.writelines(data) \n```", "```\n>>> out_file.flush()\n>>> out_file.close() \n```", "```\n>>> print(hello_world)\nHello World! \n```", "```\n>>> our_number = 5\n>>> our_number += 20\n>>> print(our_number)\n25 \n```", "```\n>>> BOOK_TITLE = 'Learning Python for Forensics'\n>>> edition = 2\n>>> python2_version = 2.7.15\n>>> python3_version = 3.7.1\n>>> AUTHOR_NAMES = ['Preston Miller', 'Chapin Bryce']\n>>> is_written_in_english = True\n>>> print(BOOK_TITLE)\n'Learning Python for Forensics'\n>>> print(AUTHOR_NAMES)\n['Preston Miller', 'Chapin Bryce']\n>>> print(edition)\n1\n>>> print(python2_version)\n2.7.15\n>>> print(is_written_in_english)\nTrue\n```", "```\n>>> import this  \n```", "```\n>>> print(', '.join([\"Hello\", \"World!\"]))\nHello, World!\n```", "```\n# Conditional Block Pseudocode\nif [logic]:\n    # Line(s) of indented code to execute if logic evaluates to True.\nelif [logic]:\n    # Line(s) of indented code to execute if the 'if' \n    # statement is false and this logic is True.\nelse:\n    # Line(s) of code to catch all other possibilities if\n    # the 'if' and 'elif' statements are all False.\n```", "```\n>>> a = 5\n>>> b = 22\n>>> a > 0\nTrue\n>>> a > b\nFalse\n>>> if a > 0:\n...     print(str(a) + ' is greater than zero!')\n...\n5 is greater than zero!\n>>> if a >= b:\n...     print(str(a) + ' beats ' + str(b))\n...\n>>> \n```", "```\n>>> a = 5\n>>> b = 22\n>>> if a > 4 and a < b:\n...     print('Both statements must be true to print this')\n...\nBoth statements must be true to print this\n>>> if a > 10 or a < b:\n...     print('One of these statements must be true to print this')\n...\nOnly one of these statements must be true to print this \n```", "```\n>>> for character in 'Python':\n...      print(character)\n...\nP\ny\nt\nh\no\nn\n>>> cars = ['Volkswagon', 'Audi', 'BMW']\n>>> for car in cars:\n...      print(car)\n...\nVolkswagon\nAudi\nBMW \n```", "```\n>>> numbers = [5, 25, 35]\n>>> for i, x in enumerate(numbers):\n...     print('Item', i, 'from the list is:', x)\n...\nItem 0 from the list is: 5\nItem 1 from the list is: 25\nItem 2 from the list is: 35\n>>> for x in range(0, 100):\n...     print(x)\n0\n1\n# continues to print 0 to 100 (omitted in an effort to save trees)\n```", "```\n>>> guess = 0\n>>> answer = 42\n>>> while True:\n...     if guess == answer:\n...          print('You've found the answer to this loop: ' + str(answer))\n...          break\n...     else:\n...          print(guess, 'is not the answer.')\n...          guess += 1 \n```", "```\n>>> def simple_function():\n...      print('I am a simple function')\n...\n>>> simple_function()\nI am a simple function \n```", "```\n>>> def square(x):\n...     return x**2\n...\n>>> squared_number = square(4)\n>>> print(squared_number)\n16\n```", "```\n>>> def even_or_odd(value):\n...     if isinstance(value, int):\n...         if value % 2 == 0:\n...               print('This number is even.')\n...         else:\n...              print('This number is odd.')\n...      else:\n...          return\n...\n>>> values = [1, 3, 4, 6, '5']\n>>> for value in values:\n...     even_or_odd(value)\n...\nThis number is odd.\nThis number is odd.\nThis number is even.\nThis number is even.\n```"]