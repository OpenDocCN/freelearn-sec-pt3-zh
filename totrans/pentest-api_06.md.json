["```\ncurl -X POST -H \"Content-Type: application/json\" -d \\\n'{\"username\": \"admin\", \"password\": \"some invalid password\"}' \\\nhttp://localhost:5000/api/authenticate\n```", "```\n{\n  \"error\": {\n    \"message\": \"Invalid credentials\",\n    \"code\": 401,\n    \"details\": \"Authentication failed\"\n  }\n}\n```", "```\ncurl -X GET http://localhost:5000/api/user?id=abc123\n```", "```\n{\n  \"error\": {\n    \"message\": \"Invalid parameter: id must be a numeric value\",\n    \"code\": 400,\n    \"details\": \"Invalid input\"\n  }\n}\n```", "```\ncurl -X GET http://localhost:5000/api/user/1\n{\n  \"email\": \"john.doe@example.com\",\n  \"id\": 1,\n  \"name\": \"John Doe\"\n}\n```", "```\ncurl -X GET http://localhost:5000/api/user/2\n{\n  \"error\": {\n    \"code\": 404,\n    \"message\": \"User not found\"\n  }\n}\n```", "```\ncurl -X GET http://localhost:5000/api/user/aksfljdf\\!\\#\\$\\!\\#\\$\\!\\#224534\n<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n```", "```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \\ \"Alice\"}' http://localhost:5000/api/user/create\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Bad Request: Name and email are required\"\n  }\n}\n```", "```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"Alice\", \\\n\"email\": \"alice@example.com\"}' http://localhost:5000/api/user/create\n```", "```\n<!doctype html>\n...\n<output omitted for brevity>\n...\n<h1>Exception</h1>\n...\n<output omitted for brevity>\n...\nTraceback (most recent call last):\n  File \"/apitest/lib/python3.10/site-packages/flask/app.py\", line 1488, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/apitest/lib/python3.10/site-packages/flask/app.py\", line 1466, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/apitest/lib/python3.10/site-packages/flask/app.py\", line 1463, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/apitest/lib/python3.10/site-packages/flask/app.py\", line 872, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/apitest/lib/python3.10/site-packages/flask/app.py\", line 870, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/apitest/lib/python3.10/site-packages/flask/app.py\", line 855, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n  File \"/home/mauricio/Downloads/api_error_messages.py\", line 22, in create_user\n    raise Exception(\"Internal Server Error: Failed to create user\")\nException: Internal Server Error: Failed to create user\n```", "```\nimport csv\nfrom io import StringIO\n@app.route('/api/upload/csv', methods=['POST'])\ndef upload_csv():\n    # Check if file is present in request\n    if 'file' not in request.files:\n        return jsonify(\n          {'error': {\n             'message': 'Bad Request: No file part',\n             'code': 401}}), 401\n    file = request.files['file']\n    # Validate file extension\n    if file.filename.split('.')[-1].lower() != 'csv':\n        return jsonify({'error': {\n            'message': 'Bad Request: Only CSV files are allowed',\n            'code': 403}}), 403\n    # Read and process the uploaded CSV file\n    try:\n        csv_data = StringIO(file.stream.read().decode(\"UTF8\"),\n            newline=None)\n        # Potential for infinite recursion (missing argument)\n        csv_reader = csv.reader(csv_data)\n        # Vulnerable to large data sets (memory exhaustion or crashes)\n        header = next(csv_reader)\n        # Converting to list reads entire data at once\n        data_rows = list(csv_reader)\n        num_rows = len(data_rows)\n        num_cols = len(header)\n        return jsonify({\n            'message': 'CSV file uploaded successfully',\n            'header': header,\n            'data_rows': data_rows,\n            'num_rows': num_rows,\n            'num_cols': num_cols\n        }), 200\n    except Exception as e:\n        return jsonify({'error': {\n        'message': f'Error processing CSV file: {str(e)}',\n        'code': 500}}), 500\n```", "```\nradamsa -n 1000 -o %n.csv csvfile1.csv csvfile2.txt\n```", "```\n#!/bin/bash\nurl=http://localhost:5000/api/upload/csv\nfor filename in ./*csv; do\n    # Getting response code\n    r_code=$(curl -s -o /dev/null -w \"%{http_code}\" -X POST -F \\\n             \"file=@$filename\" $url)\n    if [ $r_code != 200 ]; then\n         echo \"Damaging file: `basename $filename`\"\n         # Making the complete request\n         curl -X POST -F \"file=@$filename\" $url\n         echo\n    fi\ndone\n```", "```\nid; firstnane;lastnane ;enatt; enat12 ;professton\n110;Rubie;Wittie;Rubie.Hittie@yopmail.con;Rubie.Wittie@gnail.con;firefighter\n111;Sindee;Fredi;Sindee.Fredi@yopmail.con;Sindee.Frediggnail.con;police officer\n113; Joane;Freddi; Joane.Freddi@yopmail.com;Joane.Freddi@gnatl.con;worker\nse:cavlene: Eno: cavlene, Enorvoomal, con: cavene, Enocamal, con:ti rer ahren\n115; Sonnt;Argus; Sonnt.Argus@yopmatl.con;Sonnt.Argus@gmall.con;ftreftghter\n117;Thalla;Urtas;Thalla.Urtas@yopmall.con;Thalla.Urtas@gnall.con;ftrefighter\n118;Glustina;Libna;Glustina.Libnadyopnail.com;Gtustina.Libnaggnatl.com;worker\n105; Deedee; Keelta; Deedee.Keelta@yopnatl.con; Deedee. Keeltaagnatl.com; doctor\n10b.ressa.vorscertressa.vorscertyophou.con.tressa.vorscerdonas.com, docton\n107; MagdaLena;Madox; MagdaLena.Madox@yopnall.con;MagdaLena.Madox@gnatl.com;doctor\n109;Charlena:Ophelia;Charlena.Ophematl.con;orkerlena;0phelta;Charlena.Ophenall.com;korkerlena;0phelta;Charlena.Ophenatt.com;workerlena;0phelta;Charlena.0ph\nenaul.con; worker Lena, 0phetta;Char Lena. DphenatL.con;worker Lena; OpheLta;Char Lena.OphenatL.con;worker Lena;ophe Lia; char Lena.OphemaL. Con; worker Lena; opheLLa; chat\nlena.Ophenai1.com;workerlena;0phelia;CharLena.Ophemail.con;orkerlena;0phelia;Charlena.0phemail.con;korkerlena;0phelia;Charlena.Ophenatl.com;workerlena;0phe\nLta;Charlena.ophenail.con;orkerlena;ophelta;Charlena.Ophenatl.com;workerlena;ophelia;Charlena.Ophenail.com;workerlena;0phelio;Charlena.Opherail.com;workert\nena;0phelta;Charlena.Ophenatl.com;worker\n```", "```\n1d;ftrstname; lastnane;ematl/enat12;professton\n100; Eadte; Angelts;Eadte.Angel1s@yopnatl.com;Eadte.Angelts@gmatl.con;doctor 101;Chastity;Harday;Chastity.Harday@yopmatl.con;Chasttty.Harday@gnatt.com;ftreftghter\n102;Angela;L1a;Angela.Lta@yopmatl.com;Angela.Lta@gnatl.com;developer\n103;Paola;Audly;Paola.Audly@yopnatl.com;Paola.Audly@gnatl.com;ftrefighter\n104;Audrie;Yorick;Audrie.Yorick@yopnatl.com;Audrie.Yorick@gmail.con;doctor\n105;Deedee;Keelta;Deedee.Keeltaßyopnatl.com;Deedee-Keelta@gmail.com;doctor\n106;Magdalena;Madox;Magdalena.Madox@yopmatl.con;Magdalena.Madox@gnatl.com; doctor\n108:pertoroan:Periorgan.voonal.com:pertorgansonat,con:frertanter\n```", "```\nDamaging file: 1006.csv\n{\n  \"error\": {\n    \"code\": 500,\n    \"message\": \"Error processing CSV file: 'utf-8' codec can't decode bute oxff in\n                position 802: Invalld start bvte\"\n  }\n}\nDamaging Tile: 102.csv\n{\n  \"error\": {\n    \"code\": 500,\n    \"message\": \"Error processing CSV file: 'utf-8' codec can't decode byte Oxf4 in\n                position 794: invalid continuation bvte\"\n  }\n}\n```"]