- en: Chapter 6. Analyzing iOS Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this chapter is to guide you through the analysis of important artifacts
    that are present on an iDevice. In the first part, the focus will be on the artifacts
    generated by the system's features or by the interaction of the user with it,
    referring mainly to the iOS configuration files and to the iOS native applications.
    In the second part, we will go through the manual analysis of some of the most
    common third-party applications, with the goal of giving you a general approach
    that you will be able to apply to all the different apps you will encounter in
    your way. About this topic, there are also several publications available, some
    of which are referenced also in the [Appendix A](apa.html "Appendix A. References"),
    *References*. We will conclude with a case study to provide you also with a proprietary
    analysis software example. All of this focuses on the two main formats used to
    store data, the **SQLite** databases and the property list (`plist`) files.
  prefs: []
  type: TYPE_NORMAL
- en: How data is stored
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before actually starting the analysis of the artifacts we can find inside an
    iDevice, let''s take a look at how data is structured and in which format it is stored.
    Inside the Apple filesystem, most of the user data are stored under `/private/var/mobile/`,
    or simply `/User/` that is a symlink pointing to the previous folder. For the
    tests in this chapter, we used an iPhone 4s running iOS 9.0.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Prior to iOS 8, the applications and their data were all stored under `/private/var/mobile/Applications/`
    while now, starting from iOS 8, the filesystem layout has changed and the application
    data has been separated from its bundles. The current folder structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Containers/Bundle/Application/<UUID>/`: This path is the
    actual path where the application bundle is stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Containers/Data/Application/<UUID>/`: This path is the
    actual path where most of the application data is stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Containers/Shared/AppGroup/<UUID>/`: As the name of the
    folder suggests, this path is the path where applications can store data with
    the aim of sharing it with other apps or extensions. This folder is also very
    important because you will find crucial data of some very popular apps, such as
    WhatsApp, Chat db, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While you may easily guess the meaning of most of the folders from the previous
    `tree` command line output, you may wonder what those names inside the `Application`
    folder are. These are the names of the apps represented by their **Universally
    Unique ID** (**UUID**). Inside each application folder, you will see, most of
    the time, the same structure that appears something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following structure is of particular importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Application_Bundle_Home>/AppName.app`: This file is the application bundle,
    which will not be backed up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Application_Data_Home>/Documents/`: This path contains application-specific
    data files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Application_Data_Home>/Library/`: This path contains application-specific
    files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Application_Data_Home>/Library/Preferences/`: This path contains application-preference
    files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Application_Data_Home>/Library/Caches/`: This path contains application-specific
    support files, which will not be backed up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Application_Data_Home>/tmp/`: This path contains temporary files not persistent
    between application launches, which will not be backed up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the Bundle application folder, the `iTunesMetadata.plist` file contains,
    among others, information related to the product, the Apple account name, and
    the date of purchase, which may be useful in some cases. You will find one of
    these files in each application bundle folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within each Data application folder, there is a hidden file named `.com.apple.mobile_container_manager.metadata.plist` ,
    This contains the name identifier corresponding to the UUID. It may prove to be quite
    handy if you are working on your analysis on a shell and need to identify quickly
    which applications are there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also useful especially, to identify which is your folder of interest,
    by matching the UUID with the application name you are looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, regarding the format that Apple uses to store its files,
    you will encounter mostly two types, `plist`, which is mainly used for configuration
    files, and `SQLite databases`. We will look more into details about both formats
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Timestamps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A very important aspect that an analyst has to pay attention to is the timestamp
    convention used. This is crucial, especially if you are analyzing the artifacts
    manually without one of the specialized commercial tools. Instead of the classical
    **UNIX Epoch Time**, which represents the number of seconds elapsed since January
    1, 1970 00:00:00, the iOS devices adopt the **MAC Absolute Time**, which represents
    the number of seconds elapsed since January 1, 2001 00:00:00\. The difference
    between the two is 978, 307, 200 seconds. There are several resources available
    online that you could use to calculate it, or else you can do it on your Mac by
    adding the preceding value to the MAC Absolute Time value, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to insert the `-u` switch in order to display it in UTC time or else
    the system will give you an output on your local time (or whatever is set as the
    local time on your machine).
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common type of data storage on the iOS devices (just like on other
    mobile platforms in general) is the use of the SQLite databases. Both native as
    well as third-party applications heavily use SQLite database files to store their
    data, as we will see in more detail later.
  prefs: []
  type: TYPE_NORMAL
- en: There are several tools available, both free/open source and commercial, such
    as *SQLite Database Browser*, that offer a GUI interface, as well as the SQLite
    command-line utility, available from the official SQLite website at [http://www.sqlite.org/](http://www.sqlite.org/).
    If you are using a Mac OS X machine for the analysis, it will come with the `sqlite3`
    utility preinstalled.
  prefs: []
  type: TYPE_NORMAL
- en: The property list files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The property list files, or `plist`, are the other most common data formats
    used in the iOS devices (and in Mac OS X as well). The `plist` files are mainly
    used to store configuration information, preferences, and settings. Their format
    can be compared to the XML format and they are usually represented as binary or
    plain text files.
  prefs: []
  type: TYPE_NORMAL
- en: A common tool used for parsing a `plist` file under Windows is *plist Editor
    Pro*, whereas if you are using Mac OS X you can either use XCode to view the `plist`
    files or the command-line utility, `plutil`.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'iOS has many preference and configuration files where it stores tons of data
    that may turn valuable during an investigation. This section provides you with
    a detailed (although not exhaustive) list of some of those files that are useful
    to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account and device information**: Check out `/private/var/root/Library/Lockdown/data_ark.plist`.
    This contains various information about the device and about its account holder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account information**: Have a look at `/private/var/mobile/Library/Accounts/Accounts3.sqlite`.
    This file contains account information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account information**: Go to `/private/var/mobile/Library/DataAccess/AccountInformation.plist`.
    You''ll find account information used to set up apps here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airplane Mode**: Check `/private/var/root/Library/Preferences/com.apple.preferences.network.plist`.
    This specifies whether Airplane Mode is presently enabled on the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration information and settings**: Go to `/private/var/mobile/Library/Preferences/`.
    This contains the `plist` files with the system configuration and the settings
    of the Apple apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lockdown certificate info**: Navigate to `/private/var/root/Library/Lockdown/pair_records/`.
    This contains information about the lockdown/pairing certificates and also the
    computers the iOS device has been paired with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network information**: Go to `/private/var/preferences/SystemConfiguration/com.apple.network.identification.plist`.
    This contains a cache of the IP networking information as the previous network
    addresses, router addresses, and name servers used. A timestamp for each network
    is also provided. This file is not present anymore on iOS 9, but you may still
    find it in case the device has been restored from an older iOS version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passwords**: Go to `/private/var/Keychains/`. This contains the password
    saved in the iDevice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SIM card info**: Now have a look at `/private/var/wireless/Library/Preferences/com.apple.commcenter.plist`.
    This contains the ICCID and IMSI of the SIM card last used in the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Springboard**: Go to `/private/var/mobile/Library/Preferences/com.apple.springboard.plist`.
    This contains the order of applications in each screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wi-Fi networks**: Now see `/private/var/preferences/SystemConfiguration/com.apple.wifi.plist`.
    This contains the list of the known Wi-Fi networks, the timestamp of last joined,
    and other useful information. For more information on this and a deeper analysis,
    you can have a look at the article available at [http://articles.forensicfocus.com/2013/09/03/from-iphone-to-access-point/](http://articles.forensicfocus.com/2013/09/03/from-iphone-to-access-point/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native iOS apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'iDevices come with some native applications already installed by Apple, such
    as Safari browser, e-mail client, calendar, and utilities linked to some basic
    phone functionalities, such as the Camera, Call History, or the SMS/iMessage.
    Most of the evidence produced by these native applications and functionalities
    are located, other than in the application folders themselves, in the `Library`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Library/`: In case of physical acquisition or inside the
    device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Backup Service/mobile/Library/`: In case of filesystem acquisition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Library`: In case of logical acquisition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we can find data related to communication, preferences, Internet history
    and cache, keyboard keystrokes, and much more. Other than the `Library` folder,
    the other very important location is the `Media` folder, `/private/var/mobile/Media/`,
    where user-created pictures and audio files are usually stored among other things.
  prefs: []
  type: TYPE_NORMAL
- en: Address book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As one could imagine, the `AddressBook` folder under `Library` refers to the
    information present in the Contact application related to the personal contacts
    and is stored in SQLite database format. There are two databases of interest, `AddressBook.sqlitedb`
    and `AddressBookImages.sqlitedb`.
  prefs: []
  type: TYPE_NORMAL
- en: '`AddressBook.sqlitedb` contains the actual information saved for each contact,
    such as name, surname, phone number, e-mail address, and so on. In this database,
    the tables of interest containing the information mentioned are mainly `ABPerson`
    and `ABMultiValue`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`AddressBookImages.sqlitedb` is the database containing the images that the
    user may have associated to a contact, which is basically the image appearing
    every time a call to that contact is made or received. The main table of interest
    in this database is `ABFullSizeImage`.'
  prefs: []
  type: TYPE_NORMAL
- en: Audio recordings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Voice Memos app, preinstalled on the iDevices, lets the user record voice
    memos. These memos are stored in `/private/var/mobile/Media/Recordings/`. In this
    folder, there is the `Recordings.db` database that contains information about
    each voice memo stored, such as the date, duration, memo name, and filename of
    the actual audio file, which is stored in the same folder.
  prefs: []
  type: TYPE_NORMAL
- en: Calendar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Calendar application allows the user to manually create events, as well
    as sync them with other applications, such as the related Mac OS X version of
    the app or other third-party applications and services. Such information is stored
    in the following two databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Library/Calendar/Calendar.sqlitedb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Library/Calendar/Extras.db`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Calendar.sqlitedb` database is the main one and contains basically all
    the information related to the events present in the Calendar, while `Extras.db`
    contains other information such as the Calendar settings.
  prefs: []
  type: TYPE_NORMAL
- en: Call history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we press the phone application icon, we see a lot of information, almost
    all coming from one database, `/private/var/wireless/Library/CallHistoryDB/CallHistory.storedata`.
    Here we can find tracks about incoming, outgoing, and missed calls along with
    the time and date they occurred and their duration. This database refers to both
    standard calls and FaceTime calls. As we can see in the following example, the
    table of interest is `call`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The most interesting fields are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZANSWERED`: This indicates if the call has been accepted (`1`) or rejected
    (0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZCALLTYPE`: This indicates if it was a standard phone call (`1`), a FaceTime
    audio only call (`16`), or a full audio/video FaceTime call (`8`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZORIGINATED`: This indicates whether the call was outgoing (`1`) or incoming
    (0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZDATE`: This indicates the date and time of when the call happened. Note that
    this value is expressed in Mac Absolute time, which represents the number of seconds
    elapsed since 1/1/2001 00:00:00 GMT. Therefore, if you don''t have an application
    that converts the time for you, simply add 978307200 and use the `date` command
    as follows (example from a Mac):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ZISO_COUNTRY_CODE`: This indicates, as the name suggests, the two letter ISO
    country code according to the prefix of the phone number indicated in the `ZADDRESS`
    field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZLOCATION`: This indicates the full name of the country according to the preceding
    field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZADDRESS`: Last but not least, this field indicates the phone number where
    the call came from or went to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting from iOS 8, the path has slightly changed from `/private/var/wireless/Library/CallHistory/call_history.db`
    to `/private/var/wireless/Library/CallHistoryDB/CallHistory.storedata`. If a device
    has been upgraded from iOS 7 to iOS 8, you will find both the old and the new
    databases, with the call history data prior the upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: There are yet two other important files related to the phone application to
    be analyzed. The plist file, `/private/var/mobile/Library/Preferences/com.apple.mobile
    phone.plist`, has the `DialerSavedNumber` value, which is the last phone number
    manually entered into the dialer and actually dialed. The important thing to note
    here is that this value will remain even if the user deletes the last call placed
    from the call history list, which will of course be also deleted from the `CallHistory.storedata`
    database we have just analyzed. The second file that may also be of interest during
    an investigation is `/private/var/mobile/Library/Preferences/com.apple.mobilephone.speeddial.plist`,
    which contains the phone numbers added to the phone favorites list.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apple Mail client-related data is stored at `/private/var/mobile/Library/Mail/`,
    which contains databases storing the e-mail messages sent, received, and drafted
    that are stored on the device, as well as a folder for each separate account (POP/IMAP)
    that has been configured within the Mail application. So, you may want to take
    a look at all the content you find in there. To give you an example, the folder
    content may look like the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Although without any extension, most of these files are SQLite databases (as
    you may guess from the presence of the `-shm` and `-wal` files). For example,
    the Envelope Index database contains the list of mailboxes and metadata, while
    the Protected Index database contains the list of the e-mails present in the Inbox,
    where the last one is the most recent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Images and photos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'User photos inside an iDevice are stored at `/private/var/mobile/Media/`, where
    the two main folders are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DCIM`: This folder contains the user-created photos via the built-in camera
    (usually in the `.jpg` format) and screenshots taken by the user by pressing the
    Power and Home buttons together (usually in the `.png` format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PhotoData`: This folder contains, among other data, the photo albums synced
    with a computer or the cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, it is very important not to forget the *thumbnails*. In fact, for
    each photo, iOS will generate a thumbnail, store it in `/private/var/mobile/Media/PhotoData/Thumbnails/`,
    and save any information about the original image in the `Photos.sqlite` database
    within the `PhotoData` folder. This is important because thumbnails and information
    related to the original picture may still be available or recoverable from the
    SQLite deleted entries (refer to the related section later on in this chapter)
    even if the original picture is not available anymore.
  prefs: []
  type: TYPE_NORMAL
- en: When analyzing photos, it is important to remember to check for the Exif metadata,
    which may contain other precious information such as geographical coordinates
    of where the photo was taken.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For an in-depth analysis of this topic, we advise the reader to have a look
    at the article available at [http://linuxsleuthing.blogspot.it/2013/05/ios6-photo-streams-recover-deleted.html](http://linuxsleuthing.blogspot.it/2013/05/ios6-photo-streams-recover-deleted.html)
  prefs: []
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the release of iOS 6 in 2012, Apple includes its own Maps application.
    Files and locations of interest are located within the main folder `/private/var/mobile/Containers/Data/Application/2EA1D4AC-1C04-4CA5-8A77-349D47468457/`,
    which contains the history of the searches made by the users as well as the list
    of locations bookmarked, and also the `Library/Preferences/com.apple.Maps.plist`
    file, which contains information related to the last search that has been made
    by the user, such as longitude and latitude coordinates as well as the search
    query made.
  prefs: []
  type: TYPE_NORMAL
- en: '![Maps](img/image_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Notes application stores information about the user-created notes in `/private/var/mobile/Library/Notes/notes.sqlite`.
    The main tables of interest are `ZNOTE` and `ZNOTEBODY`; they contain note title,
    content, creation and modification date, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting from iOS 9.3, Apple introduced the possibility of protecting/locking
    notes via a password. Since the user has to choose each note that has to be password
    protected (it is not an *all or nothing* model), you may not be able to access
    those notes directly.
  prefs: []
  type: TYPE_NORMAL
- en: Safari
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Safari is the Apple browser that comes preinstalled with every iDevice. It
    allows the user to browse websites, save bookmarks, and so on. All these activities
    are stored in the two locations, `/private/var/mobile/Library/Safari/` and the
    Safari main application folder, `/private/var/mobile/Containers/Data/Application/C6254D15-92CE-4989-9427-26A589DFA8B7/`.
    In particular, the folder detail is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Safari Bookmarks**: This information is stored in `/private/var/mobile/Library/Safari/Bookmarks.db`.
    It contains the database with the saved bookmarks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari Cookies**: This information is stored at `/private/var/mobile/Library/Cookies/Cookies.binarycookies`.
    Website cookies are stored here. To parse this binary file you can use the `BinaryCookieReader.py`
    Python script available on GitHub ([https://gist.github.com/sh1n0b1/4bb8b737370bfe5f5ab8](https://gist.github.com/sh1n0b1/4bb8b737370bfe5f5ab8)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari Temporary Files**: This information is stored at `<app_folder>/Library/Caches/WebKit/NetworkCache/Version
    4/`. This folder contains another two subfolders, `Blob` and `Record`, where temporary
    files and code of the visited pages are stored. This is important because it will
    be possible to see/rebuild the same page as it was seen/visited by the user. Another
    important thing to remember is that when the user deletes their browser cache,
    these folders will be cleared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari search history**: This information is stored in `<app_folder>/Library/Preferences/com.apple.mobilesafari.plist`.
    It contains a list of recent searches made through Safari. An important thing
    to remember is that when the user deletes their browser cache or history, this
    file will not be erased, but in iOS 9 its content will be cleared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari Suspended State**: This information is stored in `<app_folder>/Library/Safari/SuspendState.plist`.
    It contains the last state of Safari at the time when the user pressed the Home
    button, the iPhone was powered off, or the browser crashed. In order to be able
    to restore such a state when the browser resumes, this file contains the list
    of windows and websites that were open when one of the previously-mentioned events
    occurred and the browser closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari Thumbnails**: This information is stored at `<app_folder>/Library/Caches/Safari/Thumbnails/`.
    This folder contains screenshots of the last active browser pages viewed via WebKit,
    for example, by the third-party apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari Web Cache**: This information is stored in `Library/Caches/com.apple.mobilesafari/Cache.db`.
    It contains objects that are recently downloaded and cached in the Safari browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari History**: This information is stored in `<app_folder>/Library/Safari/History.db`.
    It contains the Safari web browser history. Of course, if it has been cleared
    by the user, it will not contain the history prior to that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMS/iMessage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the Call History, there is one database storing SMSes, MMSes, and
    iMessages sent or received by the user. The database is at `/private/var/mobile/Library/SMS/sms.db`,
    and it also contains the information related to attachments eventually present
    in MMSes or iMessages. In such cases, the files part of MMSes or iMessages are
    stored in the subfolder, `Library/SMS/Attachments/`. Finally, the last folder
    of interest regarding SMS is `Library/SMS/Drafts`, where each draft contains its
    own folder as the `plist` file, which is timestamped, identifying when the message
    was typed and then abandoned.
  prefs: []
  type: TYPE_NORMAL
- en: Voicemail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Voicemail` folder at `/private/var/mobile/Library/` contains both the audio
    file of each voicemail recorded message stored as AMR codec audio files and the
    `voicemail.db` database, where information related to each voicemail audio message
    file is saved, such as the sender, the date, the duration, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Other iOS forensic traces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will list some other locations of interesting artifacts.
    Those listed here are not strictly related to a particular application, but are
    rather generated from the usage of the device by the interaction of the user with
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: Clipboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pasteboardDB` file under `/private/var/mobile/Library/Caches/com.apple.UIKit.pboard`
    is a binary file that contains a cached copy of the data stored on the device's
    clipboard, which means that the data that have been cut/copied and pasted by the
    user (that is, passwords or other portions of text that may become relevant) will
    also be present there.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two of the iOS features are the auto correction and auto completion of the
    text while the user is typing. To do this, every time the user types, iOS caches
    their text in the `dynamic-text.dat` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard](img/B05100_06_02-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This file is located at `/private/var/mobile/Library/Keyboard`. This is the
    default file, but of course, iOS creates one for each language used and configured
    in the keyboard and stores it in the same folder. In the following example, the
    second file is related to the Italian keyboard configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With iOS 4, there was the **Consolidated GPS cache**, a database containing
    location information associated with every Wi-Fi hotspot and cell tower that the
    device had been in range with. In such a database located at `/private/var/root/Library/Caches/locationd/consolidated.db`,
    the `WifiLocation` and `CellLocation` tables contained information cached locally
    by the device and included the Wi-Fi access points and cellular towers that came within
    range of the device at a given time and included a horizontal accuracy (in meters),
    believed to be a guesstimate at the distance from the device. Such data, other
    than remaining forever in that database, was allegedly sent periodically to Apple.
    After the so-called **location gate** scandal that arose after the discovery of
    such a database, Apple kind of dismissed it.
  prefs: []
  type: TYPE_NORMAL
- en: However, the new databases that took the place of `consolidated.db` are `cache_encryptedA.db`,
    `lockCache_encryptedA.db`, and `cache_encryptedB.db` stored under the `/private/var/root/Library/Caches/locationd/`
    folder. As for its predecessor, these databases contain geographical coordinates
    of frequent and recent locations, Wi-Fi access points, and apparently, cell towers
    that have been in the range of the device. The only differences in this case are
    that this data lasts only for 8 days before being cleared out. To dump these databases
    you may also use a Python script from Sarah Edwards (her Twitter handle is `@iamevltwin`),
    **iOS Location Scraper**, which can be downloaded from the GitHub repository at [https://github.com/mac4n6/iOS-Locations-Scraper](https://github.com/mac4n6/iOS-Locations-Scraper).
  prefs: []
  type: TYPE_NORMAL
- en: The other very important point to keep in mind regarding the geolocation artifacts
    is that many other applications, especially third-party ones such as those about
    fitness that people may use to keep track of their path when running, may store
    geographical coordinates and related timestamps as well and in clear text.
  prefs: []
  type: TYPE_NORMAL
- en: Snapshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every time a user pushes the Home button to move from an application screen
    back to the desktop, iOS uses a **fade-out** effect for the transition between
    the two screens. To do so, iOS creates screenshots of the current screen and then
    applies the fade-out effect to that picture. These screenshots are stored in the
    following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Library/Caches/Snapshots/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/private/var/mobile/Containers/Data/Applications/<UUID>/Library/Caches/Snapshots/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first path refers to the preinstalled Apple applications, while the second
    is the path where to find the snapshots for each application. It is clear that
    this feature could be a goldmine of information. For example, there could be screenshots
    containing SMSes or e-mail messages that are no longer available because they
    have been deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to remember that only the last snapshot is taken for each application.
    Therefore, the analyst should interact and browse inside the device as little
    as possible in order not to overwrite and lose possible crucial evidence.
  prefs: []
  type: TYPE_NORMAL
- en: Wallpaper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Current images used as wallpapers are stored in `/private/var/mobile/Library/SpringBoard/`.
    There are two different images:`HomeBackgroundThumbnail.jpg`, which refers to
    the wallpaper when the device is unlocked, and `LockBackgroundThumbnail.jpg`,
    which refers to the wallpaper of the device when it is locked.
  prefs: []
  type: TYPE_NORMAL
- en: iOS crash reports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The iOS operating system uses crash reports to keep track of errors and crashes
    of native as well as third-party applications. A crash log typically contains
    a description of the system state when the application generated the error or
    terminated it. Crash reports are managed by a service that is responsible for
    collecting and aggregating the logs. For an analysis of the operation of the crash
    report service and the crash log structure refer to the following web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and Analyzing iOS Application Crash Reports: [https://developer.apple.com/library/ios/technotes/tn2151/_index.html](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Crash Reports on iPhone OS: [https://developer.apple.com/videos/play/wwdc2010/317/](https://developer.apple.com/videos/play/wwdc2010/317/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing Crash Reports: [https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AnalyzingCrashReports/AnalyzingCrashReports.html](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AnalyzingCrashReports/AnalyzingCrashReports.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demystifying iOS Application Crash Logs: [https://www.raywenderlich.com/23704/demystifying-ios-application-crash-logs](https://www.raywenderlich.com/23704/demystifying-ios-application-crash-logs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Typically, the devices are configured to automatically synchronize crash logs
    with a PC/Mac, every time the device is connected and runs iTunes. For this reason,
    it is advisable to check, within a computer, if you have all the crash logs of
    devices that have been linked together in time. Depending on the operating system,
    crash logs are stored in different locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows XP**: `C:\Documents and Settings\<USERNAME>\Application Data\Apple
    Computer\Logs\CrashReporter\MobileDevice\<DEVICE_NAME>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Vista/7/8/10**: `C:\Users\<USERNAME>\AppData\Roaming\Apple Computer\Logs\CrashReporter\MobileDevice\<DEVICE_NAME>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mac OS X**: `~/Library/Logs/CrashReporter/MobileDevice/<DEVICE_NAME>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Crash reports can also be extracted from an iOS device directly dialoguing
    with the crash report service (yes, it has the same name) through iTunes on PC
    or Mac, or XCode on Mac. As explained in [Chapter 3](ch03.html "Chapter 3. Evidence
    Acquisition from iDevices"), *Evidence Acquisition from iDevices*, several third-party
    software offer the ability to remove the logs and save them for later analysis;
    among these we remember here are iBackupBot and iTools. They can be extracted
    from an unlocked device or from a turned on and locked device with a valid pairing
    certificate, and also if a backup password was set by the user. The following
    screenshot shows an example of a Crash Report extraction from an iPhone 6s using
    iBackupBot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iOS crash reports](img/image_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Various information of interest from a forensic point of view can be identified
    from the analysis of the crash logs, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installed applications list and usage from various logs such as PowerLog, Security,
    and OnDemand![iOS crash reports](img/image_06_004.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iTunes username from `itunesstored.2.log`![iOS crash reports](img/image_06_005.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filename of e-mail attachments from MobileMail logs![iOS crash reports](img/image_06_006.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of Wi-Fi network and history of latest connections from Wi-Fi logs![iOS
    crash reports](img/image_06_007.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking device usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sarah Edwards has made an extensive research work on artifacts that track the
    usage of the device. By linking applications, data and network usage, health information
    (for example, workouts), timestamps, and geolocation data, it is indeed possible
    to understand what a given user under investigation was doing and where at a given
    point in time. In particular, she looked at the following artifacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CoreDuet**: `/private/var/mobile/Library/CoreDuet/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coreduetd.db` (31 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`coreduetdClassA.db` (31 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`coreduetdClassD.db` (31 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Knowledge/knowledgeC.db` (5 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`People/interactionC.db` (9 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Battery Life (PowerLog)**: `/private/var/mobile/Library/BatteryLife/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CurrentPowerlog.PLSQL` (257 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Archives/powerlog_YYYY-MM-DD_XXXXXXXX.PLQSQL.gz` (Previous ~5 Days)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Health**: `/private/var/mobile/Library/Health/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`healthdb.sqlite` (11 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`healthdb_secure.sqlite` (16 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Aggregate Dictionary**: `/private/var/mobile/Library/AggregateDictionary/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ADDataStore.sqlitedb` (4 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**networkd**: `/private/var/networkd/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`netusage.sqlite` (13 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**routined**: `/private/var/mobile/Library/Caches/com.apple.routined/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_encryptedB.db` (5 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`StateModel1.archive`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`StateModel2.archive`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**locationd**: `/private/var/root/Library/Caches/locationd/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_encryptedA.db` (79 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`lockCache_encryptedA.db` (51 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cache_encryptedB.db` (167 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cache_encryptedC.db` (9 tables)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The details of Sarah''s work mentioned here can be found at her website, more
    specifically the *The iOS of Sauron: How iOS Tracks Everything You Do* talk ([https://www.mac4n6.com/resources/](https://www.mac4n6.com/resources/)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Third-party application analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous paragraphs, you have seen where important artifacts related
    to the iOS system settings and preferences, native iOS applications, and device
    features are located. These are locations to be aware of, and it is important
    to know how to analyze them since they are common to all iDevices. Now, in the
    following paragraphs, we are going to show you a practical analysis of some of
    the most used third-party applications.
  prefs: []
  type: TYPE_NORMAL
- en: Social Network and Instant Messaging applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Probably the most widely used category, Social Network and Instant Messaging
    applications can represent a treasure trove for the analyst, as now they have
    become the main means for communication. In this section, we will give you an
    overview of the main artifacts you may find in some of the most popular applications,
    as in which location you should pay particular attention during the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Skype
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Skype is probably the most known and used software for VoIP and chatting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Starting from the `Library/Preferences` folder, we can find the first important
    information inside the `com.skype.skype.plist` file, the username, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Skype](img/image_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, the preceding screenshot shows only the last username that has logged
    in. If we want to know all the profiles that have been logged in from this device,
    we have to look for other folders under `Library/Application Support/Skype/`,
    where we will find one folder for each account logged in with that device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Skype](img/image_06_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside every user''s folder, we find all the databases storing information
    such as contacts list, chats, and so on. Here, the structure is pretty much the
    same as the PC/desktop version. In fact, you can open the `main.db` file, where
    you can find all information clearly stored, as you can see from the interesting
    names of the tables as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Skype](img/image_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This means that you can use any of your favorite Skype analysis utilities to
    parse these files, such as **SkypeLogView** from **Nirsoft** and so on. Finally,
    within the application folder itself, you may also find the Voicemail messages
    and screenshots, as we have addressed previously in the *Snapshots* section, in
    addition to files transferred via Skype, logs, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: WhatsApp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although it is technically an Instant Messaging application, WhatsApp has almost
    completely replaced the classical SMS. Therefore, it is very likely that you will
    encounter it during a mobile forensics analysis. Let''s have a look at its internal
    folder structure that, as you may have realized, differs really very little from
    one application to the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We have now understood that to get a first hint and useful information for starting
    with an application, we may want to start looking inside the `plist` configuration
    file under `Library/Preferences/`. In this case, we are looking for `net.whatsapp.WhatsApp.plist`.
    Here again, you will find some basic information, such as the username, the phone
    number the WhatsApp account was linked to, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, what we may realize here is that we don''t have the chat database,
    the famous `ChatStorage.sqlite` file. This is because Whatsapp is one of those
    applications that stores the data in the `/private/var/mobile/Containers/Shared/AppGroup/`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Regarding the actual content of the messages exchanged, the main database is
    `Documents/ChatStorage.sqlite`, whose structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ZWAMESSAGE` table is the one containing the messages exchanged, their
    timestamp, the name of who the user was chatting with, and so on, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WhatsApp](img/image_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `ZWACHATSESSION` table stores information about the open chats, both with
    a single user and group chats, and you can correlate these data with those in
    the `ZWAGROUPMEMBER` and `ZWAGROUPINFO` tables in order to find out which users
    belong to which group chat. Finally, in `ZWAMEDIAITEM` stores references to the
    multimedia files (pictures, audio messages, and videos) exchanged, with an indication
    of the user involved, timestamps, and the location where the multimedia file has
    been stored within an iDevice.
  prefs: []
  type: TYPE_NORMAL
- en: '![WhatsApp](img/image_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, you will also find the chat contents inside `Documents/ChatSearch.sqlite`
    within the `docs_content` tables, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook and Messenger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Facebook is the most known and widely used social network. For this reason,
    other than for the fact that it is now integrated with iOS, you will most likely
    have to analyze the Facebook app in almost all of your investigations. As you
    can imagine, the amount of information stored by Facebook is very high, and in
    particular, it concerns three areas, user personal information, a cache of images
    related to profiles and visited pages, and information related to the external
    sites visited within the Facebook app through the links present on the posts.
    Due to the obviously large amount of possible information retrievable in the Facebook
    app and the page limitation of a book, the goal of this section is to give you
    a glimpse and some hints on possible artifacts and where to find them.
  prefs: []
  type: TYPE_NORMAL
- en: The account information is saved inside `Library/Preferences/com.facebook.Facebook.plist`.
    Among other information, you will find the e-mail address and the Facebook ID
    of the profile configured within the app, as well as the date of the last time
    the app has been used.
  prefs: []
  type: TYPE_NORMAL
- en: Information related to contacts is saved in `Library/Caches/_store_<ID>/messender_contacts_v1/fbsyncstore.db`
    within the `people` table.
  prefs: []
  type: TYPE_NORMAL
- en: In `Library/Caches/_store_<ID>/image_cache_v7/` are stored images viewed while
    surfing through the pages of the social network (for example, posts of other users
    and so on), while inside the `Library/WebKit/WebsiteData/LocalStorage/StorageTracker.db`
    database and the `Library/Caches/WebKit/NetworkCache/` folder are stored contents
    of other websites visited through the application internal browser, including
    the related URL and the corresponding files (for example, the JPG image, the HTML
    page, the CSS style sheet, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Starting from April 2014, the instant messaging function has been completely
    moved from the Facebook app to Facebook Messenger app, launched by Facebook itself
    on August 2009\. Therefore, all Facebook users have been forced to download and
    use Messenger to communicate among themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Also in this case, interesting artifacts are stored in both the `.../Containers/Data/...`
    and `.../Containers/Shared/...` application folders. In particular, you will find
    the chat content database at `/private/var/mobile/Containers/Shared/AppGroup/<UUID>/_store_<ID>/messenger_messages_v1/orca2.db`.
    In this database, chats are saved as a blob data field within the tables.
  prefs: []
  type: TYPE_NORMAL
- en: Telegram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Telegram is probably the second most used Instant Messaging application after
    Whatsapp, therefore chances of having to deal with it during an analysis are quite
    high as well. As always, the account information can be found at `<App_folder>/Library/Preferences/`
    within the `ph.telegra.Teleraph.plist` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to WhatsApp, Facebook, and Messenger, Telegram stores many of its data
    in the `.../Container/Shared/AppGroup/` folder, as we can see from the following
    folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: More specifically, under the `Documents` folder we find the `tgdata.db` database,
    which contains all information about contacts, conversations, exchanged files,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the tables of particular interest are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`users_v29`: This contains the contact list and related Telegram user ID (uid).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contacts_v29`: This contains the list of all uid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`messages_v29`: This contains the list of all messages exchanged, with to/from
    fields to identify who is the source and who is the destination, as well as a
    conversation ID (cid), so that it is easier to group messages belonging to the
    same conversation. Messages from secret chats are also clearly stored here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`convesations_v29`: This contains the list of active conversations as seen
    in the **Chats** screen of the app, and also the last message exchanged. The name
    of the table does not contain a typo from us, but it really misses the *r* !'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encrypted_cids_v29`: This contains the conversation IDs of the secret chats.
    All cid related to secret chats start with the `-` (minus) symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Those listed here are just some of the interesting tables, to give you a glimpse
    of what you can find, but as you can see from the preceding `sqlite3` command
    output there are many more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Telegram](img/Chapter-65100.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Signal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Last but not least, we could not exclude **Signal** from this list of IM apps
    analyzed. Unfortunately for the forensics analyst and fortunately for the end
    user, there is not much to say as Signal does indeed what it promises, all messages
    are securely encrypted within the device (data-at-rest) other than when sent/received
    through the network (data-in-transit). The folders structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'All of Signal''s data (that is, chat messages, contact lists, and so on) is
    inside the `Document/Signal.sqlite` database that is, as we already said, encrypted.
    However, there are two things that are not encrypted. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachments**: Oddly enough, the attachments exchanged are clearly stored
    and can be retrieved from the `Document/Attachments/` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snapshots**: Signal has an **Enable Screen Security** option that would prevent
    this, but for some reason is not set by default. Therefore, it is possible to
    find the screen snapshot (we have talked about snapshots in an earlier section of
    this chapter) in the `Library/Caches/Snapshots/` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we said, not too much information is available, but keep in mind the attachments
    and the snapshots, as they may reveal important traces for your investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud storage applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud storage applications are very popular on mobile devices, since the Cloud
    somewhat extends the device storage capability and allows the user to have access
    to their data anywhere and anytime. Therefore, it is very probable that you will
    encounter at least one on this class of apps during your analysis. In this section,
    we just want to give you a glimpse of some artifacts you can find in two of the
    most popular cloud storage services.
  prefs: []
  type: TYPE_NORMAL
- en: Dropbox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Dropbox iOS app is stored in `/private/var/mobile/Containers/Data/Applications/9238CCE2-5C38-4843-9F76-D73B7C0CAB23/`.
    In the `Documents/Users/<user_id>/` folder there are several databases of interest,
    in particular the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dropbox.sqlite`: This database, within the `ZCACHEDFILE` table, contains information
    about all the files the user interacted with, such as opened, saved, or simply
    browsed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Uploads.sqlite`: This database, within the `ZQUEUEDUPLOAD` table, contains
    the name/path of uploaded files, the file mime type, and timestamp of the upload'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Library/Caches/` folder contains a local copy of the *opened files*, but
    it is *available only if we can perform a physical acquisition* (not logical/backup
    acquisition).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, another interesting folder is `Library/Application Support/Dropbox/<hex_ID>/Account/contact_cache/`,
    where two very interesting json files, among others, are present:'
  prefs: []
  type: TYPE_NORMAL
- en: '`me`: This contains information about the account holder such as name, surname,
    and e-mail address registered with the current account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all_searchable`: This contains account information such as name, surname,
    and e-mail address of every accounts the user has ever shared a file with. This
    list also has historical records referring to account the user does not currently
    share files with anymore, but have done so in the past.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Drive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Google Drive iOS App is in `/private/var/mobile/Containers/Data/Application/F86EB4B3-5DB1-4C72-B576-546694440A5D/`.
    The folder structure is the usual, with `Documents` and `Library`, being the main
    folders where you can find interesting artifacts. More specifically, within `Documents/drivekit/users/<user_ID>/cello/cello.db`,
    you will find the database containing information about the Drive folders structure,
    files accessed, files moved to the Bin (with the timestamp) or definitely deleted
    (without the timestamp of when it happened), and so on, as well as a copy of the
    files saved into **My Drive** or as **Available Offline**.
  prefs: []
  type: TYPE_NORMAL
- en: The `Library/Caches/com.google.commmon.SSO/<user_ID>/` folder contains, among
    others, the `Profile.plist` file that, as the name suggests, shows where the used
    information is stored such as name, surname, username, and e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: Deleted data recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will give you a quick overview on the difficulties of performing
    file carving operations on an iOS device and will help you understand why and
    what are the possibilities. We will also see the particular case of recovering
    the SQLite deleted records.
  prefs: []
  type: TYPE_NORMAL
- en: File carving - is it feasible?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apple uses a technology called **Data Protection** in order to further protect
    data stored in flash memory on iDevices. Every time a file is created, a new 256-bit
    *per-file key* is generated and it is used to encrypt the file content using AES
    encryption. The *per-file key* is then wrapped with one of the data protection
    class keys and then stored in the file''s metadata, which is in turn encrypted
    with the filesystem key (the **EMF key**), which is generated from the unique
    hardware UID. The following diagram, which is taken directly from the Apple iOS
    Security official paper (last update on May 2016, refer to [Appendix A](apa.html
    "Appendix A. References"), *References*), summarizes the entire process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File carving - is it feasible?](img/image_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this premise, it is clear that the classic file carving procedure will
    not work, since in the unallocated space there will only be encrypted content.
    An interesting approach on how to carve deleted images from the iOS devices has
    been published by D'Orazio and others (refer to [Appendix A](apa.html "Appendix A. References"),
    *References*). What they suggest is to exploit the journaling feature of the iOS
    filesystem, HFS+. In fact, by analyzing and comparing both the catalog and journal
    files of the HFS+ filesystem, it could be possible to identify information about
    deleted files, such as file and metadata locations, their timestamp, and so on.
    Based on this information from the journal, the analyst should be able to search
    and recover the deleted files, locate the cryptography keys, and then decrypt
    the image file. Heather Mahalik (her Twitter handle is `@HeatherMahalik`) also
    describes a similar approach in her book, *Practical Mobile Forensics*, by *Heather
    Mahalik*, published by *Packt Publishing*. Of course, such approaches require
    physical acquisition to be possible for the target device.
  prefs: []
  type: TYPE_NORMAL
- en: However, that approach may work only if the device has not been restored, wiped,
    or upgraded to a new OS version, because in such cases, the filesystem key (EMF)
    would be erased and a new key recreated. Therefore, without the original EMF key,
    all contents in the unallocated space referring to a period prior to the restoring/wiping/upgrading
    is gone forever.
  prefs: []
  type: TYPE_NORMAL
- en: Carving SQLite deleted records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will not go into the details of the SQLite structure (for more information,
    refer to [Appendix A](apa.html "Appendix A. References"), *References*), since
    it is out of the scope of this book. However, it is important for you to know
    that other than deleted files, it is also possible to recover deleted records
    within the SQLite databases. Mari DeGrazia (her Twitter handle is `@maridegrazia`)
    has developed a useful Python script that parses the database file and carves
    out deleted entries. Its usage is as simple as running a single-line command as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can find it on her website and GitHub repository; she has also provided
    a GUI version of the tool (refer to [Appendix A](apa.html "Appendix A. References"),
    *References*, and [Appendix B](apb.html "Appendix B. Tools for iOS Forensics"),
    *Tools for iOS Forensics*). Moreover, it is always useful to run a `strings` command
    on the database file as well. You may be able to recover a portion of deleted
    entries content that may have been missed by the tools.
  prefs: []
  type: TYPE_NORMAL
- en: Case study - iOS analysis with Oxygen Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The acquisition of an iPhone made using Oxygen Forensics can be analyzed directly
    within the same tool. In fact, during the acquisition, all the files are parsed
    by the software, which offers the user a complete GUI to access and search for
    information in the data. The following screenshot used to show the different functionalities
    of the software, refers to a logical classic type of acquisition from an iPhone
    6s with iOS 9.3\. Some descriptions of the features of the Oxygen Forensics Suite
    have been taken directly from the vendor website at [http://www.oxygen-forensic.com](http://www.oxygen-forensic.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot summarizes the main information related to the acquired
    device model, operating system version, serial number, acquisition type, extraction
    date, investigator name, case number, and evidence number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Case study - iOS analysis with Oxygen Forensics](img/image_06_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, two separate areas are also present, the first one refers to **Common
    sections**, that is the information related to native applications and to the
    grouping functionalities offered by the software; the second one refers to the
    activities of the main applications installed on the device by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Case study - iOS analysis with Oxygen Forensics](img/image_06_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The analysis of native applications lets the analyst recover much information,
    such as the phonebook with assigned photos, calendar events and notes, call log
    (FaceTime, dialed, received, and missed calls), messages (SMS/MMS and iMessages),
    and voicemail. The following screenshot shows an example of a call history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Case study - iOS analysis with Oxygen Forensics](img/5100_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, with the Oxygen Forensics Suite, it is possible to recover information
    related to Wi-Fi access points, IP connections, and locations. The following screenshot
    shows the details of Wi-Fi networks stored in the device under analysis. For each
    network, the SSID, MAC address of the router/access point, and the connection
    timestamps (last joined time and last auto joined time) are listed. From websites
    such as [https://www.wigle.net/](https://www.wigle.net/), it is possible to trace
    the MAC addresses and find the physical position of where the device was.
  prefs: []
  type: TYPE_NORMAL
- en: '![Case study - iOS analysis with Oxygen Forensics](img/5100_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Regarding the analysis of the applications installed by the user, the software
    extracts and interprets both databases and configuration files (usually in the
    `plist` format) for the most common applications present on the Apple Store. These
    applications are split in the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Messengers**: Facebook, Skype, WhatsApp, Viber, Telegram, Facebook Messenger,
    ChatON, Fring, Kakao Talk, Tango, WeChat, Yahoo, Google Hangouts, KiK Messenger,
    QQ, testPlus, Line, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigations**: Google Maps, Apple Maps, Waze, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser**: Safari, Google Chrome, Mercury, Dolphin, Yandex, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social networks**: Facebook, LinkedIn, Twitter, Instagram, Google+, Tinder,
    Grindr, Foursqare, Snapchat, Vkontakte, Pokemon Go, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Travel**: Booking, SkyScanner, TripAdvisor, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Productivity business**: Google Drive, Dropbox, Google Mail, OneDrive, Yahoo
    Mail, iBooks, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of Kik Messenger analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Case study - iOS analysis with Oxygen Forensics](img/5100_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the software offers advanced functionalities for cross-searching data
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Aggregated Contacts**: This section analyzes the contacts from multiple sources
    such as the Phonebook, Messages, Event Log, Skype, chat, and messaging applications
    in **Aggregated Contacts**. This section automatically reveals the same people
    in different sources and groups them in one metacontact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dictionaries**: This section shows all the words ever entered in device messages,
    notes, and calendars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Links and Stats**: This section reveals social connections between users
    of mobile devices under investigation and their contacts. The **Links and Stats**
    section provides a tool to explore social connections between device users by
    analyzing calls, text, multimedia and e-mail messages, and Skype activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timeline**: This section organizes all calls, messages, calendar events,
    geo data, and other activities in a chronological way, so that the analyst can
    follow the conversation history without the need to switch between different sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social Graph**: This section is a workplace that allows the analyst to review
    connections between mobile device owners and their contacts, pinpoint connections
    between multiple device owners, and detect their common contacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than the automated analysis, the Oxygen Forensics Suite also offers the
    ability to navigate inside the filesystem and view all the different file types
    (documents, images, videos, and audio). There are also two embedded tools to view
    SQLite databases and `plist` files. The first one also offers the possibility
    to recover deleted records from databases, therefore, giving the possibility to
    retrieve calls, messages, photo thumbnails, contact photos, applications databases,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The use of this software also made it very easy for users not having high technical
    skills. It allows performing searches of keywords in a very intuitive way, also
    applying filters on every field of the application analyzed. Finally, it also
    allows exporting findings and it automatically generates a report in different
    formats (Word, Excel, PDF, HTML, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: A detailed list of the feature available for the iOS devices can be found at
    [http://www.oxygen-forensic.com/en/compare/devices/software-for-iphone](http://www.oxygen-forensic.com/en/compare/devices/software-for-iphone).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed how to approach the analysis of both native iOS applications
    that come with every iOS device, and third-party applications. We saw some of
    the most common applications, but the approach is the same for any other. The
    importance of being able to parse the `plist` files and SQLite databases, and
    to carve out deleted records from the latter also became clear, since these are
    the two main data structures an analyst will have to deal with in every analysis.
    Last but not least, this chapter provided you with a good amount of locations
    of interesting forensics artifacts, as well as tools to analyze them. Remember
    that in-depth analysis, references, and tools are available at [Appendix A](apa.html
    "Appendix A. References"), *References*, and [Appendix B](apb.html "Appendix B. Tools
    for iOS Forensics"), *Tools for iOS Forensics*.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is dedicated to the analysis of mobile applications, whether
    they are malicious/suspicious or not. We will go through the setup of an analysis
    environment and then learn the application analysis principle, which will allow
    you to analyze the complete behavior of a mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: Self-test questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1\. In which iOS folder is most of the user's information of interest saved?
  prefs: []
  type: TYPE_NORMAL
- en: '`/private/var/mobile/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/Users/mobile/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/private/var/user/mobile/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/private/user/mobile/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which is the timestamp convention used in iOS?
  prefs: []
  type: TYPE_NORMAL
- en: UNIX Epoch Time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apple Time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows Time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MAC Absolute Time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What does the file `/private/var/root/Library/Lockdown/data_ark.plist`
    contain?
  prefs: []
  type: TYPE_NORMAL
- en: Last store search
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Information about the device and about its account holder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List of installed applications
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Password saved in the iDevice
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. In which file is the information related to the SIM card used in the iDevice
    stored?
  prefs: []
  type: TYPE_NORMAL
- en: '`ClearedSections.plist`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`com.apple.network.identification.plist`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`com.apple.commcenter.plist`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`com.apple.springboard.plist`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. What is the name of the database containing the user address book?
  prefs: []
  type: TYPE_NORMAL
- en: '`AddressBook.db`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AddressBook.sqlited`b'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AddressBook.sqlite`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AB.db`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q6\. In which folder is the call history saved?
  prefs: []
  type: TYPE_NORMAL
- en: '`/private/var/CallHistory`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/private/var/wireless/Library/CallHistory/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/private/var/wireless/Library/CallHistoryDB/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/private/var/Library/CallHistory/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q7\. What kind of file is used to store Safari browsing history?
  prefs: []
  type: TYPE_NORMAL
- en: SQLite
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Txt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plist
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q8\. How is the file containing the keyboard cache used for auto correction
    and auto completion called?
  prefs: []
  type: TYPE_NORMAL
- en: '`UserDictionary.txt`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dict.dat`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dynamic-Text.dat`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Text.dat`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
