["```\n>>> y = iter([1, 2, 3])\n>>> next(y)\n1\n>>> next(y)\n2\n>>> next(y)\n3\n>>> next(y)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nStopIteration \n```", "```\n>>> j = reversed([7, 8, 9])\n>>> next(j)\n9\n>>> next(j)\n8\n>>> next(j)\n7\n>>> next(j)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nStopIteration \n```", "```\n>>> def file_sigs():\n...     sigs = [('jpeg', 'FF D8 FF E0'),\n...             ('png', '89 50 4E 47 0D 0A 1A 0A'),\n...             ('gif', '47 49 46 38 37 61')]\n...     for s in sigs:\n...         yield s\n\n>>> fs = file_sigs()\n>>> next(fs)\n('jpeg', 'FF D8 FF E0')\n>>> next(fs)\n('png', '89 50 4E 47 0D 0A 1A 0A')\n>>> next(fs)\n('gif', '47 49 46 38 37 61')\n```", "```\n>>> import datetime\n>>> right_now = datetime.datetime.now()\n>>> right_now\ndatetime.datetime(2018, 6, 30, 7, 48, 31, 576151)\n\n>>> # Subtract time\n>>> delta = datetime.datetime.now() - right_now\n>>> delta\ndatetime.timedelta(0, 16, 303831)\n\n>>> # Add datetime to time delta to produce second time\n>>> right_now + delta\ndatetime.datetime(2018, 6, 30, 7, 48, 47, 879982)\n```", "```\n>>> epoch_timestamp = 874281600\n>>> datetime_timestamp = datetime.datetime.utcfromtimestamp(epoch_timestamp)\n```", "```\n>>> from __future__ import print_function\n>>> print(datetime_timestamp)\n1997-09-15 00:00:00\n>>> print(datetime_timestamp.strftime('%m/%d/%Y %H:%M:%S'))\n09/15/1997 00:00:00\n>>> print(datetime_timestamp.strftime('%A %B %d, %Y at %I:%M:%S %p'))\nMonday September 15, 1997 at 12:00:00 AM\n>>> print(datetime_timestamp.isoformat())\n1997-09-15T00:00:00\n```", "```\n$ pip install python-registry==1.0.4\nCollecting python-registry\nCollecting enum34 (from python-registry)\n Using cached https://files.pythonhosted.org/packages/af/42/cb9355df32c69b553e72a2e28daee25d1611d2c0d9c272aa1d34204205b2/enum34-1.1.6-py3-none-any.whl\nInstalling collected packages: enum34, python-registry\nSuccessfully installed enum34-1.1.6 python-registry-1.0.4\n\n$ pip install yarp==1.0.17\nhttps://github.com/msuhanov/yarp/archive/1.0.17.tar.gz\nCollecting https://github.com/msuhanov/yarp/archive/1.0.17.tar.gz\n Downloading https://github.com/msuhanov/yarp/archive/1.0.17.tar.gz\n \\ 716kB 12.8MB/s\nBuilding wheels for collected packages: yarp\n Running setup.py bdist_wheel for yarp ... done\n Stored in directory: C:\\USERS\\...\\APPDATA\\LOCAL\\TEMP\\pip-ephem-wheel-cache-78qdzfmy\\wheels\\........\nSuccessfully built yarp\nInstalling collected packages: yarp\nSuccessfully installed yarp-1.0.17\n```", "```\n| -- packageName/\n    | -- __init__.py\n    | -- script1.py\n    | -- script2.py\n    | -- subDirectory/\n         | -- __init__.py\n         | -- script3.py\n         | -- script4.py\n```", "```\nfrom script1 import *\nfrom script2 import function_name\nfrom subDirectory import *\n```", "```\nimport packageName  \n```", "```\n>>> from __future__ import print_function\n>>> import datetime\n>>> date_1 = datetime.datetime(2018,04,01)\n>>> date_2 = datetime.datetime.now()\n>>> print(date_1, \" | \", date_2)\n2018-04-01 00:00:00.000  |  2018-04-01 15:56:10.012915 \n```", "```\n>>> date_2.hour\n15\n>>> date_1.year\n2018\n```", "```\n>>> dir(date_1)\n['__add__', '__class__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__radd__', '__reduce__', '__reduce_ex__', '__repr__', '__rsub__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', 'astime zone', 'combine', 'ctime', 'date', 'day', 'dst', 'fromordinal', 'fromtimestamp', 'hour', 'isocalendar', 'isoformat', 'isoweekday', 'max', 'microsecond', 'min', 'minute', 'month', 'now', 'replace', 'resolution', 'second', 'strftime', 'strptime', 'time', 'timetuple', 'timetz', 'today', 'toordinal', 'tzinfo', 'tzname', 'utcfromtimestamp', 'utcnow', 'utcoffset', 'utctimetuple', 'weekday', 'year']\n>>> date_1.weekday()\n4\n>>> date_2.isoformat()\n2016-04-01T15:56:10.012915\n```", "```\n# Basic try and except -- catch-all\ntry:\n    # Line(s) of code\nexcept:\n    # Line(s) of error-handling code \n\n# Catch-As-Variable\ntry:\n    # Line(s) of code\nexcept TypeError as e:\n    print(e.message)\n    # Line(s) of error-handling code\n\n# Catch-Specific\ntry:\n    # Line(s) of code\nexcept ValueError:\n    # Line(s) of error-handling code for ValueError exceptions \n```", "```\n>>> from __future__ import print_function\n>>> def give_error():\n...     try:\n...         my_list.append(5)\n...     except Exception as e:\n...         error_handler(e)\n...\n>>> def error_handler(error):\n...     if isinstance(error, NameError):\n...         print('NameError:', error.message)\n...     elif isinstance(error, TypeError):\n...         print('TypeError:', error.message)\n...     else:\n...         pass\n...\n>>> give_error()\nNameError: global name 'my_list' is not defined\n```", "```\n>>> def double_data(data):\n...     for x in data:\n...         double_data = x*2\n...         try:\n...             # The results list does not exist the first time\n...             # we try to append to it\n...             results.append(double_data)\n...         except NameError:\n...             results = []\n...             results.append(double_data)\n...     return results\n...\n>>> my_results = doubleData(['a', 'b', 'c'])\n>>> print my_results\n['aa', 'bb', 'cc'] \n```", "```\n001 import module\n002\n003 def main():\n004     function_a(data)\n005\n006 def function_a(data_in):\n007     try:\n008         # parse data into packet\n009         function_b(parsed_packet)\n010     except Exception as e:\n011         if isinstance(e, ErrorA):\n012             # Address this type of error\n013             function_b(fixed_packet)\n014         [etc.]\n015 \n016 def function_b(packet):\n017     # Process packet and store in processed_packet variable\n018     try:\n019         module.function_c(processed_packet)\n020     except SomeError:\n021         # Error testing logic\n022         if type 1 error:\n023             raise ErrorA()\n024         elif type 2 error:\n025             raise ErrorB()\n026         [etc.]\n027\n028 if __name__ == '__main__':\n029     main() \n```", "```\n>>> def raise_error():\n...     raise TypeError('This is a TypeError')\n...\n>>> raise_error()\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"<stdin>\", line 2, in raise_error\nTypeError: This is a TypeError \n```", "```\n001 \"\"\"Script to convert Unix timestamps.\"\"\"\n002 from __future__ import print_function\n003 import datetime\n004 import sys\n005\n006 if sys.version_info[0] == 3:\n007     get_input = input\n008 elif sys.version_info[0] == 2:\n009     get_input = raw_input\n010 else:\n011     raise NotImplementedError(\n012         \"Unsupported version of Python used.\")\n```", "```\n042 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n043 __date__ = 20181027\n044 __description__ = \"\"\"Convert Unix formatted timestamps (seconds\n045     since Epoch [1970-01-01 00:00:00]) to human readable.\"\"\"\n046\n047\n048 def main():\n049     unix_ts = int(get_input('Unix timestamp to convert:\\n>> '))\n050     print(unix_converter(unix_ts))\n```", "```\n053 def unix_converter(timestamp):\n054     date_ts = datetime.datetime.utcfromtimestamp(timestamp)\n055     return date_ts.strftime('%m/%d/%Y %I:%M:%S %p')p')\n```", "```\n057 if __name__ == '__main__':\n058     main()\n```", "```\n001 \"\"\"Replicate user input in the console.\"\"\"\n002 from __future__ import print_function\n003 import sys\n...\n033 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n034 __date__ = 20181027\n035 __description__ = \"Replicate user input in the console\"\n036 \n037 \n038 def main():\n039     args = sys.argv\n040     print('Script:', args[0])\n041     args.pop(0)\n042     for i, argument in enumerate(sys.argv):\n043         print('Argument {}: {}'.format(i, argument))\n044         print('Type: {}'.format(type(argument)))\n045 \n046 if __name__ == '__main__':\n047     main()\n```", "```\n001 \"\"\"Sample argparse example.\"\"\"\n002 from __future__ import print_function\n003 import argparse\n...\n033 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n034 __date__ = 20181027\n035 __description__ = \"Argparse command-line parser sample\"\n036 \n037 \n038 def main(args):\n039     print(args)\n040 \n041 \n042 if __name__ == '__main__':\n043     parser = argparse.ArgumentParser(\n044         description=__description__, \n045         epilog='Built by {}. Version {}'.format(\n046         \", \".join(__authors__), __date__),\n047         formatter_class=argparse.ArgumentDefaultsHelpFormatter\n048     )\n```", "```\n$ python argument_parser.py --help\nusage: argument_parser.py [-h] --source SOURCE [-l LOG]\n [--file-type {E01,RAW,Ex01}]\n timezone input_file\n\nArgparse command-line parser sample\n\npositional arguments:\n timezone timezone to apply\n input_file\n\noptional arguments:\n -h, --help show this help message and exit\n --source SOURCE source information (default: None)\n -l LOG, --log LOG Path to log file (default: None)\n --file-type {E01,RAW,Ex01}\n\nBuilt by Chapin Bryce, Preston Miller. Version 20181027\n```", "```\n050     # Add positional required arguments\n051     parser.add_argument('timezone', help='timezone to apply')\n```", "```\n053     # Add non-positional required argument\n054     parser.add_argument('--source', \n055         help='source information', required=True)\n```", "```\n057     # Add optional arguments, allowing shorthand argument\n058     parser.add_argument('-l', '--log', help='Path to log file')\n```", "```\n060     # Using actions\n061     parser.add_argument('--no-email', \n062         help='disable emails', action=\"store_false\")\n063     parser.add_argument('--send-email', \n064         help='enable emails', action=\"store_true\")\n065     # Append values for each argument instance.\n066     parser.add_argument('--emails', \n067         help='email addresses to notify', action=\"append\")\n068     # Count the number of instances. i.e. -vvv\n069     parser.add_argument('-v', help='add verbosity', action='count')\n```", "```\n071     # Defaults\n072     parser.add_argument('--length', default=55, type=int)\n073     parser.add_argument('--name', default='Alfred', type=str)\n```", "```\n075     # Handling Files\n076     parser.add_argument('input_file', type=argparse.FileType('r'))\n077     parser.add_argument('output_file', type=argparse.FileType('w'))\n```", "```\n079     # Allow only specified choices\n080     parser.add_argument('--file-type', \n081         choices=['E01', 'RAW', 'Ex01'])\n```", "```\n083     # Parsing arguments into objects\n084     arguments = parser.parse_args()\n085     main(arguments)\n```", "```\n0001 Vendor Name\n    0001 Product Name 1\n    0002 Product Name 2\n    ...\n    000N Product Name N\n```", "```\n001 \"\"\"Script to lookup USB vendor and product values.\"\"\"\n002 from __future__ import print_function\n003 try:\n004     from urllib2 import urlopen\n005 except ImportError:\n006     from urllib.request import urlopen\n007 import argparse\n```", "```\nusbs = {\n    VendorId_1: [\n        VendorName_1,\n        {ProductId_1: ProductName_1,\n         ProductId_2: ProductName_2,\n         ProductId_N: ProductName_N}\n    ], VendorId_2: [\n        VendorName_2,\n        {ProductId_1: ProductName_1}\n    ], ...\n}\n```", "```\n042 def main():\n...\n065 def search_key():\n...\n080 if __name__ == '__main__':\n081     parser = argparse.ArgumentParser(\n082         description=__description__,\n083         epilog='Built by {}. Version {}'.format(\n084             \", \".join(__authors__), __date__),\n085         formatter_class=argparse.ArgumentDefaultsHelpFormatter\n086     )\n087     parser.add_argument('vid', help=\"VID value\")\n088     parser.add_argument('pid', help=\"PID value\")\n089     args = parser.parse_args()\n090     main(args.vid, args.pid)\n```", "```\n042 def main(vid, pid):\n043     url = 'http://www.linux-usb.org/usb.ids'\n044     usbs = {}\n045     usb_file = urlopen(url)\n046     curr_id = ''\n```", "```\n048     for line in usb_file:\n049         if isinstance(line, bytes):\n050             line = line.decode('latin-1')\n```", "```\n051         if line.startswith('#') or line in ('\\n', '\\t'):\n052             continue\n```", "```\n053         else:\n054             if not(line.startswith('\\t')) and line[0].isalnum():\n```", "```\n055                 uid, name = line.strip().split(' ', 1)\n056                 curr_id = uid\n057                 usbs[uid] = [name.strip(), {}]\n```", "```\n058             elif line.startswith('\\t') and line.count('\\t') == 1:\n059                 uid, name = line.strip().split(' ', 1)\n060                 usbs[curr_id][1][uid] = name.strip()\n```", "```\n062     search_key(vid, pid, usbs)\n```", "```\n>>> inner_list = ['a', 'b', 'c', 'd']\n>>> print(inner_list[0])\na\n>>> outer_dict = {'key_1': inner_list}\n>>> print(outer_dict['key_1'])\n['a', 'b', 'c', 'd']\n>>> print(outer_dict['key_1'][3])\nd \n```", "```\n065 def search_key(vendor_key, product_key, usb_dict):\n066     vendor = usb_dict.get(vendor_key, None)\n067     if vendor is None:\n068         print('Vendor ID not found')\n069         exit()\n```", "```\n071     product = vendor[1].get(product_key, None)\n072     if product is None:\n073         print('Vendor: {}\\nProduct Id not found.'.format(\n074             vendor[0]))\n075         exit(0)\n```", "```\n077     print('Vendor: {}\\nProduct: {}'.format(vendor[0], product))\n```", "```\n>>> import math\n>>> print(math.noattribute(5))\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'noattribute'\n```", "```\n066     vendor = usb_dict[vendor_key]\n```", "```\n$ python usb_lookup.py ffff 1643\nTraceback (most recent call last):\n    File \"usb_lookup.py\", line 90, in <module>\n        main(args.vid, args.pid)\n    File \"usb_lookup.py\", line 62, in main\n        search_key(vid, pid, usbs)\n    File \"usb_lookup.py\", line 66, in search_key\n        vendor = usb_dict[vendor_key]\nKeyError: 'ffff'\n```"]