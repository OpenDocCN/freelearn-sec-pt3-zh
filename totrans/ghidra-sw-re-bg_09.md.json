["```\nanalyzeHeadless <project_location> <project_name>[/<folder_path>] | ghidra://<server>[:<port>]/<repository_name>[/<folder_path>]\n```", "```\n    [[-import [<directory>|<file>]+] | [-process [<project_file>]]]\n```", "```\n    [-preScript <ScriptName> [<arg>]*]\n```", "```\n    [-postScript <ScriptName> [<arg>]*]\n```", "```\n    [-scriptPath \"<path1>[;<path2>...]\"]\n```", "```\n    [-propertiesPath \"<path1>[;<path2>...]\"]\n```", "```\n    [-scriptlog <path to script log file>]\n```", "```\n    [-log <path to log file>]\n```", "```\n    [-overwrite]\n```", "```\n    [-recursive]\n```", "```\n    [-readOnly]\n```", "```\n    [-deleteProject]\n```", "```\n    [-noanalysis]\n```", "```\n    [-processor <languageID>]\n```", "```\n    [-cspec <compilerSpecID>]\n```", "```\n    [-analysisTimeoutPerFile <timeout in seconds>]\n```", "```\n    [-keystore <KeystorePath>]\n```", "```\n    [-connect [<userID>]]\n```", "```\n    [-p]\n```", "```\n    [-commit [\"<comment>\"]]\n```", "```\n    [-okToDelete]\n```", "```\n    [-max-cpu <max cpu cores to use>]\n```", "```\n    [-loader <desired loader name>]\n```", "```\nC:\\ghidra_9.1.2\\support>mkdir c:\\Users\\virusito\\projects\n```", "```\nC:\\ghidra_9.1.2\\support>analyzeHeadless.bat\n```", "```\nC:\\Users\\virusito\\projects MyFirstProject –import C:\\Users\\virusito\\hello_world\\hello_world.exe\n```", "```\nC:\\ghidra_9.1.2\\support> analyzeHeadless.bat C:\\Users\\virusito\\projects MyFirstProject -import C:\\Users\\virusito\\hello_world\\*.exe\n```", "```\n-process [<project_file>]\t\n```", "```\nC:\\ghidra_9.1.2\\support> analyzeHeadless.bat C:\\Users\\virusito\\projects MyFirstProject -process hello_world.exe\n```", "```\nC:\\ghidra_9.1.2\\support> analyzeHeadless.bat C:\\Users\\virusito\\projects MyFirstProject -process '*.exe'\n```", "```\n    -preScript <ScriptName.ext> [<arg>]* \n    ```", "```\n    -postScript <ScriptName.ext> [<arg>]*\n    ```", "```\n-scriptPath \"$GHIDRA_HOME/Ghidra/Features/Base/ghidra_scripts;/myscripts\"\n```", "```\n-scriptPath \"\\$GHIDRA_HOME/Ghidra/Features/Base/ghidra_scripts;/myscripts\"\n```", "```\n    -propertiesPath \"<path1>[;<path2>…]\"\n    ```", "```\n    –scriptlog <path to script log file>\n    ```", "```\n//Prompts the user for a search string and searches the \n```", "```\n//program listing for the first occurrence of that string.\n```", "```\n//@category Search\n```", "```\nimport ghidra.app.script.GhidraScript;\n```", "```\nimport ghidra.program.model.address.Address;\n```", "```\npublic class FindTextScript extends GhidraScript {\n```", "```\n    /**\n```", "```\n     * @see ghidra.app.script.GhidraScript#run()\n```", "```\n     */\n```", "```\n    @Override\n```", "```\n    public void run() throws Exception {\n```", "```\n\t\tif (currentAddress == null) {\n```", "```\n\t\t\tprintln(\"NO CURRENT ADDRESS\");\n```", "```\n\t\t\treturn;\n```", "```\n\t\t}\n```", "```\n\t\tif (currentProgram == null) {\n```", "```\n\t\t\tprintln(\"NO CURRENT PROGRAM\");\n```", "```\n\t\t\treturn;\n```", "```\n\t\t}\n```", "```\n        String search = askString(\"Text Search\", \"Enter search string: \");\n```", "```\n        Address addr = find(search);\n```", "```\n        if (addr != null) {\n```", "```\n            println(\"Search match found at \"+addr);\n```", "```\n            goTo(addr);\n```", "```\n        }\n```", "```\n        else {\n```", "```\n            println(\"No search matched found.\");\n```", "```\n        }\n```", "```\n    }\n```", "```\n}\n```", "```\n    #\n    # This is the HeadlessFindTextScript.properties file\n    #\n    Text Search Enter search string: = http://\n    ```", "```\n    String addrValue = getDataAt(addr).getDefaultValueRepresentation();\n    println(\"0x\" + addr + \": \" + addrValue);\n    ```", "```\n//Prompts the user for a search string and searches the\n```", "```\n//program listing for the first occurrence of that string.\n```", "```\n//@category Search\n```", "```\nimport ghidra.app.script.GhidraScript;\n```", "```\nimport ghidra.app.util.headless.HeadlessScript;\n```", "```\nimport ghidra.program.model.address.Address;\n```", "```\npublic class HeadlessFindTextScript extends GhidraScript {\n```", "```\n    /**\n```", "```\n     * @see ghidra.app.script.GhidraScript#run()\n```", "```\n     */\n```", "```\n    @Override\n```", "```\n    public void run() throws Exception {\n```", "```\n        if (currentAddress == null) {\n```", "```\n            println(\"NO CURRENT ADDRESS\");\n```", "```\n            return;\n```", "```\n        }\n```", "```\n        if (currentProgram == null) {\n```", "```\n            println(\"NO CURRENT PROGRAM\");\n```", "```\n            return;\n```", "```\n        }\n```", "```\n        String search = askString(\"Text Search\", \"Enter search string: \");\n```", "```\n        Address addr = find(search);\n```", "```\n        if (addr != null) {\n```", "```\n            String addrValue = getDataAt(addr).getDefaultValueRepresentation();\n```", "```\n            println(\"0x\" + addr + \": \" + addrValue);\n```", "```\n            goTo(addr);\n```", "```\n        }\n```", "```\n        else {\n```", "```\n            println(\"No search matched found.\");\n```", "```\n        }\n```", "```\n    }\n```", "```\n}\n```", "```\n#!/usr/bin/env python\n```", "```\nimport os\n```", "```\nimport urllib.request\n```", "```\nimport re\n```", "```\nimport subprocess\n```", "```\nfrom pathlib import Path\n```", "```\nfrom bs4 import BeautifulSoup\n```", "```\nurl = 'https://s3.eu-central-1.amazonaws.com/dasmalwerk/'\n```", "```\nPath(\"compressed_malware_samples\").mkdir(parents=True, exist_ok=True)\n```", "```\ndasmalwerk = urllib.request.urlopen(urllib.request.Request(url, data=None, headers={'User-Agent': 'Packt'})).read().decode('utf-8')\n```", "```\nsoup = BeautifulSoup(dasmalwerk, 'lxml')\n```", "```\nmalware_samples = soup.findAll('key')\n```", "```\nfor sample in malware_samples:\n```", "```\n    if(not sample.string.endswith('.zip')):\n```", "```\n        continue\n```", "```\n    sample_url=\"{0}{1}\".format(url, sample.string)\n```", "```\n    print(\"[*] Downloading sample: {0}\".format(sample_url))\n```", "```\n    try:\n```", "```\n        sample_filename = 'compressed_malware_samples{0}{1}'.format(os.sep, sample.string.split('/')[-1])\n```", "```\n        with urllib.request.urlopen(sample_url) as d, open(sample_filename, \"wb\") as opfile:\n```", "```\n            data = d.read()\n```", "```\n            opfile.write(data)\n```", "```\n            print(\"    [-] Downloaded.\")\n```", "```\n        subprocess.call(['C:\\\\Program Files\\\\7-Zip\\\\7z.exe', 'e', sample_filename, '*', '-odecompressed_malware_samples', '-pinfected', '-y', '-r'], stdout=subprocess.DEVNULL)\n```", "```\n        print(\"    [-] Uncompressed.\")\n```", "```\n    except:\n```", "```\n        print(\"    [-] Error :-(\")\n```", "```\nanalyzeHeadless.bat C:\\Users\\virusito\\projects MalwareSampleSetProject -postScript C:\\Users\\virusito\\ghidra_scripts\\HeadlessFindTextScript.java -import C:\\Users\\virusito\\malware_samples_downloader\\decompressed_malware_samples\\* -overwrite\n```"]