["```\nX = 10;\n```", "```\nldc.i4 10  // pushes an int32 constant with value 10 to the stack\nstloc.0  // pops a value to local variable 0 (X) from stack\n```", "```\nProcess[] Process = System.Diagnostics.Process::GetProcessesByName(\"App01\");\n```", "```\nldstr \"App01\" // here, ldstr accesses that string by its ID and the string itself is located in the #US stream\ncall class [System]System.Diagnostics.Process[] [System]System.Diagnostics.Process::GetProcessesByName(string)\nStloc.0       // store the return value in local variable 0 (X)\n```", "```\nif (X == 50)\n{\n  Y = 20;\n}\n```", "```\n00: ldloc.0  // load local variable 0 (X)\n01: ldc.i4.s 50  // load int32 constant with value 50 into the stack\n02: bne 5       // if not equal, branch/jump to line number 5\n03: ldc.i4.s 20 // load int32 constant with value 20 into the stack\n04: stloc.1     // place the value 20 from the stack to the local variable 1 (Y)\n05: nop       // here, it could be any code that goes after the If statement\n06: nop\n```", "```\nfor (i = 0; i < 50; i++)\n{\n  X = i + 20;\n}\n```", "```\n00: ldc.i4.0 // pushes a constant with value 0\n01: stloc.0  // stores it in local variable 0 (i). This represents i = 0\n02: br 11    // unconditional branching to line 11\n03: ldloc.0  // loads variable 0 (i) into stack\n04: ldc.i4.s 20 // loads an int32 constant with value 20 into stack\n05: add      // adds both values from the stack and pushes the result back to stack (i + 20)\n06: stloc.1  // stores the result in a local variable 1 (X)\n07: ldloc.0  // loads local variable 0 (i)\n08: ldc.i4.1 // pushes a constant value of 1\n09: add      // adds both values\n10: stloc.0  // stores the result in local variable i (i++)\n11: ldloc.0  // loads again local variable i (this is the branching destination)\n12: ldc.i4.s 50 // loads an int32 constant with value 50 into stack\n13: blt.s 3  // compares both values from stack (i and 50) and branches to line number 3 if the first value is lower\n```", "```\nildasm.exe <malware_sample> /output output.il\n```", "```\nilasm.exe /debug output.il /output=<new sample exe file>\n```", "```\nde4dot.exe <sample>\n```", "```\nde4dot <sample> --strtyp delegate --strtok <decryption method ID>\n```", "```\nClassFile {\n  u4 magic;\n  u2 minor_version;\n  u2 major_version;\n  u2 constant_pool_count;\n  cp_info constant_pool[constant_pool_count-1]; \n  u2 access_flags;\n  u2 this_class; \n  u2 super_class;\n  u2 interfaces_count;\n  u2 interfaces[interfaces_count]; \n  u2 fields_count;\n  field_info fields[fields_count]; \n  u2 methods_count;\n  method_info methods[methods_count]; \n  u2 attributes_count;\n  attribute_info attributes[attributes_count];\n}\n```"]