- en: Appendix appB. Case Study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, we will use an infected machine to illustrate how to conduct
    primary analysis on different types of evidence, and we will go through live analysis
    along with the post-mortem analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To conduct this analysis, we created a small virtual network with the following
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scenario](img/image_66_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All the scenario parts were created using virtualization, including the required
    Internet hosts to download the malware. The machine is infected with ZeusVM malware.
    The malware executable can be downloaded for educational use only from the Zoo
    at [https://github.com/ytisf/theZoo/blob/master/malwares/Binaries/ZeusVM/ZeusVM.zip](https://github.com/ytisf/theZoo/blob/master/malwares/Binaries/ZeusVM/ZeusVM.zip).
    The malware sample SHA256 after unzipping is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`b04637c11c63dd5a4a599d7104f0c5880717b5d5b32e0104de5a416963f06118`'
  prefs: []
  type: TYPE_NORMAL
- en: '`theZoo` is a project that was created to make the possibility of malware analysis
    open and available to the public. `theZoo` was created by Yuval tisf Nativ, and
    it is now maintained by Shahak Shalev.'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the malware sample, recreate or infect a virtual machine with
    this malware, and follow the analysis steps in this appendix.
  prefs: []
  type: TYPE_NORMAL
- en: The machine used in this scenario is Windows 7 Enterprise 64 bit.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed before, the best practice is to start the evidence acquisition
    before changing anything in the machine under investigation. The acquired evidence
    must be stored in the USB storage device or network share. In our case, a USB
    storage device can be used between the infected and the analysis machines, but
    it must be carefully wiped after the analysis. Network acquisition with another
    analysis Linux virtual machine over the virtual network will be efficient in our
    case as well. Network acquisition will be as discussed before in [Chapter 4](ch04.html
    "Chapter 4. Nonvolatile Data Acquisition"), *Nonvolatile Data Acquisition*. We
    need to acquire the memory and hard disk of the infected machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise: You need to perform this step, as we discussed before in the acquisition
    sections in [Chapter 3](ch03.html "Chapter 3. Volatile Data Collection"), *Volatile
    Data Collection*, and [Chapter 4](ch04.html "Chapter 4. Nonvolatile Data Acquisition"),
    *Nonvolatile Data Acquisition*.'
  prefs: []
  type: TYPE_NORMAL
- en: Live analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let's perform some live analysis on the infected machine in hand. This
    live analysis will give us quick results. It may overwrite some traces in the
    system, but in our case here, we have already acquired our evidence.
  prefs: []
  type: TYPE_NORMAL
- en: The running processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Listing the running processes will allow us to notice any maliciously-named
    processes that may relate to malware behavior. We can list the running processes
    using the `native tasklist` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The running processes](img/image_66_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also use `processexplorer` from Sysinternals. We will notice no malicious
    names, but we can see that there are two processes named `explorer.exe` within
    the system. One holds an ID of `2256` ran for compatibility with 32 bit images
    but its current directory is `C:\Users\<<UserName>>\AppData\Roaming\` as shown
    in the Process Explorer in the following screenshot. Also, please note that this
    process most likely will hold another ID if you ran the malware in a machine on
    your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The running processes](img/image_66_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To investigate this process more, we can use `ProcessActivityView` from DART
    tools to see which files are accessed by this process in real time. We will find
    this process access a file located and named `C:\Users\<<UserName>>\AppData\Roaming\Tyull\yquna.tmp`.
  prefs: []
  type: TYPE_NORMAL
- en: The folder name and filenames seem to be randomly created which is a typical
    malware behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, if we try to scan the running system with the GMER tool, it will detect
    some injected code in the running process `2256 explorer.exe`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The running processes](img/image_66_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Network activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the malware samples out there need a network connection to complete
    their goal and connect to the attacker. By checking the network activities on
    the suspicious connection, we will notice that it listens for connections and
    port `37337`. Here, we must note that we already isolated the machine from the
    Internet and the internal network and such connections can''t be completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network activities](img/image_66_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Port `37337` is known for its wide usage in malware-related activities.
  prefs: []
  type: TYPE_NORMAL
- en: Autorun keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also can check for the autorun keys in the system, which are used by the
    malware to preserve their existence in the system even after system reboot. We
    can do this using the Sysinternals tool `autorunsc.exe` or its GUI `autoruns.exe`.
    We can use the command-line version with the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-l`: These are elements that start automatically at login (the default option)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`: These are assigned tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m`: These do not display elements that are digitally signed by Microsoft'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: These verify digital signatures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Autorun keys](img/image_66_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Under the `HKCU\Software\Microsoft\Windows\CurrentVersion\Run` registry key,
    the location of this unknown executable is `C:\users\<<UserName>>\appdata\roaming\imyrug\epqe.exe`.
    Pay attention to the key last access date, which is old.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can extract this executable for further analysis, such as reverse engineering
    and malware analysis, to make sure that it is malicious and understand its functionality.
    The same results can be found using the GUI version of the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Autorun keys](img/image_66_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, the question now is what added this executable to the registry keys?
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To try to answer the previous question, we can start analyzing the prefetch
    files. From DART, open the WinPrefetchView tool. This tool will automatically
    parse the prefetch files of the live system and view their results in human readable
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'After spending some time in viewing the files and searching for the executable
    named `epqe`, we can find that `eqpe.exe` ran just two seconds after a file named `latest_report.pdf.exe`
    ran in the system, and at the same second the `Explorer.exe` started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prefetch files](img/image_66_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the first filename is very suspicious. It is located under `C:\Users\<<UserName>>\Downloads\latest_report.pdf.exe`.
    If we tried to search this location for this file, we won''t find it. In the list
    of files used by this `latest_report.pdf.exe` file, according to `WinPrefetchView`,
    we will find the `epqe.exe` file used or created by this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prefetch files](img/image_66_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, what made the victim download this malicious executable?
  prefs: []
  type: TYPE_NORMAL
- en: Browser analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `last_report.pdf.exe` file may have been copied to the machine from another
    storage or over the network, but because it was located in the `Downloads` folder,
    it may be more reasonable to start investigating the browser history.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installed browsers in the system were Internet Explorer and Mozilla Firefox.
    By investigating both with DART tools, we can find some interesting results from
    `MozillaHistoryView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser analysis](img/image_66_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the file was downloaded from `http://www.maldomain.com/public/latest_report.pdf.exe`.
    However, we can see that the visit time was just after the user visited `mail.yahoo.com`,
    which increases the chance that the malicious link was sent to the victim in an
    e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have the ability to open the victim''s mailbox to prove or refute this
    assumption, in our case, we will find the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser analysis](img/image_66_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can find this e-mail where the language isn''t accurate and the link was
    added in order to display other text `this link` rather than the actual link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser analysis](img/image_66_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The e-mail and browser history analysis results won''t appear in your
    analysis if you run the malware within a machine on your own.'
  prefs: []
  type: TYPE_NORMAL
- en: Postmortem analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before performing the live analysis, we acquired the evidence. These were the
    memory and the hard drive. Let's see what we can get from this evidence.
  prefs: []
  type: TYPE_NORMAL
- en: Memory analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The memory is the working space for the operating system, and we can get many
    traces of any malware that ran within the system from the memory analysis. In
    this section, we will use the volatility framework to analyze the dumped memory
    file and try to get the same information that we got from the live analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get information about the profile of the memory file, we can use the imageinfo
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the output, the image profile that we will use is `Win7SP0x64`. Then,
    let''s list the running processes and the network connections, as we discussed
    in the memory analysis chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will notice the two `explorer.exe` processes, but we can''t see any hidden
    processes. There are two processes named `dllhost.exe`, which can be found in
    the psscan plugin''s output only. However, these two processes were exited and
    their structures were still in memory, and they can be found by psscan plugin,
    as we can see from the output of the psscan plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can filter, based on the malicious connections that can be found in
    the system using the netscan plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will find `explorer.exe` process's listening connections on port `37337`.
    So, let's focus on this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s dump this process and search for any interesting strings that can identify
    its function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we run the `strings 2256.dmp | more` command, it will show many strings
    in the process dump file. Some of these strings, such as `Run and Runonce`, should
    make us think about registry keys. To list the registry keys in memory, we can
    use the hivelist plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have the locations of the opened hives in memory. We can browse through
    these hives in memory using the printkey plugin with the virtual offset of the
    registry hive.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try different hives, but let''s try the `ntuser.dat` hive of the system
    user. Check `Software\Microsoft\Windows\CurrentVersion\Run`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can find the unknown executable in the memory as well. Now, let''s try to
    scan for all opened files in memory and filter on this filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, convert the body file to the timeline file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be a timeline of all the activities in the system. If we tried
    to filter based on the suspicious executable filename, we can get the same sequence
    that we got from investigating the prefetch files during live analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory analysis](img/image_66_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, we can try to recover the `latest_report.pdf.exe` from the hard disk image.
    Actually, the malware deleted that file and created the `epqe.exe` instead. But,
    what if we wanted to get this file and couldn't recover that file from the hard
    disk.
  prefs: []
  type: TYPE_NORMAL
- en: Network analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The network traffic is the most volatile evidence. For our scenario here, we
    dumped the network traffic during the attack simulation to a `pcap` file.
  prefs: []
  type: TYPE_NORMAL
- en: To analyze the network traffic, we will use the Networkminer tool that is installed
    within the Wine environment in our Linux analysis virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Networkminer will parse the `pcap` file and view detailed information about
    the `maldomain.com` domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network analysis](img/image_66_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will also export the downloaded file with detailed information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network analysis](img/image_66_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the network traffic, we can export and analyze the first `latest_report.pdf.exe`
    executable file.
  prefs: []
  type: TYPE_NORMAL
- en: Timeline analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create a complete timeline of all the activities in
    the hard disk from the acquired disk image using log2timeline and the Plaso framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will run all the parsers of Windows 7 against the acquired image. However,
    first, we need to get the offset of the `C:` partition in image using `mmls` tool
    from TSK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline analysis](img/image_66_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we will use this offset with log2timeline. The process of generating
    the body file will take a long time because it parses the whole volume for any
    event mentioned in Win7 parsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline analysis](img/image_66_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once this is finished, we can use the `psort.py` tool to view parts of the body
    file on our choice with the command line, as we did in the timeline analysis in
    [Chapter 5](ch05.html "Chapter 5. Timeline"), *Timeline*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, we can convert the timeline body file into a CSV formatted file in order
    to view it with any spreadsheet program. The conversion will take some time to
    complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline analysis](img/image_66_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the conversion finishes, you can open the new file in, for example, Excel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline analysis](img/image_66_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can use the Excel filtering tools to filter the output based on our
    needs, such as showing the prefetch analysis of the malicious files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline analysis](img/image_66_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we finished the main book chapters, in this appendix we conducted a primary
    analysis and discovered malware in an infected machine. We used different analysis
    techniques, live analysis and postmortem analysis, and explained how to get the
    same results from both ways. Although, live analysis is easier, it is not applicable
    all the time. This is why we must be aware of both techniques for the real-life
    investigations.
  prefs: []
  type: TYPE_NORMAL
