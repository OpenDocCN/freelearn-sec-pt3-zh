["```\n001 >>>  [Setup online Device Install (Hardware initiated) - pciven_15ad&dev_07a0&subsys_07a015ad&rev_013&18d45aa6&0&a9]\n002 >>>  Section start 2010/11/10 10:21:12.593\n003 ump: Creating Install Process: DrvInst.exe 10:21:12.593\n004 ndv: Retrieving device info...\n005 ndv: Setting device parameters...\n006 ndv: Searching Driver Store and Device Path...\n007 dvi: {Build Driver List} 10:21:12.640 \n```", "```\n001 \"\"\"First iteration of the setupapi.dev.log parser.\"\"\"\n002 from __future__ import print_function\n003 from io import open\n...\n033 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n034 __date__ = 20181027\n035 __description__ = \"\"\"This scripts reads a Windows 7 Setup API\n036    log and prints USB Devices to the user\"\"\"\n```", "```\n039 def main():\n...\n054 def parse_setupapi():\n...\n071 def print_output(): \n```", "```\n082 if __name__ == '__main__':\n083     # Run the program\n084     main()\n```", "```\n039 def main():\n040     \"\"\"\n041     Primary controller for script.\n042     :return: None\n043     \"\"\"\n```", "```\n045     file_path = 'setupapi.dev.log'\n```", "```\n047     # Print version information when the script is run\n048     print('='*22)\n049     print('SetupAPI Parser, v', __date__)\n050     print('='*22)\n```", "```\n051     parse_setupapi(file_path) \n```", "```\nIOError: File not open for reading \n```", "```\n054 def parse_setupapi(setup_file):\n055     \"\"\"\n056     Interpret the file\n057     :param setup_file: path to the setupapi.dev.log\n058     :return: None\n059     \"\"\"\n060     in_file = open(setup_file)\n```", "```\n061     data = in_file.readlines() \n```", "```\n063     for i, line in enumerate(data): \n```", "```\n064         if 'device install (hardware initiated)' in line.lower():\n065             device_name = data[i].split('-')[1].strip()\n```", "```\n>>> [Device Install (Hardware initiated) - pciven_8086&dev_100f&subsys_075015ad&rev_014&b70f118&0&0888]\n```", "```\npciven_8086&dev_100f&subsys_075015ad&rev_014&b70f118&0&0888]\n```", "```\n066             date = data[i+1].split('start')[1].strip()\n```", "```\n>>>  Section start 2010/11/10 10:21:14.656\n```", "```\n2010/11/10 10:21:14.656\n```", "```\n067             print_output(device_name, date)\n068     in_file.close()\n```", "```\n071 def print_output(usb_name, usb_date):\n072     \"\"\"\n073     Print the information discovered\n074     :param usb_name: String USB Name to print\n075     :param usb_date: String USB Date to print\n076     :return: None\n077     \"\"\"\n078     print('Device: {}'.format(usb_name))\n079     print('First Install: {}'.format(usb_date))\n```", "```\n001 \"\"\"Second iteration of the setupapi.dev.log parser.\"\"\"\n002 from __future__ import print_function\n003 import argparse\n004 from io import open\n005 import os\n006 import sys\n...\n036 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n037 __date__ = 20181027\n038 __description__ = \"\"\"This scripts reads a Windows 7 Setup API\n039 log and prints USB Devices to the user\"\"\"\n```", "```\n042 def main()\n...\n060 def parse_setupapi()\n...\n093 def print_output() \n```", "```\n104 if __name__ == '__main__':\n105     # Run this code if the script is run from the command line.\n106     parser = argparse.ArgumentParser(\n107         description=__description__,\n108         epilog='Built by {}. Version {}'.format(\n109             \", \".join(__authors__), __date__),\n110         formatter_class=argparse.ArgumentDefaultsHelpFormatter\n111     )\n```", "```\n113     parser.add_argument('IN_FILE',\n114         help='Windows 7 SetupAPI file')\n115     args = parser.parse_args()\n116 \n117     # Run main program\n118     main(args.IN_FILE)\n```", "```\n042 def main(in_file):\n043     \"\"\"\n044     Main function to handle operation\n045     :param in_file: string path to Windows 7 setupapi.dev.log\n046     :return: None\n047     \"\"\"\n```", "```\n048     if os.path.isfile(in_file):\n```", "```\n049         print('{:=^22}'.format(''))\n050         print('{} {}'.format('SetupAPI Parser, v', __date__))\n051         print('{:=^22} \\n'.format(''))\n```", "```\n052         device_information = parse_setupapi(in_file)\n053         for device in device_information:\n054             print_output(device[0], device[1])\n```", "```\n055     else:\n056         print('Input is not a file.')\n057         sys.exit(1)\n```", "```\n060 def parse_setupapi(setup_log):\n061     \"\"\"\n062     Read data from provided file for Device Install Events for\n063         USB Devices\n064     :param setup_log: str - Path to valid setup api log\n065     :return: list of tuples - Tuples contain device name and date\n066     in that order\n067     \"\"\"\n068     device_list = list()\n```", "```\n069     with open(setup_log) as in_file:\n070         for line in in_file:\n```", "```\n071             lower_line = line.lower()\n072             # if 'Device Install (Hardware initiated)' in line:\n073             if 'device install (hardware initiated)' in \\\n074                 lower_line and ('ven' in lower_line or\n075                                 'vid' in lower_line):\n```", "```\n078                 if 'usb' not in device_name.split(\n079                         '\\\\')[0].lower():\n080                     continue\n```", "```\n087                 date = next(in_file).split('start')[1].strip()\n```", "```\n088                 device_list.append((device_name, date))\n089\n090     return device_list \n```", "```\n093 def print_output(usb_name, usb_date):\n094     \"\"\"\n095     Print the information discovered\n096     :param usb_name: String USB Name to print\n097     :param usb_date: String USB Date to print\n098     :return: None\n099     \"\"\"\n100     print('Device: {}'.format(usb_name))\n101     print('First Install: {}\\n'.format(usb_date))\n```", "```\n001 \"\"\"Third iteration of the setupapi.dev.log parser.\"\"\"\n002 from __future__ import print_function\n003 import argparse\n004 from io import open\n005 import os\n006 import sys\n007 import usb_lookup\n...\n037 __authors__ = [\"Chapin Bryce\", \"Preston Miller\"]\n038 __date__ = 20181027\n039 __description__ = \"\"\"This scripts reads a Windows 7 Setup API\n040     log and prints USB Devices to the user\"\"\"\n```", "```\n042 def main():\n...\n068 def parse_setupapi():\n...\n092 def parse_device_info():\n...\n137 def prep_usb_lookup():\n...\n151 def get_device_names():\n...\n171 def print_output():  \n```", "```\n187 if __name__ == '__main__':\n188     # Run this code if the script is run from the command line.\n189     parser = argparse.ArgumentParser(\n190         description=__description__,\n191         epilog='Built by {}. Version {}'.format(\n192             \", \".join(__authors__), __date__),\n193         formatter_class=argparse.ArgumentDefaultsHelpFormatter\n194     )\n195 \n196     parser.add_argument('IN_FILE',\n197         help='Windows 7 SetupAPI file')\n198     parser.add_argument('--local',\n199         help='Path to local usb.ids file')\n200 \n201     args = parser.parse_args()\n202 \n203     # Run main program\n204     main(args.IN_FILE, args.local)\n```", "```\n042 def main(in_file, local_usb_ids=None):\n043     \"\"\"\n044     Main function to handle operation\n045     :param in_file: Str - Path to setupapi log to analyze\n046     :return: None\n047     \"\"\"\n048 \n049     if os.path.isfile(in_file):\n050         device_information = parse_setupapi(in_file)\n051         usb_ids = prep_usb_lookup(local_usb_ids)\n052         for device in device_information:\n053             parsed_info = parse_device_info(device)\n```", "```\n054             if isinstance(parsed_info, dict):\n055                 parsed_info = get_device_names(usb_ids,\n056                     parsed_info)\n```", "```\n057             if parsed_info is not None:\n058                 print_output(parsed_info)\n```", "```\n059         print('\\n\\n{} parsed and printed successfully.'.format(\n060             in_file))\n061\n062     else:\n063         print(\"Input: {} was not found. Please check your path \"\n064             \"and permissions.\".format(in_file))\n065         sys.exit(1)\n```", "```\n068 def parse_setupapi(setup_log):\n069     \"\"\"\n070     Read data from provided file for Device Install Events for\n071         USB Devices\n072     :param setup_log: str - Path to valid setup api log\n073     :return: tuple of str - Device name and date\n074     \"\"\"\n075     device_list = list()\n076     unique_list = set()\n077     with open(setup_log) as in_file:\n078         for line in in_file:\n```", "```\n079         lower_line = line.lower()\n080         if 'device install (hardware initiated)' in \\\n081                 lower_line and ('vid' in lower_line or\n082                                 'ven' in lower_line):\n083             device_name = line.split('-')[1].strip()\n084             date = next(in_file).split('start')[1].strip()\n```", "```\n085             if device_name not in unique_list:\n086                 device_list.append((device_name, date))\n087                 unique_list.add(device_name)\n088 \n089     return device_list\n```", "```\n092 def parse_device_info(device_info):\n093     \"\"\"\n094     Parses Vendor, Product, Revision and UID from a Setup API\n095         entry\n096     :param device_info: string of device information to parse\n097     :return: dictionary of parsed information or original string\n098         if error\n099     \"\"\"\n100     # Initialize variables\n101     vid = ''\n102     pid = ''\n103     rev = ''\n104     uid = ''\n```", "```\n106     # Split string into segments on \\\n107     segments = device_info[0].split('\\\\')\n108 \n109     if 'usb' not in segments[0].lower():\n110         return None\n```", "```\n114     for item in segments[1].split('&'):\n115         lower_item = item.lower()\n116         if 'ven' in lower_item or 'vid' in lower_item:\n117             vid = item.split('_', 1)[-1]\n118         elif 'dev' in lower_item or 'pid' in lower_item or \\\n119                 'prod' in lower_item:\n120             pid = item.split('_', 1)[-1]\n121         elif 'rev' in lower_item or 'mi' in lower_item:\n122             rev = item.split('_', 1)[-1]\n```", "```\n124     if len(segments) >= 3:\n125         uid = segments[2].strip(']')\n```", "```\n127     if vid != '' or pid != '':\n128         return {'Vendor ID': vid.lower(),\n129             'Product ID': pid.lower(),\n130             'Revision': rev,\n131             'UID': uid,\n132             'First Installation Date': device_info[1]}\n133     # Unable to parse data, returning whole string\n134     return device_info\n```", "```\n137 def prep_usb_lookup(local_usb_ids=None):\n138     \"\"\"\n139     Prepare the lookup of USB devices through accessing the most\n140     recent copy of the database at http://linux-usb.org/usb.ids\n141     or using the provided file and parsing it into a queriable\n142     dictionary format.\n143     \"\"\"\n144     if local_usb_ids:\n145         usb_file = open(local_usb_ids, encoding='latin1')\n146     else:\n147         usb_file = usb_lookup.get_usb_file()\n```", "```\n148     return usb_lookup.parse_file(usb_file) \n```", "```\n151 def get_device_names(usb_dict, device_info):\n152     \"\"\"\n153     Query `usb_lookup.py` for device information based on VID/PID.\n154     :param usb_dict: Dictionary from usb_lookup.py of known\n155         devices.\n156     :param device_info: Dictionary containing 'Vendor ID' and\n157         'Product ID' keys and values.\n158     :return: original dictionary with 'Vendor Name' and\n159         'Product Name' keys and values\n160     \"\"\"\n```", "```\n161     device_name = usb_lookup.search_key(\n162         usb_dict, [device_info['Vendor ID'],\n163         device_info['Product ID']])\n164 \n165     device_info['Vendor Name'] = device_name[0]\n166     device_info['Product Name'] = device_name[1]\n167 \n168     return device_info\n```", "```\n171 def print_output(usb_information):\n172     \"\"\"\n173     Print formatted information about USB Device\n174     :param usb_information: dictionary containing key/value\n175         data about each device or tuple of device information\n176     :return: None\n177     \"\"\"\n178     print('{:-^15}'.format(''))\n```", "```\n180     if isinstance(usb_information, dict):\n181         for key_name, value_name in usb_information.items():\n182             print('{}: {}'.format(key_name, value_name))\n```", "```\n183     elif isinstance(usb_information, tuple):\n184         print('Device: {}'.format(usb_information[0]))\n185         print('Date: {}'.format(usb_information[1]))\n```"]