- en: Parsing Third-Party Application Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Third-party applications have taken the smartphone community by storm. Most
    smartphone owners have more than one app on their device that they rely on to
    chat, game, get directions, or share pictures. According to [https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/](https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/),
    there are almost 5 million apps worldwide for various smartphones. Apple's App
    Store offers approximately 1.8 million apps, Google Play offers 2.47 million,
    Amazon offers 600,000, and Windows offers 670,000\. This number is expected to
    grow exponentially through 2020.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to introduce you to the various applications seen
    on Android, iOS devices, and Windows Phones. Each application will vary due to
    versions and devices, but their underlying structures are similar. We will look
    at how the data is stored and why preference files are important to your investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in detail in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Different third-party applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How applications are stored on iOS devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How applications are stored on Android devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Phone application storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use both commercial and open source solutions to parse application data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to third-party applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Third-party applications are an integral part of mobile device investigations;
    often, the key artifacts seem to exist within an application. This requires you
    to understand where application data is stored on the device, how application
    data is saved for that platform, and which tool best helps to uncover the evidence.
    Manual parsing is often a key factor when examining third-party applications on
    any smartphone. While some commercial tools, such as Belkasoft Evidence Center
    or Magnet AXIOM, are known for application parsing support, no tool is perfect
    and it's virtually impossible for tools to keep up with the frequent updates that
    are released for each application.
  prefs: []
  type: TYPE_NORMAL
- en: Most often, you'll find that the commercial tools available parse the most popular
    applications on the market. For example, when Facebook purchased WhatsApp, Belkasoft,
    Cellebrite, Magnet Forensics, and Oxygen Forensics started supporting this application.
    Facebook is extremely popular, but data isn't always extracted or parsed, due
    to security features that are built into the app—this is where all apps differ.
    Our best advice is to test, test, and test! You can download an app, populate
    data, and examine the results to see how your view of the evidence compares to
    your actual evidence. This practice will enable you to understand how updates
    change the artifacts, how evidence locations change, and how to manually extract
    artifacts that your tools are missing. Additionally, reverse-engineering an app
    and analyzing its code will help you to identify where the data is stored and
    how it is stored.
  prefs: []
  type: TYPE_NORMAL
- en: Most applications do not require a data plan for use; they can fully function
    via a Wi-Fi network, which means that apps can still function if a person travels
    to a region in which their device would not usually work. For example, when I
    travel, I rely on Skype, Viber, and WhatsApp to call and text family and friends.
    To use these apps, all that is required is that my smartphone is connected to
    Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already addressed some third-party application extraction and analysis
    tips in this book. In addition to this, we discussed the files that need to be
    examined to understand and analyze application data in [Chapter 5](4f92f4a2-f8f9-4274-96eb-da9174fc6772.xhtml),
    *iOS Data Analysis and Recovery*; [Chapter 10](5bb0cc1b-d89c-408a-b2c9-6b946519151d.xhtml),
    *Android Data Analysis and Recovery*; [Chapter 11](882decf1-336b-416f-98ab-dadecc71efef.xhtml),
    *Android App Analysis, Malware, and Reverse Engineering*; and [Chapter 12](27f60ffc-e0b7-4aa1-8737-541ca9569908.xhtml),
    *Windows Phone Forensics*. This chapter will dive deeper into the applications
    and relevant files and will prepare you for the analysis of these artifacts. Each
    application has a purpose. Most tools provide support for the most popular application
    in each category. The rest is up to you. A quick look at the applications presented
    by the Oxygen Forensic Detective tool is shown in the following screenshot. As
    expected, these are not all of the applications that are present on the device;
    rather, these are just the ones that the tool knows how to parse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49408e34-8b84-4cd5-8764-a977cde19a72.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of applications parsed by Oxygen Forensic Detective on an Apple device
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will analyze some of the widely used chat applications.
  prefs: []
  type: TYPE_NORMAL
- en: Chat applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chat applications are among the most common applications on the market. These
    applications provide users with the ability to chat or call outside the standard
    services offered by the network service provider. These apps may often be more
    secure compared to other apps. By secure, we mean that the apps may offer encryption,
    private profiles, private group chats, and more. Additionally, these apps enable
    the user to message or call others without the need for a data plan, as Wi-Fi
    provides all of the access that they need. Facebook Messenger, WhatsApp, Skype,
    Tango, and Snapchat are some of the more popular applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parsing artifacts from chat applications is not always simple. Often, multiple
    tools and methods will be required to extract all of the data within them. Commercial
    tools may only parse a portion of the data, forcing you to learn how to examine
    and recover all data or miss evidence. In the following screenshot, Oxygen Forensic
    Detective is being used to parse chat messages from Tango on an Android device.
    Note that the message does not show the image in the table. However, this image
    can be *pieced* back into the message (notice the screenshot that is shown with
    an arrow pointing to the message to which it belongs), to provide an overall picture
    of what was being shared in a conversation. This was a manual process and was
    not performed by the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c930b1ea-e278-4655-9f7d-8740d267df75.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of piecing application chat logs back together
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a look at GPS apps.
  prefs: []
  type: TYPE_NORMAL
- en: GPS applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most users branch out from their standard phone apps for GPS support. This
    includes getting directions to locations and obtaining maps for areas of interest.
    Common GPS applications include Waze and Google Maps. Waze goes beyond just providing
    directions, as it also alerts the user to road hazards, traffic, and police officers
    that are to be found along the route they are driving:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccc15cc6-3637-4f76-928b-14f0ddcd735a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Waze application
  prefs: []
  type: TYPE_NORMAL
- en: Other applications that store location information include Twitter, Instagram,
    Facebook, and Foursquare. These applications enable a user to alert friends and
    followers to their location when they create a post or share an image or video.
    All of these transactions are tracked within the app. Understanding this is key
    to uncovering additional artifacts that are not reported by your forensic tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'When examining location information from GPS applications, it is best to assume
    that you need to manually examine the databases and preference files that are
    associated with that application. We recommend using your forensic tool to triage
    the data on the device and then dive deeply into the artifacts, which will be
    discussed later in this chapter. An example of Waze being parsed by UFED Physical
    Analyzer can be found in the following screenshot. Here, we can see that the user
    had 5 favorite locations, 74 mapped locations, and 70 recent directions. All of
    this information must be manually verified if it pertains to the investigation.
    This is because the tool cannot determine whether the user typed the address,
    whether it was suggested, or whether the user even traveled to that location.
    Proper skills are required by you to tie a user to a specific location, and this
    takes more than a forensic tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebd2ec73-72a1-41ba-bf0c-5be1d329e63f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Waze application in UFED Physical Analyzer
  prefs: []
  type: TYPE_NORMAL
- en: We will now analyze some of the popular secure messaging apps.
  prefs: []
  type: TYPE_NORMAL
- en: Secure applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If data is secure and self-destructing, did it ever even exist? Ignore the claims
    of data retention and hunt for that data, as these apps often make claims that
    are simply untrue. Although applications are designed with security in mind, updates
    are released quickly and quality assurance checks may not be strong enough to
    catch everything. On occasion, you will find an app with an encrypted or non-existent
    database, but the file includes a journal, write-ahead logs, or shared memory
    files that contain portions of chats that were supposed to be encrypted. In addition
    to this, the user can save media files that are shared, take screenshots of conversations,
    and do much more. Often, you may uncover the images, audio, and video files that
    were shared and supposed to be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Some popular secure messaging applications include Telegram, Wickr, and Signal.
    Some of these are encrypted, where nothing is recoverable. However, this all depends
    on the device, the OS running on the smartphone, and the version of the app. The
    security level of these apps is publicly advertised, but again, take this with
    a grain of salt. You should always assume that there could be a vulnerability
    in the app that may provide you with access forensically. Dig for this evidence!
  prefs: []
  type: TYPE_NORMAL
- en: Financial applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications that utilize financial information, such as credit card information
    and personal banking, are required to be encrypted and secure. iOS devices will
    not acquire these apps without an Apple ID and password. Even if you have the
    user's Apple ID and password, the data extracted should still be encrypted. Some
    examples of financial applications include Google Pay, Microsoft Wallet, PayPal,
    Apple Pay, and in-app purchases. When you examine a device, you may see that the
    app was installed with the associated application metadata, but account information
    and transactions will not be accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Social networking applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Commercial support for social networking applications is strong as they are
    the most popular apps downloaded from app stores. These applications allow users
    to make posts, share locations, chat publicly and privately, and essentially catalog
    their lives. Common social networking applications include Facebook, Twitter,
    and Instagram. Often, users will enable one app, such as Instagram, to have access
    to Facebook and Twitter so that posting is seamless. Hence, when examining devices,
    the user may find multiple copies of the same file or conversation due to the
    sharing that takes place between apps.
  prefs: []
  type: TYPE_NORMAL
- en: When examining these apps with commercial tools, it is common for chats and
    contacts to be parsed, meaning that other data may be overlooked. Again, this
    means you must look at the data dump to ensure that nothing is missed. As an example,
    we are going to take a look at Twitter. This application stores a lot of information
    that may require more than one tool to parse. Additionally, the user may have
    to manually examine the database files to ensure that all artifacts have been
    recovered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what the tool was able to extract. As stated several
    times in this book, start with what the tool is telling you is installed, and
    then formulate keywords and methods to dig deep into the filesystem. We can see
    the user account information for Twitter, as well as the file path where this
    data is being extracted, in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a888cff6-5849-4f5b-a9dd-de45d0032ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: Twitter as parsed by Magnet AXIOM
  prefs: []
  type: TYPE_NORMAL
- en: 'The next logical step is to view what the tool can tell you about the application
    and how it was used. Magnet AXIOM provided the following information for Twitter
    account usage. Note that both public tweets and private messages (DMs) are recovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d1b1bb4-aec4-4736-ba9b-89758f31e1b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Twitter usage by Magnet AXIOM
  prefs: []
  type: TYPE_NORMAL
- en: After examining what was parsed by the tool, the database files should be examined
    to ensure that nothing was missed. This is not always simple, as each account
    and function may have a unique database. By function, we mean that contacts may
    be stored in one database while chats and account information are stored in another.
    Once you become more familiar with common applications, you will know where to
    look first.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see all of the databases that are associated
    with Twitter. Again, start with what you know and dig deeper:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18ddd4ee-fc75-447a-a810-1934b38a18e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Twitter databases containing user activity
  prefs: []
  type: TYPE_NORMAL
- en: Each database may contain unique data that can be parsed for additional artifacts.
    These applications also contain unique `user_id` values, which can be used as
    keywords to search for other devices with traces of communication within an investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom queries can be written to parse Twitter databases of interest. A good
    example of how to do this is shown as follows. This query is specific to parsing
    Twitter contacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have looked at various kinds of third-party apps and how tools can
    aid an investigator in extracting the data. We will now look at some of the fundamental
    concepts that will help an investigator while analyzing the data.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding versus encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The terms *encoding* and *encryption* are used so frequently when discussing
    applications and smartphone data that they are often confused. Encoding is essentially
    the process of obfuscating a message or piece of information to appear as raw
    code. In some cases, the goal of encoding is to make the data unrecognizable to
    the computer or the user. In reality, the primary goal of encoding is to transform
    the input into a different format using a publicly available scheme. In other
    words, anyone can easily decode an encoded value. Encryption, however, transforms
    the data using a key to keep its content confidential. So, encrypted text can
    only be reversed if you have the key.
  prefs: []
  type: TYPE_NORMAL
- en: Most applications claim that they encrypt data or that the data is never saved
    to disk. While this is true for some, most are simply encoded. Encoding options
    can vary, but the most common option for smartphone data is `Base64`. Messaging
    apps often rely on `Base64` encoding to make the data appear to be hidden or *safe*.
    A common artifact of `Base64` is the padding of the data with `**=**` when the
    encoded bytes are not divisible by three.
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago, Oxygen Forensics and Autopsy were two of the few tools that
    supported the decoding of `Base64` payloads from applications derived from smartphones.
    For these tools to parse the data, they must support the application containing
    the encoding. Currently, MSAB, UFED Physical Analyzer, and Magnet IEF provide
    `Base64` decoding support.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `Base64`-encoded messages is shown in the following screenshot.
    This data is from the Tango chat application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f655051e-181e-4305-b4c4-6a01de20cf84.png)'
  prefs: []
  type: TYPE_IMG
- en: Base64-encoded Tango messages
  prefs: []
  type: TYPE_NORMAL
- en: 'Encryption is a bit more difficult as the app itself may not even provide access
    to the encrypted data. For example, you may find that the database directory or
    the cells containing the encrypted data are simply empty. Occasionally, you will
    have access to the encrypted blobs within the databases, but this data cannot
    always be decrypted. Again, when you face encrypted data, look elsewhere. Have
    you examined the journal and write-ahead logs? Have you examined the cache and
    media directories? Have you examined the SD card? These are common questions you
    will often have to ask yourself to ensure that you are not relying on your forensic
    tools too much and that you are covering your bases to ensure nothing is overlooked.
    As we''ve explained, start with what you know. We know that the cache and database
    directories store user data, so this is a great place to start your manual examination,
    as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1f11126-50f7-40e9-9b59-7b876f339b45.png)'
  prefs: []
  type: TYPE_IMG
- en: Data storage locations for applications
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will cover how applications store their data within
    the device and the significance of various types of storage options.
  prefs: []
  type: TYPE_NORMAL
- en: iOS, Android, and Windows Phone application data storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Almost all applications rely on SQLite for data storage. These databases can
    be stored internally on the device or the SD card for relevant phones. When SQLite
    is used, temporary memory files are commonly associated with each database to
    make SQLite more efficient. These files are **rollback journals** (**JOURNAL**), **Write-Ahead
    Logs** (**WAL**) and **Shared Memory** (**SHM**) files. These files may contain
    data that is not present in the SQLite database. We can see several WAL and SHM
    files associated with various WhatsApp database files in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc0d34c6-f5a1-4571-b8d5-4717dc3718e3.png)'
  prefs: []
  type: TYPE_IMG
- en: An SHM file and WAL example
  prefs: []
  type: TYPE_NORMAL
- en: In addition to SQLite databases, other devices rely on Plist, XML, JSON, and
    DAT files for application data storage, account data storage, purchase information,
    and user preferences. These files will be discussed in the Android, iOS, and Windows
    Phone sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: iOS applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apple relies on SQLite and Plist as common locations for application data storage.
    On occasion, JSON files will be used for application data. Examining applications
    recovered from an iOS device can be overwhelming. We suggest you start with what
    you know and what your tool is telling you. Examine the Installed Applications
    listed by your tool of choice. From here, go directly to the applications directory
    and ensure that nothing is being overlooked. When a user deletes an app, the databases
    often remain and the link to the installed application is simply broken. Examining
    all areas of the iOS device will prevent you from missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b5a1602-8c76-4f5f-a509-a4a6773c3430.png)'
  prefs: []
  type: TYPE_IMG
- en: Installed applications on an iPhone
  prefs: []
  type: TYPE_NORMAL
- en: 'After examining the installed applications, search the `Library` and `Documents`
    directories for any relevant Plist files that may contain application artifacts.
    Finally, examine the `Media` directory on the iPhone as well as the one associated
    with the app to recover additional artifacts, such as shared photos, videos, audio
    files, and profile pictures. In the following screenshot, we are examining the
    `Media` directory associated with the WhatsApp application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa9b77c5-5c14-4590-84cb-67041f507fd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Application data on an iPhone
  prefs: []
  type: TYPE_NORMAL
- en: We will now take a look at data storage in Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android devices rely heavily on SQLite for application storage. The preference
    files for each application are often in the DAT or XML file formats. More so than
    an iOS device, examining applications on an Android device may be one of the most
    tedious tasks. This is due to the various locations where data may be stored.
    The best place to start is with a tool that will provide a listing of what is
    installed on the device. Next, go to the subdirectories off of the `/Root` directory.
    Remember, these applications may possess unique names and may be difficult to
    locate.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have to research the application to gain a better understanding of
    the filenames that are associated with each of them. The following screenshot
    is an example of application directories on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32bdadd7-354e-42df-bae9-7abdbb5b3e17.png)'
  prefs: []
  type: TYPE_IMG
- en: Application data on an Android device
  prefs: []
  type: TYPE_NORMAL
- en: Each of these application directories will contain a lot of data to examine.
    We recommend starting with the `Databases` and `Cache` directories and then expanding
    your analysis to other locations on the device. The next locations to examine
    include the `Media` and `Cache` partitions. If the data appears to be missing
    or is claimed to have been deleted, do not forget to examine the `Downloads` directory
    on the device and SD card.
  prefs: []
  type: TYPE_NORMAL
- en: 'Application data can exist in several locations in the `Media` directories.
    Using a tool, such as UFED Physical Analyzer, which provides keyword-searching
    capabilities spanning beyond parsed items, will really help to locate artifacts
    pertaining to specific applications. We are looking at the large amount of data
    stored in the `Media` directory on an Android device in the following screenshot.
    This data is unique from what is stored in the application directories that were
    discussed previously. Each location needs to be thoroughly examined to ensure
    that nothing is missed. It is important that you take what you learned in previous
    chapters to analyze Android application data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/434b512d-f3fa-454e-bac4-11c15e28b915.png)'
  prefs: []
  type: TYPE_IMG
- en: Unique application data in the Media directory
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at apps installed on Windows Phone and their acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Phone applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications found on Windows Phones are no different from those found on iOS
    and Android devices. SQLite is the most common format used for data storage. However,
    not all devices allow for SQLite files to be stored internally on the phone. For
    these devices, all application data will be found on the SD card. Some may view
    this as lucky because it saves us from having to examine several locations on
    the device, but the SD card and the applications themselves may be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Where possible, it is best to remove the SD card and acquire it using a forensic
    tool. When this is not possible, the next best method would be to try to acquire
    the SD card through the phone using a forensic tool. Again, this will often result
    in missed data. By the way of a final effort, live analysis can be completed by
    mounting the device and using Windows Explorer to view the applications stored
    on the device and SD card, as discussed in [Chapter 12](27f60ffc-e0b7-4aa1-8737-541ca9569908.xhtml),
    *Windows Phone Forensics*.
  prefs: []
  type: TYPE_NORMAL
- en: Forensic methods used to extract third-party application data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all commercial tools will attempt to support the extraction of third-party
    applications. We recommend that you test your tools thoroughly and often, if you
    rely on tool output for your investigative results. This is because the apps are
    updated so frequently that it is nearly impossible for the tools not to miss something.
    You must learn about the applications, how they work, and how the devices store
    data for each app. We strongly recommend that you use your tool to triage the
    case and then dive into the data to manually extract anything that the tools miss.
    Make sure that you only include factual data in your forensic report and not everything
    that the tools parse, as the tools cannot decipher the difference between a device
    and human creation. Only a trained examiner can do this with confidence.
  prefs: []
  type: TYPE_NORMAL
- en: Commercial tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen in this book, there are many tools that can handle the job
    of smartphone forensics. However, there are a few that really shine when it comes
    to parsing application data. Magnet AXIOM, Oxygen Forensic Detective, and UFED
    Physical Analyzer are a few that do a good job of recovering data from the application
    categories discussed in this chapter. We will take a quick look at how to leverage
    each of these tools to parse application data. Keep in mind that these tools will
    not find every application and will not parse all data for applications.
  prefs: []
  type: TYPE_NORMAL
- en: Oxygen Forensic Detective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Oxygen Forensic Detective can be used to examine application data. For this
    example, we are assuming that acquisition is complete and we are simply attempting
    to analyze the data. Note that Oxygen is capable of acquiring and analyzing smartphones.
    In this example, we acquired the device with Cellebrite UFED and analyzed it with
    Oxygen. To load a data dump of a device and examine its application artifacts,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Oxygen Forensic Detective.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Import File option and choose your image. Multiple image formats
    are supported for ingestion into Oxygen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After parsing is complete, start examining the parsed applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/642330ba-f606-4cab-955d-3118c5f06be6.png)'
  prefs: []
  type: TYPE_IMG
- en: The Oxygen Forensic Detective application view
  prefs: []
  type: TYPE_NORMAL
- en: Next, start examining applications of interest by clicking on the application
    and examining all of the associated files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you select the application, you will be presented with the data that was
    parsed and the full file path from where the data was extracted. Use this path
    to manually verify the findings. We are looking at the Pinterest application in
    the following screenshot. Note how the container, file, and table of interest
    are provided and hyperlinked for the user. The tool is even encouraging you to
    dig deeper and verify the findings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a23b2beb-e972-4f38-8ab0-5f52a70f71f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Oxygen Detective Pinterest example
  prefs: []
  type: TYPE_NORMAL
- en: Oxygen Detective has built-in features for keyword searching, bookmarking, and
    reporting. In addition, the SQLite Database and Plist Viewer will provide you
    with a method for examining relevant application data
  prefs: []
  type: TYPE_NORMAL
- en: Report all account information, chats, messages, locations, and any other data
    of interest, as this provides relevance to your investigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next tool that we will be looking at is Magnet AXIOM.
  prefs: []
  type: TYPE_NORMAL
- en: Magnet AXIOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnet AXIOM has been known as one of the leaders in internet and application
    parsing for digital media. It is just as strong with mobile devices. Again, one
    tool cannot do the job, but AXIOM has proven to be the strongest and parses the
    most applications from Android, iOS, and Windows Phones. To use AXIOM to examine
    application artifacts, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch AXIOM, create a new case, and then select MOBILE (note that if MOBILE
    is grayed out, you need to obtain a license that provides mobile support from
    Magnet Forensics):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f5feaea-1537-44b5-837b-babc73d2f642.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the evidence source
  prefs: []
  type: TYPE_NORMAL
- en: Select LOAD EVIDENCE and navigate to your image file. More than one image can
    be loaded and parsed at the same time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select GO TO ARTIFACT DETAILS and determine what you want to parse. We recommend
    selecting all of the apps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b455f982-2e6f-4d23-b930-b48af873c7b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Magnet AXIOM supported artifacts
  prefs: []
  type: TYPE_NORMAL
- en: Select ANALYZE EVIDENCE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once complete, you can use Artifacts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19788e19-81b0-4f25-87f6-53dbbe9618ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Application Artifacts in Magnet AXIOM
  prefs: []
  type: TYPE_NORMAL
- en: The first step in the examination is to review what has been parsed by AXIOM.
    In the preceding screenshot, we can see that Telegram was parsed. Start your examination
    in the most relevant location. For example, if you are looking for Telegram Chats,
    go right to that location and start examining the artifacts. Note that Messages
    and Chats are pulled into two different categories. This is common when private
    messaging is used. All relevant application containers should be examined. Additionally,
    AXIOM provides the full file path from which the data was recovered. Use another
    tool to navigate to this file for verification and manual examination.
  prefs: []
  type: TYPE_NORMAL
- en: AXIOM also provides logical keyword search (it will search what it can parse
    and nothing else), bookmarking, and reporting. Make sure that you only report
    factual application artifacts and incorporate these into your final forensic report.
  prefs: []
  type: TYPE_NORMAL
- en: UFED Physical Analyzer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Physical Analyzer is one of the most well-known mobile forensic tools on the
    market. This tool is one of the best platforms to manually conduct an examination
    in addition to leveraging the data parsed by the tool. For application analysis,
    Physical Analyzer is good at parsing chats and contacts for each supported application.
    For data that is not parsed, Physical Analyzer provides an analytical platform
    that enables the user to browse the filesystem to uncover additional artifacts.
    Keyword searching is robust in this tool and is capable of searching raw hex as
    well as parsed data. In addition, a SQLite viewer is included.
  prefs: []
  type: TYPE_NORMAL
- en: 'To conduct a forensic examination of application data in Physical Analyzer,
    perform the following steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Physical Analyzer by double-clicking on the UFED shortcut image file
    or by double-clicking the tool icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the image file and wait until parsing completes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examine the parsed artifacts, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a0d3c0b-ce5a-4147-8d02-8c50eba95407.png)'
  prefs: []
  type: TYPE_IMG
- en: Data parsed by Physical Analyzer
  prefs: []
  type: TYPE_NORMAL
- en: We recommend examining what is parsed and referring to the hyperlink of where
    the data is being extracted. Navigate to this path and then examine the entire
    application directory.
  prefs: []
  type: TYPE_NORMAL
- en: To find the application directory, leverage built-in keyword searching capabilities
    to aid in the investigation. Remember, you may have to conduct research to determine
    the filenames associated with the app if this is not apparent.
  prefs: []
  type: TYPE_NORMAL
- en: Open source/free tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those on a budget, it is possible to examine application data from smartphones
    using open source solutions and cheap tools. These solutions are more difficult
    to use, and they are often not the answer for those new to forensics who need
    the assistance of a tool in data extraction and analysis. Examining application
    data is tedious, and if you do not know where to look, you will likely need to
    spend some money to get a head start. Tools such as Andriller can be purchased
    for around $500\. While this is not free, it's also not $10,000, which is what
    some of the other commercial tools cost. In the following section, we will cover
    a few of our favorite tools that are useful in parsing application data from smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Autopsy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autopsy is one of the best tools for filesystem examinations. Unfortunately,
    iOS parsing is not provided in Autopsy, but it still may be useful for filesystem
    images. Autopsy can be downloaded from [http://sleuthkit.org/autopsy/](http://sleuthkit.org/autopsy/).
    When using Autopsy, the Android Analyzer module will parse some application data
    from the device. Let's look at how to use Autopsy for Android image analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Autopsy, download the software and install it on a Windows machine and
    follow these instructions. Make sure that you are always using the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Autopsy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b909366-f2b9-4eb0-bdcc-8a9864017ded.png)'
  prefs: []
  type: TYPE_IMG
- en: Autopsy case creation
  prefs: []
  type: TYPE_NORMAL
- en: Select Next and then click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your image file and select Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the modules that you wish to run. Keyword Search and Android Analyzer
    will be the most fruitful for an Android device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2a81c28-ed26-43f0-98c0-cdb8ae6fe76a.png)'
  prefs: []
  type: TYPE_IMG
- en: Autopsy module selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Ingest Modules are tools built into Autopsy that can be run when the case has
    started or at any point afterward. The default modules in this version of Autopsy
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recent Activity: This extracts recent user activity such as web browsing, recently
    used documents, and installed programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hash Lookup: This identifies known and notable files using supplied hash databases,
    such as a standard NSRL database. It also allows importing custom hash databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'File Type Identification: This matches file types based on binary signatures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Archive Extractor: This extracts archive files (`.zip`, `.rar`, `.arj`, `.7z`,
    `.gzip`, `.bzip2`, and `.tar`). It automatically extracts these file types and
    puts their contents into the directory tree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EXIF Parser: This ingests JPEG files and retrieves their EXIF metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keyword Search: This performs file indexing and periodic search using keywords
    and regular expressions in lists. It allows the loading of custom keywords/lists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Email Parser: This module detects and parses `mbox` and `pst`/`ost` files and
    populates email artifacts in the blackboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extension Mismatch Detector: These are flag files that have a non-standard
    extension based on their file types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E01 Verifier: This validates the integrity of E01 files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android Analyzer: This extracts Android system and third-party app data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interesting Files Identifier: This identifies interesting items, as defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, you can install third-party modules for Autopsy. Some of them are really
    useful for Android forensics. A good example is Parse SQLite DB by Mark McKinnon.
    This module parses any SQLite database it finds and imports it into the extracted
    content. This and other modules can be downloaded from this GitHub: [https://github.com/markmckinnon/Autopsy-Plugins](https://github.com/markmckinnon/Autopsy-Plugins)
  prefs: []
  type: TYPE_NORMAL
- en: 'Autopsy provides access to filesystem data faster than any commercial or open
    source tool available. Knowing where to go from there is the hard part. So, again,
    start with anything that is in the extracted content and then dive into the filesystem
    to examine the files discussed in this book and any relevant application data,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9777a725-0ae7-4458-ac1f-2982a5ce00f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Browsing the filesystem with Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: Once you have identified applications of interest, start with what is parsed
    and then examine the relevant database, cache, and preference files. Autopsy includes
    basic SQLite Viewer that can be used for triage purposes. If you need to run queries,
    we recommend using DB Browser for SQLite or browsers included in commercial products,
    for example, Belkasoft Evidence Center, especially if you want to analyze data
    from free lists and unallocated space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Analyzer can decode some artifacts automatically, for example, contacts,
    calls, and SMS. The following screenshot shows the results of the decoded SMS
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee4af3a4-2329-486f-9b48-ca21b9216f06.png)'
  prefs: []
  type: TYPE_IMG
- en: SMS messages decoded by Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will be looking at some more methods of extracting data.
  prefs: []
  type: TYPE_NORMAL
- en: Other methods of extracting application data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the easiest ways to parse application data is to create custom SQLite
    queries and Python scripts to parse data of interest. We have discussed several
    suggestions and examples of queries and scripts throughout this book. Python is
    one of the best solutions because it is free and we have full access to its libraries.
    One thing to keep in mind is that our scripts have to be updated frequently to
    keep up with application updates. Also, make sure that your encoding schemas are
    correct to prevent application artifacts from being missed or not interpreted
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to Python scripts, free parsers that support application extraction
    already exist. WhatsApp Extract is a free tool for both Android and iOS that will
    extract WhatsApp application data from devices. Often, this free tool will extract
    more data than the commercial solutions, depending on the permissions the user
    allocated during installation. Others, such as Mari DeGrazia ([http://az4n6.blogspot.in/p/downloads.html](http://az4n6.blogspot.in/p/downloads.html)), Adrian
    Leong ([https://github.com/cheeky4n6monkey/4n6-scripts](https://github.com/cheeky4n6monkey/4n6-scripts)),
    Sarah Edwards ([https://github.com/mac4n6](https://github.com/mac4n6)), and Alexis
    Brignoni ([https://github.com/abrignoni](https://github.com/abrignoni)) have developed
    scripts to parse applications, recover deleted data from SQLite free pages, decode
    `Base64`, and more. We recommend using what is already available before developing
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about how to successfully parse and extract data
    from popular third-party apps. Many apps are not what they claim to be. Never
    trust what you read about apps, as quality assurance testing across apps is not
    consistent, and we have determined several vulnerabilities and security flaws
    over the years that provide us with methods of piecing application data back together.
    Also, application updates will change the way we need to look at the data found.
    Understanding each smartphone and how it stores application data is the first
    step toward successfully examining applications on smartphones. Knowing that updates
    may change data locations, encoding, and encryption, as well as how your tool
    functions, is one of the hardest concepts for examiners to grasp. It is your job
    to learn the capabilities of the application to uncover the most data from the
    mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how an application works is hard enough without having to consider
    how to extract artifacts. As you have read in this book, there are many ways to
    parse data from smartphones. One tool is never enough, and the reality is that
    mobile forensics can be expensive. We hope that we have provided you with a practical
    guide that teaches you how to acquire and analyze artifacts that are recovered
    from smartphones. Take what you've learned and apply it immediately to your methods
    to conduct mobile forensics or use it to make you more prepared in your next job.
    Remember that practice, testing, and training will make you better at your job
    and will help you to perfect the art of mobile forensics.
  prefs: []
  type: TYPE_NORMAL
