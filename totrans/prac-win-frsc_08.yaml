- en: Chapter 8. Event Log Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about Event Logs in the Microsoft operating system.
    We will discuss why it is important to cover issues related to event logs for
    successful investigation. We will consider differences between event logs depending
    on the MS Windows version.
  prefs: []
  type: TYPE_NORMAL
- en: Event Logs - an introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an operating system works, a lot of events take place in the system. The
    range of these events is very large and a majority of them can be registered in
    the system. To register events on the system, there is a powerful mechanism called
    **Event Logging**. It presents a standard centralized way, which the operating
    system and applications use to record important information coming from software
    and hardware. An event can be something that occurred in the system or in some
    application, and it is necessary to notify the user. Information about every event
    should be recorded.
  prefs: []
  type: TYPE_NORMAL
- en: Events are collected and stored by the Event Logging Service. This keeps events
    from different sources in event logs. Event logs provide chronological information,
    which allows us to determie problems in the system environment and security and tracks
    users' activities and the usage of system resources. However, the kind of data
    that will be actually recorded in an event log is dependent on system configuration
    and application settings. For example, security event logs is turned off on old
    Windows operating systems by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Event logs provide a lot of data for investigators, and they can help with
    answers for the following issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What happened**: Some items of the event log record, such as Event ID and
    Event Category, help get information about a certain event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When**: Timestamps are a key part of the event log and they provide the temporal
    context for an event. In a system where are a lot of events are generated, the
    timestamps could be very useful to narrow the timeframe of the search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Who**: Which users are involved. All actions that are executed on the Windows
    operating system are committed in some account contexts. Some actions are committed
    not by the normal user but by the operating system, and this will be done in the
    system''s account context, for example, System or Network Service. We can identify
    who is the user behind a certain event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What systems are involved**: In the network environment, event logs usually
    have a lot of references to accounts from remote systems. Originally only the
    NetBIOS of workstations were recorded in event logs. However, it complicated the
    tracking of involved systems. In systems after Windows 2000, IP addresses are
    also kept in event logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What resources are accessed**: The Event Logging Service can be configured
    to store very granulated information about various objects on the system. Almost
    any resource of the system can be considered as an object and, thereby, we can
    detect any requests for unauthorized access to resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event Logs system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've figured out that Windows event logs contain a lot of useful information
    and that they can be very valuable resources to detect security incidents, let's
    see where event logs can be found on different versions of MS Windows.
  prefs: []
  type: TYPE_NORMAL
- en: In the evolution of the MS Windows process, even the Event Logs system was changed.
    It originally appeared in MS Windows 3.1\. Some minor changes occurred in every
    Windows version, but the names of event logs files and paths remained the same
    until Windows 2003\. Initial versions used the .evt binary format. This format
    is not suitable to search for strings or to browse for information without special
    software. Also, these logs have size limitations in results; therefore, new upcoming
    events could rewrite old stored data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before Vista, the event logs were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: However, starting from Vista and Server 2008, significant changes were implemented
    in the event logs structure, types, and locations on the filesystem. The original
    version of the Event Logs system was a heavy load for system performance. A new
    version was developed to fix some issues related to performance too. The new .evtx
    format of event logs was introduced. However, the most significant changes touched
    the structure of the event logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Vista, many new types of event logs were added, their total number became
    more than 70\. These event logs can be found at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, the new Event Logs system allows sending events to a remote collector,
    so it''s necessary to keep in mind that additional event logs can be found on
    another server. Note that the presented path for the storage of event logs is
    the default value and it may be changed through the registry key:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HKLM\SYSTEM\CurrentControlSet\Services\Eventlog\Application`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HKLM\SYSTEM\CurrentControlSet\Services\Eventlog\System`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HKLM\SYSTEM\CurrentControlSet\Services\Eventlog\Security`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Initially in MS Windows, three types of event logs existed:'
  prefs: []
  type: TYPE_NORMAL
- en: System
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other extra event logs can be united in the Custom group. Vista, Win7, Server
    2008, Win 8, and Server 2008 now have many additional event logs, including specialized
    event logs for some processes, such as PowerShell, Task Scheduler, and Windows
    Firewall.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what kind of information is recorded in various types
    of event logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Log**: This records events based on local and group policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Log**: This records events from the operation system and its components,
    such as failure of a service on the boot system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Log**: This records events from applications, such as failure
    of access to a file or an antivirus notification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directory Service**: This records events from Active Directory and some services
    based on it. It is a standard event logon Domain Controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Replication Server**: This records events about updates between Domain
    Controllers. It is a standard event logon Domain Controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS Server**: This is a standard event logon server where DNS server software
    is running. It records events about the management of zones, and the start and
    stop of a DNS server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main reason to dedicate a separate directory for new event logs is their
    large number. As we already mentioned, it exceeds 70.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new event log can be divided into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setup**: This is a new event log, in which information about Windows security
    updates, patches, hotfixes are stored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forwarded Events**: This is also a new event log to record events coming
    from remote computers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications and Services**: This group includes all other new event logs,
    which were introduced in Windows 2008'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Event Logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The old Event Log system had some issues related to performance. In that version,
    the event log needed to be completely loaded into memory. Sometimes, just for
    one log, 300 MB of RAM had to be allocated. This behavior affected system performance
    very much, and it forced administrators to turn off event logging. In the new
    Event Log system, every event log file has a small header, which is followed by
    64Kb chunks. Now, only the currently used chunk will be loaded into memory. This certainly
    improves performance and reduces resource usage. Also, an increased likelihood
    of logging will be enabled. Almost all event logs could prove to be useful during
    an investigation, nonetheless, most answers for the questions that we have in
    forensics can be found in Security Event Log. System and Application Event Logs
    are more useful for system administrators for troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Security Event Logs record audit events whenever they occur in the system or
    the user activity which is covered by local or group audit policies. They could
    present details about various user activities, including user authentication (logons,
    run as commands, and remote access) and user activities after logons. Using privileges
    and object auditing could be a trigger event that shows access to protected files,
    which user accessed it, and the date and time of when it happened. An audit allows
    applying security settings to itself so that all modifications of audit policy
    can be traced.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that security policies may register events with success and failure
    results. It allows adjusting policies and records only data of interest. From
    an investigator's point of view, we want to log as much data as possible. This
    could create additional load to system performance, and it requires significant
    disk space to store information. This is not possible in many environments. For
    some nonforensic professionals, it is not obvious why successful and failed attempts
    to log on should be recorded and how it can help detect a brute force attack.
    Also, it is possible to set additional audit policies for a specific user with
    a built-in `gpedit.msc` snap-in. So, we can set a more detailed audit for critically
    valuable users.
  prefs: []
  type: TYPE_NORMAL
- en: Due its nature, Security Log has more protections than System and Application
    event logs. Starting from Windows XP SP2, the API for applications that send events
    to the Security event log was deprecated, excluding the Windows Security Service.
    Now this possibility is available only for Local Security Authority System Service
    (LSASS) because it is responsible for applying security policies in the system.
    Moreover, only users with administrator permissions can review, export, or clear
    the Security event log.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what kind of information is stored in the Security event
    log:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account Logon**: These are events that are stored on the system and which
    authorize the user. So, it could be workstation or Domain Controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account Mgmt**: This is account maintenance and modification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logon Events**: This is every logon or logoff event on the local system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directory Service**: These are attempts to access the objects of the Active
    Directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object Access**: This is access to objects which have their own access control
    list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy Change**: These are modifications of users'' rights and audit policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privilege Use**: This has each case of an account exercising a user right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process Tracking**: This stores the start, stop process, and objects access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Events**: This is the start and shutdown of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Security Event Categories give us understanding about what kind of events
    can be interesting for us. For every category, we can set an audit policy in the
    values No Auditing, Success, Failure, or Success and Failure both. Every time
    an event is recorded in the event log file, it is marked by the category to which
    it belongs. When the audit is turned off, we will not see any information about
    such types of events in the event log file.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most disappointing things during an investigation is hitting a dead
    end. This often happens because we lack event logs. Some investigations, such
    as intrusion and event log analysis, are very important to track the activities
    of the intruder. In others, such as employee misuse, they present extra artifacts,
    which prove the case with significant information, such as time of log on, installation
    programs, and access to specific files. Unfortunately, audit policies don't have
    rules and event logs don't contain useful information. So, it is important to
    configure an audit policy, such that Windows records only what we need.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the settings on systems executing various roles could be different. Audit
    policies and the number of event logs turned on by default on Workstations, Servers,
    and Domain Controllers will differ. The Event Logs system on Windows 7 or Windows
    8 has minimal logs and it is turned off at all times on Windows XP and Vista by
    default. Due to the fact that Windows 7 and Windows 8 are becoming more and more
    common, we can expect more systems with Security, System, and Application event
    logs. It should be noted that in the corporate network, there are domain policies.
    Local policies will be rewritten by group policies and, thus, increase logging
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Many investigators mistakenly believe that server versions of Windows have good
    settings for event logging out of the box. However, similar workstations standard
    configuration of server have a minimal set of logged data.
  prefs: []
  type: TYPE_NORMAL
- en: From Windows 2008 onward, every event category is divided into a subcategory
    called **extended audit policies** . These detailed options were introduced to
    allow better control over events that need to be monitored by administrators.
    This became available in Windows 7 and later.
  prefs: []
  type: TYPE_NORMAL
- en: Event types give us reasons as to why an event was recorded into an event log
    file. Also, they can provide important information about the severity of the event,
    allowing the administrator to focus on more critical events.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following types of events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Error**: These are significant problems, such as loss of data or functionality;
    for example, the server fails to load'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning**: These are not significant problems but they can be a problem in
    the future; for example, low disk space'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information**: These are successful operations of applications or services;
    for example, a service was started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Success Audit**: These are notifications that audited events completed successfully,
    for example, successful user logon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failure Audit**: These are notifications that the audited event did not complete
    successfully, for example, failed access to device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting Event Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When event logs are analyzed, the most common approach is to export logs and
    then review them on the forensics workstation. There are a few reasons for such
    an approach. Often, we need to analyze a few event logs (for example, System,
    Security, and Application) from several workstations and Domain Controller. So,
    it is very convenient to have all event log files in one place. Also, many forensics
    tools not enough good work with event logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main approaches to export event logs:'
  prefs: []
  type: TYPE_NORMAL
- en: Live systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of them have their own set of features; let's see what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Live systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While working with live systems, remember that event log files are always used,
    which creates some additional challenges. One way of exporting data from a live
    system is using Event Viewer. If you right-click on the event log file, the  **Save
    All Events As...** option will appear. Logs can be saved in various formats, including
    `.evtx`, `.csv`, `.xml`, or `.txt` . If you are concerned about possible log corruption,
    this is the safest way.
  prefs: []
  type: TYPE_NORMAL
- en: Another alternative for live systems is using FTK Imager so that you can mount
    the drive as a Physical Disk and export event log files. In practice, there may
    occur a situation when the event file is corrupted. However, it is still possible
    to analyze it. The MS Event Viewer may refuse to open such files. The situation
    with new `.evtx` format is a little bit better, as new file log corruption happens
    much more rarely, and MS Event Viewer is more tolerant of this format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MS Resource Kit includes the elogdump utility, which allows keeping containment
    of the event log from a local or remote computer. The PsLogList utility is the
    analog of elogdump with one difference: PsLogList allows logging in on a remote
    system and receives the message from the remote system in case the attempt failed.
    It is the best alternative to the live system, and it is a free tool from SysInternals.
    This command line tool has a lot of features. It can dump live event logs to `.csv`
    file, read, and output exported data in the native `.evt`/`.evtx` format, filter
    output and dump event logs from a remote system. By default, it outputs the system
    event log file.'
  prefs: []
  type: TYPE_NORMAL
- en: Offline system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Event logs are binary databases, so to review `.evt/.evtx` files, we need tools
    that can parse these formats. There are a few good free tools which allow converting
    binary format of event logs to human readable text formats.
  prefs: []
  type: TYPE_NORMAL
- en: TZWorks released `evtwalk` and `evtx_viewer` . Harlan Carvey wrote a few Perl
    scripts to parse event log files, and Andreas Schuster released `evtx_parser`
    .
  prefs: []
  type: TYPE_NORMAL
- en: Extraction of event logs from an offline system is often the last hope for investigators
    who encounter corrupted event logs, but this approach has some benefits. For example,
    there is data stored in event logs, access to which is difficult using standard
    log viewers. The most important one of these is the *number of records* in an
    event log file. The number of records is assigned sequentially to an event within
    the log file. So, a missed number will be a marker for manipulation with events
    in the event log. The best way to get access to this data is to extract the specific
    events and sort it with a database or spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TZWorks evtwalk tool can be used for both live and offline systems. For
    a live system, we can use the `-livesys` option; it will examine all the event
    logs on the host. The evtwalk tool will determine the version of operating system
    and scan the appropriate event log directory for that version of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: For offline analysis, when event logs are gathered as part of an investigation,
    the evtwalk tool can be invoked with `-pipe`. The `-pipe` option allows `evtwalk`
    to receive a separate path or filename per line as input and process each of them
    separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, one can use the built-in `dir` command along with some of its
    companion switches to get the desired result. The following is an example of using
    this option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `evtwalk` command can work with one or multiple event files specified with
    the -log option and is separated by the | character.
  prefs: []
  type: TYPE_NORMAL
- en: Another unique feature of the evtwalk tool is its ability to output data to
    the timeline format with the  `cvsl2t` (log2timeline) and  `bodyfile` (mactime)
    options. Due to this fact, we have the ability to combine event log activity with
    filesystem and registry activity that allows determining what happened on the
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of displaying all the records that are presented in an event log, it
    is possible to filter a certain class of event data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For evtwalk, the following report categories are available:'
  prefs: []
  type: TYPE_NORMAL
- en: Password changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clock changes or updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User logon and logoff events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System start and stop times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User credential or permission changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An analyst may want their own report template. In this case, they can determine
    the report template and specify it using the cmdfile option. It should be noted
    that if you want to run evtwalk on a live system, you should run it with administrator
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Evtx_view is the GUI version of the evtwalk tool. This is a good tool to exactly
    understand how events are recorded and what data is available. Both tools have
    unique features, allowing them to filter specific types of events according to
    the action which they represent. Investigators can make a request to report only
    particular events, for example logons, password changes, times of modifications,
    USB usage, and so on. TZWorks tools are nice, but they are not free.
  prefs: []
  type: TYPE_NORMAL
- en: Event Viewer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One tool that you can use for free is Event Viewer. One of the most interesting
    features of Event Viewer is that you can review events from remote PCs in a corporate
    network. This could be a good alternative to usage of Remote Desktop. This may
    be very useful in a live response when it is necessary to check something specific
    very fast. For example, if we need to know whether the compromised user account
    was used or whether some malware-specific service was started. The ability to
    have a quick answer for critically important questions has big value for effective
    incident response:'
  prefs: []
  type: TYPE_NORMAL
- en: To review event logs from other computers, right-click on Event Viewer (Local)
    and choose Connect to Another Computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Another Computer, input IP Address or Hostname, and click on OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting from Windows 7, Event Viewer allows specifying different accounts for
    remote authentication (similar to "run as").
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that when your review event logs on a live system, all events with
    your activities will be recorded to event logs, including remote logons executed
    for review of logs. You may also see new 4624, 4776, 4769, and 4674 events in
    event logs, depending on network settings and audit policies.
  prefs: []
  type: TYPE_NORMAL
- en: The built-in Windows Event Viewer has significant disadvantages. It is very
    tedious to review a lot of events in the Event Viewer interface. There is no ability
    to load a few logs from different systems and to filter them and search in parallel.
    Besides this, Event Viewer has strict requirements for the format of event log
    files. In practice, you may have corrupted files, and some unexperienced analysts
    may give up an analysis of event logs when they cannot open them with Event Viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Event Log Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One more utility for Event Log analysis is Event Log Explorer. This is event
    log management software, which works over built-in Microsoft tools. It provides
    all the features that are needed by analysts to quickly analyze event logs. It
    supports all the current versions of MS Windows and the `.evt` and `.evtx` formats.
    However, what is more important is that it works with corrupted files. It has
    two options:'
  prefs: []
  type: TYPE_NORMAL
- en: To open event logs with API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To open event files in direct parsing mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event Log Explorer allows opening a few event log files simultaneously and using
    an event to combine them. Moreover, it has rich filtering features, including
    access to the Event Description text field where significant forensics artifacts
    are. Also very useful is the feature of marking various Event IDs by different
    color. Event Log Explorer is free for personal use and costs around $100 for commercial
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Useful resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is not possible to describe all events in one chapter, so you can find out
    more information about events that you are interested in some internet resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are useful resources with information related to the event logs topic:'
  prefs: []
  type: TYPE_NORMAL
- en: A good resource of information about a lot of forensics topics is the SANS Reading
    Room ( [https://www.sans.org/reading-room/](https://www.sans.org/reading-room/)
    ). Here, are you can find many useful white papers and written analysts, students
    and forensics investigators. One of these is a white paper written by Russ Antony
    ([http://www.sans.org/reading-room/whitepapers/logging/detecting-security-incidents-windows-workstation-event-logs-34262](http://www.sans.org/reading-room/whitepapers/logging/detecting-security-incidents-windows-workstation-event-logs-34262)).
    It describes how useful Event Logs can be to detect anomalies in system and for
    investigations of security incidents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is impossible and also not necessary to remember all Event ID and error codes
    that are related to them. Fortunately, we have a few online resources with such
    information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A good place to search for information about events is MS TechNet ([https://www.microsoft.com/technet/support/ee/ee_advanced.aspx](https://www.microsoft.com/technet/support/ee/ee_advanced.aspx)).
    This resource contains a lot of information on various Event IDs for numbers and
    different MS operation systems and applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event ID.net ( [http://www.eventid.net/](http://www.eventid.net/) ) is another
    very good resource related to this topic. It contains useful information about
    different Event Logging issues.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ultimate Windows Security ([www.ultimatewindowssecurity.com](http://www.ultimatewindowssecurity.com/))
    contains databases which are supported and updated by the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the event log – an example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at a small example, how we can use the Event Log Explorer
    to analyze an event log. Assume that we have event log files from the analyzed
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: First, load the Security log. This displays all events relating to login, the
    creation of new accounts, and more. Let's try to display all the users who log
    in to the system. A login event has the 4,624 identifier. We can apply an Event
    ID = 4,624 filter. Note that we should adjust the time. Choose **Time Correction...**
    from View according to the offset from GMT on the forensics station. For instance,
    if you work on a system with GMT + 3, you need to input -3 to get time of events
    in the GMT time zone:![Analyzing the event log – an example](img/image_08_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can sort out user accounts. We see that we have an unusual user, `SYSTEMSERVICE`.
    Let''s filter all events with this account. We can filter by `SYSTEMSERVICE` in
    the **Description** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Analyzing the event log – an example](img/image_08_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After applying this filter, we will have the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the following events with this account with a chronological timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Event ID** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 4624 | This is a successful log in to the system |'
  prefs: []
  type: TYPE_TB
- en: '| 4634 | This is a log off from the system |'
  prefs: []
  type: TYPE_TB
- en: '| 4647 | This is a log off from the system |'
  prefs: []
  type: TYPE_TB
- en: '| 4648 | This is an unsuccessful log in attempt |'
  prefs: []
  type: TYPE_TB
- en: '| 4672 | This is an assignment of new privileges |'
  prefs: []
  type: TYPE_TB
- en: '| 4720 | This is an account creation |'
  prefs: []
  type: TYPE_TB
- en: '| 4722 | This is an account activation |'
  prefs: []
  type: TYPE_TB
- en: '| 4724 | This is an attempt to change password |'
  prefs: []
  type: TYPE_TB
- en: '| 4726 | This is an account deletion |'
  prefs: []
  type: TYPE_TB
- en: '| 4738 | This is an account modification |'
  prefs: []
  type: TYPE_TB
- en: We can see that the account was created on April 8, 2014 at 12:40:52 UTC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s view the types of login (login using RDP has type 10); to do this, just
    filter Logon Type equal 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing the event log – an example](img/image_08_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After applying the filter, we will have the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: This user remotely accessed the system on April 8, 2014 at 12:10:18 UTC.
  prefs: []
  type: TYPE_NORMAL
- en: So now, we can figure out this is a malicious account, when it was created,
    and when and how it logged in to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen that event logs can be a useful source of evidence
    for forensic investigations. We examined the structure of event logs and looked
    at the features of event log systems for various Windows operating systems. We
    looked at some tools, which you can use to analyze event logs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at some files with which the Windows OS works.
    These files are artifacts of Windows live, and they reflect what occurred in the
    system. We will learn to analyze prefetch, links, and jobs files.
  prefs: []
  type: TYPE_NORMAL
