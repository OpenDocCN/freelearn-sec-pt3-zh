- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying Government Security Standards – System Hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether your team is trying to give your product a competitive edge over the
    competition via heightened security or your customer base (i.e., government, military,
    or other public sector customer) has compliance mandates for all systems that
    they employ, the application of one or more government standards for security
    is generally no simple task.
  prefs: []
  type: TYPE_NORMAL
- en: For this level of compliance, you must build a solution based on accepted and
    certified operating systems. This specific compliance action will obviously take
    most community distributions out of selection for you, as we discussed in [*Chapter
    2*](B22104_02.xhtml#_idTextAnchor044). In this space, the list of Linux operating
    systems is brutally short. You can count the players in this space with the fingers
    on one hand (and maybe have a finger or two left over). This is not meant to disparage
    any distribution whether they are community or commercial. The process is lengthy,
    expensive, and, beyond a shadow of a doubt, possibly quite frustrating for most.
    Few distributions have the resources to take this journey with NIST.
  prefs: []
  type: TYPE_NORMAL
- en: The good news for you is the list of certified Linux operating systems is expanding,
    but few can compete with the extensive list of government certifications and standards
    that are adhered to like **Red Hat**® **Enterprise Linux**® (**RHEL**) can. It
    is seen as the de facto standard for Linux in the US government space. The few
    other players in this space are often clones or derivatives of RHEL, except Ubuntu®,
    which is the most popular Debian Linux variant.
  prefs: []
  type: TYPE_NORMAL
- en: Another factor in this effort that we will explore here is additional tooling
    that makes the Herculean effort to comply with these security standards even possible.
    The **Security Content Automation Protocol** (**SCAP**) can easily be seen as
    the most common standard for the automated application sets of security measures
    (AKA SCAP server profiles) to a system or application stack. The actual process
    of implementing these profiles requires tooling. This is where open source comes
    to the rescue (again). The OpenSCAP projects provide extensive tooling. Many Linux
    distributions include these packages within their installers and repositories.
    SCAP definitions provide an industry standard way of applying security standards
    and remediations. They are the highway towards compliance regardless of the security
    standard that you are trying to apply. In this chapter, we’ll show you by example
    how to apply the two most common standards for server security in the US – FIPS
    140-3 and the general **STIG** (short for **Secure Technical** **Implementation
    Guide**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the main sections are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adherence to key US government standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I implement this?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I certify my solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s move on to our next section, where we will go into some detail as to the
    details of what you may need to complete the exercises in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the hands-on exercises in this chapter, you will need two RHEL 9.4 (or newer)
    machines (physical or virtual) both will be clean installations. We will do one
    of those installations together as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, you will need access to a Red Hat® account (developer or production),
    installation media, Fedora® Media Writer, and the ability to install/reinstall
    the operating system on the two machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you will need the ability to download and install additional
    packages from third-party or government websites. The STIG Viewer tool can be
    installed on Windows® or Linux systems. You’ll need this as well, but it does
    not have to be installed specifically on your lab machines. Check out the book’s
    GitHub repository for helpful links: [https://github.com/PacktPublishing/The-Embedded-Linux-Security-Handbook/blob/main/Chapter11/Resource_Cheat_Sheet.pdf](https://github.com/PacktPublishing/The-Embedded-Linux-Security-Handbook/blob/main/Chapter11/Resource_Cheat_Sheet.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to the reason *why* adherence to security standards might matter.
  prefs: []
  type: TYPE_NORMAL
- en: Adherence to key US government standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many seek to maintain their solutions to a higher standard than what may or
    may not be required. Many can agree with me on this; I applaud that level of commitment
    to security and to going above and beyond. In doing so, they can easily set their
    solutions on a higher pedestal against any of their competitors’ solutions. Why?
    It’s because if the solution meets the arduous security standards of the US military
    or certain three-letter agencies, then it’s definitely good enough for them. Well,
    one would assume such.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with that thought, I want to highlight by going above and then beyond
    what is minimally required (or seen as the norm) in a specific industry is yet
    another excellent method of driving trust within your targeted community base.
    By raising the bar for yourself and your products, you will ultimately preemptively
    (and informally) set a new standard for others to attempt to live up to. This
    will result in easier audits for your customers, who will definitely appreciate
    a less stressful compliance effort.
  prefs: []
  type: TYPE_NORMAL
- en: Adherence to government standards, when not required specifically, can also
    give your potential customers more peace of mind in choosing your solution. The
    customers’ auditors may also thank them for executing more due diligence in the
    selection of your product. It’s a win-win for everyone. That extra effort on your
    teams’ parts can go a long way to a wider adoption rate of your products.
  prefs: []
  type: TYPE_NORMAL
- en: Besides trust and peace of mind, having one less system on their network to
    worry about is also a plus for your customers. I assure you that they will appreciate
    that too.
  prefs: []
  type: TYPE_NORMAL
- en: Then there’s the flip side of the coin. When compliance is mandated due to your
    customer base’s requirements, your team will have its work cut out for them. Regardless
    of where your product falls in the requirements space, the more secure your product
    is the better the outcomes will be for all involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review an earlier discussion in [*Chapter 2*](B22104_02.xhtml#_idTextAnchor044),
    when we established the single greatest factor: your target customer base’s compliance
    needs. Perhaps your product targets a wide stretch of industry verticals.'
  prefs: []
  type: TYPE_NORMAL
- en: If your user base is in the government sector, your product had better bring
    its *A* game. Failure to comply with the applicable standards imposed upon any
    system in government infrastructure results in your solution not getting adopted
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Government is just one vertical that requires such attention to detail. Healthcare
    and financial services also have their own regulatory security standards (albeit
    not too different from government/military standards).
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of what verticals and sectors you sell into, casting a wider net
    compliance-wise is just a smart play. Additionally, I feel remiss if I have failed
    to mention that there is a massive overlap in many security standards across many
    industries.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get into more importantly how we can start to apply these standards to
    our solutions successfully.
  prefs: []
  type: TYPE_NORMAL
- en: How do I implement this?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The answer to the question *How do I implement this?* does not have a single
    answer. The truthful response is *It’s complicated*. Maintaining compliance has
    many touchpoints. It starts at the design table, where you must identify what
    standards will impact the overall solution. Some can argue that the significant
    amounts of research time are the greatest amount of time spent on this effort.
    I disagree. I believe (and I suspect you will too soon enough) that maintaining
    compliance from release to release long after the measures have been originally
    implemented in your product is the true heavy lift.
  prefs: []
  type: TYPE_NORMAL
- en: There’s also a catch to all of this. Maintaining adherence is not a one-and-done
    process. Brace for the upcoming frustration because here it comes. Setting a server
    profile, whether during installation or later on, is not the end but the beginning.
    Every time you make a change to the configuration, albeit small or large, you
    must re-scan and confirm compliance. This part of maintenance and testing can
    be a rather tedious process, but it IS necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore, in the next few sections, how we implement and maintain standards
    compliance throughout the lifecycle of your product.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of security standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security begins at the design table, but the implementation and maintenance
    of your security measures is where the proverbial rubber hits the road. Paying
    close attention to the most minute detail could mean the difference that protects
    your product from being compromised. Why do we do this (as if we need a reminder)?
    Perpetual risk mitigation.
  prefs: []
  type: TYPE_NORMAL
- en: Our first foray into the implementation of security standards begins with the
    Linux installers.
  prefs: []
  type: TYPE_NORMAL
- en: The enhancements, to some installers in recent years, do make this process easier
    on their implementers. But as I have previously stated, it is simply the beginning
    of a long-term commitment that you and your team have engaged in.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging RHEL server profiles at installation time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The RHEL installer, Anaconda, has the ability for the end-user to select a predefined
    set of SCAP Security Guide server profiles. These server profiles represent several
    governmental agencies and industry standards. Leveraging one of these at installation
    time is a significant jumpstart to ensuring your system will be compliant with
    an applicable standard. This doesn’t guarantee that, after you have finished setting
    up your server, it is 100% compliant. You will still need to confirm compliance
    as part of your QA process later on.
  prefs: []
  type: TYPE_NORMAL
- en: You can select one of the several SCAP profiles (or other standards) in Anaconda
    during their installation process. Again, this is where I applaud those developers
    who spent the time to make this arduous process easier for us all.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those who are curious as to which profiles are included, wait no more.
    Recently, the master list for publicly shared SCAP profiles for virtually all
    major Linux distributions was moved to GitHub; it can be found via this link:
    [https://complianceascode.github.io/content-pages/guides/index.html](https://complianceascode.github.io/content-pages/guides/index.html).
    The list of the SCAP profiles included within the RHEL 9 installer is somewhat
    extensive. Here’s a curtailed list of what profiles are included in the installer:'
  prefs: []
  type: TYPE_NORMAL
- en: Various levels of security (low, medium, high, and enhanced) from the French
    National Agency for the Security of Information Systems – ANSSI BP-028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various levels of **Centro Criptológico Nacional** (**National Cryptologic Center
    aka CCN**) of Spain defined server security levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various CIS Benchmark levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DRAFT unclassified FIPS standard (NIST 800-171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Australian Cyber Security Centre** (**ACSC**) Essential Eight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ACSC ISM Official
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Health Insurance Portability and Accountability** **Act** (**HIPAA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Protection Profile for General Purpose Operating Systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCI-DSS version 3.2.1 Control Baseline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Defense Information Systems Agency** (**DISA**) **STIG** for RHEL 9 Server
    and RHEL 9 Server with GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here’s a screenshot taken while browsing the extensive list of available SCAP
    profiles during a RHEL 9 installation. It’s impossible to show them all in a single
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Selecting a server profile in the RHEL installer](img/B22104_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Selecting a server profile in the RHEL installer
  prefs: []
  type: TYPE_NORMAL
- en: Enabling FIPS mode in RHEL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RHEL 9 has been focused on the FIPS 140-3 standard since its initial development
    began several years ago. Red Hat had determined that attempting to add FIPS 140-3
    to RHEL 8 (which is FIPS 140-2 certified) would require too much refactoring and
    as the operating system was within its final five years of its lifecycle, such
    an effort was untenable. During the final five years of a RHEL release, the operating
    system is considered to be in maintenance mode, where new features generally are
    not introduced but security and bug fixes are still implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Building a FIPS-compliant system starts at installation time by placing the
    installer into FIPS mode. This simple step is achieved by editing one line during
    the system’s boot process. During installation, append `fips=1` to the kernel
    line in the installer boot kernel options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a screenshot of me setting the kernel boot options within GRUB to allow
    the installer to boot into FIPS mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Configuring the installer to boot in FIPS mode](img/B22104_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Configuring the installer to boot in FIPS mode
  prefs: []
  type: TYPE_NORMAL
- en: The next step in getting your system closer to FIPS compliance is to select
    the FIPS SCAP server profile during the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Selecting the FIPS server profile during installation](img/B22104_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Selecting the FIPS server profile during installation
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, if you are like me (detail-oriented) and desire to double-check
    your work, you could also configure FIPS compliance mode as a post-install process.
    This same process is needed after any changes to the system have occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example of a post-install configuration of enforcing FIPS mode
    via the command line. This, in itself, is a glaring example of where enterprise
    distributions (such as RHEL) make the adherence of complex standards easier. In
    this situation, you would run the following command as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The output can be extremely lengthy, obscure, and verbose. Feel free to experiment
    in your lab as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can look at several of the steps we can take to validate FIPS mode before
    we perform a scan of the system. These are addressed in no particular order, but
    I’d like to think that the order chosen seems somewhat logical.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring the kernel boot option is set for FIPS support by checking the kernel’s
    boot options before actually booting Linux. This does not, however, guarantee
    that all the other configurations required by FIPS 140-3 compliance have been
    completed. This is simply the start of the journey.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this pictorial example, you can see the configuration for booting, and it
    clearly shows kernel options... more specifically, the one we care about, `fips=1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Confirming FIPS mode boot options in GRUB](img/B22104_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Confirming FIPS mode boot options in GRUB
  prefs: []
  type: TYPE_NORMAL
- en: Here’s another example method of ensuring that FIPS mode is enabled on your
    RHEL server. This will do a ton of heavy lifting in the configuration for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should run the following command to forcibly set the system policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you might be curious (or gravely concerned) as to where your system stands
    in terms of adherence to the FIPS 140-3 standard, we’ve provided this example
    walkthrough on how to check. We will ensure that the validation of FIPS mode is
    completed (regardless of how it was configured previously):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll check to see that FIPS mode is enabled by running the following
    as root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is where you need to pay close attention to the output as you might just
    get this as your output – and then you still have more work to do. This is normal.
    Perfection is difficult to achieve. Your output will most likely be like the following,
    notifying you that you have more work to accomplish:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s continue down the path assuming that your system needs more work by the
    fact that you did not get a favorable response to the last command. We can then
    run this next command and (of course) re-verify that FIPS mode is OK on our host.
    This may also take a little more time than most commands. Please be patient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will take some time – expect the output to resemble this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'OK. Things are now better. Because of the results we received from the last
    command, we had to do some remediation. That’s expected. Let’s reboot as recommended
    now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the system has rebooted, let’s get back to a root prompt and re-run the
    verification command. Like I continue to say, *trust* *but verify!*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now breathe a sigh of relief. We have gone through how to implement FIPS
    mode and test the results. Now, let’s move on to another set of security measures
    that comprises DISA’s STIG profiles.
  prefs: []
  type: TYPE_NORMAL
- en: DISA STIG SCAP profiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we dive deep into the setup of STIG compliant systems, let’s first get
    to a point where we can actually make sense of the STIG standard’s documentation.
    This requires you to install a tool from DISA. Yes, you will need another tool
    just to view the details of the STIGs themselves. The DISA STIG Viewer is a free
    software tool that runs on Windows and Linux. Sorry everyone – no Mac® support.
    I’m sure that there’s some interesting backstory explaining *why* there’s no Mac
    support, but I do not know it. This tool is well maintained by the security gurus
    at DISA and is made publicly accessible to all.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s open up a browser and go to the DISA site, then download the free
    STIG Viewer tool. The tool can be found at: [https://public.cyber.mil/stigs/srg-stig-tools/](https://public.cyber.mil/stigs/srg-stig-tools/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Downloading the STIG Viewer](img/B22104_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Downloading the STIG Viewer
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have this excellent free tool, let’s put it to good use and download
    the STIG that applies to our example RHEL 9.x lab server. This too is a relatively
    simple process.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems](https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems)
    and select the RHEL 9 STIG. You may have to go through several other operating
    systems’ STIG entries to get there (I believe it’s on the third page).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Downloading the RHEL 9 STIG SCAP profile](img/B22104_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Downloading the RHEL 9 STIG SCAP profile
  prefs: []
  type: TYPE_NORMAL
- en: In my lab, I have the STIG Viewer on both my Windows laptop and several of my
    Linux servers. Here’s a screenshot of using the STIG Viewer to drill down into
    the RHEL 9 STIG library.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Viewing the RHEL 9 STIG Library](img/B22104_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Viewing the RHEL 9 STIG Library
  prefs: []
  type: TYPE_NORMAL
- en: This is where I recommend that you spend some time not only getting acclimated
    with the STIG viewer tool but also using it to examine not just the RHEL 9.x STIG
    SCAP profile but any others you want to become more intimate with. This tool is
    priceless.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve spent time viewing what profiles we could apply to our product,
    let’s move on to the tooling that actually allows us to force our systems’ configuration
    into compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Whichever standards you choose to adhere to during your installation (and configuration
    processes), you will still need to validate the solution in detail as part of
    your release processes. Let’s take a look at what that may look like.
  prefs: []
  type: TYPE_NORMAL
- en: Validation as part of the QA process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have I ever said *trust but verify* previously? I bet I have. Yes. I’m saying
    it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing where to get the latest information about how to apply SCAP profiles
    and scanning is important. Since we are focused on these activities and RHEL,
    here’s the link to Red Hat’s documentation on this process: [https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/security_hardening/scanning-the-system-for-configuration-compliance-and-vulnerabilities_security-hardening#configuration-compliance-tools-in-rhel_scanning-the-system-for-configuration-compliance-and-vulnerabilities](https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/security_hardening/scanning-the-system-for-configuration-compliance-and-vulnerabilities_security-hardening#configuration-compliance-tools-in-rhel_scanning-the-system-for-configuratio).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You will need an account to log in to view the information.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to an exercise where we’ll run our first scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise: Installing the OpenSCAP tools and running a scan'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During this exercise, you will install the OpenSCAP tools onto one of your
    lab machines, download a RHEL 9 SCAP profile, and run a security scan. Let’s see
    how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the packages installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for this one is exceptionally long; however, I’ve truncated it to
    show the important parts of what was installed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download a general-purpose SCAP profile for RHEL 9 from Red Hat. Just like
    with the STIG SCAP profile we downloaded earlier, this will be an XML file that
    will be used by the scanning tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for this one is rather long too; I have truncated it to save space,
    leaving only some important informational bits here for you:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run a test scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The oscap tools (i.e., the `openscap-utils` package) will have to be installed
    on the target host as well as the host it is executed from. Substitute your own
    appropriate username hostname and paths to files as specified. Please be aware
    that the output from this command’s execution can be excessively long. If you
    do not have two machines with the tools installed, you can simply run it against
    your own user account on localhost. The point of this exercise is simply to demonstrate
    the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interactive output for this command is rather lengthy. Again, I have truncated
    what we are displaying here for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, open a browser and view the report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to copy the report HTML file to a different system for viewing
    if the graphical desktop is not installed. Review all items. Your output will
    be different from mine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Viewing the scan report HTML file](img/B22104_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Viewing the scan report HTML file
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your first scan report, please take some time to absorb the
    content and how it is formatted. Make a mental note of any deficiencies it might
    have found as these are the things we are using this tool to search for. The detailed
    reporting provided can easily save hours or days of manual checks.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, I highly recommend keeping these reports as artifacts of your
    build and testing operations as they will become evidence of your due diligence
    should you submit your products for government certifications.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we installed our SCAP tools, downloaded a general-purpose
    SCAP profile from Red Hat, and then executed our first scan. This process is easily
    repeated with different SCAP profiles that you either obtain from NIST, other
    third parties, or that you have created yourself. We’ve just seen a great example
    of command-line scanning tooling displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have executed your first scan from the command line, let’s move
    on in our journey by looking at graphical tools to assist with profiles and scanning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Using the OpenSCAP Workbench'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, we installed several packages. Preemptively, you have
    already installed the `scap-workbench` and `scap-security-guide` packages. When
    your scanning system is in graphical UI mode, you’ll have the ability to view,
    edit, and create your own SCAP profiles, run them against hosts, and even automate
    the remediation of deficiencies found by the scanner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s walk through how we can open and engage with the OpenSCAP workbench in
    our UI:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s open the OpenSCAP Workbench application in the Gnome desktop. Go
    to **Applications** then select **SCAP Workbench**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Activating the OpenSCAP Workbench from the Applications Menu
    in Gnome](img/B22104_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Activating the OpenSCAP Workbench from the Applications Menu in
    Gnome
  prefs: []
  type: TYPE_NORMAL
- en: Once we have started the workbench application, we will first be prompted on
    which SCAP profile to load. Here, we will select **Other SCAP Content** from the
    pull-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Selecting “Other SCAP content” from the pull-down menu](img/B22104_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Selecting “Other SCAP content” from the pull-down menu
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll select our previously downloaded RHEL 9 STIG SCAP profile file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Selecting the RHEL 9 STIG SCAP profile (downloaded earlier)](img/B22104_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Selecting the RHEL 9 STIG SCAP profile (downloaded earlier)
  prefs: []
  type: TYPE_NORMAL
- en: Before you decide on your path of execution, here, you can review settings and
    choose a path forward.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Getting ready to execute](img/B22104_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Getting ready to execute
  prefs: []
  type: TYPE_NORMAL
- en: From this screen, there are a plethora of actions you can take. You can choose
    to execute a scan remotely. Others may choose to edit this profile to suit their
    company’s needs. The obvious path is to execute this scan on a host locally or
    remotely. Here’s where I shall also point out that this tool can assist you in
    generating remediation automation once a scan has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenSCAP Workbench is a robust and feature-rich tool that I believe deserves
    more detail than this book can allocate due to space constraints. If you liked
    this introduction, do not forget to check out the book’s GitHub repository for
    additional content on how to leverage this awesome tool and many other resources.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now move on to our next section, where we will discuss implementing security
    scans into your CI/CD chain.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation as part of your continuous integration/continuous deployment
    (CI/CD) process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is not just a repeat of your QA efforts but a review of which standards
    and certifications you currently maintain and what efforts you may choose to add
    to your product or cease to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Following updates from the agencies that provide the security standards that
    your appliance must comply with is crucial in keeping abreast of changes or new
    regulations.
  prefs: []
  type: TYPE_NORMAL
- en: For agile shops, I highly recommend adding these activities to your backlog
    and ensuring this review takes place at least twice a year. The more often your
    team performs a review, hopefully, the more security remains in their minds.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this is where I would also prescriptively recommend having a distinct
    level of automation in place that runs these scans against any release candidate
    host. Which automation tools you select is up to you or whatever your employer
    has already deemed the corporate standard. Perhaps you prefer scripts. Let’s dig
    into this a little deeper.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous exercises, we downloaded the STIG SCAP profile and a general-purpose
    RHEL SCAP profile, set up a scanning host, and learned how to execute a scan.
    To make this a more normalized process, I have some recommendations for your CI/CD
    chain and your product prototypes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I’d like to share some lists of recommendations I have for your build
    chain, tasks to perform on your prototypes, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are my recommendations for your CI/CD chain:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a permanent host for running these OpenSCAP scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain a library of appropriate SCAP profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate the scanning activities and distribution of the results reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save your scan results as artifacts with your builds/releases for future reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throw nothing away – maintain an audit trail (always)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are my recommendations for your prototypes/release candidates:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with the highest level of security possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable only what sockets, ports, or services are critical to your appliance’s
    functioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have non-root service accounts that can run systemd services and be used for
    support and scanning activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure each host has SSH enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the `openscap-utils` package is installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failure to integrate and automate compliance scanning into your process in the
    long term (and maybe the short term too) will negatively impact the quality of
    your product. My final recommendation is not to ignore security concerns during
    any stage of your product’s life cycle. Make it a component of every process and,
    eventually, it will become second nature for you and your product team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move on to the trophy phase of your efforts: actually getting your product
    certified.'
  prefs: []
  type: TYPE_NORMAL
- en: How do I certify my solution?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The subject of getting your solution certified probably deserves a whole book
    on its own. There are so many different types of certifications for different
    industry and government standards. That said, for our security focus I have chosen
    to distill this into the holy grail of certifications: the coveted FIPS 140-3
    certification with NIST.'
  prefs: []
  type: TYPE_NORMAL
- en: Not to discourage or dissuade you, but I must mention that several companies
    have built a business model to *help* other businesses navigate this painstaking
    and lengthy process with the labs and NIST. You can easily find them online with
    a simple Google search when looking for FIPS certification. Their services will
    most likely show at the top of all results.
  prefs: []
  type: TYPE_NORMAL
- en: FIPS 140-3 certification is not just a software certification, but a software
    on specified hardware validation. The testing labs that provide these services
    to the process use a specific hardware platform for each testing cycle. Which
    platform that is may vary by the labs themselves.
  prefs: []
  type: TYPE_NORMAL
- en: The process is complex, and not without costs. Depending on the security level
    of your solution’s certification, you could be paying NIST from $1,000 to well
    over $4,000\. This does not include any fees charged by the lab that does the
    heavy lifting for NIST.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find a NIST-accredited lab, you need to search the NIST website. Here’s
    a good place to start: [https://www-s.nist.gov/niws/index.cfm?event=directory.search#no-back](https://www-s.nist.gov/niws/index.cfm?event=directory.search#no-back).'
  prefs: []
  type: TYPE_NORMAL
- en: Once the lab has tested your product and submitted its findings to NIST, the
    NIST team then reviews all the documentation and hopefully, eventually, issues
    a certification. The coveted prize can then be searched for as all validated FIPS
    solutions (and their statuses) can be found at the NIST site shown in the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Searching for validated/certified modules](img/B22104_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Searching for validated/certified modules
  prefs: []
  type: TYPE_NORMAL
- en: FIPS certification re-branding by vendors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The submittal, testing, validation, and certification process can take over
    two years. For anyone trying to bring a new competitive product to market, this
    timeframe is unfathomable. Few operating system vendors can lend a hand even if
    they are certified themselves. Red Hat has a program in which their Embedded Systems
    partners can leverage their existing certifications for their products that are
    built upon RHEL. How do I know this? I was one of three founders of the program.
  prefs: []
  type: TYPE_NORMAL
- en: A Red Hat partner choosing to take this path can work with the Red Hat Embedded
    Team, and they will provide appropriate paperwork (i.e., regarding the existing
    software certifications) that the partner can then take to NIST and their chosen
    lab to accelerate the process to get their solution certified. With this certification
    re-branding documentation, the process, which could have taken over two years,
    may be shortened to a few weeks or a few months as testing an existing certified
    module is not necessary. This provides extreme value and a path to revenue for
    that partner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve come a long way together in this chapter. We have reviewed how adherence
    to government standards is important regardless of whether or not your industry
    dictates so. We’ve also taken a glance at some key standards that transcend many
    verticals and how to implement the most important ones. Finally, we wrapped up
    how to certify your appliance with NIST and some of the fun that process will
    bring you. Your experiences with the examples and exercises should give you newly
    found confidence that these efforts are not impossible, but very achievable.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to our final chapter, where we will discuss our most important
    resource, our end-users, and how their feedback can assist your processes. We’ll
    also do a full review of the lessons learned throughout the book.
  prefs: []
  type: TYPE_NORMAL
