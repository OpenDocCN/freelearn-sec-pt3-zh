- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recapping the topics you have learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far in this book, we covered many topics about Go and information security.
    The topics covered are useful for a variety of people, including developers, penetration
    testers, SOC analysts, computer forensic analysts, network and security engineers,
    and DevOps engineers. Here is a high-level recap of the topics covered:'
  prefs: []
  type: TYPE_NORMAL
- en: The Go programming language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forensics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet capture and injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure shell (SSH)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute force
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web scraping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host discovery and enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering and honeypots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More thoughts on the usage of Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is a great language, and it is a reliable choice for many use cases, but,
    like any other language, it is not the be-all-and-end-all language. As the old
    saying goes, "Always choose the best tool for the job." Throughout this book,
    we looked at the versatility of Go and the standard library. Go is also great
    for performance, reliability in production, concurrency, and memory usage, but
    the strong static type system may slow development, making Python a better choice
    for a simple proof of concept. Interestingly, you can extend Python using Go by
    writing Python modules in Go.
  prefs: []
  type: TYPE_NORMAL
- en: The C programming language may be a better choice in some situations when you
    don't want a garbage collector but need to compile the smallest binary possible.
    Go does provide an unsafe package, which allows you to bypass the type safety,
    but it does not give as much control as the C language. Go allows you to wrap
    C libraries and create bindings so that you can utilize any C library that does
    not have a Go equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Both Go and the cybersecurity industry show signs of growth. Go is continuing
    to evolve as a language, and some of the weaker areas of the language are starting
    to see promising signs. For example, GUI libraries such as Qt and Gtk are being
    wrapped in Go, and with 3D graphics libraries such as OpenGL also have wrappers.
    Even mobile development is possible and continuing to improve.
  prefs: []
  type: TYPE_NORMAL
- en: There are other useful packages in the standard library we didn't even cover,
    such as the `binary` package for manipulation binary data, the `xml` package for
    encoding and decoding XML documents, and the `flag` package for parsing command-line
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: What I hope you take away from the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this book, you should have a good idea of what packages are available
    in the standard library and how versatile Go can be out of the box. You should
    feel comfortable using Go for a variety of tasks, from simple tasks, such as working
    with files and making a network connection, to more advanced tasks, such as scraping
    websites and capturing packets. I also hope you gleaned some tips for writing
    idiomatic Go code.
  prefs: []
  type: TYPE_NORMAL
- en: The example programs provided should serve as references for building your own
    tools. Many of the programs are useful as-is and can be incorporated into your
    toolkit immediately, while a few are meant only to serve as a reference to help
    you perform common tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware of legal, ethical, and technical boundaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is critical to be aware of the possible repercussions for any action you
    take against a machine or network. There are legal boundaries that can result
    in a fine or imprisonment, depending on the laws and jurisdiction. For example,
    in the United States, the **Computer Fraud and Abuse Act** (**CFAA**) makes it
    illegal to access a computer without authorization. Don't always assume that the
    client authorizing the scope of your penetration test has the right to authorize
    you on every device. Companies can lease physical servers or rent virtual or physical
    space in a data center that they do not own, requiring you to get authorization
    from other sources as well.
  prefs: []
  type: TYPE_NORMAL
- en: There are also ethical boundaries to be aware of, which are different from the
    legal boundaries. Ethical boundaries can be a gray area for some people. For example,
    with social engineering, if you target employees, do you think it is acceptable
    to attempt the social engineering outside of work hours? Is it acceptable to send
    phishing emails to their personal email address? Is it acceptable to impersonate
    another employee and lie to someone? Other aspects of ethics involve how you behave
    on compromised servers and what you do with the data you find. Is it acceptable
    to store client data off-site if it was exfiltrated during a penetration test?
    Is it acceptable to create your own user on a client's production server during
    a penetration test? Some people may disagree on where the ethical boundary lies
    for different situations. It is important to be conscious of these types of things
    and to discuss them with any client prior to an engagement.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the legal and ethical aspects, it is also imperative to understand
    the technical repercussions and the physical load your tools put on servers, networks,
    load balancers, switches, and so on. Make sure that you set sane limits on web
    crawlers and brute forcers. Also, make sure that you log and track any actions
    you take so that you can undo any permanent changes. If you are performing a penetration
    test for a client, you should never leave unnecessary files you created on their
    servers. For example, if you install a reverse bind shell, make sure that you
    uninstall it. If you modify file permissions or install a bind shell, make sure
    that you are not opening up the client to outside attacks.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of things to be conscious of when working in the security field,
    but a lot of it comes down to common sense and being cautious. Respect the servers
    you are attacking, and don't take any action if you don't understand the implications.
    If you are unsure, seek guidance from a trusted and experienced peer or the community.
  prefs: []
  type: TYPE_NORMAL
- en: Where to go from here
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start building your toolbox and cookbook. Use the examples that are useful to
    you and customize them to suit your needs. Take some of the existing examples
    and expand upon them. Can you think of other ideas? How can you modify some of
    the programs to be more useful? Are any of the examples useful as-is in your own
    toolbox? Do they give you any ideas for other custom tools? Explore more of the
    Go standard library and write applications to fill your toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Start practicing and using some of the tools provided. You may need to find
    or build your own test network, or just a simple VM, or find a bug bounty program.
    If you decide to try out bug bounties, be sure to read the scope and rules with
    a microscope. To put your new tools and skills in to action, research application
    testing and network penetration methodologies. If you want to become a penetration
    tester or just want to learn more about penetration testing methodology and practice
    in a safe lab environment, then, I highly recommend the **Offensive Security Certified
    Professional** (**OSCP**) course offered by Offensive Security at [https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/](https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting help and learning more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about Go, its language design and specification, and the standard
    library, check out these links:'
  prefs: []
  type: TYPE_NORMAL
- en: The built-in documentation of godoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Online Go documentation: [https://golang.org/doc/](https://golang.org/doc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A tour of learning the Go language: [https://tour.golang.org/](https://tour.golang.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go standard library documentation: [https://golang.org/pkg/](https://golang.org/pkg/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Communities are a great place to get help and find others to collaborate. Online
    communities and in-person communities each have their pros and cons. Here are
    a few places to seek help for Go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The #go-nuts Freenode.net IRC channel: [http://irc.lc/freenode/go-nuts](http://irc.lc/freenode/go-nuts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Go Forum: [https://forum.golangbridge.org](https://forum.golangbridge.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Go Nuts mailing list: [https://groups.google.com/group/golang-nuts](https://groups.google.com/group/golang-nuts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Local meetups: [https://www.meetup.com](https://www.meetup.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go FAQ: [https://golang.org/doc/faq](https://golang.org/doc/faq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stack Overflow: [https://stackoverflow.com](https://stackoverflow.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Golang Subreddit: [https://www.reddit.com/r/golang/](https://www.reddit.com/r/golang/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continue learning by applying the knowledge learned from this book. Write your
    own tools to reach your goals. Explore other third-party packages, or consider
    wrapping or porting a C library that Go is lacking. Experiment with the language.
    The most important thing is just to continue learning!
  prefs: []
  type: TYPE_NORMAL
