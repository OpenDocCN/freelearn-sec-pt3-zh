- en: Reversing Various File Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been dealing with binary executables. In this chapter, we will
    also look at other ways in which code can be executed. Visiting websites (HTML)
    and receiving emails (that have documents attached to them) are some of the mediums
    where malware can easily enter a target system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging scripts in HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Macro in Office documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing PDF analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SWF analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analysis of HTML scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every website we visit contains scripts. Most commonly, it contains JavaScript
    code that is triggered by clicking on the OK button on a website or by those artistic
    bubbles and stars that roam around with the mouse pointer. JavaScript is one of
    the most powerful tools that can be used by a site developer. It can be used to
    control elements that an internet browser contains.
  prefs: []
  type: TYPE_NORMAL
- en: Besides JavaScript, Visual Basic scripts (VBScripts) can also be embedded in
    HTML websites. However, VBScript has been disabled by default in recent web browsers.
    This is due to the fact that VBScript has been exposed to a lot of vulnerabilities
    in the past. In addition, JavaScript is the default language used by many internet
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: There are two sides for a website to work, that is, the server side and the
    client side. When visiting a website, we are looking at the client side page.
    All backend scripts are running at the server side. For example, when visiting
    a website, the server-side programs send the HTML contents, including text, scripts,
    images, Java applets, and flash files. Only the browser elements, like HTML, JavaScript,
    Java applets, and SWF flash, that can be supported by internet browsers, are the
    objects that are crafted and sent by server-side programs. In essence, what we
    can analyze are these browser elements.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, scripts are readable text files. We can perform static analysis
    for HTML scripts. But like any other code, reversing requires that we have learn
    scripting language used.  The bottom line is, we need to learn the basics of the
    JavaScript programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try reversing a simple HTML file. You can download this HTML file from
    the following link: [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.html](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.html).
  prefs: []
  type: TYPE_NORMAL
- en: Only do this if you have time. When reversing a HTML file, it is recommended
    that you set it up to run as though it's being viewed in a website and not as
    an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a text editor, such as Notepad, we can perform static analysis on the
    HTML file. Other text editors, such as Notepad++ ([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)),
    would be better since it can show script syntax in color. This helps us to distinguish
    between the script functions from the data, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8400c6b3-fd76-4107-a91f-f33dfac949d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To understand this code, a lot of references about HTML programming are available
    in the internet. One of these reference sites is [https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp).
    What we are after here are the scripts that are defined in the `script` tags.
    There are a total of three JavaScript script codes here. The first script contains
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `alert` function is used to display a message box. The message should be
    enclosed with quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second script contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Again, the script displays a message, and then assigns the value `1` to variable
    `x` and the value `2` to variable `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last script contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This shows another message. This time, the message is the sum of the `x` and
    `y` variables, which should give us the value of `3`. Even with the script code
    being located in separate tags, values in variables from the last running script
    should be reflected in succeeding scripts.
  prefs: []
  type: TYPE_NORMAL
- en: To prove this behavior, let's dynamically analyze the file by running it in
    an internet browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Internet Explorer. We can also use Firefox or Chrome. Drag and drop `demo_01.html`
    into Internet Explorer. This should show the following message box once it has
    loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/793c08d8-e89c-4abb-91a3-32671a4d7e3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The message may not show up if the internet browser has disabled running JavaScript
    content. Usually, a security message appears, asking if we want to allow running
    script codes. Just allow the script to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c01113e-ec14-4a8a-8b92-e10c70d8bc02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following message boxes will come up afterwards:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8310cfad-67c5-4555-b11d-139287e004a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the page has completely been loaded, press `F12` to bring up the debugger
    console. Select the Debugger pane. This should show the HTML script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c22f722f-bf35-4c83-b266-aa8db26d201c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the debugger, place a breakpoint at line `3`, which is the first `alert`
    function. To place a breakpoint, click on the empty gray space at the left of
    the line number. This should create a red dot that indicates a breakpoint line.
    The following screenshot shows all three scripts with their first lines marked
    with a breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5165e4c7-5bb2-4907-bdfe-0ead3e9ab6f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Refresh the browser by focusing on the internet browser''s page and pressing
    F5\. We may end up debugging the `browsertools` script, which is an Internet Explorer
    initialization script. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c29d19e-0d88-4e81-8c0b-5e72700da6e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just press *F5* again to make the debugger continue until we reach our breakpoint.
    We should now be at the first `alert` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68b3b5b9-724f-4ab6-a047-9a324813aea8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can press *F11* to step into or F10 to Step over the script line. Doing
    so should invoke the first message box. Continue pressing *F10* to move on to
    the following script lines. The next script is another `alert` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/391d2290-1b37-4cdc-9c1f-95d7208c7c17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following lines assign `1` to `x` and `2` to `y`. We can monitor what happens
    to these variables by adding these in the watch list, which is located in the
    right-hand pane. Click on Add watch to add the variables that we can monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9959902b-a48d-4e00-b606-ecd5e7ed87df.png)'
  prefs: []
  type: TYPE_IMG
- en: The last function is another `alert` function that displays the sum of `x` and
    `y`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try this with `demo_02.html` ([https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_02.html](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_02.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we debug this, it performs the same behavior that we encountered in `demo_01.html`.
    The difference is that it looks obfuscated when we look at it from the text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1c8ec6c-635c-48b7-8e67-e685e9dceac2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The message was converted to escaped format using each ASCII character''s hexadecimal
    equivalent. In the previous chapter, we learned about `Cyberchef`, an online tool
    that we can use to de-obfuscate these types of data. Since this type of data is
    escaped, we should use an `unescape` operation to decode this data. Using `Cyberchef`,
    search for the `unescape` operation, and then copy and paste the escaped data
    in the Input window. We should get a decoded output showing the exact text we
    saw in the messages, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/427c1c5d-1384-4fff-b2ed-5268018b0e84.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing HTML scripts is not that complicated, especially since everything
    is almost human readable. All we need to understand is the syntax and the functions
    of the script language. Plus, this a way to dynamically analyze the script using
    debugging tools that are fortunately available in internet browsers.
  prefs: []
  type: TYPE_NORMAL
- en: MS Office macro analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Office has a way for automating simple tasks such as creating formatted
    tables or inserting letterheads. This is called an MS office macro. MS Office
    macro makes use of the Visual Basic for Application language, which uses the same
    language as Visual Basic scripts. However, these can be abused to do more like
    download a file, create files, make registry entries, and even delete files.
  prefs: []
  type: TYPE_NORMAL
- en: First off, we need static tools to read information and extract the macro source
    from a given Office file. To open MS Office documents, we need to have Microsoft
    Office installed. The other tool that we could use would be OLE tools, which can
    be downloaded from [http://www.decalage.info/en/python/oletools](http://www.decalage.info/en/python/oletools).
    These set of tools are Python scripts, and will require Python 2.7 to be installed
    on your system. The Python installer can be downloaded from [https://www.python.org/](https://www.python.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The file we are going to analyze first is [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.doc](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.doc).
    Type in the following  code into the command line to use `olevba.py` on `demo_01.doc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This extracts information about the `VBA` source and the source itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8f7fba1-084f-4650-923a-565855c198cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see from the preceding screenshot that the source has two subroutines:
    `autoopen()` and `autoclose()`. `olevba.py` also describes these subroutines that
    are tied to events when the document is opened and closed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source contains code that pops up messages. Now, let''s try to open the
    document in Microsoft Word. By doing this, we may end up with Microsoft Word showing
    us a security warning about the document containing code. Click on Enable Content
    so that we can see what the macro can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eca37d63-1544-442d-80d5-13d76219cd24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first message immediately appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c20cef93-1c9d-4f27-940c-19e1e85ac011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To debug the code, we need to open up the VBA editor. Select View->Macro. This
    opens up the Macro dialog box where you can select any Macro name and click on
    the Edit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d85e2ad7-900b-4e53-b78a-3e92bad59322.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are currently using Microsoft Office 2013, so the user interface for the
    `VBA` Editor may be different for other versions. In the `VBA` Editor, we should
    now see the source code. Pressing *F9* on a line of code enables or disables a
    breakpoint. Pressing *F8* does step debugging. *F5* is for continuing to run the
    code. We can start debugging from any of the subroutines. Select the Debug menu
    to view more debug features that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cad95591-5ef9-4628-964f-cbb259c98d68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Closing the document will bring up the following message box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/088493d9-c2d0-422b-b0ec-7660b8ee92e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, try analyzing demo_02.doc. This will be quite a challenge since we will
    be looking at how the password can be derived.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the VBA Editor is the macro developer's console. This is where
    the macro program was developed and debugged. Thus, to reverse what we are looking
    for, we can manipulate the source code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc26f00b-9f29-4ca6-aba5-8454c007590d.png)'
  prefs: []
  type: TYPE_IMG
- en: The password for `demo_02.doc` can be found in the Summary section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: PDF file analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PDF files have evolved to run specific actions and allow for the execution of
    JavaScript. For PDF analysis, what we can do is extract event information and
    analyze what the JavaScript will do. We can use Didier Stevens' PDF Tools to help
    us analyze PDFs. This toolset runs using Python, so we will again need that installed.
    PDF Tools can be downloaded from [https://blog.didierstevens.com/programs/pdf-tools/](https://blog.didierstevens.com/programs/pdf-tools/).
    If you go to the site, you will get a description about each tool in the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try using the tool with [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.pdf](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo_01.pdf).
    Using `pdfid.py`, execute the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of `pdfid` on `demo_01.pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c87e5f46-607d-49a1-8c1e-4b249d4e3866.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see that there is JavaScript code embedded to it. Let''s now try
    the `pdf-parser.py` file so that we can extract more information. Some elements
    in the PDF file can be compressed and will not be readable. The `pdf-parser` tool
    is able to decompress these streams. Execute the following command to redirect
    output from `pdf-parser` to `demo_01.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output given by `pdf-parser` is basically the same as the contents of `demo_01.pdf`.
    The reason for this is that there were no PDF objects that got decompressed. If
    we look closer at the output, we can easily identify where the script code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, using Chrome as our PDF reader, the PDF displays the following
    message box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2713b44-0860-43f7-a0ca-b299af647cab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To debug the JavaScript, we would need to copy this into a separate JavaScript
    or HTML file. We may also need to fix the syntax of running JavaScript operators.
    The JavaScript code from the PDF can be converted into the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: SWF file analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ShockWave Flash files can also contain code. Basically, flash files are legitimately
    written to follow a sequence of tasks. But just like any other code, it can be
    abused to carry out malicious activities.
  prefs: []
  type: TYPE_NORMAL
- en: The SWF file we are going to analyze can be downloaded from [https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo01.swf](https://github.com/PacktPublishing/Mastering-Reverse-Engineering/blob/master/ch13/demo01.swf).
  prefs: []
  type: TYPE_NORMAL
- en: 'The main tool used for analyzing SWF at the time of writing this book is the
    JPEXS SWF decompiler.  Besides this let''s first talk about other existing tools
    that are able to parse SWF files.  These tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: SWFTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FLASM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XXXSWF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SWFTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SWFTools is a collection of tools for reading and building SWF files.  It can
    be downloaded from [http://www.swftools.org/](http://www.swftools.org/). To successfully
    install SWFTools, it should be run as administrator. The tools are used at the
    command line. There are two tools here that can extract information about the
    SWF file: `swfdump` and `swfextract`. Here''s what `swfdump` gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67706c17-1b0a-4a38-a6d5-68e4716bf44b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result tells us that the file is `zlib` compressed.  There is also a `DOABC`
    method labeled `Main`. The existence of a `DOABC` also means that there is an
    embedded action script. Using `HxD`, we can verify that the file is compressed.
    The magic header `CWS` indicates that the `SWF` is indeed compressed. An uncompressed
    `SWF` starts with `FWS` magic bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eaea745b-640e-4cec-98ce-e6b19cfd6033.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The other tool, `swfextract`, is capable of extracting embedded videos or images.
    `demo01.swf` doesn''t contain any media, as we can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2aac9f59-b840-4499-a305-bcac91fd6b3c.png)'
  prefs: []
  type: TYPE_IMG
- en: The other tools in `SWFTools` are used to build `SWFs` from PDFs, images, and
    videos.
  prefs: []
  type: TYPE_NORMAL
- en: FLASM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`FLASM` is a tool that is capable of decompressing and disassembling `SWF`
    files. It can be downloaded from [http://nowrap.de/flasm.html](http://nowrap.de/flasm.html).
    We decompressed `demo01.swf` using the `-x` parameter and got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68e3cd0e-2589-4d96-9fa3-78d09ef14c9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, we used the `-d` parameter to disassemble the file where it showed
    information about how the `SWF` was structured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be362add-3b05-4592-ae32-06118d496de1.png)'
  prefs: []
  type: TYPE_IMG
- en: We can't see any disassembled nor decompiled action scripts here.
  prefs: []
  type: TYPE_NORMAL
- en: Flare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a tool that is capable of decompiling ActionScript code. It can be
    downloaded from [http://nowrap.de/flare.html](http://nowrap.de/flare.html). However,
    it may not be able to fully support `AS2` and `AS3` code. Just pass the `SWF`
    file to the Flare tool and it will generate an `FLR` file. We can executed Flare
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result placed in `demo01.flr` contained the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It had the same result as `FLASM`. No action scripts were disassembled.
  prefs: []
  type: TYPE_NORMAL
- en: XXXSWF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This tool can be downloaded from [https://github.com/viper-framework/xxxswf](https://github.com/viper-framework/xxxswf).
    It is a Python script that accepts the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We tried using this tool with `demo01.swf`. After using the `-H` paramater,
    the tool tells us that it is compressed. We then decompressed the file using the
    `-d` option. This resulted in a decompressed `SWF` version in the `243781cd4047e8774c8125072de4edb1.swf`
    file. Finally, we used the `-H` parameter on the decompressed file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eee59e0c-470b-4f4a-b0f5-631b81717f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, what comes in useful for this without the `yara` and `md5` features
    is its ability to search for embedded flash files. This comes in useful for detecting
    `SWF` malware with embedded SWFs in it.
  prefs: []
  type: TYPE_NORMAL
- en: JPEXS SWF decompiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most used tool for analyzing SWF files is the `JPEXS` SWF decompiler.
    Nightly builds can be downloaded from [https://github.com/jindrapetrik/jpexs-decompiler](https://github.com/jindrapetrik/jpexs-decompiler).
    This tool is capable of decompiling `ActionScript` that supports `AS3`. The following
    screenshot shows the `JPEXS` console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce6cadd1-2d9e-49ad-82d9-c2264f2e853c.png)'
  prefs: []
  type: TYPE_IMG
- en: Besides being able to decompile, it has an interface that can be set up with
    Adobe Flash Player's debugger. After installing JPEXS, we need to download the
    *flash player projector content debugger *from [https://www.adobe.com/support/flashplayer/debug_downloads.html](https://www.adobe.com/support/flashplayer/debug_downloads.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open JPEXS and then select Settings->Advanced Settings->Paths. Then, browse
    to the downloaded flash executable to fill up the Flash Player projector content
    debugger path.  Click OK when you''re done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b430a73c-86f5-4389-b7dd-46c2fb6b552b.png)'
  prefs: []
  type: TYPE_IMG
- en: This is an important setup that enables us to debug the decompiled ActionCcript.
    You can also fill up the Flash Player projector path by downloading the Flash
    Player projector from [https://www.adobe.com/support/flashplayer/debug_downloads.html](https://www.adobe.com/support/flashplayer/debug_downloads.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the SWF file and expand the tree of objects in the left window pane. Select
    Main under the `scripts` object. This displays the decompiled ActionScript, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22c8ac6e-ac53-4d89-b5ca-2f321afa9799.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is the decompiled code for `demo01.swf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Click the Debug button or *Ctrl+F5,* thisshould bring us to the debugger console.
    In the left-most window, the byte-code equivalent of the decompiled Actionscript
    is shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ba58b85-ce3b-4411-b394-3025784551a9.png)'
  prefs: []
  type: TYPE_IMG
- en: What the code does is create two TextFields containing text that gets displayed
    on the SWF display space.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e783e061-46b4-4077-9b5c-6cc63af70c56.png)'
  prefs: []
  type: TYPE_IMG
- en: JPEXS is a tool that has the important feature we want to analyze code in a
    flash file.  It has a byte-code disassembler, source decompiler, and a debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analyzing various file types also uses the same concept as reversing. In this
    chapter, we learned about the scripting language that the file format is using.
    We could gather additional information if we were also inclined to understand
    the file's header and structure. We also learned that as long as executable code
    can be embedded into a file, there is a way to analyze it. It may not be dynamically
    analyzed easily, but at least static analysis can be performed.
  prefs: []
  type: TYPE_NORMAL
- en: We tackled how to debug JavaScript that is embedded in HTML scripts. Virtually,
    we can analyze any website we visit. We also learned about the tools that we can
    use to extract macro code in Microsoft Office documents. It also happens that
    we can debug this macro code using the VBA Editor. We also looked at a variety
    of tools that we can use to extract JavaScript from a PDF file. Then we analyzed
    an SWF file using JPEXS, a powerful tool that has a disassembler, decompiler,
    and debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Reversing engineering software is a concept at hand. We research what the software
    is and how it works. We also get to learn the low-level language beneath the code
    that executes in the file. It may take time to learn this language, but it is
    worth the knowledge and experience that we gain from it.
  prefs: []
  type: TYPE_NORMAL
- en: Have a fun day reversing!
  prefs: []
  type: TYPE_NORMAL
- en: P.S.  The password for `demo_02.doc` is burgersteak.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://www.w3schools.com/html/default.asp](https://www.w3schools.com/html/default.asp) :
    a good tutorial site for learning HTML scripting'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.javascriptobfuscator.com](http://www.javascriptobfuscator.com)
    [-](http://www.javascriptobfuscator.com) this is an online site that can obfuscate
    javascript code'
  prefs: []
  type: TYPE_NORMAL
