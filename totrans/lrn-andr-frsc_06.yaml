- en: Recovering Deleted Data from an Android Device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about data recovery techniques that enable
    us to view data that has been deleted from a device. Deleted data could contain
    highly sensitive information and thus data recovery is a crucial aspect of mobile
    forensics.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Data recovery overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering data deleted from an SD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering data from SQLite databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering data deleted from a phone's internal storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering deleted data using file carving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data recovery overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data recovery is a powerful concept within digital forensics. It is the process
    of retrieving deleted data from a device or SD card when it cannot be accessed
    normally. Being able to recover data that has been deleted by a user could help
    solve civil or criminal cases. This is because many accused just delete data from
    their device hoping that the evidence will be destroyed. Thus, in most criminal
    cases, deleted data could be crucial because it may contain information the user
    wanted to erase from their Android device. For example, consider the scenario
    where a mobile phone has been seized from a terrorist. Wouldn't it be of the greatest
    importance to know which items were deleted by them? Access to any deleted SMS
    messages, pictures, dialed numbers, and so on could be of critical importance
    as they may reveal a lot of sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: From a normal user's point of view, recovering data that has been deleted would
    usually mean referring to the operating system's built-in solutions, such as the
    Recycle Bin in Windows. While it's true that data can be recovered from these
    locations, due to an increase in user awareness, these options often don't work.
    For instance, on a desktop computer, people now use *Shift* + *Del* whenever they
    want to delete a file completely from their desktop. Similarly, in mobile environments,
    users are aware of the restore operations provided by apps and so on. In spite
    of these situations, data recovery techniques allow a forensic investigator to
    access the data that has been deleted from the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'With respect to Android, it is possible to recover most of the deleted data,
    including SMS, pictures, application data, and so on. But it is important to seize
    the device in a proper manner and follow certain procedures, otherwise data might
    be deleted permanently. To ensure that the deleted data is not lost forever, it
    is recommended to keep the following points in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not use the phone for any activity after seizing it. The deleted text message
    exists on the device until the space is needed by some other incoming data, so
    the phone must not be used for any sort of activity to prevent the data from being
    overwritten.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even when the phone is not used, without any intervention from our end, data
    can be overwritten. For instance, an incoming SMS would automatically occupy the
    space, which overwrites the deleted data. Also, remote wipe commands can wipe
    the content present on the device. To prevent such events, you can consider the
    option of placing the device in a Faraday bag, as explained in [Chapter 1](1e7a3a23-96c6-4085-9981-44b579bb2a7f.xhtml), *Introducing
    Android Forensics*. Thus, care should be taken to prevent delivery of any new
    messages or data through any means of communication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can deleted files be recovered?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user deletes any data from a device, the data is not actually erased
    from the device and continues to exist on it. What gets deleted is the pointer
    to that data. All filesystems contain metadata, which maintains information about
    the hierarchy of files, filenames, and so on. Deletion will not really erase the
    data but instead removes the file system metadata. Thus, when text messages or
    any other files are deleted from a device, they are just made invisible to the
    user, but the files are still present on the device as long as they are not overwritten
    by some other data. Hence, there is the possibility of recovering them before
    new data is added and occupies the space. Deleting the pointer and marking the
    space as available is an extremely fast operation compared to actually erasing
    all the data from the device. Hence, to increase performance, operating systems
    just delete the metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recovering deleted data on an Android device involves three scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Recovering data that is deleted from the SD card such as pictures, videos, and
    so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering data that is deleted from SQLite databases such as SMS, chats, web
    history, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovering data that is deleted from the device's internal storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following sections cover the techniques that can be used to recover deleted
    data from SD cards, SQLite databases and the internal storage of the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering deleted data from SD cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data present on an SD card can reveal lots of information that is useful during
    a forensic investigation. The fact that pictures, videos, voice recordings, and
    application data are stored on the SD card adds weight to this. As mentioned in
    the previous chapters, Android devices often use FAT32 or exFAT file systems on
    their SD card. The main reason for this is that these file systems are widely
    supported by most operating systems, including Windows, Linux, and macOS X. The
    maximum file size on a FAT32 formatted drive is around 4 GB. With increasingly
    high resolution formats now available, this limit is commonly reached, that''s
    why newer devices support exFAT: this file system doesn''t have such limitations.
    Recovering the data deleted from an external SD is pretty easy if it can be mounted
    as a drive.'
  prefs: []
  type: TYPE_NORMAL
- en: If the SD card is removable, it can be mounted as a drive by connecting it to
    a computer using a card reader. Any files can be transferred to the SD card while
    it's mounted. Some of the older devices that use USB mass storage also mount the
    device to a drive when connected through a USB cable. As explained earlier, in
    forensics, in order to make sure that the original evidence is not modified, a
    physical image of the disk is taken and all further experimentation is done on
    the image itself. Similarly, in the case of SD card analysis, an image of the
    SD card needs to be taken. The process of imaging is similar to the one explained
    in [Chapter 5](a910938e-1c0b-4f19-baae-509ccaa36c09.xhtml), *Extracting Data Physically
    from Android Devices*. Once the imaging is done, we have a raw image file. In
    our example, we will use FTK Imager by AccessData, which is an imaging utility.
    In addition to creating disk images, it can also be used to explore the contents
    of a disk image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps that can be followed to recover the contents of
    an SD card using this tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start FTK Imager and click on File and then Add Evidence Item... in the menu,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dca4bc08-abf6-48a0-88a8-f0293272224e.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding evidence source to FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: Select Image File in the Select Source dialog and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Select File dialog, browse to the location where you downloaded the
    `sdcard.dd` file, select it, and click on Finish, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e797092-a99a-4a5d-9bca-c4ae82616e04.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the image file for analysis in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: FTK Imager's default display will appear with the contents of the SD card visible
    in the View pane at the lower right. You can also click on the Properties tab
    below the lower left pane to view the properties for the disk image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, on the left pane, the drive has opened. You can open folders by clicking
    on the + sign. When highlighting the folder, contents are shown on the right pane.
    When a file is selected, its contents can be seen on the bottom pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the deleted files will have a red `X`
    over the icon derived from their file extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8efa01be-4903-4b30-8e8d-f4a885aa7a75.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleted files shown with red X over the icons
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, to export the file, right-click on the
    file that contains the picture and select Export Files...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea8ee09c-5c79-4b94-9443-74439cc697fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes, only a fragment of the file is recoverable, which cannot be read
    or viewed directly. In that case, we need to look through free or unallocated
    space for more data. Carving can be used to recover files from free and unallocated
    space. PhotoRec is one of the tools that can help you to do that. You will learn
    more about file carving with PhotoRec in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering deleted records from SQLite databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the application data in Android is stored in SQLite databases. Data
    related to text messages, emails, and most app data is stored in SQLite databases.
    Such databases can store deleted data within the database itself. Records marked
    for deletion by the user no longer appear in the active SQLite database files.
    Therefore, it is possible to recover the deleted data, such as text messages,
    contacts, and more, by analyzing these SQLite files. There are two areas within
    an SQLite page that can contain deleted data: unallocated blocks and free blocks.
    Most of the commercial forensic tools that recover deleted data scan the unallocated
    blocks and free blocks of the SQLite pages. Parsing the deleted data can be done
    using, for example, Belkasoft Evidence Center. The trial version of this commercial
    forensic tool can be downloaded here: [https://belkasoft.com/get](https://belkasoft.com/get).'
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will recover deleted SMS messages from an Android device.
    Recovering deleted SMS messages from an Android phone is quite often requested
    as part of forensic analysis on a device, mainly because it's the most popular
    form of communication. There are different ways to recover deleted text messages
    on an Android device. But, with respect to recovery through parsing SQLite files,
    we need to understand where the messages are being stored on the device. In [Chapter
    4](b5ab11df-1911-4deb-accd-f92c74650e6d.xhtml), *Extracting Data Logically from
    Android Devices*, we explained the important locations on the Android device where
    user data is stored.
  prefs: []
  type: TYPE_NORMAL
- en: Let's examine `bugle_db`, an SQLite database that contains SMS messages sent
    or received using the Android Messages application. This database is located under
    `/data/data/com.android.messaging/databases`. If you have a physical image of
    the device, you can extract the database using FTK Imager, just like you did with
    deleted files. If you want to extract it from the device itself, you can use the `adb
    pull` command, for example (the device must be rooted).
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to find deleted records is to use commercial mobile forensic
    tools, such as Belkasoft Evidence Center, Cellebrite UFED Physical Analyzer, Oxygen
    Forensic Detective, and so on, but there are also some open source tools capable
    of recovering data from unallocated space and free lists. One such tool is the
    SQLite Deleted Records Parser by Mari DeGrazia. You can download this tool at
    her GitHub: [https://github.com/mdegrazia/SQLite-Deleted-Records-Parser](https://github.com/mdegrazia/SQLite-Deleted-Records-Parser).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three variants of the tool: a Python script, command-line version,
    and GUI version. For demonstration purposes, we will use the GUI version, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1064fc1a-b494-4dd8-9bd6-28193b3b9dc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the tool is extremely easy, all you need is to choose the source database
    and the destination file, and click Process. As a result, you'll get a TSV file
    (if you've chosen Formatted Output) with recovered records, including their source
    (unallocated space or free block), offset, and length.
  prefs: []
  type: TYPE_NORMAL
- en: SD card security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In older versions of Android, simply plugging a phone into a computer would
    logically mount the SD card and allow an examiner access to its data. In one of
    the versions of Android (possibly 3.0), this changed, although the exact version
    could not be found in the various change logs we examined. Newer versions of Android
    will not automatically allow access to the SD card from a computer if a screen
    lock is in use, meaning that the screen lock will have to be bypassed in order
    to gain access to the SD card. The obvious exception to this is that a physical,
    external SD card can still be removed and analyzed with traditional computer forensic
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: SD cards can also be encrypted, either through the device's full-disk encryption
    if it is an internal SD card, or through third-party applications if it is an
    external SD card. In some cases, activating the full-disk encryption will leave
    the SD card unencrypted, though this varies by device manufacturer.
  prefs: []
  type: TYPE_NORMAL
- en: The full-disk encryption introduced in Android Lollipop also encrypts the SD
    card.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced forensic methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the methods discussed in the previous chapters, there are also
    more advanced, specialized methods available. The JTAG and chip-off methods are
    both highly useful tools in many common situations, but require advanced training
    (and a lot of practice before working on live evidence!). The final advanced method,
    a cold boot attack to recover encryption keys, is far more theoretical.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JTAG, the **Joint Test Action Group** (**JTAG**) is a standard that was developed
    by the **Institute of Electrical and Electronics Engineers** (**IEEE**). During
    the device production process, it is used to communicate with the processor through
    a specialized interface for testing purposes. Luckily for forensic examiners,
    it also allows them to communicate directly with the processor and retrieve a
    full physical image of the flash memory.
  prefs: []
  type: TYPE_NORMAL
- en: To perform a JTAG extraction, the device must be taken apart, down to the circuit
    board. The circuit board will contain multiple taps (physical contacts on the
    device circuit board), though they are commonly unlabeled and there are usually
    far more taps than required for JTAG. To determine the correct taps, an examiner
    would have to either find a pin-out online (or included with their tool of choice),
    or use electronic test equipment to determine what each tap is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The examiner will then have to solder a wire to each tap, or use adapters (sometimes
    called jigs) that are commercially available, and connect to their JTAG box through
    a provided adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbe26e2a-79ef-4f73-ba41-b3fe5090160e.png)'
  prefs: []
  type: TYPE_IMG
- en: HTC Evo before and after being hooked up for JTAG (courtesy of http://lowcostwin4n6.blogspot.com/)
  prefs: []
  type: TYPE_NORMAL
- en: 'JTAG may sound complicated (because it is), but it serves many useful purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It does not require the device to be powered on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be successful even if the device is damaged
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No RF-shielding concerns
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It does not require root, ADB, or USB debugging:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be used to bypass device PINs/passwords
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can image the entire flash memory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Many manufacturers make JTAG tools, and many of the most common ones that are
    used for mobile forensics can be found at [http://teeltech.com/mobile-device-forensic-software/teel-tech-jtag-box-sets/](http://teeltech.com/mobile-device-forensic-software/teel-tech-jtag-box-sets/).
    The RIFF box listed on this site is probably the most frequently used for mobile
    forensics, as it comes with support (including pin-outs) for a wide variety of
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG is not always successful, or even possible. Though the interface is almost
    always on the circuit board, the manufacturer can choose to disable it after the
    device has been manufactured.
  prefs: []
  type: TYPE_NORMAL
- en: Chip-off
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chip-off involves heating the device''s circuit board until the solder holding
    the components to the board melts, and then removing the flash memory chip. The
    memory chip can then be read using commercial tools, resulting in a full physical
    image. Chip-off techniques, like JTAG, stem from the commercial electronic production
    process. The process of melting the solder (commonly called reflow or rework)
    is used to place and remove components from a circuit board, and the readers used
    to acquire the memory are used to both read and write to memory chips, often in
    bulk quantities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbc2282e-7426-4a35-838c-583bf8d2b31c.png)'
  prefs: []
  type: TYPE_IMG
- en: A memory chip being removed from a damaged phone (courtesy of www.binaryintel.com)
  prefs: []
  type: TYPE_NORMAL
- en: 'Chip-off has the same benefits as JTAG: it does not require the device to be
    powered on, and can be used to bypass the PIN/password on a locked device. Chip-off
    is normally considered to be a destructive process. While the memory chip can
    be replaced on the device, it is a technically demanding process and requires
    further training. But, as a last resort, chip-off is an excellent alternative
    for devices that would otherwise be impossible to examine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chip-off is significantly more expensive than JTAG, as a specialized rework
    station and commercial memory reader is required. There are dozens of rework stations
    available, and they all provide essentially the same functionality. There is also
    a wide range of memory readers, though we have had great success with this reasonably
    priced model: [http://www.dataman.com/programmers/universal/dataman-48pro2-super-fast-universal-isp-programmer.html](http://www.dataman.com/programmers/universal/dataman-48pro2-super-fast-universal-isp-programmer.html).
    A rework station and reader aren''t the only costs associated with chip-off; most
    readers will also require a specific adapter for each model of chip to be read.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed several techniques that are used for physically
    imaging internal memory or SD cards, and some of the common problems associated
    with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technique** | **Problems associated** |'
  prefs: []
  type: TYPE_TB
- en: '| `dd` |'
  prefs: []
  type: TYPE_TB
- en: Usually preinstalled on device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May not work on MTD blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not obtain the out-of-band area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `nanddump` |'
  prefs: []
  type: TYPE_TB
- en: Not commonly found on the device, must be pushed to device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works well with MTD blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May obtain the out-of-band area, based on options in the binary used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, each imaging technique can be used to either save the image on
    the device (typically on the SD card), or used with `netcat` to write the file
    to the examiner''s computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technique** | **Features** |'
  prefs: []
  type: TYPE_TB
- en: '| Writing to SD card |'
  prefs: []
  type: TYPE_TB
- en: Easy, doesn't require additional binaries to be pushed to the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Familiar to most examiners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cannot be used if SD card is symbolically linked to the partition being imaged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cannot be used if the entire memory is being imaged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Using `netcat` |'
  prefs: []
  type: TYPE_TB
- en: Usually requires yet another binary to be pushed to the device on older devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Somewhat complicated, must follow steps exactly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works no matter what is being imaged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May be more time-consuming than writing to the SD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some tools that can be used for RAM imaging were also introduced:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tool** | **Features** |'
  prefs: []
  type: TYPE_TB
- en: '| LiME |'
  prefs: []
  type: TYPE_TB
- en: Must be compiled for each device being examined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very complicated process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known, well-documented procedures for analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output is a dump of all RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we briefly discussed chip-off and JTAG techniques at an introductory
    level.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will demonstrate the recovery of deleted data from physical
    images, like the ones created in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering deleted data from internal memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recovering files deleted from Android's internal memory, such as app data and
    so on, is not as easy as recovering such data from SD cards and SQLite databases,
    but, of course, it's not impossible. Many commercial forensic tools are capable
    of recovering deleted data from Android devices, of course, if physical acquisition
    is possible and the userdata partition isn't encrypted.  But this is not very
    common for modern devices, especially those running most recent versions of the
    operating system, such as Oreo and Pie.
  prefs: []
  type: TYPE_NORMAL
- en: Most Android devices, especially modern smartphones and tablets, use the EXT4
    file system to organize data in their internal storage. This file system is very
    common for Linux-based devices. So, if we want to recover deleted data from the
    device's internal storage, we need a tool capable of recovering deleted files
    from the EXT4 file system. One such tool is extundelete. The tool is available
    for downloading here: [http://extundelete.sourceforge.net/](http://extundelete.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: To recover the contents of an inode, extundelete searches a file system's journal
    for an old copy of that inode. Information contained in the inode helps the tool
    to locate the file within the file system. To recover not only the file's contents,
    but also its name, extundelete is able to search the deleted entries in a directory to
    match the inode number of a file to a file name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this tool, you will need a Linux workstation. Most forensic Linux distributions
    have it already on board. For example, the following is a screenshot from **SIFT
    Workstation**—a popular digital forensics and incident response Linux distribution
    created by Rob Lee and his team from the SANS Institute ([https://digital-forensics.sans.org/community/downloads](https://digital-forensics.sans.org/community/downloads)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e0c1a39-e836-44f9-b5ff-84ae13cdb19b.png)'
  prefs: []
  type: TYPE_IMG
- en: extundelete command-line options
  prefs: []
  type: TYPE_NORMAL
- en: Before you can start the recovery process, you will need to mount a previously
    imaged userdata partition. In this example, we are going to use an Android device
    imaged via the chip-off technique—you've already learned about this technique
    in [Chapter 5](a910938e-1c0b-4f19-baae-509ccaa36c09.xhtml),* Extracting Data Physically
    from Android Devices.*
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to determine the location of the userdata partition within
    the image. To do this, we can use `mmls` from the **Sleuth Kit**, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9ce9116-91d1-499d-872e-dfe3158901fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Android device partitions
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the screenshot, the userdata partition is the last one and
    starts in sector `9199616`. To make sure the userdata partition is EXT4 formatted,
    let''s use `fsstat`, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17ad8b59-c03e-4c89-b535-8ea680fbada8.png)'
  prefs: []
  type: TYPE_IMG
- en: A part of fsstat output
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need now is to mount the userdata partition and run extundelete against
    it, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All recovered files will be saved to a subdirectory of the current directory
    named `RECOVERED_FILES`. If you are interested in recovering files before or after the specified
    date, you can use the `--before date` and `--after-date` options. It's important
    to note that these dates must be in UNIX Epoch format. There are quite a lot of
    both online and offline tools capable of converting timestamps, for example, you
    can use [https://www.epochconverter.com/](https://www.epochconverter.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, this method isn''t very easy and fast, but there is a better
    way: using Autopsy, an open source digital forensic tool already introduced in
    [Chapter 3](615ae74c-4301-46e6-92f2-387637bebd38.xhtml), *Understanding Data Storage
    on Android Devices. *'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we used a built-in file extension filter to find
    all the images on the Android device, and found a lot of deleted artifacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6b824c9-c88d-43a9-a3fa-2419e81f6628.png)'
  prefs: []
  type: TYPE_IMG
- en: Recovering deleted files from an EXT4 partition with Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: It's not always possible to recover deleted files using the file system journal;
    this is where file carving comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering deleted data using file carving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File carving is an extremely useful method in forensics because it allows for
    data that has been deleted or hidden to be recovered for analysis. In simple terms,
    file carving is the process of reassembling files from fragments in the absence
    of file system metadata. In file carving, specified file types are searched for
    and extracted across the binary data to create a forensic image of a partition
    or an entire disk. File carving recovers files from the unallocated space in a
    drive based merely on file structure and content, without any matching file system
    metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Unallocated space refers to the part of the drive that no longer holds any file
    information, as pointed by file system structures such as file tables.
  prefs: []
  type: TYPE_NORMAL
- en: Files can be recovered or reconstructed by scanning the raw bytes of the disk
    and reassembling them. This can be done by examining the header (the first few
    bytes) and footer (the last few bytes) of a file.
  prefs: []
  type: TYPE_NORMAL
- en: File-carving methods are categorized based on the underlying technique in use.
    The **header-footer carving method** relies on recovering the files based on the
    header and footer information. For instance, the JPEG files start with `0xffd8`
    and end with `0xffd9`. The locations of the header and footer are identified and
    everything between those two endpoints is carved. Similarly, the **file structure
    carving method** is based on the internal layout of a file to reconstruct the
    file. But the traditional file carving techniques, such as the ones we've already
    explained, may not work if the data is fragmented. To overcome this, new techniques
    such as **smart carving** use the fragmentation characteristics of several popular
    file systems to recover the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the phone is imaged, it can be analyzed using tools such as PhotoRec.
    PhotoRec is a powerful free utility to carve files. This tool analyzes the block
    database storage, identifies the deleted files, and recovers them. Scalpel is
    file system-independent and is known to work on various file systems including
    EXT4, exFAT, FAT32, and more. The following steps explain how to recover files
    using PhotoRec on a Windows workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the tool from [https://www.cgsecurity.org/wiki/TestDisk_Download](https://www.cgsecurity.org/wiki/TestDisk_Download).
    Unpack the archive in the directory of choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Command Prompt with Administrator privileges and run `photorec.exe` with
    the Android physical image as an argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the partition you want to carve data from, in our case it''s `USERDATA`.
    This is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ba7d350-bf8c-4f66-b536-34f5a659b6ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing partition in PhotoRec
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want only exact file types to be carved, go to `File Opt`. In our case,
    we were only interested in JPG images, so we chose only one file type, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27f56000-4623-4476-801c-caeb2b66b6f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing file types in PhotoRec
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the file system type, in our case it''s EXT4, as shown in the following
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93c60332-8d47-45be-8962-754f7eaa0e74.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the file system type in PhotoRec
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should choose whether the tool should carve only free space or the
    whole partition. The second option will bring you more data, but it will be mixed
    with files those are not deleted. These choices can be seen in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ecc2f53-a46d-4c1c-8296-b1ce3a9dce8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing if all space needs to be analyzed
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, choose the folder where the recovered files will be stored. You can
    use arrow keys to do this, and then press *C*, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47ecf76c-c920-45db-b29d-7aa3f6d29306.png)'
  prefs: []
  type: TYPE_IMG
- en: Recovered files will be saved under the subdirectories of the chosen directory
    named `recup_dir`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data recovery is the process of retrieving deleted data from the device and
    thus is a very important concept in forensics. In this chapter, we have seen various
    techniques to recover deleted data from both the SD card and the internal memory.
    While recovering the data from a removable SD card is easy, recovering data from
    internal memory involves a few complications. SQLite file parsing and file carving
    techniques aid a forensic analyst in recovering the deleted items present in the
    internal memory of an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will try to understand the forensic perspective and
    the analysis of Android apps.
  prefs: []
  type: TYPE_NORMAL
