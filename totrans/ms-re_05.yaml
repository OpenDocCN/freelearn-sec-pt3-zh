- en: Tools of the Trade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we used some simple reversing tools, such as PEiD,
    CFF Explorer, IDA Pro, and OllyDbg, which aided us in our reversing adventure.
    This chapter explores and introduces more tools we can use and choose from. The
    selection of tools depend on the analysis required. For example, if a file was
    identified as an ELF file type, we'd need to use tools for analyzing a Linux executable.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers tools for Windows and Linux, categorized for static and
    dynamic analysis. There are a lot of tools available out there—don't limit yourself
    to the tools discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will achieve the following learning outcomes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding static and dynamic tools for Windows, and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding support tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analysis environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The environment setup in reverse engineering is crucial to the result. We need
    a sandbox environment where we can dissect and play with the file, without worrying
    that we may break something. And since the most popular operating systems are
    Microsoft Windows and Linux, let's discuss using these operating systems in a
    virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the first chapter, we introduced using VirtualBox as our desktop virtualization
    system. The reason we chose VirtualBox was because of it being freeware. But besides
    VirtualBox, choosing the right sandboxing software depends on user preferences
    and requirements. There are pros and cons for every piece of sandboxing software,
    so it is worth exploring those on offer to find out which software you prefer.
    Here''s a small list of virtualization software:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VMWare Workstation:** This is a commercial, and widely popular, piece of
    virtualization software. VMWare Workstation can be downloaded from** [https://www.vmware.com](https://www.vmware.com)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox:** This is free and open source virtualization software. It can
    be downloaded from **[https://www.virtualbox.org](https://www.virtualbox.org)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Qemu (Quick Emulator):** This is actually not virtualization software, but
    rather, an emulator. Virtualization software uses virtualization features of the
    CPU, but uses real CPU resources to do this, while emulators simply imitate a
    CPU and its resources. That is, running an operating system in a virtualized environment
    uses the real CPU, while running an operating system in an emulated environment
    uses an imitated CPU. The Qemu module can be installed from Linux standard repositories.
    It has ports for both Windows and macOS, and can be downloaded from** [https://www.qemu.org](https://www.qemu.org)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bochs:** An emulator that is limited to emulating the x86 CPU architecture.
    It is released as an open source and usually used for debugging the **Master Boot
    Record** (**MBR**) of small disk images. See [http://bochs.sourceforge.net](http://bochs.sourceforge.net)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Hyper-V:** A virtualization feature of selected Microsoft Windows
    versions, including Windows 10\. Activate it from the following menu like so:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**![](img/cc7392a0-6f87-4a4e-890b-ac46805a6e01.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parallels:** A commercial virtualization program, primarily designed to run
    Windows in a macOS host. More information about this piece of software can be
    found at[https://www.parallels.com/](https://www.parallels.com/). [](https://www.parallels.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage of emulators is that other CPU architectures, such as ARM, can
    be emulated. Unlike virtualization software, emulators depend on the bare-metal
    machine's hypervisor. The drawback is possible slow performance as every emulated
    instruction is interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is recommended to do analysis on a 32- or 64-bit Windows 10 system, or the
    most recent version on offer. At the least, Windows 7 can still be used, since
    it is light and has a stable environment for running executable files. As much
    as possible, selecting the most popular and widely used version of Windows will
    be the best choice. Choosing old versions such as XP may not be very helpful,
    unless the program we are going to reverse was solely built for Windows XP.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, there are two ways we can get Windows for our analysis**:**
  prefs: []
  type: TYPE_NORMAL
- en: Install Windows 10 from an installer or ISO image that can be downloaded from [https://www.microsoft.com/en-us/software-download/windows10](https://www.microsoft.com/en-us/software-download/windows10).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the Windows appliance used for testing old versions of Edge and Internet
    Explorer. The appliance can be downloaded from **[https://developer.microsoft.com/en-us/microsoft-edge/tools/vms](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms).**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These downloads do not have any license installed, and will expire within a
    short period. For the second option in the preceding list, after the deploying
    the appliance, it is best to take an initial snapshot *before* running the virtual
    machine. Reverting to this initial snapshot should reset the expiration back to
    when the appliance was deployed. Further snapshots should also be created, containing
    configuration updates and installed tools.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux can easily be downloaded due to it being open source. Popular systems
    are usually forked from Debian or Red Hat systems. But since most of the tools
    developed for analysis are built under Debian-based systems, we selected Lubuntu
    as our analysis environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lubuntu** is a light version of Ubuntu**.**'
  prefs: []
  type: TYPE_NORMAL
- en: However, we are not leaving Red Hat-based systems from our list. If a program
    was designed to run only on Red Hat-based systems, we should do our dynamic reversing
    and debugging on a Red Hat-based system. As noted, reverse engineering requires
    not only the tools fit for the target, but the environment as well.
  prefs: []
  type: TYPE_NORMAL
- en: Lubuntu can be downloaded from [https://lubuntu.net](https://lubuntu.net). But,
    if you prefer using Ubuntu, you can download the installer from **[https://www.ubuntu.com](https://www.ubuntu.com)**.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing what we are dealing with prepares us further. For example, if a file
    were identified as a Windows executable, we then prepare Windows executable tools.
    Information gathering tools helps us identify what the file type is and its properties.
    The information gathered becomes a part of the analysis profile. These tools are
    categorized as file type identifying, hash calculating, text string gathering,
    and monitoring tools.
  prefs: []
  type: TYPE_NORMAL
- en: File type information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These tools gather primary information about a file. The data gathered includes
    the filename, file size, file type, and file type-specific properties. The result
    of these tools enables the analyst to plan how to analyze the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PEiD:** A tool used to identify the file type, the packer, and compiler.
    It is built to run in Windows. It is not maintained, but still very useful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TrID:** A command-line tool similar to PEiD. This tool has Windows and Linux
    versions. It can read a community-driven signature database of various file types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CFF Explorer:** This tool is primarily used to read and make edits in a PE
    format file. It runs under Windows and has a lot of features, such as listing
    processes and dumping processes to a file. It can also be used to rebuild a process
    dump.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PE Explorer: **Another tool used to read and edit the structure of PE files.
    It can also unpack a number of executable compressed programs, such as UPX, Upack,
    and NSPack. PE Explorer only runs in Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detect-it-Easy (DiE): **Downloaded from [https://github.com/horsicq/Detect-It-Easy](https://github.com/horsicq/Detect-It-Easy),
    DiE is an open source tool that uses a community-driven set of algorithmic signatures
    to identify files. The tool has builds for Windows and Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ExifTool: **This tool was primarily designed to read and edit the metadata
    of image files with an EXIF file format. It was further developed to extend features
    for other file formats, including PE files. ExifTool is available for Windows
    and Linux and can be downloaded from **[https://sno.phy.queensu.ca/~phil/exiftool/](https://sno.phy.queensu.ca/~phil/exiftool/)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash identifying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Information gathering also includes identifying a file by its hash. Not only
    does the hash help validate a transferred file; it is also commonly used as a
    unique ID for a file analysis profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quickhash:** This is an open source tool available for Windows, Linux, and
    macOS that generates the MD5, SHA1, SHA256, and SHA512 of any file. It can be
    downloaded from** [https://quickhash-gui.org/](https://quickhash-gui.org/)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HashTab: **This tool runs in Windows and can be integrated as a tab in the
    properties information of a file. It calculates the MD5, SHA1, and a couple of
    hash algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**7-zip:** This tool is actually a file archiver, but it has an extension tool
    that can be enabled to calculate the hash of a file in MD5, SHA1, SHA256, and
    so forth.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Text-string gathering tools are mainly used to quickly identify possible functions
    or messages used by the program. It is not always true that every text string
    is used by the program. Program flow still depends on conditions set in the program.
    However, the string locations in the file can be used as markers that the analyst
    can trace back:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SysInternals Suite''s strings: **This is a command-line tool for Windows
    that shows the list of text strings in any type of file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BinText: **This is a GUI-based Windows tool that can display the ASCII and
    Unicode text strings for any given file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Without manually digging deeper into the program''s algorithm, simply running
    the program can give plenty of information about its behavior. Monitoring tools
    usually work by placing sensors in common or specific system library functions,
    then logging the parameters used. Using monitoring tools is a fast way to produce
    an initial behavior analysis of a program:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SysInternals Suite''s Procmon or Process Monitor: **Running only on Windows,
    this is a real-time monitoring tool that monitors processes, thread, filesystem,
    and registry events. It can be downloaded from [https://docs.microsoft.com/en-us/sysinternals/downloads/procmon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)
    and is a part of the SysInternals Suite package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API Monitor: **This powerful tool helps reverse engineering by monitoring
    API calls as the program runs. The analyst has to set which API the tool needs
    to hook. Once an API is hooked, all user-mode processes using the API will be
    logged. API Monitor can be downloaded from [http://www.rohitab.com/apimonitor](http://www.rohitab.com/apimonitor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CaptureBAT: **In addition to what Process Monitor can do, this command-line
    tool is also capable of monitoring network traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default command-line tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a couple of useful tools that are already built into the operating
    system we are working on. These come in handy when third party tools are not available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**strings:** This is a Linux command used to list the strings found in a given
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**md5sum: **This is a Linux command used to calculate the MD5 hash of a given
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**file:** This is a command line in Linux used to identify files. It uses the
    libmagic library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disassemblers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Disassemblers are tools used to look at the low-level code of a program compiled
    from either a high-level language, or of the same low-level language. As part
    of analysis, deadlisting and recognizing the blocks of code help to build up the
    behavior of the program. It is then be easier to identify only code blocks that
    need to be thoroughly debugged, without running through the whole program code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IDA Pro:** A popular tool used in the software security industry to disassemble
    various low-level language built on the x86 and ARM architectures. It has a wide
    list of features. It can generate a graphical flow of code, showing code blocks
    and branching. It also has scripting that can be used to parse through the code
    and disassemble it into more meaningful information. IDA Pro has an extended plugin,
    called Hex-Rays, that is capable of identifying assembly codes to its equivalent
    C source or syntax. The free version of IDA Pro can be downloaded from **[https://www.hex-rays.com/products/ida/support/download_freeware.shtml](https://www.hex-rays.com/products/ida/support/download_freeware.shtml)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radare: **Available on Windows, Linux, and macOS, this open source tool shows
    the disassembled equivalent of a given program. It has a command-line interface
    view, but there are existing plugins that can show it using the computer''s browser.
    Radare''s source can be downloaded and built from [https://github.com/radare/radare2](https://github.com/radare/radare2).
    Information on how to install binaries can be found at its website, available
    at** [https://rada.re](https://rada.re)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capstone:** This is an open source disassembly and decompiler engine. The
    engine is used by many disassembly and decompiler tools, such as Snowman. Information
    about this tool can be found at **[https://www.capstone-engine.org/](https://www.capstone-engine.org/)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hopper:** A disassembly tool for Linux and macOS operating systems. It has
    a similar interface as IDA Pro and is capable of debugging using GDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BEYE: **Also known as Binary EYE, this is a hex viewer and editing tool with
    the addition of a disassembly view mode. BEYE is available for Windows and Linux.
    It can be downloaded from** [https://sourceforge.net/projects/beye/](https://sourceforge.net/projects/beye/)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HIEW:** Also known as Hacker''s View, is similar to BEYE, but has better
    information output for PE files. The paid version of HIEW has more features supporting
    a lot of file types and machine architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debuggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When debugging tools are used, this would mean that we are in the code-tracing
    phase of our analysis. Debuggers are used to step in every instruction the program
    is supposed to do. In the process of debugging, actual interaction and changes
    in memory, disk, network, and devices can be identified:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x86dbg:** This is a Windows user-mode debugger. It is open source and can
    debug 32- and 64-bit programs. It is capable of accepting plugins written by users.
    The source code can be downloaded from [https://github.com/x64dbg](https://github.com/x64dbg).
    The builds can be downloaded from [https://x64dbg.com](https://x64dbg.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IDA Pro:** Paid versions of IDA Pro are capable of debugging using the same
    disassembly interface. It is very useful when you want to see a graphical view
    of decrypted code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OllyDebug:** A popular Windows debugger, due to its portability and rich
    features. It can accommodate plugins written by its users, adding capabilities
    such as unpacking a loaded executable compressed file (by reaching the original
    entry point) and memory dumping. Ollydebug can be downloaded from [http://www.ollydbg.de/](http://www.ollydbg.de/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Immunity Debugger:** The interface of this program looks like a highly improved
    version of OllyDebug. It has plugin support for Python and other tools. Immunity
    Debugger can be downloaded from Immunity, Inc.''s site at [https://www.immunityinc.com/products/debugger/](https://www.immunityinc.com/products/debugger/). Older
    versions can be found at [https://github.com/kbandla/ImmunityDebugger/](https://github.com/kbandla/ImmunityDebugger).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windbg:** A debugger developed by Microsoft. The interface is quite plain,
    but can be configured to show every kind of information needed by a reverser.
    It is capable of being set up to remotely debug device drivers, software in the
    kernel levels, and even a whole Microsoft operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GDB:** Also known as GNU Debugger, GDB is originally a debugger developed
    for Linux and a couple of other operating systems. It is capable of debugging
    not only low-level languages but also used for debugging high-level languages
    such as C, C++, and Java. GDB can also be used in Windows. GDB uses a command-line
    interface, but there are existing GUI programs that use GDB for a more informative
    look.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radare:** Radare also has a debugger packaged along with it. It can also
    do remote debugging by using GDB remotely. Its interface is command line-based
    but has an integrated visual view. Its developers also made a better visual view
    using the browser. Basically, compared with GDB, Radare would be much preferred.
    It is also primarily built for Linux, but has compiled binaries on offer for Windows
    and macOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decompilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Disassemblers are used to show the low-level code of a compiled high-level
    program. Decompilers, on the other hand, attempt to show the high-level source
    code of the program. These tools work by identifying blocks of low-level code
    that match with corresponding syntax in the high-level program. It is expected
    that these tools won''t be able to show what the original program''s source code
    looks like, but nonetheless, they help speed up analysis with a better view of
    the program''s pseudo code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Snowman:** This is a C and C++ decompiler. It can run as a standalone tool,
    or as an IDA Pro plugin. The source can be found at [https://github.com/yegord/snowman](https://github.com/yegord/snowman),
    while its compiled binaries can be downloaded from [https://derevenets.com/](https://derevenets.com/).
    It is available for Windows and Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hex-Rays: **This is also a C and C++ decompiler and runs as a plugin for
    IDA Pro. It is sold commercially as part of IDA Pro. Users should expect this
    to have a better decompiled output than Snowman.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dotPeek: **This is a free .NET decompiler by Jetbrains. It can be downloaded
    from [https://www.jetbrains.com/decompiler/](https://www.jetbrains.com/decompiler/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iLSpy:** This is an open source .NET decompiler. The source and pre-compiled
    binaries can be found at [https://github.com/icsharpcode/ILSpy](https://github.com/icsharpcode/ILSpy).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of tools that are used to monitor the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tcpdump:** This is a Linux-based tool used to capture network traffic. It
    can be installed from the default repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wireshark: **This tool is capable of monitoring network traffic. Incoming
    and outgoing network traffic, including packet information and data, is logged
    in real time. Originally named Ethereal, Wireshark is available for Windows, Linux,
    and macOS, and can be downloaded from [https://www.wireshark.org/](https://www.wireshark.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mitmproxy: **Also known as Man-In-The-Middle Proxy. As its name states, it
    is set up as a proxy, and thus able to control and monitor network traffic before
    data is either sent externally or received by internal programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**inetsim:** Essentially, this tool fakes network and internet connectivity,
    thereby trapping any network traffic sent externally by a program. This is very
    useful for analyzing malware, preventing it from sending data externally, while
    having knowledge of where it connects to and what data it tries to send.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There may be instances where we need to modify the contents of a program to
    make it work properly, or validate a code behavior. Modifying data in a file can
    also change the code flow where conditional instructions may happen. Changing
    instructions can also work around anti-debugging tricks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HxD Hex Editor:** A Windows binary file viewer and editor. You can use this
    to view the binary contents of a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bless:** A Linux binary file viewer and editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notepad++:** A Windows text editor, but can also read binary files, though
    reading binary files with hexadecimal digits would require a hex-editing plugin.
    Still, this is useful for reading and analyzing scripts, due to its wide range
    of supported languages, including Visual Basic and JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BEYE:** A useful tool for viewing and editing any file type. BEYE is available
    for Windows and Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HIEW: **The feature that makes this software worthwhile is its ability to
    do on-the-fly encryption using assembly language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There may be cases where we need to craft our own packets to fool the program
    into thinking that it is receiving live data from the network. Though these tools
    are primarily developed to generate exploited network packets for penetration
    testing, these can also be used for reverse engineering:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metasploit** ([https://www.metasploit.com/](https://www.metasploit.com/)):
    This is a framework with scripts that can generate exploited packets to send to
    the target for penetration tests. The scripts are modular and users can develop
    their own scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ExploitPack** ([http://exploitpack.com/](http://exploitpack.com/)): This
    has the same concept as Metasploit, though is maintained by a different group
    of researchers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developing our own programs to do analysis may sometimes be a must. For example,
    if the program contains a decryption algorithm, we can develop a separate program
    that can run the same algorithm that may be used for similar programs with the
    same decryption algorithm. If we wanted to identify variants of the file we were
    analyzing, we could automate the identification for incoming files using one of
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python:** This scripting language is popular because of it availability across
    multiple platforms. It is pre-installed in Linux operating systems; compiled binaries
    for Windows can be downloaded from [https://www.python.org/](https://www.python.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yara:** A tool and language from the developers of VirusTotal. It is capable
    of searching the contents of files for a set of binary or text signatures. Its
    most common application is in searching for malware remnants in a compromised
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio:** A piece of Microsoft software for coding and building programs.
    It can be used by reverse engineers when decompiled programs need to be debugged
    graphically. For example, we can debug a decompiled C# program using Visual Studio,
    instead of trying to understand each p-code of disassembled C# codes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software forensic tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reverse engineering includes analyzing the post-execution of a program. This
    entails gathering and determining objects and events from memory and disk images.
    With these tools, we can analyze the suspended state of an operating system with
    the process of the program being analyzed still in running memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of different forensic software that can be downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: Digital Forensics Framework ([https://github.com/arxsys/dff](https://github.com/arxsys/dff))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Computer Forensics Architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/DNPA/OcfaArch](https://github.com/DNPA/OcfaArch)'
  prefs: []
  type: TYPE_NORMAL
- en: '[                    https://github.com/DNPA/OcfaLib](https://github.com/DNPA/OcfaLib)'
  prefs: []
  type: TYPE_NORMAL
- en: '[                    https://github.com/DNPA/OcfaModules](https://github.com/DNPA/OcfaModules)'
  prefs: []
  type: TYPE_NORMAL
- en: '[                    https://github.com/DNPA/OcfaDocs](https://github.com/DNPA/OcfaDocs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[                    https://github.com/DNPA/OcfaJavaLib](https://github.com/DNPA/OcfaJavaLib)'
  prefs: []
  type: TYPE_NORMAL
- en: CAINE ([https://www.caine-live.net/](https://www.caine-live.net/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X-Ways Forensics Disk Tools ([http://www.x-ways.net/forensics/](http://www.x-ways.net/forensics/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SIFT ([https://digital-forensics.sans.org/community/downloads](https://digital-forensics.sans.org/community/downloads))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SleuthKit ([http://www.sleuthkit.org/](http://www.sleuthkit.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LibForensics ([https://code.google.com/archive/p/libforensics/](https://code.google.com/archive/p/libforensics/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volatility ([https://github.com/volatilityfoundation](https://github.com/volatilityfoundation)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In malware analysis, Volatility is one of the popular pieces of open source
    software used. It is able to read suspended states of virtual machines. The advantage
    of such tools is that malware, such as rootkits, that try to hide themselves from
    user domains can be extracted using memory forensic tools.
  prefs: []
  type: TYPE_NORMAL
- en: BulkExtractor ([http://downloads.digitalcorpora.org/downloads/bulk_extractor/](http://downloads.digitalcorpora.org/downloads/bulk_extractor/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PlainSight ([http://www.plainsight.info/index.html](http://www.plainsight.info/index.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helix3 ([http://www.e-fense.com/products.php](http://www.e-fense.com/products.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RedLine ([https://www.fireeye.com/services/freeware/redline.html](https://www.fireeye.com/services/freeware/redline.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xplico ([https://www.xplico.org/](https://www.xplico.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated dynamic analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are tools used to automatically gather information by running the program
    in an enclosed sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cuckoo:** This is a piece of Python-coded software deployed in Debian-based
    operating systems. Usually, Cuckoo is installed in the hosting Ubuntu system,
    and sends files to be analyzed in the VMWare or VirtualBox sandbox clients. Its
    development is community-driven, and as such, a lot of open source plugins are
    available for download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ThreatAnalyzer:** Sold commercially, ThreatAnalyzer, previously known as
    CWSandbox, has been popular in the anti-virus community for its ability to analyze
    malware and return very useful information. And because users are able to develop
    their own rules, ThreatAnalyzer, as a backend system, can be used to determine
    if a submitted file contains malicious behaviors or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Joe Sandbox:** This is another commercial tool that shows meaningful information
    about the activities that a submitted program carries out when executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Buster Sandbox Analyzer (BSA): **The setup of BSA is different from the first
    three tools. This one does not require a client sandbox. It is installed in the
    sandbox environment. The concept of this tool is to allocate disk space where
    a program can run. After running, everything that happened in the space is logged
    and restored back afterwards. It is still recommended to use BSA in an enclosed
    environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regshot: **this is a tool used to capture a snapshot of the disk and registry.
    After running a program, the user can take a second snapshot. The difference of
    the snapshots can be compared, thereby showing what changes were made in the system.
    Regshot should be run in an enclosed environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online service sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are existing online services that can also aid us in our reversing.
  prefs: []
  type: TYPE_NORMAL
- en: '**VirusTotal:** This submits a file or a URL and cross-references it with a
    list of detections from various security programs. The result gives us an idea
    if the file is indeed malicious or not. It can also show us some file information,
    such as the SHA256, MD5, file size, and any indicators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malwr:** Files submitted here will be submitted to a backend Cuckoo system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Falcon Sandbox:** This is also known as hybrid-analysis, and is an online
    automated analysis system developed by Payload Security. Results from Cuckoo and
    hybrid-analysis uncover similar behaviors, but one may show more information than
    the other. This may depend on how the client sandbox was set up. If, say, the
    .NET framework was not installed in the sandbox, submitted .NET executables will
    not run as expected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**whois.domaintools.com:** This is a site that shows the whois information
    about a domain or URL. This may come in handy, especially when trying to determine
    which country or state a program is trying to connect to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**robtex.com:** A similar site to whois, that shows historical info and a graphical
    tree of what a given site is connected to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**debuggex.com:** This is an online regular expressions service, where you
    can test your regex syntax. This can come in handy when developing scripts, or
    reading scripts or codes that contain regular expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting files or URLs to these online sites would mean that you are sharing
    information to their end. It would be best to ask for the permission of the owner
    of the file or URL before submitting.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we listed some of the tools used for reverse engineering. We
    tried to categorized the tools based on their purposes. But just as how we choose
    every piece of software that we use, the reverser's preferred set of tools depend
    on the packed features they contain, how user-friendly they are, and most importantly,
    whether or not they have the features required to do the job. We have covered
    the tools we can use for static analysis, including binary viewer and disassembly
    tools. We also listed useful debugging tools that we can use for Windows and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: From the list, I personally recommend HIEW, x86dbg, IDA Pro, Snowman, and iLSpy
    for Windows analysis of PE binary executables. And on the Linux side, BEYE, Radare,
    GDB, and IDA Pro are great for analyzing ELF files.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered some online services that can help us gain more information
    about sites we extracted from the analysis. We also introduced systems that can
    automate analysis, when we are going to deal with a lot of files. In addition,
    we listed a few forensic tools that we can use to analyze suspended memory.
  prefs: []
  type: TYPE_NORMAL
- en: As always, these tools have their pros and cons, and those eventually chosen
    will depend on the user and the type of analysis needed. The tools each have their
    own unique capability and comfort. For the next chapters, we will be using a mix
    of these tools. We may not use all of them, but we'll use what will get the analysis
    done.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn more tools as we engage in reverse engineering
    on Linux platforms.
  prefs: []
  type: TYPE_NORMAL
