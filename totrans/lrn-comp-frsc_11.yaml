- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Networking Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very rarely in your career will you have to investigate a single computer that
    has not connected to a network. When I say “computer,” this includes mobile devices.
    Desktops, laptops, and mobile devices are designed to share information through
    a network we refer to as the “Internet.” There are legitimate uses for such devices
    as well as illegitimate uses. For example, users of these devices have been known
    to record audio and video of themselves committing criminal acts. These same users
    will also use the Internet to research activities they plan on executing in the
    future; these activities will include criminal acts.
  prefs: []
  type: TYPE_NORMAL
- en: 'There may also come a time when you are called to investigate a crime where
    a device has been the target of a crime: a server may have been hacked, a user’s
    mobile device may have been compromised, or a user’s online storage may have been
    compromised. These acts require you to understand how devices communicate on the
    network. This chapter will discuss some of the essential information you need
    to understand about networks, from theoretical concepts right through to network
    topology, addressing, and some basic protocols, to increase your networking knowledge.
    I recommend that you study for the CompTIA Network+ exam and the Security+ exam.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The OSI and DOD models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common ports and protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network is built on a set of standards and models. If the clients on the network
    do not adhere to a set standard, there will be a lack of communication. This ensures
    that all clients on the network can communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: The primary reference model used for the configuration of networks is the **Open
    Source Interconnection** (**OSI**) model. Developers use the OSI model to break
    communication into different layers; each layer has a specific role to play in
    how data is transmitted and received. (If you wish to read about the OSI standard
    in much greater detail, you can go to [https://www.iso.org/standard/20269.html](https://www.iso.org/standard/20269.html).)
  prefs: []
  type: TYPE_NORMAL
- en: The Open Source Interconnection (OSI) model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This reference model is just a reference for developers to utilize while they
    create the protocols and devices that users will use to connect to the network.
    This layered model has some advantages, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: The communication process comprises components that allow for easier development
    and troubleshooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By following standards, different types of equipment and software can communicate
    with each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A change in one layer does not affect other layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The standardization of the components allows multiple organizations to develop
    and deploy components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By using the OSI model, you can have hosts from Microsoft, Apple, UNIX, and
    Linux connected and communicating to the same network. As shown in *Figure 11.1*,
    you can see that the OSI model is made up of seven different layers. The layers
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18329_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: OSI model'
  prefs: []
  type: TYPE_NORMAL
- en: You can use a mnemonic to remember the order from layer 1 to layer 7, such as
    “Please do not throw sausage pizza away.” From layer 7 to layer 1, use the mnemonic
    “All people seem to need data processing.”
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18329_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: OSI model – layer functions'
  prefs: []
  type: TYPE_NORMAL
- en: Physical (Layer 1)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The physical layer (Layer 1) is responsible for creating the path between the
    different hosts on the network. This can be the physical topology for the transmission
    of the data. The physical topology consists of an Ethernet network, where Ethernet
    cables are connected to the hosts and network devices; an example of data transmission
    could be a Wi-Fi network where data is transmitted via radio signal and not a
    physical medium. This layer takes responsibility for transmitting data and receiving
    data. Also controlled at this layer are the specifications for the physical medium
    and the connections used between the host and the physical/transmission medium.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the devices that you may encounter at this layer include:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeaters – electronic devices that receive and re-transmit data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hubs – networking devices used to connect multiple hosts and network devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modems – networking devices used to encode and decode signals containing network
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data link (Layer 2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data link layer (Layer 2) is responsible for data transfer. It provides
    for flow control, error notification, and network topology requirements between
    hosts and network devices connected to the same logical segment of the network.
    In addition, this layer is responsible for delivering data to the correct destination.
    This is done by using a physical address of the network interface device, which
    is also known as the MAC (Media Access Control) address. The data link layer contains
    two sub-layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Logical Link Control (LLC) – responsible for identifying network-layer protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media Access Control (MAC) – responsible for the placement of the packets and
    physical addressing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this layer, the data is formatted into frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the devices you may encounter at this layer include:'
  prefs: []
  type: TYPE_NORMAL
- en: Network adapters – allow host(s) to connect to the network medium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bridge – a networking device used to connect two network segments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless access point – a networking device that is used to create a bridge
    between a wired and wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network (Layer 3)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The network layer (Layer 3) is responsible for the logical addressing of the
    hosts and network devices, determining the best route for data transmission, and
    mapping the locations of all the devices connected to the network. The logical
    addressing used at this layer will depend on the network. The most common address
    you may be familiar with is the IP address assigned to your local host. There
    are currently two different versions of IP addressing available: IPv4 and IPv6\.
    At this layer, the data is formatted into packets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some devices you may encounter at this layer include:'
  prefs: []
  type: TYPE_NORMAL
- en: Routers – a network device responsible for the routing of data based on logical
    addressing (IP address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch – a network device that can forward data based on logical addressing
    (typically, switches are considered to be a Layer 2 device, but some do have the
    functionality to work at the network layer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transport (Layer 4)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The transport layer (Layer 4) is responsible for reliable data delivery, including
    establishing/closing virtual connections such as an HTTP connection between a
    host and a server. Multiplexing data streams are also addressed at this layer.
    The use of port numbers and network applications is a Layer 4 function; an example
    of this is web traffic being directed to port 80(HTTP) while email traffic is
    directed to port 25 (SMTP). At this layer, the data is formatted into segments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some devices you may encounter at this layer include:'
  prefs: []
  type: TYPE_NORMAL
- en: Gateway – a network device that is responsible for connecting two networks that
    are using different protocols. The gateway will act as a translator between two
    dissimilar networks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall – a networking device that is used to prevent unauthorized access to
    resources on the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session (Layer 5)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The session layer (Layer 5) is responsible for creating, maintaining, and closing
    data sessions between hosts using presentation layer protocols. This layer will
    utilize the following modes to coordinate the data streams between hosts/servers
    on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplex – data can only be transmitted in one direction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Half duplex – data can be transmitted in both directions, but only in one direction
    at a time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full duplex – data can be transmitted in both directions at the same time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presentation (Layer 6)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The presentation layer (Layer 6) is responsible for presenting data to applications
    and converting data from the format used by the application to the transmission
    format used by the network. This can include encoding schemes such as ASCII (American
    Standard Code for Information Interchange) and Unicode.
  prefs: []
  type: TYPE_NORMAL
- en: Application (Layer 7)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application layer (Layer 7) provides an interface for software applications
    and hosts on a network. An example of this is the transfer of files between systems.
    This allows applications using different operating systems and file systems to
    communicate and provide services to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Encapsulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As data traverses the different layers of the stack, each layer adds information
    that the corresponding layer at the destination will read. An example of this
    is shown in *Figure 11.3*. The host on the left is sending a request to the host
    on the right. As the data is transmitted and travels down the stack, each layer
    may add a “header” to the data, encapsulating the header and the data added by
    previous layers. When the data reaches the destination host, the data will now
    be de-encapsulated, like peeling the layers of an onion, until it reaches the
    destination. For example, if the request were an HTTP request, the application
    header would be added to the data. At the transport layer, a TCP header will be
    added, the network layer will add an IP header, while the data link layer will
    then create an Ethernet header turning the data into a frame. The frame would
    then be transmitted along the physical layer. At the destination, the process
    will be reversed, each layer opening and reading the information added by the
    corresponding layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing table  Description automatically generated](img/B18329_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Encapsulation'
  prefs: []
  type: TYPE_NORMAL
- en: TCP/IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the OSI model is theoretical, TCP/IP is a practical implementation of
    a set of protocols that dominates the current networking environment. TCP/IP was
    created by the **United States Department of Defense** (**DoD**) with the intention
    of creating a protocol that would ensure the integrity of communications in the
    event of a catastrophe. Therefore, the TCP/IP is also referred to as the DoD model
    and is made up of the following four layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link/network access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be mapped to the different OSI model layers as shown in *Figure 11.4*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18329_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: The TCP/IP model compared to the OSI model'
  prefs: []
  type: TYPE_NORMAL
- en: The link/network access layer corresponds with the OSI model’s physical and
    data link layers. This layer defines how the networking device will connect to
    the network.
  prefs: []
  type: TYPE_NORMAL
- en: The Internet layer corresponds with the network layer of the OSI model. This
    layer is responsible for the logical addressing and routing of the data.
  prefs: []
  type: TYPE_NORMAL
- en: The transport layer corresponds with the transport layer of the OSI model. This
    layer is responsible for establishing connections between the source and destination.
  prefs: []
  type: TYPE_NORMAL
- en: The application layer corresponds with the OSI model’s session, presentation,
    and application layers. This layer is responsible for administrating the data
    flow of the different applications on the system. Some of the services you may
    encounter include FTP and HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: TCP/IP is a suite of protocols used by the host and network devices when connected.
    The main protocols of TCP/IP include TCP (Transmission Control Protocol), IP (Internet
    Protocol), and UDP (User Datagram Protocol).
  prefs: []
  type: TYPE_NORMAL
- en: TCP is a connection-orientated protocol, which means a connection between the
    host and server must be established before data can be sent/received. This is
    achieved through the use of the three-way handshake. When a host wants to communicate
    with the server, they will initiate the connection by sending an SYN packet to
    the server. If the server is available, it will respond with an SYN/ACK packet
    back to the host. The host will then respond with an ACK packet, and the connection
    can be established. This process is shown in *Figure 11.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated with medium confidence](img/B18329_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: TCP three-way handshake'
  prefs: []
  type: TYPE_NORMAL
- en: TCP is a transport layer protocol and is used for the accurate delivery of data.
    Each packet must be accounted for as data is sent from the source to the destination.
    If a packet gets lost in transmission, the destination will notify the source
    that the packet is missing and needs to be resent. As a result, TCP communication
    may experience delays and is not suitable as a communication channel where speed
    overrides the need for accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: UDP is a connectionless oriented protocol. Whereas TCP requires a three-way
    handshake before the communication channel can be initiated, UDP does not. Therefore,
    when using UDP as a communication channel, the source will never know if there
    is packet loss because the destination does not have the means to track which
    data packets are being sent. An example of this can be video streaming; if there
    is packet loss, the user may never notice because it does not affect the quality
    of the video.
  prefs: []
  type: TYPE_NORMAL
- en: IPv4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IP is responsible for the transmission and routing of data across a network.
    Currently, **IP version 4** (**IPv4**) is the predominant version of the protocol,
    but IPv6 is slowly coming out and being used by more and more organizations. IP
    is also responsible for the logical addressing used by hosts when connected to
    the network. IPv4 uses a 32-bit addressing scheme consisting of 4 octets separated
    by a period (`.`).
  prefs: []
  type: TYPE_NORMAL
- en: For example, `8.8.8.8` is a valid IPv4 address. IP addresses are assigned to
    a specific class. The class of the IP address will dictate how many hosts you
    can have on the network.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class** | **Address Range** | **Max Number of Hosts** | **Private IP Range**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class A | `1.0.0.1` - `126.255.255.254` | 16,777,214 Hosts | `10.0.0.0` –
    `10.255.255.255` |'
  prefs: []
  type: TYPE_TB
- en: '| Class B | `128.1.0.1` - `191.255.255.254` | 65,532 Hosts | `176.16.0.0` –
    `172.31.255.255` |'
  prefs: []
  type: TYPE_TB
- en: '| Class C | `192.0.1.1` - `223.255.254.254` | 256 Hosts | `192.168.0.0` – `192.168.255.255`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class D | `224.0.0.0` - `239.255.255.255` | Reserved for Multicast |  |'
  prefs: []
  type: TYPE_TB
- en: '| Class E | `240.0.0.0` - `254.255.255.254` | Reserved for Research |  |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.1: IPv4 IP address classes'
  prefs: []
  type: TYPE_NORMAL
- en: A Class A network will allocate the first octet to networks, with the remaining
    three octets being used for hosts on the network (`NNN.HHH.HHH.HHH`). A Class
    B network will reserve the first two octets for networks and the remaining two
    octets for hosts (`NNN.NNN.HHH.HHH`). A Class C network will have the first three
    octets for networks and the last octet for hosts (`NNN.NNN.NNN.HHH`). If you are
    running a Class C network, you can only have 256 hosts on the network at one time.
  prefs: []
  type: TYPE_NORMAL
- en: Each class also has a set of private IP addresses that can be used in an internal
    network but will not be able to send traffic through an external router. This
    range of IP addresses is to be used in a closed local network. You cannot communicate
    outside the local network using an IP address in these ranges. You will typically
    find that the local networks using this range of IP addresses are behind a router
    and that they are using **Network Address Translation** (**NAT**).
  prefs: []
  type: TYPE_NORMAL
- en: NAT maps a private IP address(es) to a public IP address. The technique is used
    to conserve address space and avoid IPv4 address exhaustion. NAT allows the router
    to convert traffic from the hosts on the private network and then relays the traffic
    using a public IP address. When the traffic is returned, the router will then
    send the traffic back to the host. The only IP address that is exposed is the
    public IP address.
  prefs: []
  type: TYPE_NORMAL
- en: One public IP address using a NAT gateway can be used for an entire private
    network, as shown in *Figure 11.6*.
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing diagram  Description automatically generated](img/B18329_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Example of NAT'
  prefs: []
  type: TYPE_NORMAL
- en: Port numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A port is a 16-bit number attached to an IP address in computer networking.
    A port number is specified for each service (or protocol). The port number completes
    the data stream’s destination or origination network address. Some port numbers
    are reserved for specific services. Port numbers lower than 1024 are commonly
    referred to as “well-known” port numbers. Port numbers greater than 1024 are called
    ephemeral ports. The **Transmission Control Protocol** (**TCP**) and **User Datagram
    Protocol** (**UDP**) use port numbers.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPv6 was created to address the lack of available IP addresses when using IPv4\.
    When IPv4 was developed, the designers could not imagine the interconnected world
    we now occupy in the 21st century. While IPv4 can provide more than 4 billion
    IP addresses, eventually, that will not be enough due to the increasing demand
    and availability of network devices. IPv6 is a 128-bit addressing scheme and can
    provide each person on the planet with approximately 4,000 logical addresses.
    The designers of IPv6 anticipated the world of wireless connectivity between mobile
    devices and the **Internet of Things** (**IoT**). IPv6 is slowly being deployed
    to devices connected to the network but is still not the primary addressing scheme
    in the consumer world. IPv6 is based on the hexadecimal numbering system and consists
    of eight groups of four hexadecimal characters; a colon separates each group.
  prefs: []
  type: TYPE_NORMAL
- en: Each group consists of four digits, with each digit representing four bits.
    Each segment can have a hexadecimal value of zero through FFFF. An example of
    an IPv6 address is shown in *Figure 11.7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: IPv6 address'
  prefs: []
  type: TYPE_NORMAL
- en: An IPv6 address is divided into two 64-bit segments. The first segment is the
    network component, and the second segment is the node component, as shown in *Figure
    11.8*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: IPv6 address separated'
  prefs: []
  type: TYPE_NORMAL
- en: The network component of the IPv6 address is used for the routing of data on
    the network. The node component identifies the network interface (node) of the
    host and is derived from the network adapter’s physical address (MAC address)
    that is connected to the network.
  prefs: []
  type: TYPE_NORMAL
- en: The network component of the IPv6 address is separated into a 48-bit Global
    Unicast Address and a 16-bit Subnet ID, as shown in *Figure 11.9*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: IPv6'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three different classes of IPv6 addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: Global Unicast Address – this address is routable on the Internet (starts with
    2001)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unique Local – used for internal networks, not routable on the Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link Local – not routable locally or on the Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IPv6 uses the following types of addressing schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: Unique Local Addresses – these addresses are used for non-routing purposes.
    They are nearly globally unique, so it’s unlikely you’ll ever have one of them
    overlap with any other address. In addition, they designed unique local addresses
    to replace site-local addresses; this allows communication throughout a site while
    being routable to multiple local networks. The difference between link local and
    unique local is that you can route unique local within your organization or company.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multicast – packets addressed to a multicast address are delivered to all interfaces
    identified by the multicast address. Sometimes people call them one-to-many addresses.
    Multicast addresses in IPv6 always start with FF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anycast – like multicast addresses, an anycast address identifies multiple interfaces.
    An anycast packet is delivered to only one address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv6 address can also be shortened. In IPv6, a group can consist of all zeros.
    You do not need to write all the zeros in the address in such a case. Instead,
    you can write one zero, which translates to four zeros in the group (as shown
    in *Figure 11.10*).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18329_11_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: IPv6 shorthand example'
  prefs: []
  type: TYPE_NORMAL
- en: The following are some protocols you may come across during your investigations.
    The protocols are sorted by layer in the TCP/IP suite.
  prefs: []
  type: TYPE_NORMAL
- en: Application layer protocols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**File Transfer Protocol (FTP) (TCP ports 20 and 21)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol allows the user to send and receive files across an IP-based network.
    FTP is also a program. When FTP is used as a protocol, applications are used to
    initiate the FTP process; when used as a program, the user initiates the FTP process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Shell (SSH) (TCP port 22)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol allows the creation of a secure Telnet session between hosts on
    an IP-based network. Once an SSH connection has been made, the user can operate
    and issue commands as if they were physically present at the remote host. SSH
    uses encryption to create a secure tunnel between the source and destination hosts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Telnet (TCP port 23)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol connects to a remote host, that is, a terminal. The user can then
    operate and issue commands as if they were physically present at the remote host.
    As a result, a Telnet connection is not secure and is vulnerable to a man-in-the-middle
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Mail Transfer Protocol (SMTP) (TCP port 25)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol is a communication protocol for e-mail transmission. Mail servers
    use SMTP to send and receive mail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Domain Name Service (DNS) (TCP port 53, UDP port 53)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol is used to resolve a hostname to an IP address. For example, it
    is much easier for a user to type [https://www.packtpub.com](https://www.packtpub.com)
    than an IP address such as `104.22.1.175`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic Host Configuration Protocol (DHCP) (UDP port 67)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol automatically assigns an IP address when a host joins the network.
    This allows for the automatic administration of the network as hosts enter and
    leave the network. Some of the information that the DHCP server will provide includes
    the IP address, subnet mask, default gateway, and the IP address for the DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol (HTTP) (TCP port 80)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol is used for communication between a browser and a Web server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol Secure (HTTPS) (TCP port 443)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol is a secure version of HTTP. It creates a secure communication
    channel between the browser and server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Remote Desktop Protocol (RDP) (TCP port 3389)**'
  prefs: []
  type: TYPE_NORMAL
- en: This protocol is used to create a secure connection to another host. It is similar
    to Telnet and SSH, but the user has access to a GUI interface instead of the command
    line. This is a proprietary Microsoft protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Transport layer protocols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Transmission Control Protocol (TCP)**'
  prefs: []
  type: TYPE_NORMAL
- en: A connection-oriented protocol used for the reliable delivery of data.
  prefs: []
  type: TYPE_NORMAL
- en: '**User Datagram Protocol (UDP)**'
  prefs: []
  type: TYPE_NORMAL
- en: A connectionless-oriented protocol used for the fast delivery of data; it does
    not require the reliable delivery of data.
  prefs: []
  type: TYPE_NORMAL
- en: Internet layer protocols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Internet Protocol (IP)**'
  prefs: []
  type: TYPE_NORMAL
- en: The Internet protocol is the Internet layer of the TCP/IP stack, with the remaining
    Internet layer protocols supporting it. This protocol is responsible for the delivery
    of data packets. This is accomplished solely based on the logical address, also
    known as the IP address. IP is a connectionless-oriented protocol. There are currently
    two versions, IPv6 and IPv4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Internet Control Message Protocol (ICMP)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'ICMP is the management protocol and messaging service for IP. ICMP can provide
    information about issues within the network, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Destination unreachable – this error is generated when the datagram is unable
    to reach the final destination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Echo request/reply – this is generated with the Ping command. It is used to
    test the network connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time exceeded (TTL) – when the packet fails to reach its destination within
    the specified number of hops. A hop is when the packet is sent from one router
    to another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirect – if the router is able to determine a more efficient route, a redirect
    message will be generated and sent to the host to update its routing table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ping is a utility that is used to identify issues with the network. Ping will
    send a packet to the destination and then track how long it takes the destination
    server to respond. In the following example, I used the `ping` command to send
    packets to IP address `104.22.1.175`, and you can see that the server responded,
    which took anywhere between nine and 14 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the ping command were unsuccessful, there would be a message that the destination
    host was unreachable or that there was no reply in the request timed out. This
    does not mean there are conductivity issues; system administrators have the option
    of blocking ICMP traffic that originates from outside of their local network,
    as shown in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Address Resolution Protocol (ARP)**'
  prefs: []
  type: TYPE_NORMAL
- en: ARP is used to translate logical addresses to physical addresses. This is accomplished
    when ARP sends a broadcast message to the hosts on the same network segment. The
    broadcast message asks the network interface device if it has a specific IP address.
    If the network interface device is assigned that IP address, then the network
    interface device will reply with the MAC address. ARP is a broadcast protocol
    that will result in all hosts on the network segment being able to see the request
    and replies. ARP requests are not routable, which means the ARP packets will not
    be able to cross router boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '**Internet Protocol Security (IPSec)**'
  prefs: []
  type: TYPE_NORMAL
- en: IPSec is a security protocol that enhances security by providing end-to-end
    encryption and packet authentication. VPNs (Virtual Private Networks) utilize
    IPSec when creating their secure communication channels.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed the fundamentals of a computer network. First,
    you learned about the differences between the OSI model and the TCP/IP (DoD) model.
    The OSI model is only theoretical and does not have a physical implementation.
    Don’t be confused when someone mentions the TCP/IP model when talking about the
    TCP/IP suite of protocols. We also looked at the different types of hardware you
    may find in a networking environment to understand the differences between a hub
    and a router. A router is a much more complex device responsible for sending data
    to the next hop. In contrast, a hub is only used to extend the network segment
    by giving additional hosts a location to connect to the network. A hub does not
    “do” anything; it merely creates an extension of the network.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to explain the differences between a connection-oriented
    protocol and a connectionless-oriented protocol and in what situations each protocol
    should be used. For example, it would not be good to utilize a connection-oriented
    protocol when the throughput of data is the primary concern. The current IP addressing
    scheme is still being used, but changes are slowly coming and IPv6 will become
    the dominant protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'An examiner should now be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the differences between OSI and TCP/IP (DoD) models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine which addressing scheme is being utilized on a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the differences between a public IP address and a private IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the differences between a port number and an IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify some of the commonly used protocols and ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will cover report writing. The ability to draft a report
    so that the reader can understand a technical subject while using non-technical
    language is critical. If you cannot explain in writing how you did the exam file,
    it will affect your ability to be a successful investigator.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many layers are in the OSI model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '6'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '7'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '8'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How many layers are in the DoD model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '4'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '6'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '7'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is layer 1 of the OSI model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Session
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Physical
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is a layer 3 device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hub
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Printer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How long is an IPv4 address (in bits)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '16'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '32'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '64'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '128'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How long is an IPv6 address (in bits)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '16'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '32'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '64'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '128'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the following “2001:db8::8a2e:370:7334” an example of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A MAC address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A physical address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An IPv6 address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An encryption key
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is NOT a response for a successful ping command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 64 bytes from `104.22.1.175`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ttl=60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: time=10.270 ms
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No route to host
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the management protocol and messaging service for IP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ICMP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DHCP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TYFMS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ARP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What protocol allows the creation of a secure telnet session?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTPS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IFYKYK
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Neil, I. (2018). *Comptia Security+ Certification Guide: Master It security
    essentials and exam topics for Comptia security+ sy0-501 certification*. Packt
    Publishing Ltd.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Davies, G. (2019). *Networking fundamentals: Develop the networking skills
    required to pass the Microsoft Mta Networking Fundamentals Exam 98-366*. Packt
    Publishing Ltd.'
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/CyberSec](https://packt.link/CyberSec)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code3852467292877112093.png)'
  prefs: []
  type: TYPE_IMG
