- en: Chapter 9. OS Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux - using `NetworkManager`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux - using `pull-resolv-conf`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - elevated privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - using the CryptoAPI store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - updating the DNS cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - running OpenVPN as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - public versus private network adapters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - routing methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 8+- ensuring DNS lookups are secure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android- using the OpenVPN for Android clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push-peer-info - pushing options to Android clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on how to use OpenVPN on Linux, Windows, and
    Android. For each operating system, an entire chapter could be written to describe
    the intricacies of running OpenVPN in both the client and server mode, but as
    space is limited, we will focus only on the interaction of the OpenVPN client
    with the OS. The purpose of the recipes in this chapter is to outline some of
    the common pitfalls when running OpenVPN on a particular platform. The recipes
    focus mainly on the configuration of OpenVPN itself, not on how to integrate a
    working VPN setup into the rest of the network infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Linux - using NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Linux is used as a desktop operating system, the network configuration
    is configured using the Linux NetworkManager in most of the cases. This package
    allows a non-root user to start and stop the network connections, connect and
    disconnect from wireless networks, and also to set up several types of VPN connections,
    including OpenVPN. In this recipe, we will show how to configure an OpenVPN connection
    using the GNOME variant of the NetworkManager.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    This version of Linux comes with NetworkManager 1.0.8, including the `NetworkManager-openvpn`
    plugin. The `NetworkManager-openvpn` plugin is not installed by default and needs
    to be explicitly added to the system. Keep the configuration file, `basic-udp-server.conf`,
    in the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start the NetworkManager configuration screen by right-clicking on the NetworkManager
    icon in the taskbar and selecting **Edit Connections**. A window will pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **VPN** tab to set up a new VPN connection:![How to do it...](img/image00406.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to bring up the next screen:![How to do it...](img/image00407.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **OpenVPN** as the VPN type and click on the **Create...** button.
    If the VPN connection type **OpenVPN** is not available, then the `NetworkManager-openvpn`
    plugin is not installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the details of the **VPN** tab of the next window:![How to do it...](img/image00408.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Gateway** is the hostname or IP address of the OpenVPN server. The **Type**
    of authentication is **Certificates** **(TLS****)**. Then, for the **User Certificate**, **CA
    Certificate**, and **Private Key** fields, browse to the directory where the client
    files `client1.crt`, `ca.crt`, and `client1.key` are located, respectively. Fill
    in the **Private Key Password** fields, if required. Do not click on the **Save** button
    just yet, click on **Advanced****...** instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next window, go to the **Security** tab:![How to do it...](img/image00409.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the encryption cipher and HMAC authentication protocol to use for the
    connection and then click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, go to the **TLS Authentication** tab.![How to do it...](img/image00410.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable **Verify peer (server) certificate usage signature**, then select **Use
    additional TLS authentication**, and browse to the location of the `ta.key` file.
    Choose **1** for the key direction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** when done and then click on **Apply** to save the new VPN connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And finally, on the client, start the VPN connection by clicking on the NetworkManager
    icon, choosing**VPN Connections** and selecting **Example 9-1**:![How to do it...](img/image00411.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can verify whether the VPN connection is established correctly by pinging
    the VPN server IP.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NetworkManager-openvpn` plugin is a GUI for setting up an OpenVPN client
    configuration file. All the settings made are the equivalent of setting up the
    client configuration file as done in the *Server-side routing* recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `NetworkManager-openvpn` plugin supports some advanced configuration settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up routes using NetworkManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `NetworkManager-openvpn` plugin can also be used to set up VPN-specific
    routes. Open the main VPN configuration screen again and go to the **IPv4 Settings**
    tab. Click on the **Routes...** button on this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up routes using NetworkManager](img/image00412.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A new window will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up routes using NetworkManager](img/image00413.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Routes pushed by the server can be overruled using the **Ignore automatically
    obtained routes** option. By default, the `NetworkManager-openvpn` plugin will
    enable `redirect-gateway`, even if it is not pushed by the server. This behavior
    can be overruled by checking the **Use this connection only for resources on its
    network** checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: DNS settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `NetworkManager-openvpn` plugin also updates the `/etc/resolv.conf` file
    if the OpenVPN server pushes out DNS servers using the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Scripting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that NetworkManager does not allow scripting or plugins on the client side,
    as they are a security risk when configured by a non-root user.
  prefs: []
  type: TYPE_NORMAL
- en: Linux - using pull-resolv-conf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common pitfalls when setting up a VPN connection on Linux is
    when the OpenVPN server pushes out new DNS settings. In the previous recipe, we
    saw that the `NetworkManager-openvpn` plugin also updated the system configuration
    file that contained the DNS setting, `/etc/resolv.conf`. If the command line is
    used, this is not done automatically. By default, OpenVPN comes with two scripts
    to add and remove DNS servers from the `/etc/resolv.conf` file. This recipe will
    show how to use these scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00414.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the `basic-udp-server.conf` configuration file from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the  `basic-udp-client.conf`
    client configuration file at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following line to the `basic-udp-server.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `10.198.0.1` is the address of a DNS server on the VPN server LAN. Save
    it as `example9-2-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, for the client, add the following lines to the `basic-udp-client.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save it as `example9-2-client.conf`. Copy over the `client.up` and `client.down`
    files from the OpenVPN `contrib` directory and make them executable. On CentOS
    6 and Fedora 22, these files are located in the `/usr/share/doc/openvpn-2.3.11/contrib/pull-resolv-conf`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the VPN connection comes up, check the contents of the `/etc/resolv.conf`
    file. The first line should contain the DNS server as specified by the OpenVPN
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When the VPN connection is terminated, the entry is removed again.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scripts supplied with OpenVPN parse the environment variable, `foreign_option_*`,
    and look for DOMAIN and DNS settings. These settings are then written out to the
    beginning of the `/etc/resolv.conf` file. This causes the DNS server and the DOMAIN
    pushed by the OpenVPN server to take precedence over the system's DNS and DOMAIN
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: When the VPN connection is dropped, the same settings are removed from the `/etc/resolv.conf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that when the `NetworkManager-openvpn` plugin is used, these scripts are
    not necessary, as the NetworkManager itself updates the `/etc/resolv.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: Windows - elevated privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the introduction of Windows Vista, Microsoft introduced **User Access Control**
    (**UAC**). UAC is meant to safeguard users from running programs that can modify
    the operating system itself. Before such a program is run, a privilege elevation
    is required even if the user has full administrator rights. A dialog box appears
    that the user must click on before the execution begins. In order to run OpenVPN,
    elevated privileges are needed, as OpenVPN wants to open a system device and start
    a VPN connection. Especially if routes need to be added to the system, elevated
    privileges are essential.
  prefs: []
  type: TYPE_NORMAL
- en: With OpenVPN 2.3+, privilege elevation is built into the OpenVPN GUI application.
    That is, even if the **Run as Administrator** flag is turned off, the OpenVPN
    GUI application will still request elevated privileges when it is launched. This
    recipe will demonstrate this behavior, which was not present in older versions
    of OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 7 SP1 and OpenVPN
    2.3.11\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For the client, keep the
    configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that the OpenVPN is not running and that the tray icon is not present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before starting the OpenVPN GUI, right-click on the OpenVPN GUI icon that was
    placed on your desktop after installing the OpenVPN 2.3.11 installer for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** screen that comes up, click on the **Compatibility** tab
    and disable **Run this program as an administrator**:![How to do it...](img/image00415.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the OpenVPN GUI. Note that it will still prompt for permissions (the following
    screenshot is for Windows Vista, but a similar window will pop up for Windows
    7+):![How to do it...](img/image00416.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue** to start the OpenVPN GUI as usual.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the OpenVPN client by launching the `example5-1` configuration file:![How
    to do it...](img/image00417.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the VPN connection is established and that the log file, `c:\temp\openvpn.log`,
    has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the OpenVPN GUI application is launched, the user must always confirm
    that it can run with elevated privileges. This is now built into the OpenVPN GUI
    application itself, and is visible by noticing the shield at the right bottom
    of the application''s icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00418.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After that, the OpenVPN GUI can launch other executables that will also inherit
    these privileges. When the GUI launches the `openvpn.exe` process, it can open
    the VPN adapter, alter the routing tables, and run the up and down scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Windows - using the CryptoAPI store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN has the capability of using the Windows CryptoAPI store to retrieve
    the public and private key needed for setting up a connection. This improves security
    somewhat, as the CryptoAPI store is more secure than the plaintext `.crt` and `.key`
    files that are normally used to set up an OpenVPN connection.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will configure an OpenVPN client to retrieve the required
    information from the CryptoAPI store when connecting to the server. This recipe
    was tested on Windows 7, but it will also work on other versions of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 7 SP1 and OpenVPN
    2.3.11\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to import the client certificate into the CryptoAPI store. In
    order to do that we must convert the existing `client2.crt` and `client2.key`
    files to PKCS12 format. Open a Windows command shell and change the directory
    to the location where these files are located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, import the PKCS12 file into the Windows CryptoAPI store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The certificate import wizard will start.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Next** on the first screen and again click on **Next** on the second
    screen. Then, you must supply the export password from the previous step:![How
    to do it...](img/image00419.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you select the **Enable strong private key protection. You will be prompted
    every time the private key is used by an application if you enable this option**
    checkbox, the certificate and private key are even better protected, but you will
    be required to retype the password every time OpenVPN starts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Next**. In the next screen, select the default option, **Automatically
    select the certificate store**, and click on **Next** once more. By clicking on **Finish**
    in the next screen, the certificate import is completed.![How to do it...](img/image00420.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the configuration file as `example9-4.ovpn`. Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the VPN connection using the OpenVPN GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The VPN connection should be established without asking for a private key password.
    If the CryptoAPI option, **Enable strong private key protection**, was enabled,
    a separate dialog will pop up to ask for the CryptoAPI password.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Windows OpenVPN client software is capable of extracting a certificate and
    public key from the Windows CryptoAPI store if either the certificate subject
    name is specified using the keyword, `SUBJ:`, or if the certificate thumbprint
    or fingerprint is specified using the keyword, `THUMB:`. After retrieving the
    certificate and private key from the CryptoAPI store, the VPN connection is established
    in exactly the same manner as if a plaintext certificate and private key files
    had been used.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several small yet important details when using the Windows CryptoAPI
    store. We will cover this in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The CA certificate file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that it is still required to specify the CA certificate using the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In theory, it would be possible to also retrieve the CA certificate from the
    CryptoAPI store, but this is currently not implemented in OpenVPN. Also, note
    that the CA certificate file needs to contain the certificate authority that was
    used to sign the server-side certificate, not the client-side certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate fingerprint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of supplying `cryptoapicert SUBJ:<subject name>`, it is also possible
    to specify `cryptoapicert THUMB:<fingerprint>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fingerprint or thumbprint of an X509 certificate can be retrieved both
    by either looking up the `Thumb` property for the imported certificate in the
    Windows Certificate store or by typing the OpenSSL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Windows - updating the DNS cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A frequently recurring question on the OpenVPN users mailing lists is related
    to the DNS name resolution on Windows after the VPN connection is established.
    If the OpenVPN server pushes out a new DNS server, then this is automatically
    picked up by the OpenVPN client, yet the name resolution does not always work
    right after establishing the connection. This has little to do with OpenVPN and
    more to do with the way the Windows DNS caching service works. As this question
    comes up quite regularly, a new directive, `register-dns`, was added in OpenVPN
    2.1.3\. When this directive is specified, OpenVPN updates the Windows DNS cache
    and registers the VPN IP address in the Windows DNS tables. As this feature was
    introduced only recently, this recipe will also show how the Windows DNS cache
    can be updated using a script when the VPN connection is established. Some users
    disable the DNS caching service altogether, which seems to have little impact
    on the operating system, except for a small performance penalty when using a slow
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 7 SP1 and OpenVPN
    2.3.11\. Keep the server configuration file, `example9-2-server.conf`, from the *Linux:
    using pull-resolv-conf* recipe at hand, as well as the client configuration file, `basic-udp-client.ovpn`,
    from the *Using an ifconfig-pool block* recipe in [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a line to the `basic-udp-client.ovpn` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this configuration file as `example9-5.ovpn`. Start the OpenVPN client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The OpenVPN GUI status window will show that the Windows service `dnscache` has
    restarted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00421.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After the VPN connection is established, verify that the name resolution is
    using the VPN-supplied DNS server, for example, by using the `nslookup` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the VPN connection is established, the OpenVPN client software sends a
    DHCP packet to the TAP-Win32 adapter with the IP address, default gateway, and
    the other network-related information, such as a new DNS server. This information
    is picked up by the operating system but the local DNS caching service is not
    notified immediately. The `register-dns` directive executes the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: By forcing a restart of the DNS caching service, the DNS server supplied by
    the VPN connection is used immediately.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Windows 8+ - ensuring DNS lookups are secure* recipe later in this chapter,
    which goes into detail of how to ensure that DNS lookups are passed over the VPN
    tunnel only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - running OpenVPN as a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the lesser known features of the Windows version of OpenVPN is its ability
    to run it as a service. This allows OpenVPN to start and establish a VPN connection
    without a user logging in on the system. The OpenVPN service is installed by default,
    but is not started automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will show how the OpenVPN service can be controlled using
    the OpenVPN GUI application and how to perform troubleshooting on the service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 7 SP1 and OpenVPN
    2.3.11\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand. For the client,
    keep the configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before starting the OpenVPN GUI application on the client side, we first launch
    the Windows registry editor, `regedit` (using elevated privileges). Find the `HKEY_LOCAL_MACHINE\SOFTWARE\OpenVPN-GUI`
    key.![How to do it...](img/image00422.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a note of the `config_dir` registry key, which is normally set to `C:\Program Files\OpenVPN\config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the registry key **allow_service** to **1**. Also, take note of the registry
    key, `log_dir`, which is normally set to `C:\Program Files\OpenVPN\log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, browse to the registry key, `HKEY_LOCAL_MACHINE\SOFTWARE\OpenVPN`, and
    check the `config_dir` and `log_dir` keys again. They should be pointing to the
    same directories as for the OpenVPN GUI application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the registry editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the OpenVPN GUI. Right-click on the icon in the taskbar. A new menu option
    will have appeared.![How to do it...](img/image00423.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But do not start the service yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, modify the client configuration file, `basic-udp-client.ovpn`, by changing
    the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change these to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `client2.key` client certificate from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    is protected by a password, whereas the `client1.key` file is not. Save the configuration
    file as `example9-6.ovpn`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Move all other `.ovpn` files to another directory to make sure that this is
    the only `.ovpn` file in the `config` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, start the OpenVPN service. After a while, the VPN connection will be established,
    as can be seen on both the client and the server in the log files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Windows service is launched at system startup before a user is logged in.
    The OpenVPN service scans the directory pointed to by the registry key, `HKEY_LOCAL_MACHINE\SOFTWARE\OpenVPN\config_dir`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This starts an OpenVPN process for each file with the `.ovpn`  extension in
    that directory. The output of each of these processes is logged into the log directory
    pointed to by the registry key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, the log filename is the same as the configuration name, but now with the `.log`
    extension. For this recipe, the configuration file was `C:\Program Files\OpenVPN\config\example9-6.ovpn`
    and the log file was `C:\Program Files\OpenVPN\log\example9-6.log`.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to launch the OpenVPN GUI to start these connections, but the
    GUI application does offer a convenient method of managing the OpenVPN service,
    if the right registry key is added.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few important notes when using the OpenVPN service, which are outlined
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic service startup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make the OpenVPN service start at system startup, open the **Services**
    administrative control panel by navigating to **Control Panel** | **Administrative
    Tools** | **Services**. Double-click on the **OpenVPN Service** to open the properties
    and set the **Startup type** field to **Automatic**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic service startup](img/image00424.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **OK** and close the **Services** administrative control panel. Reboot
    Windows and verify on the server side that the client is connecting at system
    startup.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN user name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the OpenVPN service is used, the corresponding OpenVPN processes are normally
    run under the account **SYSTEM**, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OpenVPN user name](img/image00425.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This has some implications regarding the permissions on the configuration files.
    Special care also needs to be taken when using the `cryptoapicert` directive,
    as by default, those certificates end up in the user certificate store, which
    is not accessible to the **SYSTEM** account. It is possible to use the `cryptoapicert`
    directive, but the imported certificate must be installed as a (local) system
    certificate and not as a user certificate.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Windows - using the CryptoAPI store* recipe earlier in this chapter, which
    explains how to use the Windows CryptoAPI store to store the user certificate
    and private key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - public versus private network adapters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Windows Vista and 7, Microsoft introduced the concept of network classes.
    Network interfaces can be part of a **Private** or **Public** network. When using
    OpenVPN, one must be careful in which type of network the adapter is placed. By
    default, OpenVPN's TAP-Win32 adapter is placed in a **Public** network, which
    has a side-effect that it is not possible to mount file shares. In this recipe,
    we will show how to change the network type so that the trusted services such
    as file sharing are possible over a VPN connection. While this has little to do
    with configuring the OpenVPN per se, this issue comes up often enough to warrant
    a recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 7 SP1 and OpenVPN
    2.3.11\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand. For the client,
    keep the configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following line to the `basic-udp-server.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save it as `example9-7-server.conf`. Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the Windows client, launch the OpenVPN GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the VPN connection is established, a window will pop up asking you what
    type of network this is. For Windows 7, you can choose **Home**, **Work**, or **Public**; for
    Windows 8+, the choice is either **Private** or **Public**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Work** network, and then open the **Network and Sharing Center**:![How
    to do it...](img/image00426.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Windows 7+, each network type has different access rights. The network
    type with the fewest rights is **Public**, which means that the applications can
    set up TCP/IP connections, but they cannot access any of the resources available
    in the **Work** or **Private** networks, such as local printers and the local
    disks. When sharing resources that are on the same network as the OpenVPN client,
    this can become an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Windows determines the type of network by looking at whether a default gateway
    is present for that network. If no default gateway is specified, the network is
    considered to be untrustworthy and hence it is made public. There is no option
    to easily change this afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'To overcome this peculiarity, we supply a default gateway with a very high
    metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using a very high metric, we avoid the problem that all network traffic is routed
    over the VPN, which can lead to *biting-your-own-tail* problems.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Windows - elevated privileges* recipe earlier in this chapter, which explains
    in more detail about how to run the OpenVPN GUI application with elevated privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows - routing methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When routes are pushed to a Windows client, there are two methods for adding
    these routes to the system routing tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the IPAPI helper functions (the default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `ROUTE.EXE` program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most cases, the IPAPI method works fine, but sometimes, it is necessary to
    overrule this behavior. In this recipe, we will show how this is done and what
    to look for in the client log file to verify that the right method has been chosen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 7 SP1 and OpenVPN
    2.3.11\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand. For the client,
    keep the configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the `basic-udp-client.ovpn` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this configuration file as `example9-8.ovpn`. Start the OpenVPN client
    with this configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the connection has been established, bring up the **Show Status** window
    again and look at the last lines of the connection log. The log will show lines
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even though the `route-method` directive was set to `ipapi`, the log file prints
    out the path of the Windows `route.exe` command. The second line shows that the
    route was actually added using the IPAPI helper functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, modify the configuration file, `example9-8.ovpn`, to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the OpenVPN client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the last lines of the connection log again. This time the message, **Route
    addition via IPAPI succeeded**, will not be present in the log file, which means
    that the `route.exe` command was used. Instead, you will see something similar
    to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The line starting with `env_block` indicates that a set of environment variables
    were set up prior to launching the external `route.exe` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `route-method` directive has three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`adaptive`: First, try the IPAPI method, and fallback to the `route.exe` method
    if IPAPI fails. This is the default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipapi`: Always use the IPAPI helper functions to add routes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exe`: Always use the external program, `route.exe`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on this directive, the OpenVPN client will choose how to add routes to
    the Windows routing tables. Note that if OpenVPN cannot add a route, it will not
    abort the connection. The current OpenVPN GUI does not detect this and will show
    a green icon in the taskbar, suggesting a fully successful connection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenVPN is preconfigured to look for the `route.exe` program in the directory
    where Windows is installed, usually `C:\WINDOWS\system32`. If Windows is installed
    in a different directory, the `win-sys` directive can be used. The `win-sys` directive
    has two options:'
  prefs: []
  type: TYPE_NORMAL
- en: The default option, `env`, which means that the OpenVPN client will use the
    contents of the environment variable, `windir`, to locate the Windows operating
    system. This environment variable is always set in a normal Windows setup. Starting
    with OpenVPN 2.3, this is the default setting and a warning message is printed
    if `win-sys env` is specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The directory name where the Windows operating system can be found, for example, `D:\WINDOWS`.
    This should be used only if the `route.exe` program is in a non-standard location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 8+ - ensuring DNS lookups are secure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with Windows 8.1, Microsoft introduced a new feature for resolving
    hostnames to IP addresses. Whenever an application wants to resolve a hostname,
    a DNS query is sent out over all network adapters found in the system. The answer
    from the first adapter that responds to the query is used.
  prefs: []
  type: TYPE_NORMAL
- en: If a user wants to tunnel all traffic over a VPN in a secure manner, then this
    feature is not desirable. In a hostile network environment, a bogus IP address
    could be returned or even the fact that a DNS lookup for a particular host is
    made could be considered dangerous.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with OpenVPN 2.3.10, a new option, `block-outside-dns`, was added to
    suppress this feature. In this recipe, we will show how to use this option.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client computer was running Windows 8.1 and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks* at hand. For the client, keep the
    configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the `basic-udp-client.ovpn` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this configuration file as `example9-9.ovpn`. Start the OpenVPN client
    with this configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the connection has been established, bring up the **Show Status** window
    again and look at the last lines of the connection log. The output should be similar
    to the following:![How to do it...](img/image00427.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this log file, the **Windows Filtering Platform** (**WFP**) is initialized
    and special rules are added to block DNS traffic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Stop the OpenVPN client and check the log file again. You should see a line
    indicating that the WFP engine is shut down, thereby removing the filtering rules
    added by OpenVPN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the `block-outside-dns` directive, a set of Windows filtering rules are
    created after the VPN connection has been established. These filter (or firewalling)
    rules prevent DNS lookups from being sent over all network adapters found on the
    Windows client, except for queries made over the TAP adapter. When the OpenVPN
    connection is terminated, the WFP rules are removed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be careful when using this option with OpenVPN 2.3 when you have multiple simultaneous
    tunnels open. In some cases, the WFP rules that are added by the first tunnel
    are not restored properly when the second tunnel is shut down, thereby blocking
    all DNS traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Android - using the OpenVPN for Android clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN can also be used on mobile devices, such as Android or iPhone smartphones.
    In this recipe, we will show how to set up a basic configuration file for the
    OpenVPN for the Android app. The same configuration can be used on iPhones and
    iPads.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client device was running Android 4.2 and OpenVPN for
    Android version 0.6.57\. Keep the configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe in [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*
    at hand. For the client, keep the configuration file, `basic-udp-client.ovpn`,
    from the *Using an ifconfig-pool block* recipe in [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the OpenVPN app profile by converting the `basic-udp-client.ovpn` file
    to an inline configuration file. This is done by replacing all references to external
    files with the inline blobs. We then add these inline blobs by copying the contents
    from the external files. The resulting configuration file will look similar to
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this configuration file as `example9-10.ovpn`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transfer the app configuration file to the Android smartphone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the OpenVPN for Android app and import the `example9-10.ovpn` profile.
    If all goes well, you should see an output similar to this:![How to do it...](img/image00428.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the OpenVPN profile. After the connection has been established, the
    app will show the current status and log with the top line showing **Connected:
    SUCCESS, 10.200.0.2, 192.168.96.101, 1194:**![How to do it...](img/image00429.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenVPN for Android app is based on the same source code as the open source
    OpenVPN software. Hence, almost all options that can be specified in a normal
    configuration file can also be specified in an OpenVPN app profile. However, it
    is recommended to include all certificate and keying information inside the profile,
    as it makes it much easier to transfer the configuration to the device.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to transfer the app profile by uploading it to a web server first,
    then make sure that the file type and extensions remain intact. The mobile device
    will treat the configuration file as a plain text file if it does not recognize
    it as an OpenVPN profile and you will not be able to import it into the OpenVPN
    for Android app. In such cases, it may be desirable to transfer the `.ovpn` file
    inside a ZIP (`.zip`) file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Inline certificates* recipe in the next chapter, which goes into detail
    on using inline certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push-peer-info - pushing options to Android clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is a continuation of the previous recipe. When integrating mobile
    clients into an existing OpenVPN setup, it is often necessary to treat these mobile
    clients differently from the regular OpenVPN clients. In some cases, it will be
    necessary to redirect all traffic for mobile clients over the VPN tunnel or a
    different encryption scheme needs to be used to optimize the OpenVPN app on the
    Android device. In this recipe, we will demonstrate how to push an option to an
    Android client, while leaving the options for all other clients unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.4\. The client device was running Android 4.2 and OpenVPN for Android
    version 0.6.57\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks* at hand. For the client,
    keep the configuration file, `example9-10.ovpn`, from previous recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following lines to the `basic-udp-server.conf` server configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save it as `example9-11-server.conf`. Next, create the connect script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save this file as `example9-11.sh`. Make sure that the script is executable
    and start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the OpenVPN for Android app and establish the VPN connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the connection has been established, use another app, such as Fing, to
    ensure that all traffic is redirected via the OpenVPN tunnel:![How to do it...](img/image00430.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first address in the traceroute output is `10.200.0.1`, demonstrating that
    the traffic is redirected via the OpenVPN server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the OpenVPN for Android configuration, we added the `push-peer-info` option.
    This causes the OpenVPN client to send configuration details to the server. Starting
    with OpenVPN 2.4, these configuration details are available both inside plugins
    and scripts. The `client-connect` script examines the environment variable, `IV_PLAT`,
    and pushes a `redirect-gateway` if an Android client is connecting.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `push-peer-info` option is available in all OpenVPN 2.3 clients. However,
    support on the server side to actually process this information was added in version
    2.4\. The following peer information is sent to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IV_COMP_STUB=1, IV_COMP_STUBv2=1`: This indicates that the client supports
    compression stubs. It also means that the server can push compression options
    to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_GUI_VER=de.blinkt.openvpn_0.6.57`: This indicates the client GUI version.
    In this case, the OpenVPN for Android client version 0.6.57 was used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_HWADDR=00:00:00:00:00:00`: This indicates the client''s Ethernet hardware
    address. On Android clients, this option is always `00:00:00`, but on other platforms
    the MAC address of the TUN/TAP adapter is transmitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_LZ4=1, IV_LZ4v2=1, IV_LZO=1`: This indicates that the client supports LZ4,
    LZ4v2, and LZO compression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_NCP=2`: This indicates that the client supports encryption cipher negotiation.
    This allows the client and server to negotiate the most optimal compression and
    HMAC algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_PLAT=android`: This indicates the client platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_PROTO=2`: This indicates the version of the push-peer-info format. In the
    future, the format or set of variables sent to the server might change, which
    would warrant an increase in the version number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_RGI6=1`: This indicates that the client supports redirection of the IPv6
    gateway address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_SSL=OpenSSL_1.0.2h__3_May_2016`: This indicates the SSL library and version
    that is used by the OpenVPN client. This could be important to determine whether
    a particular client is susceptible to a crypto library vulnerability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IV_VER=2.4_master`: This indicates the version of the OpenVPN software on
    the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
