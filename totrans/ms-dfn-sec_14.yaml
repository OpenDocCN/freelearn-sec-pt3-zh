- en: '*Chapter 12*: Mastering Web App Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Web applications are everywhere, attackers nowadays invest a lot of energy
    in understanding their attack surface and exploiting their vulnerabilities. We,
    on the other hand, need to do exactly the same."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Cristian Rodríguez, Offensive Security Certified Professional (OSCP) | Offensive
    Security Web Expert (OSWE)*'
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, we must protect our web applications, and that is why we created a super
    exciting chapter in which you will acquire all the knowledge needed to master
    the skills of securing web applications. First, we will start by showing you how
    much information others may know about your site or web application and the importance
    of obfuscating all that public information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it will be time to get into more technical stuff, and we will introduce
    you to one of the most common attacks for web applications: **Cross-Site Scripting**
    (**XSS**). After that, the rest of the chapter will be very techy and hands-on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with a step-by-step guide to install two must-have cybersecurity
    tools, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Damn Vulnerable Web Application** (**DVWA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DVWA is a great tool that gives you a safe virtual environment in which you
    can test and even become familiar with several vulnerabilities on web applications.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Burp Suite is an excellent tool to test a given web application
    in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have both tools configured, we will then do a lab to show you how to
    test a web application against the following two types of attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Structured Query Language** (**SQL**) injection attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A brute-force attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a summary, here are the main topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering intelligence about your site/web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging DVWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overviewing the most common attacks on web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection attack on DVWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-forcing web applications' passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To fully leverage the content of this chapter, it is recommended to have installed
    a **Virtual Machine** (**VM**) with Kali Linux to properly follow the labs.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use two tools, DVWA and Burp Suite, but we will cover how to install
    and configure them, so no worries about that.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering intelligence about your site/web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The very first step when securing your web resources (website, web applications,
    **Application Programming Interface** (**API**), and so on) is to determine what
    kind of information is easily and freely available about them on the internet.
    If you wonder why you should do this, the response is very simple: because this
    is what attackers do first!'
  prefs: []
  type: TYPE_NORMAL
- en: And believe it or not, there are thousands of web resources exposing sensitive
    data such as *passwords*, *database users*, *sensitive documents*, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of public data gathering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s start by understanding the key aspects that highlight the importance
    of this activity (and why you must invest time and resources doing it), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Public information can be used on a targeted social engineering attack (phishing,
    vishing, impersonation, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usernames can be used to execute targeted password attacks (dictionary attacks,
    brute-force attacks, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server names and **Internet Protocol** (**IP**) addresses can be used to execute
    targeted **Denial-of-Service** (**DOS**) attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public information can be used by attackers to create better dictionary attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's see how to crawl the internet to discover how much information about
    your sites is publicly available.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source Intelligence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Open Source Intelligence** (**OSINT**) is about gathering intelligence or
    information from public (open) resources such as the internet. This term was normally
    used by intelligence services but is now very common in the cybersecurity area.'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, there is a very good framework ([https://osintframework.com/](https://osintframework.com/))
    that includes several resources available for you to gather all types of data
    from the internet, and next, we will see the most relevant tools that you can
    use for this data gathering.
  prefs: []
  type: TYPE_NORMAL
- en: DNS lookup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These tools allow you to gather **Domain Name System** (**DNS**) information
    about your web resources. Therefore, it is highly recommended to check your sites
    to see what others know about them.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good example is the site [https://spyse.com/tools/dns-lookup](https://spyse.com/tools/dns-lookup),
    which gives you more than just DNS information, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: DNS records (**Mail Exchange** (**MX**), **Address** (**A**), name server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The technology used (**operating system (OS)**, **Internet Information Services**
    (**IIS**), libraries, fonts, **Content Management System** (**CMS**), and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subdomains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other data (**HyperText Transfer Protocol** (**HTTP**) headers, **Cascading
    Style Sheets** (**CSS**), links, **JavaScript** (**JS**))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate information (**Secure Sockets Layer**, or **SSL**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verified email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on your business, some of this information *must* be obfuscated as
    it may represent a security or privacy risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page presented in the following screenshot also shows a security score
    based on vulnerabilities found from **Common Vulnerabilities and Exposures** (**CVE**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Vulnerabilities view from spyse.com'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Vulnerabilities view from spyse.com
  prefs: []
  type: TYPE_NORMAL
- en: As you may have already inferred, these types of pages are also a good source
    of information to evaluate the security of your hosting provider.
  prefs: []
  type: TYPE_NORMAL
- en: WHOIS records
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These records show information related to the owner of a given domain. The main
    risk here is that having those records associated with a single person may make
    that person a big target for cybercriminals.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if an attacker can see the email address of the owner of the domain
    of a big corporation, then the attacker can use that information to perform a
    plurality of attacks over that person, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-force attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impersonation attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching email on known data breaches to gather credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To prevent those attacks, companies can pay an extra fee to the domain registrant
    to *hide* those records as a privacy measure, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – WHOIS output of private versus normal domain'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – WHOIS output of private versus normal domain
  prefs: []
  type: TYPE_NORMAL
- en: Notice in the preceding screenshot that the registrant information has been
    obfuscated for security and privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another piece of information that you may want to check is about shared hosting
    environments. For example, pages such as [https://www.domainiq.com](https://www.domainiq.com)
    give you a list of all the domains hosted on a given server or subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'This information can be used in two ways, as outlined next:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, it can be used by you to determine the server reputation if you are
    using a shared hosting environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, this can also represent a privacy issue as it may disclose private
    information about the ownership of the company. For example, you may have two
    companies registered under different corporations because you don't want the public
    to associate with them, but having both domains hosted on the same server may
    give away a clue about the real ownership of both companies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a list of domains hosted on the same server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Output showing a list of domains hosted on the same server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Output showing a list of domains hosted on the same server
  prefs: []
  type: TYPE_NORMAL
- en: As a side note, this information may also be useful if you are using a third-party
    shared hosting environment to determine whether your site is at risk of being
    banned (blacklisted) due to a bad page hosted on the same server (which may impact
    the availability of your email server).
  prefs: []
  type: TYPE_NORMAL
- en: Web-scraping tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are also some tools designed to gather all public information from a given
    domain.
  prefs: []
  type: TYPE_NORMAL
- en: You can leverage these tools to determine how much information can be *harvested*
    from your site or web application to ensure that your private data remains confidential.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of web-scraping tools are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://webscraper.io](https://webscraper.io): A popular browser extension
    that allows you to gather all public information from a given site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.scraperapi.com/](https://www.scraperapi.com/): This site provides
    users with an API to perform web scraping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.scraping-bot.io/](https://www.scraping-bot.io/): A user-friendly
    system to scrape web pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As seen in the following screenshot, most scraper systems will output several
    types of documents, including `.html`, `.doc`, `.pdf`, `.xls`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Web scraping'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – Web scraping
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember that you should only do web scraping on your own servers as this
    may be illegal in some countries.*'
  prefs: []
  type: TYPE_NORMAL
- en: Preventing web scraping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are also some steps that you can take to prevent others from using web
    scraping against your web resources. Some of the most effective ones are listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement a **Web Application Firewall** (**WAF**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use antibot systems (such as the **Completely Automated Public Turing test to
    tell Computers and Humans Apart** (**CAPTCHA**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request *user registration* to access downloads and other information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use *blacklists* of IPs, servers, domains, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use advanced systems such as *browsing fingerprinting* to detect potential bots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use *honeypots* to identify attackers that want to scrap your site (and block
    them).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those tips may help protect you against some automated scraping tools, but your
    system may still be vulnerable to web scraping. That is why we focused the beginning
    of this chapter on making sure that no sensitive information is externally available
    so that if someone does web scraping, they will not collect any sensitive data
    from our web systems.
  prefs: []
  type: TYPE_NORMAL
- en: Checking data exposure with Google hacking (dorks)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I know that many people hate this to be called **hacking** (mainly because this
    does not require any technical skill); however, a lot of people call Google dorks
    Google hacking, so I decided to keep that name in the title just to create some
    attention.
  prefs: []
  type: TYPE_NORMAL
- en: '**Google dorks** are based on the utilization of some search commands and parameters
    to harvest the internet for some private files and information in a more targeted
    way.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, this is not a tool created by Google to *hack*; instead,
    it is about leveraging this search engine to find some sensitive information that
    was not properly secured and therefore exposed on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review some Google dorks that you can use to ensure you are not exposed
    on the internet. You can see an example here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether there is any `.xls` file on your site that contains phone numbers.
    You can improve it by changing the `phone` keyword for any other attribute that
    you want to search and the file type for `.pdf`, `.doc`, and so on. Here''s a
    code example to show you how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Search for open databases in your web resource with the word `password`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following screenshot, you need to carefully review the results
    of these dorks to see whether the results show just basic data (such as variable
    names) or more sensitive data (such as plain text passwords):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Google dork output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – Google dork output
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if this sounds incredible, there are times when you may even find passwords
    in a `.txt` file, as illustrated in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code shown in the preceding example will search for misplaced files (such
    as a `.txt` file with usernames or passwords).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find more than 6,000 Google dorks that you can modify based on
    your needs. Some are specific to particular web services, so they may be really
    useful for you: [https://www.exploit-db.com/google-hacking-database](https://www.exploit-db.com/google-hacking-database).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also another way to prevent outsiders from using these Google dorks
    against your web systems by modifying the `robots.txt` file in your server, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prevent indexing from Google by running the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Prevent Google from indexing a specific file type by running the following
    code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Prevent indexing of a given folder by running the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Prevent indexing from other search engines by running the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All these are very basic (but feasible) attacks, but now you have learned how
    to set up the basics of web security, it's time to move on to the next step and
    learn about the most common attacks on web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging DVWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving on with the rest of the chapter, you need to know this great tool
    that will help you to better understand the vulnerabilities on web applications.
  prefs: []
  type: TYPE_NORMAL
- en: '*But also, we are going to use this platform to show you how you can test your
    web application against the most common attacks, such as the following:*'
  prefs: []
  type: TYPE_NORMAL
- en: Brute-force attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, this lightweight and easy-to-install system has a lot of cool
    features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A platform to explore several web application vulnerabilities in a safe environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A great tool to create videos or real-time demos to raise awareness about those
    vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test environment to determine the impact of attacks on web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sandbox environment to test remediation actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, I strongly suggest you *install the DVWA on a VM* so that you
    can execute the labs that we will see in the upcoming section of this chapter,
    to see *how to test your web applications against real attacks and the importance
    of applying at least basic security hardening in your web applications.*
  prefs: []
  type: TYPE_NORMAL
- en: Installing DVWA on Kali Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is not easy to find clear (step-by-step) instructions to install DVWA on
    the latest version of Kali Linux; therefore, to save you some time (and headaches),
    I created a super-easy-to-follow guide to help you *install DVWA on Kali Linux
    in just 14 steps*. Here''s how you do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `html` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone the `git` repository, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change permissions over the `installation` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the `config` file in the `installation` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the `config` file and rename it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `config` file to see the database credentials and modify the password
    to something easier to type (in the following example, I changed the password
    to `pass`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install `mariadb` by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the database by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to the database (the password is blank, so just hit *Enter* when asked),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to create a user in the database. In this case, we need to use
    the same username and password that we just created in the `config` file (see
    *Figure 12.7*). Here''s the code you''ll need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to grant all privileges to the user on the database, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that since we are working on the database, those commands need to end
    with a semicolon (`;`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, the result of those two operations on the database should look like this:![Figure
    12.7 – Successful creation of the user on the database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.7_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.7 – Successful creation of the user on the database
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now is the time to navigate to the `apache2` directory to configure our Apache
    server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s modify the `php.ini` file to ensure the following parameters are
    on: `allow_url_fopen` and `allow_url_include`, as shown in *Figure 12.9*, and
    to do that we will use `mousepad`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, it is time to start the Apache server. You can do this by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 12.9 – DVWA configuration page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.9 – DVWA configuration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Oh, but wait—there is still one more step. Scroll down and click on **Create/Reset
    Database**. This will create a database for you and after a few seconds, you will
    be directed to a login screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – DVWA login screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.10 – DVWA login screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, just enter the following credentials to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '`admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As seen in the following screenshot, there are a lot of interesting vulnerabilities
    that you can test and experiment with, such as **Brute Force**, **Command Injection**,
    **File Inclusion**, **SQL Injection**, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – DVWA web interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.11 – DVWA web interface
  prefs: []
  type: TYPE_NORMAL
- en: One very interesting attack is the famous XSS attack, which we will review in
    depth in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Overviewing the most common attacks on web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is the time to talk about the *most common attacks* against web applications
    that you may face and, of course, all the methods, techniques, and tools that
    you can use to protect your systems against them.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring XSS attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The logic behind this type of attack is very simple: *to leverage some JavaScript
    or HTML to execute some code on your web application*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand these types of attacks, let''s look at one of the most
    common types of XSS attacks: **the hijacking of user sessions**.'
  prefs: []
  type: TYPE_NORMAL
- en: Hijacking a user session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, the attacker will try to inject malicious code into a web application
    that can be used to exfiltrate the session cookie that will be used to impersonate
    the victim.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better illustrate this attack, let''s see an example based on a web application
    used to rent houses, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker will log in to the vulnerable site and create an entry to advertise
    the renting of a house *but* inside the description of the field (in which a normal
    person will describe the goodies of the house for rent), the attacker will embed
    malicious code aimed at gathering the user's session cookie and sending it to
    their server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When another user opens that *hacked* advertisement to rent a house, the malicious
    JavaScript will be executed and the victim's session cookie will be copied and
    sent to the attacker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the attacker can impersonate the victim by using the stolen session cookie
    to identify themself as the victim on the system, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Session hijacking via XSS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.12 – Session hijacking via XSS
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how you can prevent this attack. You could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set `php.ini` directives, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use `session_regenerate_id()` every time you provide any important data (this
    will delete the old session number and generate a new one).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save in `$_SESSION` some fingerprinting about the user (such as IP address,
    browser-agent, and so on). Then, you can correlate that every time the cookie
    is received and if there is a mismatch, then you know something is not good.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an *SSL certificate* to encrypt your data in transit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Educate your users to *always log out* instead of just closing the browser when
    using your web applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `timeout` to *kill idle sessions* (expire sessions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep session **Identifiers** (**IDs**) out of the **Uniform Resource Locator**
    (**URL**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Avoid reuse of session IDs* for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flag session *ID cookies* as `HTTPOnly`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Request reauthentication* when accessing a sensitive resource in your web
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is also important to highlight that there are many other known XSS attacks,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Execution of unauthorized activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing keystrokes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing sensitive information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's overview some additional tips that you can leverage to better protect
    your web applications against XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Additional mitigation steps against XSS attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a list of some best practices that can be used to reduce the risk of
    being impacted by an XSS attack:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep your web application *up to date* with security updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sanitize* inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Restrict* JavaScript entries on input fields (input validation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ensure* that all third-party modules of your web application are also up to
    date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regularly *check the CVE site* to determine whether any of your systems are
    impacted by a newly discovered XSS vulnerability: [https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=xss](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=xss).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s talk about one of the best tools used to test vulnerabilities on
    web applications: **Burp Suite**!'
  prefs: []
  type: TYPE_NORMAL
- en: Using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Burp Suite** is a great platform that allows us to look for vulnerabilities
    in our web applications. In fact, if you have web applications, *you must have*
    at least one person trained to use Burp Suite to test the security of your web
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '*But don''t worry if you don''t have any experience with this tool—this section
    is for you!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you will learn how to set up Burp Suite to be ready for the next sections,
    in which you will see how to use Burp Suite and DVWA to test a web application
    against two very common attacks: SQL injection and brute-force attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by talking about the three main versions of the tool (but to make
    it easier, we will separate it into two—the free and the paid versions).
  prefs: []
  type: TYPE_NORMAL
- en: Professional and Enterprise editions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These versions come with more advanced tools, plus you can leverage them during
    your web application testing. Additionally, they also come with automation settings,
    which may be essential for large companies or corporations.
  prefs: []
  type: TYPE_NORMAL
- en: Community edition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a basic version of the tool that is included on Kali Linux by default.
  prefs: []
  type: TYPE_NORMAL
- en: With this version, you can perform many tests with the limitation that tests
    cannot be automated (they all have to be manually executed) but that is good enough
    for medium-to-small companies.
  prefs: []
  type: TYPE_NORMAL
- en: But that is enough theory, so, if you want to know more about the details of
    each version and its price, visit their site at [https://portswigger.net/burp](https://portswigger.net/burp).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's briefly explore the interface of the **Community version** of Burp
    Suite on **Kali Linux** before we jump into some real case scenarios so that you
    can execute yourself some of the most common testing operations for web applications,
    including SQL injections and brute-force attacks; but first, let's get familiar
    with the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Burp Suite on Kali
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute Burp Suite on Kali, just open the command line and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If it is the first time you have used Burp Suite, you need to read and accept
    the terms, and then you will be able to see the interface of Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: '*Wait*—did you get an error about the **Java Runtime Environment** (**JRE**)?'
  prefs: []
  type: TYPE_NORMAL
- en: 'No worries—this is a known error when you launch Burp Community for the first
    time, and it is related to the version of the JRE installed on your OS, as seen
    in the following screenshot. Anyway, in this case, you can just bypass the message
    to launch Burp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – JRE error when executing Burp Suite'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.13 – JRE error when executing Burp Suite
  prefs: []
  type: TYPE_NORMAL
- en: On the free version, the only available option is to select **Temporary Project**,
    so let's click there and then select default options to finally access the main
    **Graphical User Interface** (**GUI**).
  prefs: []
  type: TYPE_NORMAL
- en: '*Congratulations!* Now, you should be able to see the main interface of Burp
    Suite Community, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Burp Suite Community edition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.14 – Burp Suite Community edition
  prefs: []
  type: TYPE_NORMAL
- en: You have the environment ready to start doing some testing, so let's move on
    to see how you can use **Burp Suite and DVWA** to test your web applications against
    SQL injection attacks.
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection attack on DVWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this demo, we will use Kali Linux, plus the two tools that we just set
    up: Burp Suite Community edition and DVWA.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you reboot the machine, you need to start the services required for DVWA
    again and restart your browser using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo service apache2 start**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo service mysql start**'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the cool features of DVWA is that you can customize the difficulty of
    the attack (they call them security levels). Here is a quick explanation about
    each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low**: The computer is super vulnerable, and it has no security measures
    at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medium**: Intended to be a simulation of a web application without good security
    practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**: This is an extension of the previous level, in which exploitations
    may be harder to achieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impossible**: This is a simulation of a machine with all the best practices
    applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the case of SQL attacks, the **Low** security level shows you a text field
    in which you can easily input a direct SQL injection, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – DVWA low security level: SQL injection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.15_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.15 – DVWA low security level: SQL injection'
  prefs: []
  type: TYPE_NORMAL
- en: However, for our example, we will take it to the next level and we will use
    the **Medium** security level in which, instead of a simple text field, we will
    only see a drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, to accomplish this security test, we are going to need an extra
    tool to inject the SQL, and here is where you will take advantage of a new friend:
    Burp Suite.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see step-by-step instructions to perform this super cool security
    test of SQL injection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Burp Suite and create a temporary project using Burp defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the main top menu, select **Proxy**, and from the submenu, select **Intercept**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the **Lunch Burp Browser** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Burp browser, open DVWA and go to the left menu and click on **Security**,
    then on the dropdown, select **Medium** and click on **Submit**, as shown in the
    following screenshot:![Figure 12.16 – Changing the security level in DVWA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.16_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.16 – Changing the security level in DVWA
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, go to **SQL Injection** on the left menu, and there, you should see a drop-down
    menu with a **Submit** button, as shown in the following screenshot:![Figure 12.17
    – SQL injection on the medium security level
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.17_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.17 – SQL injection on the medium security level
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to Burp Suite and click on **Intercept is off** to turn it on, as seen
    in the following screenshot:![Figure 12.18 – Turning on Intercept in Burp Suite
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.18_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.18 – Turning on Intercept in Burp Suite
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to **DVWA** and click on **Submit** (as seen in *Figure 12.17*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you go back to Burp Suite, you should be able to see the intercepted data,
    as shown in the following screenshot:![Figure 12.19 – Data captured by Burp Suite
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.19_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.19 – Data captured by Burp Suite
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As seen at the end of *Figure 12.19*, the value that we selected on the dropdown
    was sent as `id=1`, so let's play around with that number to see how secure this
    web application is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's change the value of `id` from `1` to `2` on Burp Suite and then click
    on **Forward** to see what happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you go back to **DVWA**, you will see that the dropdown is still showing
    **User ID 1**; however, the information of **User ID 2** is being displayed. This
    means that Burp Suite was able to successfully inject a new value without even
    touching the web page, as illustrated in the following screenshot:![Figure 12.20
    – User ID changed from Burp Suite
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.20_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.20 – User ID changed from Burp Suite
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: But that was just a test. Now that we see that we can inject data, let's try
    to do a *real SQL injection*. To do this, let's change the value of **User ID**
    to see what we can achieve with different values. To achieve this, let's go back
    to Burp Suite and make sure that **Intercept** is ON and then click again on **Submit**
    on **DVWA** to get the data again on Burp Suite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, Burp Suite`1` to `1 OR 1=1#` and click on **Forward**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the following screenshot, the web page in **DVWA** is now
    displaying the information from *all* five users at the same time, even when there
    is no option to do that. This means that *we just discovered a security flaw*!
    Here it is:![Figure 12.21 – Showing data that should not be displayed in a web
    application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.21_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.21 – Showing data that should not be displayed in a web application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on `ID` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you go back to **DVWA**, you will see that this time, we obtained a
    lot more information, *including the table names*. This is a very serious security
    vulnerability because an attacker can obtain very sensitive data from our web
    application. *Now, we just discovered a more serious vulnerability that jeopardizes
    the confidentiality of the information*, as illustrated in the following screenshot:![Figure
    12.22 – Database information leaked from a web application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.22_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.22 – Database information leaked from a web application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With this information, we can test whether we can retrieve even more sensitive
    data from this web application, so let''s try with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you go back to **DVWA**, you should be able to see all password hashes displayed,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23 – Hashed passwords leaked from a web application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.23_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.23 – Hashed passwords leaked from a web application
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see a common error that you may face when executing this lab.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing a common error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Are you getting the same error as the one illustrated in *Figure 12.24*? If
    yes, don't worry—it is easy to fix. Just go to Burp Suite, select **Intercept
    is Off**, then refresh **DVWA** and everything should be good again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, remember that *those values are case-sensitive*, so make sure you use
    the correct case to avoid errors, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24 – DVWA error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.24_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.24 – DVWA error
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's do another test in which you can see whether a web application is
    vulnerable to brute-force attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Brute forcing web applications' passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will use the same two apps that we have been using, so let''s go directly
    to the steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Burp Suite and make sure that **Intercept** is OFF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **DVWA** and select **Brute force** from the left menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `admin` as `12345` as **Password** (do not click on **Login** yet).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to **Burp Suite** and set **Intercept** to ON.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should be able to see all data sent, including the **Username** and
    **Password** values typed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button that says **Action** on the top menu and then select **Sent
    to Intruder**, as shown in the following screenshot:![Figure 12.25 – Action menu
    on Burp Suite
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.25_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.25 – Action menu on Burp Suite
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you should see that the **Intruder** menu is now highlighted in red, so
    go and click on **Intruder** in the top menu, as shown in the following screenshot:![Figure
    12.26 – Intruder menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.26_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.26 – Intruder menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to **Positions** on the top menu. There, you can see the parameters or variables
    that we are going to use in our payloads. Normally, it identifies some by default,
    so in this case, let's start by clearing those values by clicking on **Clear**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, change the attack type to `admin` and click on `12345`. The result should
    look like this:![Figure 12.27 – Adding payload positions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.27_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.27 – Adding payload positions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have added both positions, let''s go to **Payloads** on the top
    menu. There, if you click on **Payload Set**, you should be able to see that the
    drop-down menu has two items. This is because we just added two payload positions,
    so the first is for **Username** and the second one is for **Password**, as shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.28 – Adding payload sets'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_12.28_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.28 – Adding payload sets
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OK—let's set `1` (`username`) and **Payload type** to **simple list**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make this example easy, we will include just two usernames: one will be
    `admin` and the other one will be `cesar`. To do that, just go to `admin` plus
    click `cesar`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s do the same with payload set #2 (`password`). Here, we would normally
    use a password dictionary, but to make this easier, let''s just add a few options
    of passwords manually. To do this, just set `2`, keep the `kessen`, `topolino`,
    `password`, `letmein`, `qwerty`. The result should be as shown in the following
    screenshot:![Figure 12.29 – Adding payload options (values)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.29_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.29 – Adding payload options (values)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go back to **DVWA** and copy the error message that you received when you put
    the wrong password: **Username and/or password incorrect**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back again to **Burp Suite** and now select **Options**. There, we are going
    to use the error as a marker to identify when the password is found. To do that,
    go to **Grep Match** and click on **Clear** to erase the default values, and then
    paste the error message and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, it is time to launch the attack. To do that, simply click on the **Start
    attack** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of now, you should see a window, as seen in the next screenshot, that shows
    the result of the brute-force attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in our example, there is one result in which the error was not found
    (last column), which means that the line is the one that contains the password.
    In this case, the `password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.30 – Results of the brute-force attack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.30_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.30 – Results of the brute-force attack
  prefs: []
  type: TYPE_NORMAL
- en: Now, remember that our goal here is to use this tool to test the vulnerabilities
    of our web applications and then to apply the appropriate remediations until the
    vulnerabilities are fixed.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, these two tools are extremely powerful *to test your web applications*,
    so as mentioned before, a good practice is to have at least one member of the
    security team trained in these two tools so that web application testing can be
    done on an ongoing basis to find and fix any vulnerability before an attacker
    can exploit them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you should have mastered all the aspects of securing your web applications.
    In this chapter, we have learned about active and passive data gathering of your
    web application and the best tools and methods used to discover sensitive data
    about your web application on the internet. We also learned about the risk of
    not obfuscating some *public* information about your web application.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to install, configure, and use the best virtual environment
    to become familiar with the most common vulnerabilities on web applications (the
    DVWA platform). Additionally, we explored how to install, configure, and use the
    best tool to assess the security of a given web application in real time (Burp
    Suite).
  prefs: []
  type: TYPE_NORMAL
- en: And we also experienced a real hands-on example to see how easily an attacker
    can take advantage of common vulnerabilities to exploit your web application.
  prefs: []
  type: TYPE_NORMAL
- en: But there are many other tools to find vulnerabilities in your web application
    and even the entire infrastructure, so let's move to the next chapter, in which
    we will review the best tools used to perform vulnerability assessments like a
    pro!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Additional information about the DVWA can be found on the official Git page
    at the following link: [https://github.com/digininja/DVWA](https://github.com/digininja/DVWA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This page highlights some other web application attacks that you may want to
    review: [https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
