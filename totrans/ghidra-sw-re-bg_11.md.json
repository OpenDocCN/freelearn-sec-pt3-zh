["```\n00  int main() {\n```", "```\n01 \tchar* data = \"\";\n```", "```\n02 \tchar name[20];\n```", "```\n03 \tint age;\n```", "```\n04 \tint return_value = sscanf(data, \"%s %i\", name, &age);\n```", "```\n05 \tprintf(\"I'm %s.\\n\", name);\n```", "```\n06 \tprintf(\"I'm %i years old.\", age);\n```", "```\n07 }\n```", "```\nC:\\Users\\virusito\\vulns> gcc.exe sscanf.c -o sscanf.exe\n```", "```\nC:\\Users\\virusito\\vulns> sscanf.exe\n```", "```\nI'm É§ã.\n```", "```\nI'm 9 years old.\n```", "```\n05 \tif(return_value == 2){\n```", "```\n06 \t\tprintf(\"I'm %s.\\n\", name);\n```", "```\n07 \t\tprintf(\"I'm %i years old.\", age);\n```", "```\n08 \t}else if(return_value == -1){\n```", "```\n09 \t\tprintf(\"ERROR: Unable to read the input data.\\n\");\n```", "```\n10 \t}else{\n```", "```\n11 \t\tprintf(\"ERROR: 2 values expected, %d given.\\n\", return_value);\n```", "```\n12 \t}\n```", "```\nsymbolTable = currentProgram.getSymbolTable()\n```", "```\nlist_of_scanfs = list(symbolTable.getSymbols('_sscanf'))\n```", "```\nif len(sscanfs) == 0:\n```", "```\n    print(\"sscanf not found\")\n```", "```\n    return\n```", "```\n00 decompiler_options = DecompileOptions()\n```", "```\n01 tool_options = state.getTool().getService(\n```", "```\n02                                           OptionsService\n```", "```\n03                              ).getOptions(\n```", "```\n04                                           \"Decompiler\"\n```", "```\n05                              )\n```", "```\n06 decompiler_options.grabFromToolAndProgram(\n```", "```\n07                                           None,\n```", "```\n08                                           tool_options,\n```", "```\n09                                           currentProgram\n```", "```\n10                                          )\n```", "```\n11 decompiler = DecompInterface()\n```", "```\n12 decompiler.setOptions(decompiler_options)\n```", "```\n13 decompiler.toggleCCode(True)\n```", "```\n14 decompiler.toggleSyntaxTree(True)\n```", "```\n15 decompiler.setSimplificationStyle(\"decompile\")\n```", "```\n16 If not decompiler.openProgram(program):\n```", "```\n17   print(\"Decompiler error\")\n```", "```\n18   return\n```", "```\n00 from ghidra.program.database.symbol import FunctionSymbol\n```", "```\n01 functionManager = program.getFunctionManager()\n```", "```\n02   for sscanf in list_of_sscanfs:\n```", "```\n03     if isinstance(sscanf, FunctionSymbol):\n```", "```\n04       for ref in sscanf.references:\n```", "```\n05         caller = functionManager.getFunctionContaining(\n```", "```\n06                                           ref.fromAddress\n```", "```\n07                  )\n```", "```\n08      caller_function_decompiled = \n```", "```\n09                           decompiler.decompileFunction(\n```", "```\n10                                                   caller,\n```", "```\n11                    decompiler.options.defaultTimeout,\n```", "```\n12                    None\n```", "```\n13      )\n```", "```\ncaller_pcode = caller_function_decompiled. highFunction\n```", "```\nfor pcode_operations in caller_pcode.pcodeOps:\n```", "```\nif op.opcode == PcodeOp.CALL and op.inputs[0].offset == sscanf.address.offset:\n```", "```\nnum_variables = len(op.inputs) - 3\n```", "```\nif op.output is None:\n```", "```\nfor use in op.output.descendants:\n```", "```\nif use.opcode == PcodeOp.INT_EQUAL:\n```", "```\n    if use.inputs[0].getDef() == op:\n```", "```\n        comparand_var = use.inputs[1]\n```", "```\n    elif use.inputs[1].getDef() == op:\n```", "```\n        comparand_var = use.inputs[0]\n```", "```\nif comparand_var.isConstant():\n```", "```\n    comparand = comparand_var.offset\n```", "```\n    if comparand < num_variables:\n```", "```\n#include<stdio.h>\n```", "```\nint main() {\n```", "```\n\tchar* data = \"\";\n```", "```\n\tchar name[20];\n```", "```\n\tint age;\n```", "```\n\tint return_value = sscanf(data, \"%s %i\", name, &age);\n```", "```\n\tif(return_value==1){\n```", "```\n\t\tprintf(\"I'm %s.\\n\", name);\n```", "```\n\t\tprintf(\"I'm %i years old.\", age);\n```", "```\n\t}\n```", "```\n}\n```", "```\n    C:\\Users\\virusito\\vulns> gcc.exe sscanf.c -o sscanf_x86.exe\n    ```", "```\n    C:\\Users\\virusito\\vulns> arm-none-eabi-gcc.exe sscanf.c -o sscanf_arm.exe -lc –lnosys\n    ```", "```\nsscanfs = list(symbolTable.getSymbols('_sscanf'))\n```", "```\nsscanfs.append(symbolTable.getSymbols('sscanf').next())\n```", "```\nanalyzeHeadless.bat C:\\Users\\virusito\\projects sscanf -postScript C:\\Users\\virusito\\ghidra_scripts\\sscanf_ghidra.py -import C:\\Users\\virusito\\vulns\\*.exe -overwrite\n```"]