["```\n[\n  {{#repeat 50}}\n  {\n    \"id\": \"{{faker 'string.uuid'}}\",\n    \"username\": \"{{faker 'internet.userName'}}\"\n  }\n  {{/repeat}}\n]\n```", "```\n$ curl http://localhost:3000/users # use -k if you are testing with TLS.\n[\n  {\n    \"id\": \"b6790a61-295b-46d4-9739-bbea9ad30e4c\",\n    \"username\": \"Annamarie.Hermiston39\"\n  },\n  {\n    \"id\": \"8abcdac0-0ba4-40f0-95af-fbacff6b6d8f\",\n    \"username\": \"Stephanie6\"\n  },\n  {\n    \"id\":\"507f64b1-3ee8-4897-aa0b-514c4dc486fd\",\n    \"username\": \"Maybell_Stark1\"\n  },\n...output omitted for brevity and optimized for readability...\n]\n```", "```\n$ ab -n 100 -c 10 http://localhost:3000/resource-intensive-endpoint/\nThis is ApacheBench, Version 2.3 <$Revision: 1879490 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\nBenchmarking localhost (be patient).....done\nServer Software:\nServer Hostname:        localhost\nServer Port:            3000\nDocument Path:          /users\nDocument Length:        0 bytes\nConcurrency Level:      10\nTime taken for tests:   0.201 seconds\nComplete requests:      100\nFailed requests:        0\nTotal transferred:      0 bytes\nHTML transferred:       0 bytes\nRequests per second:    497.08 [#/sec] (mean)\nTime per request:       20.117 [ms] (mean)\nTime per request:       2.012 [ms] (mean, across all concurrent requests)\nTransfer rate:          0.00 [Kbytes/sec] received\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       2\nProcessing:     1    2   3.6      1      23\nWaiting:        0    0   0.0      0       0\nTotal:          1    2   3.6      1      23\nPercentage of the requests served within a certain time (ms)\n  50%      1\n  66%      1\n  75%      1\n  80%      1\n  90%      4\n  95%     10\n  98%     18\n  99%     23\n 100%     23 (longest request)\n```", "```\n$ ab -n 1000 -c 100 http://localhost:3000/users\nDocument Length:        3629 bytes\nTime taken for tests:   2.214 seconds\nComplete requests:      1000\nTotal transferred:      3814000 bytes\nHTML transferred:       3629000 bytes\nPercentage of the requests served within a certain time (ms)\n  50%    207\n  66%    241\n  75%    259\n  80%    283\n  90%    305\n  95%    323\n  98%    355\n  99%    360\n 100%    371 (longest request)\n```", "```\nCompleted 9000 requests\napr_socket_recv: Connection reset by peer (104)\nTotal of 9585 requests completed\n```", "```\nfrom scapy.all import *\nsend(IP(dst=\"localhost\")/TCP(dport=3000, flags=\"R\"), count=5000)\n```", "```\n............................................................................................................................................................................................................................................\nSent 5000 packets.\n```", "```\n$ hping3 -S -p 3000 -c 3 localhost\nHPING localhost (lo 127.0.0.1): S set, 40 headers + 0 data bytes\nlen=44 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=SA seq=0 win=65495 rtt=7.1 ms\nlen=44 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=SA seq=1 win=65495 rtt=8.6 ms\nlen=44 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=SA seq=2 win=65495 rtt=6.1 ms\n--- localhost hping statistic ---\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max = 0.4/7.7/16.1 ms\n```", "```\n$ hping3 --scan 3000 -c 3 localhost\nScanning localhost (127.0.0.1), port 3000\n1 ports to scan, use -V to see all the replies\n+----+-----------+---------+---+-----+-----+-----+\n|port| serv name |  flags  |ttl| id  | win | len |\n+----+-----------+---------+---+-----+-----+-----+\nAll replies received. Done.\nNot responding ports: (3000 )\n```", "```\n$ dd if=/dev/urandom of=random.bin bs=1M count=1\n$ sudo hping3 -p 3000 -c 3 --file random.bin -d 32768 localhost\nlen=40 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=RA seq=0 win=0 rtt=1.9 ms\nlen=40 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=RA seq=1 win=0 rtt=11.1 ms\nlen=40 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=RA seq=2 win=0 rtt=9.4 ms\n--- localhost hping statistic ---\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max = 1.9/7.4/11.1 ms\n```", "```\n$ sudo hping3 -f -p 3000 -c 3 -d 32768 localhost\nHPING localhost (lo 127.0.0.1): NO FLAGS are set, 40 headers + 32768 data bytes\nlen=40 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=RA seq=0 win=0 rtt=11.1 ms\nlen=40 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=RA seq=1 win=0 rtt=10.5 ms\nlen=40 ip=127.0.0.1 ttl=64 DF id=0 sport=3000 flags=RA seq=2 win=0 rtt=11.3 ms\n--- localhost hping statistic ---\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max = 11.1/12.2/14.2 ms\n```", "```\n$ sudo hping3 --flood --rand-source -p 3000 localhost\nHPING localhost (lo 127.0.0.1): NO FLAGS are set, 40 headers + 0 data bytes\nhping in flood mode, no replies will be shown\n^C\n--- localhost hping statistic ---\n12356365 packets transmitted, 0 packets received, 100% packet loss\nround-trip min/avg/max = 0.0/0.0/0.0 ms\n```", "```\n$ sudo hping3 --flood --syn --fast -p 3000 localhost\nHPING localhost (lo 127.0.0.1): S set, 40 headers + 0 data bytes\nhping in flood mode, no replies will be shown\n^C\n--- localhost hping statistic ---\n1113320 packets transmitted, 0 packets received, 100% packet loss\nround-trip min/avg/max = 0.0/0.0/0.0 ms\n```", "```\nevents {\n    worker_connections  1024;\n}\nhttp {\n    limit_req_zone $binary_remote_addr zone=limitlab:10m rate=1r/s;\n    include      mime.types;\n    default_type application/json;\n    server {\n     listen      80;\n     server_name localhost;\n       location / {\n            limit_req zone=limitlab burst=5;\n            proxy_pass http://localhost:3000;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_cache_bypass $http_upgrade;\n        }\n    }\n}\n```", "```\n$ ab -n 100 -c 10 http://localhost/users\nServer Software:        nginx/1.18.0\nConcurrency Level:      10\nTime taken for tests:   5.007 seconds\nComplete requests:      100\nFailed requests:        94\n   (Connect: 0, Receive: 0, Length: 94, Exceptions: 0)\nNon-2xx responses:      94\nRequests per second:    19.97 [#/sec] (mean)\nTime per request:       500.680 [ms] (mean)\nTransfer rate:          11.61 [Kbytes/sec] received\nPercentage of the requests served within a certain time (ms)\n  50%      1\n  66%      1\n  75%      1\n  80%      1\n  90%      2\n  95%    905\n  98%   3902\n  99%   4900\n 100%   4900 (longest request)\n```", "```\n$ ab -n 10000 -c 1000 http://localhost/users\nConcurrency Level:      1000\nTime taken for tests:   5.009 seconds\nComplete requests:      10000\nFailed requests:        9994\nPercentage of the requests served within a certain time (ms)\n  50%     50\n  66%     56\n  75%     69\n  80%     77\n  90%    118\n  95%    129\n  98%    135\n  99%    145\n 100%   4991 (longest request)\n```", "```\n[error] 11023#11023: *10619 limiting requests, excess: 5.048 by zone \"limitlab\", client: 127.0.0.1, server: localhost, request: \"GET /users HTTP/1.1\", host: \"localhost\"\n```", "```\nimport time\nimport requests\nurl = \"http://localhost/users\"\nrequests_per_ip = 10\ndelay_per_ip = 1\nnum_users = 5\nfor user_id in range(num_users):\n    simulated_ip = f\"10.0.0.{user_id+1}\"\n    print(f\"Simulating user with IP: {simulated_ip}\")\n    # Loop to send requests for the current simulated user\n    for i in range(requests_per_ip):\n        response = requests.get(url)\n        if response.status_code == 200:\n            print(f\"\\tRequest {i+1} successful for user {user_id+1}.\")\n        else:\n            print(f\"\\tRequest {i+1} failed for user {user_id+1}!\")\n            print(f\"Status code: {response.status_code}\")\n            if response.status_code == 429 or response.status_code == 503:\n                print(f\"\\tRate limit reached for user {user_id+1}!\")\n                print(\"\\tWaiting for delay...\")\n                time.sleep(60)\n        time.sleep(delay_per_ip)\nprint(\"All requests completed for simulated users.\")\n```", "```\n     Request 8 successful for user 4.\n     Request 9 successful for user 4.\n     Request 10 successful for user 4.\nSimulating user with IP: 10.0.0.5\n     Request 1 successful for user 5.\n     Request 2 successful for user 5.\n     Request 3 successful for user 5.\n     Request 4 successful for user 5.\n     Request 5 successful for user 5.\n     Request 6 successful for user 5.\n     Request 7 successful for user 5.\n     Request 8 successful for user 5.\n     Request 9 successful for user 5.\n     Request 10 successful for user 5.\nAll requests completed for simulated users.\n```"]