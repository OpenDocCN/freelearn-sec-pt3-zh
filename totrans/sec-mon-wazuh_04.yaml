- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security Automation Using Shuffle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every day, the average security operations team receives over 11,000 security
    alerts ([https://start.paloaltonetworks.com/forrester-2020-state-of-secops.html](https://start.paloaltonetworks.com/forrester-2020-state-of-secops.html)),
    including suspicious activity, intrusion attempts, privileged user and account
    monitoring, abnormal external communication, and unauthorized access attempts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The majority of an analyst’s time (almost 70%) is spent investigating, triaging,
    or responding to alerts, and the majority of these alerts must be processed manually,
    greatly slowing down a company’s alert triage process. According to the same report,
    about 33% of these alerts turn out to be false positives. An SOC analyst can get
    frustrated with this overwhelming number of security alerts and repetitive false
    positives. This leads to the need for security automation, and this is where **SOAR**
    (**Security Orchestration and Automation Response**) plays a critical role. SOAR
    is a set of security features that enables businesses to collaborate on incident
    investigation and automate security operations tasks. The ultimate goal of this
    SOAR is to reduce the **MTTR** (**Mean Time to Respond)**. This is achieved by
    automating every action or response taken by the SOC analyst. As a result, organizations
    stop alert fatigue for the SOC analyst and save them time. There are six core
    elements of SOAR: investigation, incident management, automation, reporting, vulnerability
    management, and threat intelligence. All of these elements are crucial for building
    powerful security automation in a network. Although Wazuh has some of these capabilities
    to build a strong security automation system, we need a third-party tool. In this
    chapter, we will use the Shuffle platform. Shuffle is an open-source security
    automation tool.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is SOAR?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How a SOC analyst uses SOAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Shuffle SOAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving Wazuh Alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remotely managing Wazuh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Shuffle apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is SOAR?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to Gartner, “*Security orchestration, automation and response (SOAR)
    solutions combine incident response, orchestration and automation, and threat
    intelligence (TI) management capabilities in a single platform*.” SOAR tools are
    used to implement processes such as security playbooks, workflows, or processes
    to support a security operation analyst or incident analyst. The functionalities
    of SOAR are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security orchestration**: Security orchestration involves the coordination
    of security tasks and workflows across several security tools and teams. It aims
    to streamline and optimize a response to security incidents and threats. We can
    create workflows that automate a sequence of security tasks, such as alert triage,
    investigation, containment, and remediation. This also involves the integration
    of a wide range of security tools, such as SIEM, firewalls, endpoint protection,
    and threat intelligence feeds. An example could be orchestrating the isolation
    of a compromised device from a network when a malware alert is detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security automation**: Security automation focuses on the execution of predefined
    actions in response to security events or incidents. With event-driven workflows
    and the integration of various security tools, security automation enhances operation
    efficiency, reduces manual errors, and ensures that security responses align with
    organizational policies. An example of security automation in SOAR is automatically
    updating and patching software vulnerabilities as soon as they are discovered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident response**: Incident response involves the processes and actions
    taken when a security incident or data breach occurs. In a SOAR system, incident
    response is made more efficient by orchestrating and automating security tools,
    tasks, executions, and so on. For example, when a data breach is detected, the
    SOAR platform can automatically generate an incident report, notify the relevant
    stakeholders, and initiate a predefined incident response plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOAR integrates the concepts of security orchestration and security automation
    to provide an all-encompassing incident response strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s discuss how an SOC analyst uses a SOAR platform throughout the alert
    and incident life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: How a SOC analyst uses SOAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Security Operation Center** (**SOC**) analyst is a cybersecurity professional
    responsible for monitoring, detecting, analyzing and mitigating security incidents
    in an organization. The SOC analyst leverages a SOAR platform to enhance the efficiency
    and effectiveness of security operations. By utilizing SOAR, SOC analysts can
    make jobs easier, cut down on reaction times, and make sure that security incidents
    are handled in a more coordinated and consistent way. There are several stages
    within the incident response process where the SOAR platform can be utilized,
    as shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The flow of the incident response and SOAR](img/B19549_4_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The flow of the incident response and SOAR
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the diagram, each stage can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert generation**: **SIEM** (**Security Information and Event Management**)
    systems, an **IDS/IPS** (**Intrusion Detection System/Intrusion Prevention System**),
    and endpoint security solutions monitor network and system activity continuously
    for potential threats. Wazuh triggers an alert when there is an event matching
    Wazuh rules, and these alerts can be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Log analysis alerts**: The Wazuh platform monitors endpoints, network, and
    application logs for any suspicious activities, and if there is a match based
    on the rule, it will trigger an alert – for example, detecting multiple failed
    login attempts within a short period'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intrusion detection system (IDS) alerts**: When integrated with Suricata
    Network-based IDS, Wazuh can analyze network traffic for signs of malicious activities
    – for example, an alert gets triggered when there is a known vulnerability, network
    scanning, or known exploits'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Integrity Monitoring (FIM) alerts**: Wazuh has an in-build FIM module
    to detect any unauthorized file changes – for example, unauthorized file modification
    alerts in the root directory of the Ubuntu server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alert triage and prioritization**: The SOAR platform uses predefined security
    rules and logic to prioritize incoming alerts according to their severity, origin,
    and potential impact, such as a brute-force attempt or potential ransomware attack.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Investigation and context gathering**: This step involves three sub-steps
    – playbook execution, automated enrichment, and manual analysis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Playbook execution**: For each alert, SOAR can use an incident response playbook.
    Playbooks are sets of automated and manual actions that guide an analyst through
    the investigation process.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Automated enrichment**: The SOAR platform can automatically add context to
    notifications, such as threat intelligence data, historical logs, and asset information.
    This contextual information assists the analyst in determining the alert’s veracity
    and severity.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Manual analysis**: The analyst evaluates the enriched alert and may perform
    additional manual investigation. They may query systems, examine records, and
    utilize their knowledge to determine the nature and scope of the incident.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the investigation and content gathering are completed, the SOAR playbook
    can be triggered for different actions, as mentioned in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Containment, eradication and recovery**: During the containment phase of
    incident response, immediate actions are taken to limit the intensity of an incident,
    involving the isolation of affected endpoints to prevent further damage. This
    is followed by the eradication phase, where organizations focus on removing threats
    from the network. It also involves identifying and eliminating the root cause
    of the incident. Finally, the recovery phase takes care of restoring systems and
    services to their normal operational state.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve learned about how an SOC analyst uses a SOAR platform, using an incident
    response example. In the next section, we will learn about the Shuffle platform.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Shuffle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Shuffle** is an open-source interpretation of SOAR. It was built by Fredrik
    Oedegaardstuen. It brings automation with Plug and Play enterprise apps. Shuffle
    relies heavily on Docker and microservices, making its design modular and powerful.
    Let’s discuss some important components and features of Shuffle:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apps and workflows**: Apps are building blocks in workflows. Workflows are
    the part of Shuffle where everything comes together. When you first configure
    Shuffle, it should provide you with more than 100 existing apps. Shuffle covers
    many of the popular apps, as shown in the following screenshot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – App and workflows in Shuffle](img/B19549_4_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – App and workflows in Shuffle
  prefs: []
  type: TYPE_NORMAL
- en: '**File analysis**: Shuffle can help you upload and analyze an email attachment
    file with Yara. You can also manually upload a file by going to **Admin** | **Files**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Files for workflows in Shuffle](img/B19549_4_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Files for workflows in Shuffle
  prefs: []
  type: TYPE_NORMAL
- en: '**Shuffle cache**: Shuffle can help you store any information in the key-value
    pair format. The value will be sticky in nature, and hence, it can be used in
    a timestamp for security reports, maintaining **IOC** (**Indicators of Compromise**)
    lists, and so on. This is available in the form of Shuffle Tools. Whenever we
    use the Shuffle Tools app, we need to set the action type to **Set cache value**
    for caching to work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The Shuffle cache](img/B19549_4_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – The Shuffle cache
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger**: To achieve better security automation, Shuffle provides six types
    of Triggers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Webhooks**: These allow any outside source to send data in real time to Shuffle.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Schedules**: These make it possible to start a workflow on a schedule'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subflows**: Want to run another workflow from within your current one? This
    does that exactly.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User input**: Starting or continuing an action based on what an analyst decides.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Office365 Email Trigger**: This gets triggered when an email is received.
    It is useful for phishing analysis.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gmail email trigger**: Similar to Office365, Gmail gets a trigger when a
    Google user gets an email.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use cases**: Users can create custom workflows to set up security use cases.
    The use cases in Shuffle are divided into five types – *Collect*, *Enrich*, *Detect*,
    *Respond*, and *Verify*. Each category can have multiple use cases. You can find
    the list all use cases here: [https://shuffler.io/usecases](https://shuffler.io/usecases).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shuffle is a powerful security automation platform, offering full user management,
    multi-factor authentication, single sign-on, multi-tenancy, and a lot more. Now,
    let’s learn to set up Shuffle using a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Shuffle SOAR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Shuffle SOAR** can be deployed in self-hosted or in the cloud. For cloud-based
    deployment, you simply have to visit their official website ([https://shuffler.io/register](https://shuffler.io/register))
    and create an account. In this section, we will learn how to deploy Shuffle SOAR
    using a self-host deployment method. We need to complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Shuffle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix the prerequisites for the Shuffle database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch Shuffle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Shuffle can be installed using `docker-compose.yml` script. As pre-requisites,
    we need to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu Server 22.0 ([https://ubuntu.com/download/server](https://ubuntu.com/download/server))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker and Docker Compose installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Shuffle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When it comes to a Shuffle SOAR self-hosted deployment, currently it is only
    supported by Docker and Kubernetes. Here, we will utilize the Docker deployment
    method, and the package can be downloaded from Docker’s official GitHub repository
    by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git clone` command to download the Shuffle codebase from its GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Change the directory to Shuffle**: Move into the directory where the Shuffle
    code has been cloned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you have downloaded the packages, you need to fix some dependency issues
    with the database, as detailed in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the prerequisites for the Shuffle database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To avoid issues with the backend database, you are required to set the permissions
    and change the ownership, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`shuffle-database`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'chown. You can also use it to assign the directory to a particular user or
    group (1000:1000 in this example):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Launch Shuffle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To start Docker Compose, set up and execute Shuffle SOAR in detached mode (`-d
    flag`), which means it will run in the background, and you can continue to use
    your Terminal for other tasks. Use the following command to run Docker compose
    in detached mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These instructions essentially walk you through the installation and configuration
    of Shuffle, ensuring that all necessary components (the OpenSearch database directory,
    Docker, and Compose) are installed, and then we use Docker Compose to launch the
    Shuffle SOAR platform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn to integrate Wazuh with Shuffle SOAR and
    start receiving alerts from the Wazuh platform.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving Wazuh alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wazuh and Shuffle SOAR’s combination offers an excellent synergy for automating
    a variety of security activities. Renowned for its strong threat detection and
    response capabilities, Wazuh gathers data from multiple sources throughout the
    infrastructure to produce alerts and insights. When combined with Shuffle, a SOAR
    platform created to make incident response and automation easier, it makes it
    possible for these alerts to be coordinated easily. By using Shuffle’s automation
    features, the integration lets security teams set up predefined responses to Wazuh
    alerts that are immediately carried out. Shuffle SOAR automates the initial analysis
    of alerts generated by Wazuh, filtering out false positives and prioritizing alerts
    based on severity. This helps security analysts focus on relevant security incidents.
  prefs: []
  type: TYPE_NORMAL
- en: 'This integration makes it possible to automate security tasks that used to
    be done manually, such as sorting alerts, investigating, and taking corrective
    actions. This frees up security teams to work on more important tasks while still
    protecting the network. To integrate Wazuh with Shuffle, we need to follow some
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrate Wazuh with Shuffle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieve Wazuh alerts for abnormal user login analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieve Wazuh alerts for successful login analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating Wazuh with Shuffle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best part about Wazuh and Shuffle integration is that Shuffle integration
    scripts are already present in the current version of Wazuh, and hence, we don’t
    have to manually create a new one. We only need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a new Shuffle workflow**: Go to the Shuffle self-hosted or cloud platform,
    and then create a new workflow. Next, from the **Trigger** section, add a Webhook
    node and copy the Webhook URI. Also, start the Webhook.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Create a new Workflow in Shuffle](img/B19549_4_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Create a new Workflow in Shuffle
  prefs: []
  type: TYPE_NORMAL
- en: '`ossec.conf` file located at the following path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following script:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we request Wazuh to push all the level 3 alerts to Shuffle at the Hook
    URL: https://<Shuffle_Server_IP>/api/v1/hooks/webhook_b68508da-0727-436c-8f33-412419222441.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order for Wazuh to take effect, we need to restart the Wazuh dashboard:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Testing**: Once the integration is complete, we can come back to Shuffle.
    You need to save the workflow and run the test execution.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Test execution](img/B19549_4_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Test execution
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve Wazuh alerts for abnormal user login analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sshd: Attempt to login using a non-existent user`, and the alert is shown
    in the following screenshot.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – A Wazuh alert – sshd: Attempt to login using a non-existent
    user](img/B19549_4_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7 – A Wazuh alert – sshd: Attempt to login using a non-existent user'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Oct 3, 2023 @ 05:59:23.443 sshd: Attempt to login using a non-existent user**:
    This represents the name of the alert.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GeoLocation.city_name**: This represents the city name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Oct 3 00:29:22 Wazuh-Agent sshd[3608]: Failed password for invalid user kat
    from 185.255.91.147 port 33872 ssh2**: This represent the full log.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**decoder.name: sshd**: This represents the extracted Wazuh’s decoder. In this
    case, it is **sshd**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieving alerts on Shuffle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to retrieve these alerts on Shuffle, we need to follow a three-step
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a** **Shuffle workflow**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Shuffle platform and click on **New workflows**. Then, select **Webhook**
    from the left-side **Workflow starters** menu under **Triggers**, and drag and
    drop it to the workflow editor.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – A Shuffle workflow with a Webhook](img/B19549_4_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – A Shuffle workflow with a Webhook
  prefs: []
  type: TYPE_NORMAL
- en: Next, click on the Webhook node and copy the Webhook URI. This URI will be used
    as the hook URL in the Wazuh manager. If you chose a self-hosted version of Shuffle,
    you would see the IP address instead of shuffler.io ([http://shuffler.io](http://shuffler.io))
    in the URI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Retrieving the Shuffle Webhook URI](img/B19549_4_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Retrieving the Shuffle Webhook URI
  prefs: []
  type: TYPE_NORMAL
- en: '`ossec.conf` file, located in the following path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following script:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break down the preceding code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Rule_id 5710` is the Wazuh in-built rule used to detect the `Attempt to login`
    using a non-existent user alert'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rule_id 5503` and `5760` are related to SSH login failure'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Get_User_Logins` node and save the workflow. Next, start the node.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Start the Webhook URI](img/B19549_4_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Start the Webhook URI
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add Shuffle Tools from the `Get_User_Logins` node. Make sure you set
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s run the test execution and then click on the show execution button.
    If everything is good, you should see all the alerts, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Wazuh alerts received on Shuffle](img/B19549_4_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Wazuh alerts received on Shuffle
  prefs: []
  type: TYPE_NORMAL
- en: Once you expand any part of the alert, you will see the entire alert in JSON
    format.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – A Wazuh alert in the JSON format](img/B19549_4_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – A Wazuh alert in the JSON format
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving Wazuh alerts for successful login analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Analyzing successful logins is just as important as analyzing failed or abnormal
    login attempts, as it helps to detect unauthorized access, monitor privileged
    access, monitor for anomalies, and much more. To retrieve Wazuh alerts for successful
    logins, we only need to make the following changes to the previous steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new workflow,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add new integration tags, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `rule_id 5715` indicates a successful login to the device. Additionally,
    you need to replace `hook_url` with a newly generated URI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we understand how to retrieve Wazuh alerts, we should be made aware
    of some advanced nodes to conduct enrichment, security investigation, incident
    responses, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Remotely managing Wazuh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shuffle SOAR is capable of automating multiple security operation activities.
    When it comes to managing the Wazuh manager and its agent, there is a manual element
    where a security analyst has to manually add/remove/modify different attributes.
    The good news is that Wazuh provides a Wazuh API to allow a trusted party to communicate
    and send required data. In this section, we will remotely manage multiple Wazuh-related
    tasks, such as managing agents, rules, CDB lists, agent groups, and decoders.
    We will cover the following topics in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Wazuh agents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To remotely manage Wazuh using Shuffle SOAR, we need to set up three things
    – authentication, JWT token generation, and subsequent API requests.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to allow Shuffle to talk to the Wazuh manager, Shuffle initiates the
    authentication process by providing valid authentication. The default credential
    of the Wazuh API is the username `wazuh-wui` and the password `wazuh-wui`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Shuffle and create a new workflow, and then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Search Active Apps** section, find the **Http** app and drag and
    drop it into the workflow editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Creating an Http app in a workflow](img/B19549_4_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Creating an Http app in a workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a `curl` query for authentication, as shown in the following
    diagram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Authentication using the curl command](img/B19549_4_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Authentication using the curl command
  prefs: []
  type: TYPE_NORMAL
- en: Set a relevant name for the node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Action** to **Curl**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a `curl` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, save and click the **Test** **Execute** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Save and execute the curl Command on Shuffle](img/B19549_4_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Save and execute the curl Command on Shuffle
  prefs: []
  type: TYPE_NORMAL
- en: JWT token generation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Upon successful authentication, Wazuh generates a **JSON Web Token** (**JWT**).
    JWTs are often used for authentication and authorization in web applications and
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – JWT Token generation](img/B19549_4_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – JWT Token generation
  prefs: []
  type: TYPE_NORMAL
- en: The subsequent API request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Shuffle can now access all of Wazuh’s protected resources by inserting a JWT
    token into the HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-k`: This states that `curl` will allow connections to SSL/TLS-protected (HTTPS)
    sites without verifying the server’s SSL certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-X <Method>`: This `curl` option talks about HTTP request methods such as
    `GET`, `POST`, `PUT,` and `DELETE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ENDPOINT>`: This represents the specific endpoint or resource on the Wazuh
    manager, such as agents, groups, lists, rules, and decoders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-H`: This is another `curl` option that adds an HTTP header to the request.
    In the preceding example, we added an `Authorization` header with a `Bearer` value
    to the JWT token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Wazuh agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the Shuffle tool to manage Wazuh agents for information gathering
    and incident response. Wazuh API allows you to add a new agent, remove agents,
    restart agents, upgrade agents, and retrieve outdated agents using the Shuffle
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you follow the previous steps, you must have retrieved the JWT token. Let’s
    create a new Shuffle workflow with HTTP nodes, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Retrieving Wazuh agent information](img/B19549_4_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Retrieving Wazuh agent information
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the new workflow, you need to follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new **Http** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name – `Agent_info`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Find Actions** to **Curl**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a `curl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, save and test execute the workflow. You will get an output with all the
    agent information.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Receiving the Wazuh agent information](img/B19549_4_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Receiving the Wazuh agent information
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Status SUCCESS**: This shows that the API request was successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“affected items”**: This shows the content of the response message. In this
    case, we have four items about the agent information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about managing Wazuh agents, refer to Wazuh’s official documentation
    at https://documentation.wazuh.com/current/user-manual/api/reference.html#tag/Agents.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned to manage Wazuh remotely using its API. In the following section,
    we will learn about some important apps and the integration of Shuffle.
  prefs: []
  type: TYPE_NORMAL
- en: Important Shuffle apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The integration of Wazuh and Shuffle SOAR helps a security team to automate
    multiple recurring activities. It introduces a paradigm shift in approaching incidents,
    faster response time, phishing analysis, managing Wazuh, and much more. Shuffle
    SOAR support integration with hundreds of security tools. In this section, we
    will discuss some important apps and their integration with Wazuh.
  prefs: []
  type: TYPE_NORMAL
- en: Incident enrichment using TheHive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TheHive is a powerful and a scalable security incident response tool designed
    for SOCs , **CSIRTs** (**Computer Security Incident Response Teams**), and **CERTs**
    (**Computer Emergency Response Teams**). We can use TheHive app in a Shuffle workflow
    to add enrichment to every alert before conducting a manual security investigation.
    Once you integrate TheHive with a Shuffle workflow, you can execute multiple tasks
    on TheHive by using API endpoints, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – TheHive API endpoints](img/B19549_4_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – TheHive API endpoints
  prefs: []
  type: TYPE_NORMAL
- en: 'An **API endpoint** is essentially a unique **Uniform Resource Identifier**
    (**URL**) or URI that provides access to an API. It facilitates communication
    between various software applications by serving as a point of interaction. In
    our case, TheHive allows Shuffle to access its capabilities using different API
    endpoints. For example, if you want to create a case in TheHive tool, you can
    use the **Create case** endpoint using the **POST** method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – The Create case endpoint on TheHive platform](img/B19549_4_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – The Create case endpoint on TheHive platform
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apikey**: This is the API key for the TheHive platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Url**: This is the complete URL for TheHive platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at sample workflow published by the Shuffle community. The following
    workflow starts by receiving a Wazuh alert and then creating a case in TheHive,
    adding an observable to TheHive case, retrieving artifacts, and finally, running
    TheHive/Cortex analyzer against MISP and VirusTotal.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Automating TheHive case enrichment using Shuffle](img/B19549_4_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Automating TheHive case enrichment using Shuffle
  prefs: []
  type: TYPE_NORMAL
- en: 'The link to access this sample workflow is available here: [https://shuffler.io/workflows/4e9f5826-a7fc-4cc1-b21d-0c7d231bcfa7?queryID=17e8f00cbed5d69823b1a0ad665d4b48](https://shuffler.io/workflows/4e9f5826-a7fc-4cc1-b21d-0c7d231bcfa7?queryID=17e8f00cbed5d69823b1a0ad665d4b48).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The preceding sample workflow can be used once you submit all the required information,
    such as the Wazuh Webhook URI, TheHive API key and URL, and other essential information.
    Also, ensure that MISP and VirusTotal are already integrated with TheHive/Cortex
    to execute the analyzer, as mentioned in the preceding workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Malware analysis using YARA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**YARA** is a tool that empowers malware researchers in identifying and categorizing
    malware samples. It’s a free and open source program that works on Linux, Windows,
    and macOS. We can use the YARA tool in a Shuffle workflow to analyze an email
    attachment file or any other file, based on the custom rules defined by malware
    researchers. Let’s take a look at the sample workflow here.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Automated file analysis using YARA](img/B19549_4_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Automated file analysis using YARA
  prefs: []
  type: TYPE_NORMAL
- en: The preceding workflow was created by Taylor Walton. This workflow starts by
    adding an email attachment to TheHive, then creating an alert on TheHive, and
    finally, running a YARA scan. To run the YARA scan against each email attachment,
    we can prepend this workflow as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – An email collection workflow](img/B19549_4_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – An email collection workflow
  prefs: []
  type: TYPE_NORMAL
- en: Messaging and collaboration tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Shuffle has a range of workplace collaboration application integration tools,
    such as Microsoft Teams, Slack, Discord, Outlook, and Gmail. Each application
    provides tons of API endpoints such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving emails and creating a message on Outlook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new chat on Slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a message to a group on Microsoft Teams and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat intelligence platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Shuffle SOAR can be integrated with threat intelligence platforms such as MISP,
    AbuseIPDB, and AlienVault OTX, expanding its ability to collect and correlate
    different threat data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MISP**: Shuffle SOAR connects to MISP to gain access to a collaborative threat
    intelligence-sharing platform, facilitating the exchange of structured threat
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AbuseIPDB**: Integration with AbuseIPDB provides quick access to crowdsourced
    threat data relating to malicious IP addresses, improving the platform’s ability
    to detect and block possible threats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AlienVault OTX**: Integrating with AlienVault OTX improves threat visibility
    by leveraging its vast store of threat indicators and worldwide data. This thorough
    connection enables Shuffle SOAR users to investigate and respond to security issues
    in depth by accessing richer, real-time threat intelligence from a variety of
    trusted sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endpoint protection/antivirus software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Shuffle provides a seamless integration with top-tier endpoint protection and
    antivirus solutions such as CrowdStrike Falcon, Windows Defender, Sophos, and
    BlackBerry Cylance, improving its efficacy in incident response and threat prevention.
    This integration enables direct communication and orchestration between the centralized
    platform of Shuffle SOAR and these security technologies, enabling automated response
    actions based on identified threats or incidents. Once integrated, we can create
    a Shuffle workflow to retrieve alerts from endpoint protection and send them to
    TheHive for further analysis, get detection rules from CrowdStrike, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the purpose of SOAR and how an SOC analyst
    uses SOAR in a real-world environment. We also learned how to set up a Shuffle
    SOAR platform using a Docker Compose environment and fixed some backend related
    issues. This chapter continued with the integration of Wazuh with Shuffle to receive
    alerts from Wazuh in real time. Finally, we learned how to remotely manage Wazuh
    using API integration and also covered some popular third-party integrations with
    Shuffle.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about Wazuh’s active response module to build
    a proactive incident response system. We will also cover some practical incident
    response use cases.
  prefs: []
  type: TYPE_NORMAL
