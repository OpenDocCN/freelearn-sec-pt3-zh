- en: '*Chapter 7*: Hardening a Unix Server'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"A hardened server drastically reduces the attack surface area, therefore
    minimizing exposure to threats. It helps to get rid of weaker default settings
    and to meet compliance."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Faraz Ahmad, IT security consultant*'
  prefs: []
  type: TYPE_NORMAL
- en: If you are used to managing **Windows** systems and servers, then managing **Unix**-based
    systems and servers may become a very complex task. But don't worry, we have your
    back, and we will start from the basics so that you can easily follow this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will be covering the commands used in most Unix-based systems (including
    **Linux**). Despite the fact that there might be some differences between Unix
    systems, the structures and examples in this chapter should apply to the most
    common Unix systems (including Linux).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A complete guide to Unix services (how they work and how to manage them)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How permissions work on Unix systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A detailed overview of the different types of permissions on Unix systems (file,
    folder, user, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced configuration of permissions using `umask`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing your defensive security by using access controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing access control lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your host-based firewall using **iptables**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices to leverage log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, it is highly recommended that you have a Unix-like system
    (this could be **Kali Linux**, **Debian**, **Ubuntu**, and so on). This chapter
    contains a lot of screenshots so that you can see the output of the commands used.
    However, it will be of great value if you can test those commands yourself while
    enjoying the book.
  prefs: []
  type: TYPE_NORMAL
- en: A very good option is to create a **Virtual Machine** (**VM**) so you can run
    it through Kali easily on your computer. In fact, you will find at the end of
    this chapter the link to the Kali Linux download page. There you can download
    a preconfigured VM, ready to open in your favorite hypervisor (**VirtualBox**,
    **VMware**, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Securing Unix services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Services are applications that run in the background to perform or support essential
    **Operating System** (**OS**) tasks. There are also services associated with apps
    or services such as **Apache**, **Structured Query Language (SQL)**, **Hypertext
    Preprocessor (PHP)**, **Remote Procedure Call (RPC)**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of services are loaded and enabled by default. However, every service
    enabled and running represents a potential vulnerability that needs to be considered
    and managed.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to reduce those risks, let's review some of the best practices related
    to Unix services (plus some additional server setup considerations).
  prefs: []
  type: TYPE_NORMAL
- en: Defining the purpose of the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Linux server should be dedicated for a single purpose. For example, a print
    server, FTP, web server, and so on. This simple task will make hardening efforts
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, having dedicated servers was costly and difficult to procure. However,
    with cloud technologies, having dedicated servers for each purpose is really easy
    to create and manage and will not represent a significant increase in terms of
    cost.
  prefs: []
  type: TYPE_NORMAL
- en: Secure startup configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have defined the purpose of your server, the next step is to securely
    configure the OS by removing all unnecessary applications, features, and protocols
    to avoid unnecessary risks.
  prefs: []
  type: TYPE_NORMAL
- en: This will also reduce the effort in terms of patching because there will be
    fewer apps to patch and harden while reducing the number of attack vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Managing services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to determine which services are running and the current status.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we can issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will run a `init` script that shows the list of services with the
    associated status. The status is represented in brackets in which `[ + ]` means
    that the service is running, `[ - ]` means that the service is stopped, and `[
    ? ]` is returned for services that do not return a status.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, services such as SQL and **Bluetooth** are
    not essential and therefore they are currently disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – List of installed services'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – List of installed services
  prefs: []
  type: TYPE_NORMAL
- en: To obtain additional information about the services, you can locate each of
    the `init` scripts of the services on `/etc/init.d`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following figure shows the information about the MySQL `init`
    script. This information can be useful when determining whether a service is required
    or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – MySQL init script'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – MySQL init script
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the script normally supports the `start` and `stop` commands
    to change the status of the services. For example, we can use the following command
    to start the `ssh` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows how the `ssh` service was running, how we can successfully
    stop it, and how we can verify it with the `status` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Stopping a running process'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Stopping a running process
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `status` command also gives you additional interesting information
    such as process uptime, port, PID, memory used, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Managing services in systemd init
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to manage the services is with `systemd` by using the following
    commands (we will use a `mysql` service as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking the status of a service (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 7.4 – mysql service status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – mysql service status
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting a service (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 7.5 – Running service'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Running service
  prefs: []
  type: TYPE_NORMAL
- en: 'To restart a service (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check whether a service is configured to start on the next boot-up (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To enable the `mysql` service to run on boot-up:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To disable the `mysql` service to run on boot-up:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check whether the `mysql` service is active:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Keep in mind that `systemd` is present in most Unix distributions, however,
    if it is not present on the system, you will see the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how to remove services using `systemd`.
  prefs: []
  type: TYPE_NORMAL
- en: Removing services in systemd init
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s see some additional commands to remove services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the service (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disable the service (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the service (`mysql`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload `systemd`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `systemd`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following figure shows how you can enable and disable services from startup
    and also how to check the current status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Enabling/disabling services'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Enabling/disabling services
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to manage services, it's time to move on to a very interesting
    topic about *how permissions work on Unix and how to manage them in a secure way*.
  prefs: []
  type: TYPE_NORMAL
- en: Applying secure file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unix systems have a unique way to manage permissions, which is quite different
    from Windows systems, so let's start with the basics about how permissions work
    in Unix systems.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ownership and permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unix systems have three levels of file/folder ownership and this can be checked
    with the `ls –l` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, the command shows us a lot of information
    such as hard links, who created the file, the file size, the last modification,
    and the name of the file or folder, and the most important part of `ls` is the
    **permissions**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Results of the long listing of files (ls -l)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Results of the long listing of files (ls -l)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at the permissions section, as seen in the following
    figure. The first section is the type of the file (in this example we have `d`
    for directory or folder).
  prefs: []
  type: TYPE_NORMAL
- en: 'The other types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-`: Regular file with different extensions such as `.txt`, `.php`, `.sh`,
    `.py`, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Symbolic link (or symlink or soft link)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c`: `char` file type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Block device file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Permissions on Unix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Permissions on Unix
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we have the permissions. Here, we have three letters (plus a special char)
    to represent the permissions (**read**, **write**, **execute**, or **disable**)
    for the three different types of user (**User**, **Group**, or **Other**):'
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: Is the owner or creator of the file or folder. By default, this indicates
    who created the file, however, this can be modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: This shows the permissions of the users on the specified group (as
    seen in *Figure 7.7*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other**: Specifies the permissions of the other users who are not the owner
    (user) and are not part of the specified group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As seen in the preceding section, Unix-like systems have four types of permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Read**: User can open the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write**: User can modify the content of the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute**: User can execute or run the file from the shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable**: No permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To better understand this, let''s see how the permissions are applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '`---`: No permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--x`: Execute-only permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w-`: Write-only permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-wx`: Write and execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r--`: Read permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r-x`: Read and execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rw-`: Read and write permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rwx`: Read, write, and execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s see how this will look for the different users:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rwxr-xr-x`: User can read, write, and execute, the group and others can only
    read and execute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rwxr-xr—`: User can read, write and execute, the group can read and execute,
    and others can only read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that when assigning permissions, you must do it based on the **Principle
    of Least Privilege (PoLP)**.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions in numeric mode (octal representation)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unix systems have a very interesting feature in which permissions can also
    be represented using numbers, which enables the systems to use math to calculate
    the permissions. To do that, the system has a value for each permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '`4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure represents how values are added to calculate permissions
    in numeric mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Permissions in numeric mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – Permissions in numeric mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the preceding table, the permissions will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '0 (`---`): No permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1 (`--x`): Execute-only permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2 (`-w-`): Write-only permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3 (`-wx`): Write and execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4 (`r--`): Read permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '5 (`r-x`): Read and execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '6 (`rw-`): Read and write permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '7 (`rwx`): Read, write, and execute permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over time, using numbers may be easier. However, you must be familiar with both
    representations of permissions, as some commands may input one or the other.
  prefs: []
  type: TYPE_NORMAL
- en: Default permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating files, Unix systems will assign the current default permissions
    to the newly created file and, as a data security professional, you must understand
    how those permissions are assigned. However, you also must understand how you
    can customize those settings in case you need to apply more restricted permissions
    for the newly created files.
  prefs: []
  type: TYPE_NORMAL
- en: We can see the *permissions* of a file using the `ls -l {file_name}` command,
    but to see the *default permissions* let's create a new file using the `touch
    {file_name}` command, and then use the previous (`ls -l`) command to see the permissions
    that the system assigned by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created an example in the following figure that shows the *default permissions*
    of a file in our system. In this case, the default permissions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User (kali)**: Read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group (kali)**: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Others**: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – File with no execute permissions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – File with no execute permissions
  prefs: []
  type: TYPE_NORMAL
- en: You can play with the commands to get up to speed with Unix systems (create
    files, delete the files that you just created, list permissions, and so on), but
    you can also play with conversions to get more familiar with the numeric mode.
    For example, you can use the permissions shown in *Figure 7.10* and convert them
    to numeric mode by using the table in *Figure 7.9*. This should give you the numeric
    representation of those permissions, which is `644`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Have you noticed a case in which not even `root` has execute `(x)` permissions?
    If yes, don't panic, as that is normal and it may just indicate that the file
    is not an executable file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows an example of a file owned by `root` with no execute
    permissions. This, as explained, is expected because a log file is not an executable
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – File with no execute permissions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – File with no execute permissions
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen how permissions are applied to files. Now, it's time to
    see how permissions work for directories (folders).
  prefs: []
  type: TYPE_NORMAL
- en: Permissions in directories (folders)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Files and directories are managed differently/separately in Unix systems, which
    means also that the *default permissions are configured separately*. So, keep
    this in mind, as this could represent a security vulnerability if both are not
    configured properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following figure, we created a `mkdir {directory_name}` directory
    and then we use the `ls -ld` command to see the default permissions assigned by
    the system to the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Unix permissions in directories (folders)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – Unix permissions in directories (folders)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the permissions are very different from the default permissions
    applied to the files. Let's make a comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'My current default permissions on files (`rw-r--r--`) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User (kali)**: Read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group (kali)**: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Others**: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'My current default permissions on directories (`rwxr-xr-x`) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User (kali)**: Read, write, and execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group (kali)**: Read and execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Others**: Read and execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another important item to clarify is that *permissions are a bit different
    on directories*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Read**: User can list the content of the directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write**: User can delete or create files in the directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute**: User can access the directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What would happen if a user has no access to a folder but full access to a file
    inside the folder?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just securing the folder and not the files inside is *not* a best practice,
    as the user may still access the file by using a hard link. So, as a best practice,
    always apply the proper permissions to the folder and the files contained within
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Changing default permissions with umask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can change the default permissions over files and directories by using the
    `umask` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following figure, you can type the `umask` command and it will
    tell you the `umask` value for your session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Checking default permissions with umask'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Checking default permissions with umask
  prefs: []
  type: TYPE_NORMAL
- en: But what does `022` mean?
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer that question, let''s first do a refresh of some basics. Unix systems
    have two default permissions: `666` for files (meaning everyone can read and write)
    and `777` for directories (meaning everyone has read, write, and execute permissions).
    However, to apply that `umask`, we just need to subtract `022` from the default
    value, which will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File permissions**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*666 - 022 = 644*'
  prefs: []
  type: TYPE_NORMAL
- en: Based on *Figure 7.9*, `644` equals `rw-r--r--`.
  prefs: []
  type: TYPE_NORMAL
- en: 'And as you can see in the following figure, the default permissions for files
    is exactly that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Default permissions on files'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 – Default permissions on files
  prefs: []
  type: TYPE_NORMAL
- en: '**Directory permissions**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*777 - 022 = 755*'
  prefs: []
  type: TYPE_NORMAL
- en: Based on *Figure 7.9*, `755` equals `rwxr-xr-x`
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure confirms that the default permissions for directories
    that are `755` equal `rwxr-xr-x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Default permissions on directories'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.15_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – Default permissions on directories
  prefs: []
  type: TYPE_NORMAL
- en: Now, to change the `umask` value is very simple. Just type the `umask` command
    and the new value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to add a more restrictive value, you can use `umask
    0027`, which will provide the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File permissions**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*666 - 027 = 640*'
  prefs: []
  type: TYPE_NORMAL
- en: Based on *Figure 7.9*, `640` equals `rw-r--r--`.
  prefs: []
  type: TYPE_NORMAL
- en: The result of that is that by default, *others* won't be able to access those
    files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Directory permissions**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*777 - 027 = 750*'
  prefs: []
  type: TYPE_NORMAL
- en: Based on *Figure 7.9*, `750` equals `rwxr-x---`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of that is that by default, *others* won''t be able to access or
    even list the content of directories, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Permission denied error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.16_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.16 – Permission denied error
  prefs: []
  type: TYPE_NORMAL
- en: Note that, for the previous example of *Figure 7.16*, the `kali` user was not
    the creator of the file and is not part of the group, and therefore is considered
    as *others*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You need to be very careful when using this command as it could leave your system
    very exposed. For example, you should never use `umask 000`, as it will grant
    full permissions (`rwx`) to everyone for all newly created files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions hierarchy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Unix, the more specific permission takes precedence over the less specific
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: This means that *user* permissions take priority over *group* permissions, and
    both *user* and *group* permissions take priority over *other* permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This could be a bit confusing, so to make this easier, let''s see an example
    in the following figure. There, you can see that we created a directory (`akira`)
    with the default `rwxr-xr-x` permissions, and then we used `chmod 077` to remove
    the permissions of the *user* from `rwx` (full access) to `---` (no access):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Precedence of permissions on Unix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.17_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.17 – Precedence of permissions on Unix
  prefs: []
  type: TYPE_NORMAL
- en: Now, the directory permissions are `---rwxrwx`. This is very interesting because
    the *group* and *other* have full access, but the *user* (who created the directory)
    does not have the permissions to list or access the file.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, this means that due to the permissions hierarchy (precedence), everyone
    can access this directory except the owner.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing directory permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There may be cases in which you need to compare the permissions of two directories
    to find inconsistencies that may lead to a security vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Comparing folder permissions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.18_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.18 – Comparing folder permissions
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding figure, you can use the `ls -ld {directory1 directory2}`
    command to see the comparison. In this case, we can see that permissions are not
    the same and this may require adjustments to prevent unauthorized access.
  prefs: []
  type: TYPE_NORMAL
- en: Changing permissions and ownership of a single file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing permissions on Unix is very simple. Here, you can use the `chmod` command,
    plus the new permissions in numbers as shown in *Figure 7.17*, where we changed
    the permissions to the `akira` directory to `700` equals to `rwx----.`
  prefs: []
  type: TYPE_NORMAL
- en: 'The command syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the `chown` command to change the ownership of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: And lastly, we can also change the group owning the file by using the `chgrp`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Another interesting command is `chattr`, which enables the user to change a
    set of attributes on a file. To see more information about all the attributes
    that can be changed with this command, visit [http://manpages.org/chattr](http://manpages.org/chattr).
  prefs: []
  type: TYPE_NORMAL
- en: Useful commands to search for unwanted permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may be cases in which you need to check the permissions to determine whether
    they were applied as expected or whether something needs to be corrected (restricted)
    to maintain the security of the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of useful commands that you can leverage to perform
    this important task:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Find all files readable by other**: Display all files within the current
    directory that are readable by *other*. Many of these files are located in hidden
    directories and are generally harmless. However, if any confidential or sensitive
    files appear on this list (such as SSH keys), then the permissions must be modified
    to ensure the confidentiality of the data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Find all files accessible by other in any way**: This will display all files
    within your home directory that have read, write, or execute permissions for *other*.
    This is useful for getting a general idea of what other users can access in your
    home directory and applying any restrictive actions if needed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Find all files writable by other**: Display all files in the specified directory
    that are writable by *other*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the files on this list must be carefully analyzed to determine whether
    they need to be writable by *other*. Otherwise, the permissions must be adjusted
    to prevent any impact on the integrity of the data:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Find all files executable by user or group, and writable by other**: Display
    all files in the home directory that are both writable by *other* and executable
    by either the user or the group that owns the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you found a file that can be executed by *other*, then you must analyze
    whether there is a valid exception for that behavior. Otherwise, the file permissions
    need to be changed immediately to prevent any impact on the integrity and availability
    of the files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Find all files not owned by a specific group**: Display all files in the
    current working directory that *are not* owned by the specified group:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Find all files owned by a specific group**: Display all files in your home
    directory that *are* owned by the specified group:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you are a master with permissions on Unix systems, let's see how we
    expand all that knowledge by leveraging **Access Control Lists** (**ACLs**) to
    enhance the security of your Unix server.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the protection of the server by improving your access controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ACLs** enable Unix administrators to apply detailed fine-tuning of permissions
    that may not be possible to achieve with the commands specified in the previous
    section. Therefore, let''s explore how to work with ACLs so that you can take
    advantage of them to enhance the application and management of permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing ACLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you can use the `getfacl {file_name}` command to see the ACL of the specified
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows an example of a file with and without an ACL. Notice
    that, when the file has an ACL, it adds a new line with the permissions of the
    specified user on the ACL, in this case, the `cesar` user and their associated
    permissions (`rwx`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19 – View of the getfacl command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.19_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.19 – View of the getfacl command
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also identify whether a file has an ACL by doing a long listing (`ls
    –l`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Listing of a file with an ACL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.20_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.20 – Listing of a file with an ACL
  prefs: []
  type: TYPE_NORMAL
- en: The preceding figure shows that the `bravo` file has a `+` sign at the end of
    the permissions, which indicates that the file has an ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Managing ACLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set an ACL on a file, you can use the `setfacl` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we show the syntax of the command in which we want
    to create an ACL for the `bravo` file to provide `rwx` permissions to the `cesar`
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create ACLs for groups by using `g` (groups) instead of `u` (user).
    In the following example, you can see how we are creating an ACL for the `bravo`
    file to *add read and write permissions* to the `managers` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's explore more uses of the `setfacl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Default ACL on directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating default ACLs on directories, any files created within that directory
    will also have that default ACL inherit automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we are going to use the same `setfacl` command but with some
    different parameters. In this example, we are creating a default ACL for the `bravito`
    folder to provide read access to `cesar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows how the `bravisimo` file inherits the permissions
    of `cesar` from the default ACL that we just created for the `bravito` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Default ACL on a directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.21_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.21 – Default ACL on a directory
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how you can also use this command to remove an ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Removing ACLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove a specific ACL, use the same `setfacl` command, but replace the `-m`
    parameter with `–x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows how the ACL for the `cesar` user was successfully
    removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Removing the ACL of a user'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.22_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.22 – Removing the ACL of a user
  prefs: []
  type: TYPE_NORMAL
- en: However, you may notice that the mask is still there, so the ACL was not completely
    removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 7.23*, to completely remove the ACL from the `bravo` file,
    you need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in the following figure, notice that after issuing this command, the
    `+` sign was also removed at the end of the permissions (see the result of `ls
    -l`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Complete removal of the ACL from a file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.23_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.23 – Complete removal of the ACL from a file
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can also see that `mask` is no longer present when checking
    the ACL with the `getfacl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced access controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are additional systems designed to enhance the access controls by implementing
    security policies. One of those systems is the well-known **SELinux**.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux access controls are determined by a set of policies loaded on the system
    kernel that enable an improved security mechanism that prevents the change of
    permissions by careless users or misbehaving applications.
  prefs: []
  type: TYPE_NORMAL
- en: The installation, configuration, and settings of *SELinux* may vary between
    the different versions of Unix, so in this case, it is better to check the specific
    settings for your Unix system by visiting their official site at [http://selinuxproject.org/page/Main_Page](http://selinuxproject.org/page/Main_Page).
  prefs: []
  type: TYPE_NORMAL
- en: OK, now that you are an expert in managing Unix permissions, it's time to see
    how you can enhance the security of your Unix machine by leveraging **host-based
    firewalls**.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring host-based firewalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are all familiar with firewalls as devices to regulate incoming and outgoing
    network traffic to prevent the entry of malicious code or attacks and to prevent
    the exfiltration of data.
  prefs: []
  type: TYPE_NORMAL
- en: Host-based firewalls are firewall rules that can be activated at the OS level
    so that you can apply incoming and outgoing network traffic protection for your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: One feature of host-based firewalls is that they are configured per system,
    offering a higher level of flexibility when needed.
  prefs: []
  type: TYPE_NORMAL
- en: There are several host-based firewalls for Unix systems, such as **iptables**,
    **firewalld**, **netfilter**, **ipfw**, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding iptables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iptables is used to set up, maintain, and review the tables of the IPv4 and
    IPv6 packet filter rules in the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: To understand iptables, we need to first understand its components.
  prefs: []
  type: TYPE_NORMAL
- en: Chains
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chains are the set of rules defined for a particular task.
  prefs: []
  type: TYPE_NORMAL
- en: 'iptables uses three sets of rules (chains) to manage traffic: **input chains**,
    **output chains**, and **forward chains**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input chains**: These are the rules applied to incoming traffic from the
    network to the local machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output chains**: These are the rules applied to outgoing traffic from the
    network to the local machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forward chains**: These are the rules applied to packets that are neither
    emitted by the host nor directed to the host. They are the packets that the host
    is merely routing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'iptables uses three policies or actions: **Accept**, **Drop**, and **Reject**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accept**: Traffic is accepted and transferred to the application or systems
    for processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drop**: Traffic is blocked and not processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reject**: Similar to Drop, but it sends a return error to the host that the
    package was blocked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Rules in iptables are checked from top to bottom. So, be careful when creating
    and inserting rules to avoid any accidental bypass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OK, enough theory, let's see how you can configure them.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring iptables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to start by checking the current iptables with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When running this command, we can see the three chains (`INPUT`, `FORWARD`,
    and `OUTPUT`), but as seen in the following figure, by default there are no predefined
    rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Default iptables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.24_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.24 – Default iptables
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s explore the meaning of each of the columns shown in the preceding
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target`: Defines the actions (or policies) to be performed (`ACCEPT`, `DROP`,
    `REJECT`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prot`: Determines which protocol this will be applied to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source`: Address of the source of the packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destination`: Address of the destination of the packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you saw in *Figure 7.24*, the default policy for all chains (`INPUT`, `FORWARD`,
    and `OUTPUT`) is `ACCEPT`. So, let's explore how you can change this.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can easily change the default policy for all chains (`INPUT`, `FORWARD`,
    and `OUTPUT`) to apply more restrictive permissions to a specific chain by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the result of the command, and now you can see how
    the default permissions for the `FORWARD` chain is `DROP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Default iptables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.25_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.25 – Default iptables
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to see how to block incoming traffic with iptables.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking incoming traffic with iptables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine that you identify an IP address that is known for sending DDOS attacks
    (`14.14.14.14`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily block all incoming traffic from that IP address with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s explore the parameters of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-A`: This is used to append the rule at the end of the chain (you can use
    `-I` to append the rule to the top of the chain).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: Specifies the source of the packet (in this case, the IP address of the
    attacker).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-j`: Specifies the action or policy to be applied to the packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.26 – Blocking incoming traffic with iptables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.26_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.26 – Blocking incoming traffic with iptables
  prefs: []
  type: TYPE_NORMAL
- en: The preceding figure shows the newly created rule on iptables.
  prefs: []
  type: TYPE_NORMAL
- en: Whitelisting an IP with iptables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also use iptables to whitelist or accept traffic from a given source
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the results of the preceding command and how the
    `-I` parameter placed the rule on top of the chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Whitelisting an address with iptables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.27_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.27 – Whitelisting an address with iptables
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how to remove policies from iptables.
  prefs: []
  type: TYPE_NORMAL
- en: Removing all policies from iptables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many situations in which you may need to remove all policies from
    iptables, for example, if you inherited a new server and the current rules are
    confusing and you want to use your own super-secure rules. Or, maybe you just
    want to clear all the mess you made to write a book. The good news is that achieving
    that is very easy with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as seen in the following figure, the iptables were flushed and look like
    new:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Flushing the iptable rules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.28_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.28 – Flushing the iptable rules
  prefs: []
  type: TYPE_NORMAL
- en: Flushing iptables is also a common troubleshooting step when facing network
    issues. However, you must set the required controls to avoid this being performed
    indiscriminately. Additionally, *any change to iptables should be logged and approved
    by a security analyst to ensure that another security mechanism is set in its
    place*.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice something in Figure 7.28?
  prefs: []
  type: TYPE_NORMAL
- en: I am sure you did – this command just removed the policies that you created,
    but it did not change the default chain for `FORWARD` that we established earlier
    (we changed it from `ACCEPT` to `DROP`). So, make sure you pay attention to this
    when flushing the iptables.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how you can also use iptables to protect against some threats.
  prefs: []
  type: TYPE_NORMAL
- en: SSH brute-force protection with iptables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the following iptables rules to block IP addresses that attempt
    more than a given number of SSH connections in `X` seconds. Here is an example
    to block an IP address if there are more than eight SSH connections in 45 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the first command is used to track new connections coming in on
    port `22` (SSH), while the second command tells iptables to drop packets from
    a given IP address that has sent eight or more requests in 45 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to insert these two rules at the top of your `INPUT` chain (to trigger
    them before the rest of your rules), use `-I` instead of `-A` as the first parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Another good option is to use *whitelisting* as this enables you to allow one
    or more IPs to access your server while dropping everything else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the command to use this technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example will allow SSH connections ONLY from those two IP addresses
    while blocking any access from any other IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting from port scanning with iptables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to protect from port scanning with iptables, however,
    this is my favorite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are assuming that there is not a valid reason for a host
    to send me `200 SYN` requests in 1 hour, so we can use this as the security trigger
    parameter. However, you can adjust that number based on your own judgment.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more things you can do with iptables, such as implementing rules
    for a specific port to delete a given rule. You can explore these and configure
    your iptables as needed.
  prefs: []
  type: TYPE_NORMAL
- en: A best practice is to perform a regular check of iptables to confirm that the
    settings were not changed. A common mistake is that system owners or administrators
    may remove some rules during network troubleshooting. In those cases, the root
    cause must be investigated to fix the issue, and if an iptable rule must be removed
    or disabled, then you need to make sure that another control, policy, or system
    is set in place to cover that potential security gap originated by the removal
    of the iptable rule.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced management of logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may know, logs are records of the activities or actions on a given system,
    OS, or application. They are really important as a source of truth during investigations
    to determine what can be the cause of downtime, or any other incident.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices state that all logs must be enabled to ensure that you keep track
    of everything that is happening in your system. Remember, logs are the main source
    of information during audits or forensic analysis, therefore, you need to make
    sure they are available for them.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, nowadays, the cost of storage is really low, so it would be hard
    for you to justify that a log was disabled to *save space*.
  prefs: []
  type: TYPE_NORMAL
- en: Another good practice is to keep all logs centralized on an external device,
    so in case of a full system failure or hard drive crash, you will still be able
    to retrieve the logs. Furthermore, attackers normally cover their tracks by deleting
    the logs, but having an external copy of the logs will make it harder for the
    attacker to delete their tracks from them (because the attacker will have to also
    compromise the other system where the logs are backed up or centralized).
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Security Information and Event Management (SIEM) system** can collect and
    leverage all those logs (data) and, after some training, configuration, and correlation,
    transform that data into useful security insights (information and knowledge).
  prefs: []
  type: TYPE_NORMAL
- en: The value of those systems is that they can analyze huge amounts of data from
    logs (which is normally wasted) to detect patterns and uncover vulnerabilities.
    They even have the power to detect ongoing attacks (including **advanced persistent
    threats**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good feature of SIEM systems is that they allow you to easily find
    known signs of attacks, for example, the following signs:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeated failed login attempts at the same hour, every `X` number of days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An abnormal number of login attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logins at unusual hours from unknown addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unknown addresses trying to log in on several systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login attempts with default credentials (`admin`/`admin`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, remember that you can also collect logs from other devices such as routers,
    proxies, and firewalls. These are extremely important because some of them can
    alert you about some hard-to-detect attacks, such as a zombie machine infected
    to carry out crypto mining, DDOS attacks, and more.
  prefs: []
  type: TYPE_NORMAL
- en: You can also collect valuable information from some **IoT** devices and **SCADA**
    systems. These can provide early warnings, as less-protected systems are normally
    the doors that criminals use to get into your infrastructure. Detecting this on
    time may help you to prevent them from gaining access to more valuable assets
    and data in your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You are now a master in securing Unix servers, and let me tell
    you why.
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned all about *Unix services*, including how they work and how
    they can be managed.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered a very complex topic, *Unix permissions*, in a very smooth and
    easy way, including how to handle them using octal representation.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we also learned about the different *types of permissions* on Unix systems,
    and how to properly manage them.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we reviewed how we can leverage `umask` for advanced configuration
    of default permissions.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to enhance the security of your systems by *leveraging
    access controls*, and how to configure them.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you also learned what a *host-based firewall* is, and how to configure
    one using *iptables*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, grab a cup of coffee and get prepared, because in the next chapter, you
    will acquire all the skills that you need to protect your network.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to learn more about SELinux, you can visit its official repository:
    [https://github.com/SELinuxProject/selinux](https://github.com/SELinuxProject/selinux).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn more about iptable configuration, you can check out the following
    book: [https://help.ubuntu.com/community/IptablesHowTo](https://help.ubuntu.com/community/IptablesHowTo).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, you can download the latest version of Kali Linux for free: [https://www.kali.org/downloads/](https://www.kali.org/downloads/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
