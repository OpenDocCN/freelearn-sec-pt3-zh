["```\nmov  eax, dword ptr fs:[30h]     ; PEB\ncmp  byte ptr [eax+2], 1 ; PEB.BeingDebugged\njz  <debugger_detected>\n```", "```\nmov eax, fs:[30h] ; Process Environment Block\nmov al, [eax+68h] ; NtGlobalFlag\nand al, 70h ; Other flags can also be checked this way \ncmp al, 70h ; 0x10 | 0x20 | 0x40\nje <debugger_detected>\n```", "```\npush 60h\npop rsi\ngs:lodsq ; Process Environment Block\nmov al, [rsi*2+rax-14h] ; NtGlobalFlag \nand al, 70h\ncmp al, 70h\nje <debugger_detected>\n```", "```\n    mov esi,<CodeStart>\n    mov ecx,<CodeSize>\n    xor eax,eax\n    ChecksumLoop:\n    movzx edx,byte [esi]\n    add eax,edx\n    rol eax,1\n    inc esi\n    loop .checksum_loop\n    cmp eax, <Correct_Checksum>\n    jne <breakpoint_detected>\n    ```", "```\nPUSH SS\nPOP SS\nPUSHFD ; your debugger wouldn't stop on this instruction\nMOV EAX, 1 ; your debugger will automatically stop on this instruction.\n```", "```\nPUSH <callback_func> // Address of the callback function\nPUSH FS:[0] // Address of the previous callback item in the list\nMOV FS:[0],ESP // Install the new EXCEPTION_REGISTRATION\n```", "```\n_cdecl _except_handler( \n   struct _EXCEPTION_RECORD *ExceptionRecord, \n   void * EstablisherFrame, \n   struct _CONTEXT *ContextRecord, \n   void * DispatcherContext \n);\n```", "```\n    struct CONTEXT { \n    DWORD ContextFlags;\n    DWORD DR[7];\n    FLOATING_SAVE_AREA FloatSave;\n    DWORD SegGs;\n    DWORD SegFs;\n    DWORD SegEs;\n    DWORD SegDs;\n    DWORD Edi;\n    ....\n    };\n    ```", "```\nxor eax, eax\npush offset except_callback\npush d fs:[eax]\nmov fs:[eax], esp\nint 3 ; force an exception to occur\n...\nexcept_callback:\nmov eax, [esp+0ch] ; get ContextRecord\nmov ecx, [eax+4] ; Dr0\nor ecx, [eax+8]  ; Dr1\nor ecx, [eax+0ch] ; Dr2\nor ecx, [eax+10h] ; Dr3\njne <Debugger_Detected>\n```", "```\n    MOV  DWORD PTR [WndCls.lpfnWndProc], <WindowCallback>\n    LEA  EAX, DWORD PTR SS:[WndCls]\n    PUSH EAX ; pWndClass\n    CALL <JMP.&user32.RegisterClassA> ; RegisterClassA\n    ```", "```\n    PUSH <WindowCallback>\n    PUSH GWL_DlgProc\n    PUSH hWnd ; Window Handle\n    CALL SetWindowLongA\n    ```", "```\n    push NULL\n    push .szWindowClassOllyDbg\n    call FindWindowA\n    test eax,eax\n    jnz <debugger_found>\n    push NULL\n    push .szWindowClassWinDbg\n    call FindWindowA\n    test eax,eax\n    jnz <debugger_found>\n    .szWindowClassOllyDbg db \"OLLYDBG\",0\n    .szWindowClassWinDbg db \"WinDbgFrameClass\",0\n    ```", "```\nBOOL CALLBACK EnumWindowsProc(\n_In_ HWND hwnd,\n_In_ LPARAM lParam);\n```", "```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Vmware Inc.\\Vmware Tools\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Oracle\\VirtualBox Guest Additions\nHKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\DSDT\\VBOX\n```", "```\nSELECT * FROM Win32_ComputerSystem WHERE Manufacturer LIKE \"%VMware%\" AND Model LIKE \"%VMware Virtual Platform%\"\n```", "```\nSELECT * FROM Win32_ComputerSystem WHERE Manufacturer LIKE \"%Microsoft Corporation%\" AND Model LIKE \"%Virtual Machine%\"\n```"]