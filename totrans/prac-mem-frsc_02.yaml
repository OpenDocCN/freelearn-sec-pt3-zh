- en: 'Chapter 1: Why Memory Forensics?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are living in a world where nothing is more certain than change and cybercrimes
    are no exception. New attack techniques are constantly being developed, and hundreds
    of malicious programs and scripts are being written and tested to bypass security
    controls, while scanners scrutinize the World Wide Web for vulnerable hosts and
    publicly available services. That is why it is extremely important to stay on
    trend and have all kinds of tools and techniques in your arsenal to be on the
    same page as the threat actors.
  prefs: []
  type: TYPE_NORMAL
- en: So, why is **memory forensics** a vital part of many digital *forensic examinations*
    and *incident response engagements* today? What are the main investigative goals
    and techniques used by digital forensics and incident response professionals?
    What challenges do they face every day? You'll find answers to these questions
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the main benefits of memory forensics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about the investigation goals and methodology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering the challenges of memory forensics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the main benefits of memory forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Naturally, for the reader who picks up this book, the benefits are obvious.
    Since you have decided to deepen your knowledge of memory forensics, you probably
    have your own reasons for doing so. However, let's take another look at the most
    common situations in which **Random Access Memory** (**RAM**) investigation can
    play a crucial role (not only in digital forensics but also incident response
    and malware analysis), and perhaps you will discover new use cases for the knowledge
    and skills you have acquired.
  prefs: []
  type: TYPE_NORMAL
- en: No trace is left behind
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The number of threat actors using *living off the land* and *fileless* attack
    techniques has increased dramatically over the past few years. Attackers no longer
    care as much about removing their footprints, instead, they try to leave as few
    of them as possible to avoid detection. This makes the job of information security
    professionals much more difficult because the use of built-in tools and the lack
    of malicious files on the disk that can be scanned means that some traditional
    security solutions may be useless. A lack of logging may make it very hard to
    reconstruct how threat actors abused built-in dual-use tools, for example, various
    command and scripting interpreters, in the course of a post-mortem examination,
    so acquiring and analyzing memory may play a key role in such cases.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss each case separately.
  prefs: []
  type: TYPE_NORMAL
- en: Find me in memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start with **malware** that works exclusively in memory. The concept
    itself is not new. When talking about the beginning of the era of memory-resident
    malware, some researchers refer to *Maltese Amoeba*, a virus first discovered
    back in 1991 in Ireland. Others prefer to start with the *Code Red* worm that
    appeared in 2001\. In any case, since the beginning of the twenty-first century,
    fileless attacks have only gained momentum and are becoming more and more popular.
    For example, a payload may be injected directly into memory via PowerShell, and
    it is becoming extremely common. The process injection technique itself was included
    in the top 10 *MITRE ATT&CK®* techniques of 2020 by many cybersecurity vendors.
    For example, here are the top 10 techniques from the *Red Canary 2021 Threat Detection
    Report* via [https://redcanary.com/threat-detection-report/techniques/](https://redcanary.com/threat-detection-report/techniques/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Top 10 MITRE ATT&CK techniques of 2020'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.1_B17056.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Top 10 MITRE ATT&CK techniques of 2020
  prefs: []
  type: TYPE_NORMAL
- en: Process hollowing, dynamic-link library injection, process doppelgänging, and
    other **process injection** sub-techniques are used not only by sophisticated
    state-sponsored threat groups but even by commodity malware operators.
  prefs: []
  type: TYPE_NORMAL
- en: Frame of work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The other side of the issue is the use of numerous **post-exploitation frameworks**,
    such as Metasploit, Cobalt Strike, or PowerShell Empire. Such instrumentation
    provides attackers with a wide range of options to generate a variety of malicious
    payloads and inject them into memory.
  prefs: []
  type: TYPE_NORMAL
- en: Created with offensive security in mind, these frameworks allowed first penetration
    testers and red teamers, and then various threat actors to use a wide range of
    techniques with very limited footprints on disk, even if they didn't have outstanding
    malware development experience. For example, Cobalt Strike's Beacon payload's
    unmanaged PowerShell features allowed threat actors to run it without actually
    running `powershell.exe`, abusing the Windows API instead.
  prefs: []
  type: TYPE_NORMAL
- en: Such frameworks as Cobalt Strike have become so common that some threat actors
    even use them instead of custom malware. For example, the notorious Evil Corp
    group, whose members are believed to be behind high-profile ransomware attacks,
    including Garmin, switched the Dridex bot to Cobalt Strike's Beacon in their *WastedLocker*
    campaigns.
  prefs: []
  type: TYPE_NORMAL
- en: Living off the land
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Living off the land** is a very popular approach in which attackers use built-in
    tools and installed legitimate software for their own purposes. Most tools for
    example, PowerShell or WMI, are used by system administrators to perform their
    daily tasks, making it difficult not only to detect attackers but also to block
    the tools they use.'
  prefs: []
  type: TYPE_NORMAL
- en: Attackers can utilize living-off-the-land techniques with a variety of tactics.
    PowerShell can be used for downloading the initial payload from the attacker-controlled
    server, binaries such as `rundll32.exe` and `regsvr32.exe` can be used for execution
    and defense evasion, **Ntdsutil** can be leveraged for credentials access, and
    **PsExec** and **WMIC** can be abused for remote execution. There are lots of
    similar examples, and if the IT infrastructure doesn't have advanced logging capabilities,
    an analyst's chances of extracting such information may be very low. If acquired
    in time, memory analysis may be of great help!
  prefs: []
  type: TYPE_NORMAL
- en: Another important note is that in many cases, you can find only the first stage
    of the malicious binary on the disk – the next stage (and potentially even the
    next!) is loaded from the server directly into memory, so you won't see it during
    post-mortem analysis if you don't have a memory image.
  prefs: []
  type: TYPE_NORMAL
- en: What's more, most malicious binaries are packed, encoded, and encrypted nowadays
    in order to avoid detection, but not in memory! So you can use tools such as PE-sieve
    to collect potentially malicious code for further analysis. Of course, we'll show
    you how to do it in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Privacy keeper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In recent years, the issue of *privacy* has become more acute. Tons of personal
    data, photos, and messages appear online every day. Service providers collect
    information about our personalities, interests, and routines to make their work
    more efficient and more useful. Instant messengers, browsers with privacy modes,
    in-memory file systems, password managers, and crypto containers are emerging
    as a result.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, privacy is everyone's concern, but it is most relevant to cybercriminals,
    as they really have something to hide. We have seen more than once situations
    where files of interest found on a suspect's computer have been encrypted or saved
    in a crypto container. In such situations, memory collection and analysis is the
    key to all doors, as it allows investigators to retrieve the passwords and keys
    needed for decryption.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are different cases but they all have one thing in common,
    which is that in each of them, memory forensics can play an extremely important
    role.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the investigation goals and methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basis of any **forensic investigation** is **goal** setting. Goals determine
    evidence to look for, methods to use, and tools we need. The right approach to
    goal setting helps to achieve the desired result quickly and efficiently. Remember
    the famous "*divide et impera*" principle? Despite its origins and primary purpose,
    this principle is great for achieving any goals, the main thing is to understand
    what to divide and how to use it. As part of the investigation goal setting, this
    principle can be used to break down the primary goal into smaller and simpler
    ones. Thus, by dividing our goals into components, we get a set of specific actions,
    the result of which will be the pieces of the puzzle and all we will have to do
    is to put them together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the more general goals. If we receive for examination the
    device involved in the incident, there is a high probability that it is either
    one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The alleged victim's device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The suspect's device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at what both are in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: The victim's device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider a situation in which the victim''s device is under investigation.
    The main goal in this case is to answer the question, *What happened?* One way
    is to break this question down into its components:'
  prefs: []
  type: TYPE_NORMAL
- en: How did an attacker gain access to the system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tools were launched?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Did the attacker get persistence?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Was there a lateral movement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What actions on the objective were performed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s do the same thing with the question, *How did the attacker gain
    access to the system?*:'
  prefs: []
  type: TYPE_NORMAL
- en: Are there any traces of potentially malicious files/links having been opened?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are there any remote connection services running?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are there any traces of suspicious connections?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are there any traces of removable devices being connected?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s ask questions about malicious files too:'
  prefs: []
  type: TYPE_NORMAL
- en: Are there any traces of suspicious files saved?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are there any traces of suspicious links opened?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are there any traces of suspicious files opened?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding answers to these questions requires not only knowledge of the digital
    artifacts and their sources but also the attacker's tactics, techniques, and procedures,
    so such assessments must also be *cyber threat intelligence-driven*.
  prefs: []
  type: TYPE_NORMAL
- en: This is the level to which each upper-level question should be broken down.
    As a result, we have a final list of questions that will allow us to piece together
    a picture of the incident and answer the first question of *What happened?* in
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: The suspect's device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A similar method can be used to investigate the device from which the attacks
    are suspected to have originated. In this case, questions would be posed based
    on what the owner of the device is suspected of. For example, if they are suspected
    of being a malware developer, our questions would be related to the presence of
    development tools, traces of source code, sales of malware, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: So, we have discussed how memory forensics can help our investigation and what
    methodology we can apply to do so. However, we cannot remain silent and overlook
    the weaknesses and possible risks. Let's discuss the challenges of memory forensics.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the challenges of memory forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We hope you have already realized the importance of memory analysis. Now it
    is time to look for the pitfalls. RAM is a very useful and extremely fragile thing.
    Any interaction with the system, even the smallest one, can lead to irreversible
    consequences. For this reason, one of the most important challenges in memory
    analysis is **data preservation**.
  prefs: []
  type: TYPE_NORMAL
- en: A few important points related to memory dump creation are listed in the next
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since most operating systems do not have built-in solutions for creating complete
    memory dumps, you will have to use specialized tools. There are all kinds of tools
    available today for creating full memory dumps as well as for extracting individual
    processes. Investigators can be guided by various considerations when choosing
    a tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Changes being made to the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The possibility of remote dump creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, even using a trusted tool cannot guarantee 100% success. Moreover,
    it can corrupt the system, and that brings us to the following point.
  prefs: []
  type: TYPE_NORMAL
- en: Critical systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, running tools to create memory dumps can cause an overload of
    the system. That is why an investigator who decides to create a memory dump should
    be ready to take responsibility for possible risks. The system under investigation
    could be a critical object, disabling which could lead not only to the loss of
    important data, but also to the shutdown of critical business processes, and in
    rare cases, even to a threat to the lives and health of people. The decision to
    create memory dumps on such systems should be balanced and consider all the pros
    and cons.
  prefs: []
  type: TYPE_NORMAL
- en: Instability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the system under investigation is infected with poorly written malware, it
    is itself *unstable*. In this situation, an attempt to create a memory dump could
    lead to unpredictable consequences.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, sometimes malware tries to use *anti-forensic techniques* and prevent
    memory preservation in every possible way, which again leads to unpredictable
    consequences. This happens rarely, but this factor should also be taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Memory is a great source of forensic artifacts in the hands of an experienced
    investigator. Memory analysis provides information on malware activity and its
    functionality, user context, including recent actions, browsing activity, messaging,
    and unique evidence such as fileless malware, memory-only application data, encryption
    keys, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Memory analysis, like anything else, must be approached in some way. One of
    the most important things is to set the investigation goal and break it down into
    simple components to conduct the investigation more quickly and efficiently, and,
    what's more important, to decide whether it's necessary or data left on the disk
    is enough to get the answers.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there is no silver bullet, and memory forensics also has its drawbacks.
    The main problem is data preservation, but if you can manage that, you will be
    generously rewarded.
  prefs: []
  type: TYPE_NORMAL
- en: So now that you've learned about the benefits of memory forensics and the challenges
    associated with it, and you understand the approach to investigation, what's next?
    We think it's time to dive into the more practical stuff, and our first stop is
    the memory acquisition process, which we'll talk about in the next chapter.
  prefs: []
  type: TYPE_NORMAL
