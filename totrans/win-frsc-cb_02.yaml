- en: Windows Memory Acquisition and Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows memory acquisition with Belkasoft RAM Capturer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows memory acquisition with DumpIt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows memory image analysis with Belkasoft Evidence Center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows memory image analysis with Volatility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variations in Windows versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Memory analysis is a relatively new, but increasingly relevant field. A memory
    image can be acquired in the same way as a physical image, but by using different
    tools, some of which will be discussed in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The image can be stored as one of the many formats, depending on the tool used
    to acquire the image. Once an investigator has the image, they can then analyse
    the data within it.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main challenges associated with memory forensics is data preservation.
    Although your only option in a given investigation may be to power down a system
    and then image the data therein, in reality this ends up having an impact on other
    potential data sources that might be important later on. It is vital, therefore,
    to have a thorough understanding of the scene you are investigating and the specific
    needs of the case before you decide which method to choose. Any time you interact
    with a system, you will alter something simply by virtue of having been there.
    However, memory acquisition can help to minimize the effects of the investigator
    on the data collected, since a memory image will sample the volatile memory at
    a specific time, thus creating a sort of snapshot that can then be analysed later.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where an investigator arrives at a scene to find a machine powered
    on, the memory on the system will be volatile at that time. This means that, if
    you manage to acquire a memory image then and there, you will be able to see a
    snapshot of the computer's memory at the moment at which you acquired it. This
    can be very useful, especially if a suspect has recently fled a scene or has been
    arrested at the scene.
  prefs: []
  type: TYPE_NORMAL
- en: You will generally need administrative permissions on the computer if you want
    to acquire volatile memory unless you are using hardware. One such solution is
    **CaptureGUARD Physical Memory Acquisition Hardware.** It requires a small CaptureGUARD
    driver to be installed on the system and creates a memory dump in the standard
    WinDD format. You can see one of these devices in figure 2.1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f0ccac5-1d5d-412e-a0e7-f1a8a16142e9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1\. ExpressCard
  prefs: []
  type: TYPE_NORMAL
- en: In other words, memory forensics is a complex and temperamental field. You will
    need to have a thorough understanding of the tool sets you are using, and any
    potential impacts they could have on volatile memory before you decide which to
    use it at a scene. However, if you do manage to acquire a memory image, it can
    provide a wealth of useful information for your case.
  prefs: []
  type: TYPE_NORMAL
- en: Windows memory acquisition with Belkasoft RAM Capturer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Belkasoft RAM Capturer is a free tool any digital forensic examiner should have
    in their kit. It's tiny, easy to use, and has the ability to acquire memory from
    Windows systems, including Windows 10, even if they are protected by an active
    anti-debugging or anti-dumping system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have two options for downloading the tool. If you are a Belkasoft customer
    and have a Belkasoft Evidence Center license, go to your customer portal, where
    you can find a Belkasoft RAM Capturer download link in the FREE PRODUCTS section.
    If you are not a customer, just go to the DOWNLOAD section on the Belkasoft website,
    choose the product you want to download - in our case, Belkasoft Live RAM Capturer
    - and fill in a short form with your contact information. After the download,
    a link will be sent to the email provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to prepare a flash drive for acquisition are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It must have enough space to store the memory image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It must be sterilized via wiping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put both folders extracted from the archive you downloaded onto the flash drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to prepare a flash drive for acquisition. Firstly, it must have
    enough space to store the memory image. Secondly, it must be sterilized by wiping.
    Finally, put both folders extracted from the archive you downloaded onto the flash
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for Windows memory acquisition using Belkasoft Ram Capturer are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you must do is learn what kind of system you are dealing with
    x32 or x64\. It's really easy to do right-click Computer and choose Properties.
    In our case, it's x64\. So our choice is `RamCapture64.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After starting, we will get information about the physical memory page size
    and its total size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now select the output folder path make sure it's your flash drive and not the
    local system drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that just click Capture!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25a3d19b-4153-468d-a77f-f264870ed12e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2\. Memory acquisition with Belkasoft RAM Capturer
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, we get a file with `.mem` extension of the same size as the total
    physical memory. By default, you have the date of acquisition as the filename,
    but we highly recommend renaming it, and adding more information for identification
    purposes: operating system version, edition, computer name, and other information.'
  prefs: []
  type: TYPE_NORMAL
- en: That's it! The image is ready for further analysis with memory forensics tools.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Belkasoft RAM Capturer operates in kernel mode (not in user mode like some other
    acquisition tools) with the help of 32-bit and 64-bit kernel drivers. It extracts
    the whole physical memory, even if it's protected, in a forensically sound manner,
    and saves it into a file with the `.mem` extension.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Belkasoft RAM Capturer page on Belkasoft''s website: [http://belkasoft.com/ram-capturer](http://belkasoft.com/ram-capturer)'
  prefs: []
  type: TYPE_NORMAL
- en: Windows memory acquisition with DumpIt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DumpIt is a free memory imaging tool from Comae Memory Toolkit. It''s a fusion
    of Win32dd and Win64dd in one executable. It''s extremely easy to use: even a
    non-technical person can use it in emergency situations. DumpIt supports all modern
    Windows versions, from XP to 10, both 32 and 64-bit. Also, the tool has a very
    important feature: it displays the Directory Table Base and the address of the
    debugging data structures during the acquisition process.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get your free copy of DumpIt, go to Comae Technologies' website and click
    on GET TOOLS. After you provide some information, including your first name, last
    name, company name, email address, phone number and website, you'll get your download
    link via email. Don't forget to put the tool onto a wiped external drive later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This time, we don''t need to know what kind of operating system we are dealing
    with - 32 or 64-bit. As we have already been said, DumpIt is a fusion of Win32dd
    and Win64dd in one executable. So, there are just two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Plug in the external drive in the target system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start `DumpIt.exe` and type `y` to start the acquisition process
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f02fca9-c518-4840-9f63-18a908b5debc.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3\. Memory acquisition with DumpIt
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result of the acquisition, you''ll get two files: a file with the DMP
    extension and a file with the JSON extension. The first is the target system''s
    memory dump with the computer name, date and time (UTC) in the file name, the
    second - the dump information, includes important information from a forensic
    point of view. It includes file size, system architecture type (32/64), KdCopyDataBlock
    KdDebuggerData, kdpDataBlockEncoded, sha256 hash, and so on. So that''s it, the
    DMP file is ready to be analysed with the memory forensics software of your choice.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As DumpIt is a fusion of Win32dd and Win64dd, it automatically detects the system
    architecture type and creates a memory snapshot and a file in JSON format with
    all the information you will need for further analysis with memory forensics tools,
    such as Volatility, Rekall, Belkasoft Evidence Center, and others.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Comae Memory Toolkit (which DumpIt, along with Hibr2Bin, is a part of)
    webpage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://comae.typeform.com/to/XIvMa7](https://comae.typeform.com/to/XIvMa7)'
  prefs: []
  type: TYPE_NORMAL
- en: Windows memory image analysis with Belkasoft Evidence Center
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, we successfully created two memory forensic images,
    one with Belkasoft Live RAM Capturer, and the other with DumpIt. Now it's time
    to perform analysis. Let's start from the first image and use Belkasoft Evidence
    Center for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Belkasoft Evidence Center is a powerful digital forensics tool, capable of parsing
    data not only from memory images, but also from images of computer drives and
    mobile devices. From a memory dump, it can extract valuable artifacts such as
    remnants of communications via social networks, messengers, chat rooms, webmail
    systems, data from cloud services, web-browsing artifacts, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have a valid license for Belkasoft Evidence Center, you can download
    a fully functional trial version of the product from the official website. To
    do this, go to the DOWNLOAD section on Belkasoft's website, choose the product
    you want to download, in our case, Belkasoft Evidence Center (trial version) -
    and provide your contact information, including your First Name, Last Name, Your
    email and Company, Country. After the download, the link will be sent to your
    email. If you are a licensed user, just go to your customer portal and download
    the latest version of the product.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for Windows memory image analysis using Belkasoft Evidence Center:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, click on New in the Open Case window. Now you need to fill in a
    few fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Case name - Usually, we use the case number and year for case names, but this
    time, as it's being created for testing purposes, we will name it `Belkasoft Memory
    Forensics Test`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root folder** - Here, you should choose the folder where the case data will
    reside. In our case it''s D: drive.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Case folder** - This field will be filled in automatically based on the two
    previous fields, so in our case, it''s `D:\Belkasoft Memory Forensics Test`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Investigator** - Type your name in this field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time zone** - Choosing the right time zone is very important. If you already
    know the right one, choose it. If not, we suggest choosing UTC +00:00\. In our
    case, we know the time zone, so we can use the correct one (UTC + 03:00).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description** - If you want to add a description to your digital evidence
    item, here is the field to do it. We used the following description: `Parsing
    a memory image created with Belkasoft Live RAM Capturer for testing purposes.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/351b7316-1287-42ac-aedd-c8f29b55ae05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4\. Creating a new case in Belkasoft Evidence Center
  prefs: []
  type: TYPE_NORMAL
- en: Click OK and you will see the next window - Add data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Belkasoft Evidence Center supports different kinds of evidence sources, from
    physical drives and drive images, to mobile backups and, of course, memory images,
    including `pagefile.sys` and `hiberfil.sys`.
  prefs: []
  type: TYPE_NORMAL
- en: As we are talking about memory forensics now, let's choose the image we previously
    acquired with Belkasoft RAM Capturer as the data source.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2563ec39-55a6-404b-a26b-3073a9b14a86.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5\. Adding previously acquired memory image as data source in Belkasoft
    Evidence Center
  prefs: []
  type: TYPE_NORMAL
- en: Click Next to choose the data types you want to search for. For testing purposes,
    we chose all available data types, but you can choose those you really need, to
    reduce processing time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to go to Advanced options and enable BelkaCarving - it will help
    you to recover fragmented data, for example, pictures.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61eb7a10-9b56-421a-ae76-73daad6bedd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6\. Choosing data types in Belkasoft Evidence Center
  prefs: []
  type: TYPE_NORMAL
- en: OK, we are ready to start parsing the memory image - just click Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It took BEC about an hour to parse and carve the image, and we got impressive
    results: 9728 web browser artifacts, 2848 pictures, 74 chat artifacts, and so
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd4c4193-394e-417f-bcb2-e4689bbb53ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7\. Results of memory image processing with Belkasoft Evidence Center
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you can extract quite a lot of valuable digital artifacts from
    a memory image with just a few clicks - so, if you have access to a running system,
    make it a rule to capture the memory image. This may help you, for example, to
    recover browsing history from anonymous tools such as Tor Browser, which are widely
    used among criminals, as well as other important digital artifacts which may reside
    only in volatile memory.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Belkasoft Evidence Center parses memory image structure and extracts available
    data, putting it into corresponding categories. The BelkaCarving options allow
    the tool to reconstruct fragmented data, for example, images.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Belkasoft Evidence Center page on the Belkasoft website: [http://belkasoft.com/ec](http://belkasoft.com/ec)'
  prefs: []
  type: TYPE_NORMAL
- en: 'BelkaCarving: [http://ru.belkasoft.com/en/bec/en/BelkaCarving.asp](http://ru.belkasoft.com/en/bec/en/BelkaCarving.asp)'
  prefs: []
  type: TYPE_NORMAL
- en: Windows memory image analysis with Volatility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Volatility Framework is an open source collection of tools written in Python
    for the extraction of digital artifacts from memory images. This time, we will
    use the second memory image, obtained earlier with DumpIt, as a data source to
    show you how to use this tool set for memory forensics.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Volatility Framework is an open source toolkit, so it's cross-platform,
    which means that you can use any operating system family you want - Windows, Linux,
    or mac OS. Of course, you can build these tools from source, but there are also
    so-called standalone executables for all the operating systems mentioned. As this
    cookbook is about forensic examination of Windows OS and the memory dump, what
    we are going to analyze is collected from Windows 10, and we are going to use
    the Windows Standalone Executable.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the most recent version of Volatility is 2.6\. With
    this version, support for Windows 10 (including 14393.447) improved, also support
    for Windows Server 2016, mac OS Sierra 10.12, and Linux with KASLR kernels was
    added.
  prefs: []
  type: TYPE_NORMAL
- en: To download the collection of tools, go to the Volatility Framework website
    and use the Releases tab to choose the most recent version, in our case 2.6\.
    Now, all you need is to unzip volatility_2.6_win64_standalone.zip which you've
    just downloaded, and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To show you the power of Volatility, we decided to use a memory image from a
    system infected with known malware - **Stuxnet**. Why? Because this memory image
    is freely available, so you can download it and use it for training.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by collecting information about our image.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, start `cmd.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the directory to the one with the Volatility Standalone Executable,
    and use the `imageinfo` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `imageinfo` plugin returned two suggested profiles. We know that this image
    was taken from a system running Windows XP with Service Pack 3, so the correct
    profile is WinXPSP3x86.
  prefs: []
  type: TYPE_NORMAL
- en: Now we know the correct profile, we can use it as a switch to collect information
    about the processes running on the infected machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we can use the `pslist` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ae4fdc23-5c7e-4b56-b86d-064c1795bb63.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8\. Volatility pslist plugin output
  prefs: []
  type: TYPE_NORMAL
- en: Do you see anything suspicious? Yes, there are three copies of `lsass.exe`,
    and this is one of the signs of a Stuxnet infection.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, only one `lsass.exe` process should be running, so we need to determine
    which two are malicious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the timestamps on figure 2.8\. Two out of three processes started in
    2011\. Strange, isn''t it? Now let''s use the `pstree` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/14f1f5a8-e11e-402a-adb3-7c490f403272.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9\. Volatility pstree plugin output
  prefs: []
  type: TYPE_NORMAL
- en: Our suspicious process, `lsass.exe`, is normally started by `winlogon.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the figure: only one `lsass.exe` is started by `winlogon.exe`
    - the one with PID 680; the two others are started by `services.exe`! So, the
    `lsass.exe` processes with PIDs `868` and `1928` could be malicious.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have two potentially malicious processes. Let''s check the DLLs loaded by
    these processes using the `dlllist` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7842f147-9026-489d-8f02-078ee503a10b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10\. Volatility dlllist plugin output for the suspicious process with
    PID 868
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/bf1b54ef-4d85-45c6-8815-da17a289efa9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11\. Volatility dlllist plugin output for the suspicious process with
    PID 1928
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at figure 2.11\. Anything suspicious? Yes! According to the Stuxnet threat
    description on F-Secure''s website, an encrypted DLL file should be injected into
    a process, and it has the following name structure: `[normaldll].ASLR.[random]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look familiar? We have found another trace of Stuxnet - `KERNEL32.DLL.ASLR.0360b7ab`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is another extremely useful Volatility plugin - `malfind`. This plugin
    helps digital forensic examiners to find hidden or injected code/DLLs in the user
    mode memory. Let''s use it for our suspicious `lsass.exe` processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b97454d0-d9d0-4d2a-9982-58388a767cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12\. A part of Volatility malfind plugin output for the suspicious
    process with PID 868
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we also used the `--dump-dir` switch to export the DLLs to a
    folder. After that we can, for example, upload them to VirusTotal. And of course,
    most of them are detected as malicious. For example, `process.0x81c47c00.0x80000.dmp`,
    extracted from `lsass.exe` with PID `1928`, is detected by Dr.Web Antivirus as
    **Trojan.Stuxnet.1**.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more Volatility plugins available. You can learn more about them
    in the documentation available on the Volatility Foundation website.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following list explains the plugins used in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '`Imageinfo`: This plugin collects some basic information about the memory image
    you are analyzing: operating system, service pack, hardware architecture; and
    also useful information such as DTB address, KDBG address, and the timestamp of
    the image creation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pslist`: This plugin shows the processes of the system, including the offset,
    process name, process ID, parent process ID, number of threads, number of handles,
    date/time when the process started and exited, Session ID and if the process is
    a WoW64 process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pstree`: This plugin does the same as `pslist`, but shows the process list
    in tree form. It uses indentation and periods to indicate child processes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dlllist`: This plugin displays the DLLs loaded by the process of interest,
    or all processes if the `-p` or `--pid` switch isn''t used.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Malfind`: This plugin allows the examiner to detect and extract hidden or
    injected code/DLLs in user mode memory for further antivirus scans and analysis.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Volatility documentation: [https://github.com/volatilityfoundation/volatility/wiki](https://github.com/volatilityfoundation/volatility/wiki)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A memory image from a system infected with Stuxnet: [https://github.com/ganboing/malwarecookbook](https://github.com/ganboing/malwarecookbook)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stuxnet threat description: [https://www.f-secure.com/v-descs/trojan-dropper_w32_stuxnet.shtml](https://www.f-secure.com/v-descs/trojan-dropper_w32_stuxnet.shtml)'
  prefs: []
  type: TYPE_NORMAL
- en: Variations in Windows versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know from the first chapter, nowadays we have a number of different
    Windows versions widely used both by private persons and businesses. Of course,
    this has an impact on Windows operating system forensic examinations, including
    Windows memory forensics.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing the Windows version and its type is very important, both in the acquisition
    and analysis stages. There are a few ways to collect this information. We will
    cover some in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to find out which version a computer is running is by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `winver` in the search field and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will work on machines that have installed Windows 7 or earlier versions.
    For Windows 8 onwards:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to press and hold the *Windows* key along with *R*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `winver` in the box that appears and press *Enter*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will open a small About Windows box, which will provide information on
    the version, as well as the build number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cf90738-c542-43c0-ad5d-6f6d5ff54f9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13\. About Windows box
  prefs: []
  type: TYPE_NORMAL
- en: 'To collect more information, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Start menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on Computer and choose Properties from the context menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, you can find My Computer, Computer, or This PC shortcuts on the Desktop
    right-click on any one of these and choose Properties from the context menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10ca51fb-d8cc-4e5e-9e74-b42dc7951d38.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14\. Computer properties
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in figure 2.14, with this technique you can collect more information
    about the machine you are dealing with, including the service pack, system type,
    computer name, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: There is more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are planning to use Volatility for memory forensic analysis (and we highly
    recommend it, because it is the most powerful tool, with lots of plugins, and
    also it is free and open source), it's very important to choose the right profile.
    To do this, you will need to know the system type, operating system version, and
    build number. As you have already learned from the previous recipes, the `imageinfo`
    plugin can help you with this task if this information wasn't properly documented
    during the acquisition stage.
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.1 contains information about profiles added to the most recent version
    of the Volatility Framework at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: '| **OS** | **Build** | **Profile** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 10 x64 | 10.0.10586.306 | Win10x64_10586 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 10 x64 | 10.0.14393.0 | Win10x64_14393 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 10 x86 | 10.0.10586.420 | Win10x86_10586 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 10 x86 | 10.0.14393.0 | Win10x86_14393 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Server 2008 R2 SP1 x64 | 6.1.7601.23418 | Win2008R2SP1x64_23418 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Server 2008 R2 x64 | 6.3.9600.18340 | Win2012R2x64_18340 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 7 SP1 x64 | 6.1.7601.23418 | Win7SP1x64_23418 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 7 SP1 x86 | 6.1.7601.23418 | Win7SP1x86_23418 |'
  prefs: []
  type: TYPE_TB
- en: '| Windows 8 x64 | 6.3.9600.18340 | Win8SP1x64_18340 |'
  prefs: []
  type: TYPE_TB
- en: Table 2.1\. Volatility 2.6 profiles list
  prefs: []
  type: TYPE_NORMAL
- en: Also, it's important to note that on all x64 Windows 8/2012 (and later), the
    KDBG (which contains a list of the running processes and loaded kernel modules)
    is encrypted by default, so you should use the virtual address of KdCopyDataBlock.
    Both addresses can be collected with the **kdbgscan** Volatility plugin.
  prefs: []
  type: TYPE_NORMAL
