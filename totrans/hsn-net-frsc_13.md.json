["```\npackets = rdpcap(\"loki-bot_network_traffic.pcap\") \nfor packet in packets: \n    if TCP in packet: \n        investigate_packets(packet) \n```", "```\ndef investigate_packets(packet): \n        pack__name = '%s:%s --> %s' % (packet[IP].src,packet[IP].sport, packet[IP].dst) \n        if isCompletedSession(packet): \n```", "```\ndef ifthesessioniscompleted(packet): \n        pack__name = '%s:%s --> %s' % (packet[IP].src,packet[IP].sport, packet[IP].dst) \n        p_queue[pack__name].append(packet) \n        for session in p_queue: \n                SYN_PKT     = False \n                PSH_ACK_PKT = False \n                ACK_FIN_PKT = False \n                PSH_ACK_FIN_PKT = False \n                for sp in p_queue[session]: \n                        if sp[TCP].flags == 2: \n                                SYN = True \n                        if sp[TCP].flags == 24: \n                                PSH_ACK = True \n                        if sp[TCP].flags == 17: \n                                ACK_FIN = True \n                        if sp[TCP].flags == 25: \n                                PSH_ACK_FIN = True \n                if (SYN and PSH_ACK and ACK_FIN) or PSH_ACK_FIN: \n                        return True \n        return False \n```", "```\nhttp_header, http_data = extractHeaderAndPayload(packet_queue[pack__name]) \n                if isLokiBotTraffic(http_header): \n```", "```\ndef isLokiBotTraffic(http_headers): \n        indicator_count = 0 \n        content_key_pattern = re.compile(\"^([A-Z0-9]{8}$)\") \n\n        if 'User-Agent' in http_headers and http_headers['User-Agent'] == 'Mozilla/4.08 (Charon; Inferno)': \n                return True \n\n        if 'HTTP-Method' in http_headers and http_headers['HTTP-Method'] == 'POST': \n                indicator_count += 1 \n\n        if all(key in http_headers for key in ('User-Agent','Host','Accept','Content-Type','Content-Encoding', 'Content-Key')): \n                indicator_count +=1 \n\n        if 'User-Agent' in http_headers and any(UAS_String in http_headers['User-Agent'] for UAS_String in ('Charon','Inferno')): \n                indicator_count +=1 \n\n        if 'Content-Key' in http_headers and content_key_pattern.match(http_headers['Content-Key']): \n                indicator_count +=1 \n\n        if indicator_count >= 3: \n                return True \n        else: \n                return False \n```", "```\n                       parsed_payload['Network'].update({'Source IP': packet[IP].src}) \n                        parsed_payload['Network'].update({'Source Port': packet[IP].sport}) \n                        parsed_payload['Network'].update({'Destination IP': packet[IP].dst}) \n                        parsed_payload['Network'].update({'Destination Port': packet[IP].dport}) \n                        parsed_payload['Network'].update({'HTTP URI': http_header['HTTP-URI']}) \n                        parsed_payload['Malware Artifacts/IOCs'].update({'HTTP Method': http_header['HTTP-Method']}) \n                        parsed_payload['Network'].update({'Destination Host': http_header['Host']}) \n                        parsed_payload['Network'].update({'Data Transmission Time': datetime.fromtimestamp(packet.time).isoformat()}) \n                        parsed_payload['Malware Artifacts/IOCs'].update({'User-Agent String': http_header['User-Agent']}) \n                        print parsed_payload \n```", "```\nimport pyshark\nimport struct\n\n#Place your PCAP here\ncap = pyshark.FileCapture(r'C:\\Users\\Apex\\Desktop\\loki-bot_network_traffic.pcap')\ndef Exfil(pkt):\n     try:\n         if pkt.http.request_method == \"POST\":\n             if pkt.http.user_agent == \"Mozilla/4.08 (Charon; Inferno)\":\n                 print \"Infected IP:\" + pkt.ip.src\n                 print \"Communicating From:\" + pkt[pkt.transport_layer].srcport\n                 print \"Malicious HTTP Request:\" + pkt.http.request_uri\n                 print \"Malicious User-Agent\" + pkt.http.user_agent\n                 print \"C2 Server:\" + pkt.ip.dst\n                 print \"Time:\" + str(pkt.sniff_time)\n                 Reason = pkt.http.data[4:6]\n                 if Reason == \"27\":\n                     print \"Traffic Purpose: Exfiltrate Application/Credential Data\"\n                 elif Reason == \"28\":\n                     print \"Traffic Purpose: Get C2 Commands\"\n                 elif Reason == \"2b\":\n                     print \"Traffic Purpose': Exfiltrate Keylogger Data\"\n                 elif Reason == \"26\":\n                     print \"Traffic Purpose': Exfiltrate Cryptocurrency Wallet\"\n                 elif Reason == \"29\":\n                     print \"Traffic Purpose': Exfiltrate Files\"\n                 elif Reason == \"2a\":\n                     print \"Traffic Purpose': Exfiltrate POS Data\"\n                 elif Reason == \"2c\":\n                     print \"Traffic Purpose': Exfiltrate Screenshots\"\n                 print \"\\n\"\n     except AttributeError as e:\n         # ignore packets that aren't TCP/UDP or IPv4\n         pass\n\n cap.apply_on_packets(Exfil, timeout=100)\n```"]