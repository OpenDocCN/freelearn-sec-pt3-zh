- en: Statistical Flow Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Statistical flow analysis** helps identify compromised machines in a vast
    network, approves or disapproves **Data Leakage Prevention** (**DLP**) system
    findings by cross references, and profiles individuals when needed. This style
    of analysis can reveal a lot of information. It can help you find a compromised
    machine or critical business files being leaked to the outside world. You can
    profile someone to find out their work schedule, hours of inactivity, or sources
    of entertainment while at work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key concepts in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Statistical flow analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting and aggregating data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key concepts around **Internet Protocol Flow Information Export** (**IPFIX**)
    and NetFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete exercises from this chapter, you will need the following tools
    and codes:'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark v3.0.0 ([https://www.wireshark.org/download.html](https://www.wireshark.org/download.html))
    installed on Windows 10 OS/ Ubuntu 14.04
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YAF ([https://tools.netsa.cert.org/yaf/libyaf/yaf_silk.html](https://tools.netsa.cert.org/yaf/libyaf/yaf_silk.html))
    only available on Linux (Not a part of Kali Linux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SiLK ([https://tools.netsa.cert.org/silk/download.html](https://tools.netsa.cert.org/silk/download.html))
    only available on Linux (not a part of Kali Linux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nipunjaswal/networkforensics/tree/master/Ch4](https://github.com/nipunjaswal/networkforensics/tree/master/Ch4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The flow record and flow-record processing systems (FRPS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **flow record** is the metadata information about flow on the network. Consider
    a scenario where an infected system is talking to the attacker's system and has
    uploaded two documents of 5 MB each to the attacker's system. In such cases, the
    flow record will contain information such as the IP addresses of both the compromised
    host and the attacker system, port numbers, date and time, and the amount of data
    exchanged, which in this case would be around 10 MB.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding flow-record processing systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The systems responsible for managing, building, and processing flow records
    are called **flow-record processing systems**. An FRPS consists of the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sensor**: Monitors the network for all the traffic flows, and generates flow
    records for these flows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collector**: A server application that receives flow records from the sensor
    and stores it the drive. There can be many collectors on a network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aggregator**: Used to aggregate, sort, and manage data coming from multiple
    sources (collectors).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyzer**: Analyzes the bits and bytes of data, and produces meaningful
    information that reveals a wide variety of problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensors are responsible for creating flow records. A sensor can vary from type
    to type. Network-based sensors are mainly switches and other network equipment
    that support flow-record generation and export. Equipment, such as Cisco switches,
    generates flow records in the IPFIX format, while other devices may use the NetFlow
    and sFlow formats. Hardware-based standalone appliances may also be used if the
    existing infra does not support NetFlow's record and export features.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Netflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've understood flow records and FRPS, let's begin to explore NetFlow.
    Consider a forensic scenario where we have captured 100 GB of full-packet PCAP
    files. Such large PCAP files are not easily portable and workable. This is where
    we turn to NetFlow. It removes the payload part of the packet and harvests only
    the header details.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, we learned to work with various headers, such as IPV4,
    TCP, and UDP. Removing the payload so we are only left with headers would convert
    our 100 gigs of PCAPs into a workable 600-700 MB.
  prefs: []
  type: TYPE_NORMAL
- en: 'NetFlow has a variety of headers, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Source IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP flags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bytes info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, we can say that it can be used as a replacement for full-packet
    capture. However, we cannot depend on it for intelligent analysis, which requires
    a full-packet capture. NetFlow can be thought of as a phone bill where we see
    who called but cannot retrieve the conversation. NetFlow has ten versions, v1
    to v10\. However, the widely-used ones are v5 and v10 (IPFIX), which we will discuss
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Uniflow and bitflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another simple concept is **uniflow** and **bitflow**. Consider a scenario
    where system 1 has sent 500 bytes to system 2 and system 2 responded with 3500
    bytes of data. In uniflow, this would be viewed as two separate entities, while
    in bitflow it would be considered a single bidirectional entity with transfers
    of 4,000 bytes. This can be viewed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `172.16.62.1` | 59,628 | `172.16.62.2` | 80 | 19-01-2019 14:22 | 500 bytes
    |'
  prefs: []
  type: TYPE_TB
- en: '| `172.16.62.2` | 80 | `172.16.62.1` | 59,628 | 19-01-2019 14:22 | 3,500 bytes
    |'
  prefs: []
  type: TYPE_TB
- en: '| `172.16.62.1` | 59,628 | `172.16.62.2` | 80 | 19-01-2019 14:22 | 4,000 bytes
    |  |'
  prefs: []
  type: TYPE_TB
- en: The first two entries represent uniflow, while the last one represents bitflow. Meanwhile,
    uniflow provides much more information than bitflow, since you can tell how much
    data was sent/received from each endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Sensor deployment types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just looked at uniflow and bitflow. Let''s discuss the FRP deployment and
    architectures followed for smooth network analysis. Generally, the FRP components
    are connected to a network in the setup shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9adce81e-89ec-4431-b19b-fb9cafa1f18a.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram highlights the sensor deployment in a network where the
    sensor is a part of the router, and through a dedicated channel, it transports
    logs to the collector from where they are stored to the storage units. The storage
    units are further connected to the analyzer for in-depth analysis. The architecture
    can vary from one type to another, such as for host-flow, perimeter, and enclave
    visibility.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/284daf05-5ef3-4e3d-b4d7-d016148b7f03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will denote the FRP system through a single icon, as shown in preceding
    diagram. We can see that FRP is placed in between the firewall and the internal
    router. The setup demonstrates the usage for perimeter visibility. Similarly,
    enclave (switch level) visibility can be achieved by placing the sensors on most
    of the switches and then aggregating the records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54c733e4-f30d-413a-a7d3-58e43da9956a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Host-flow visibility can be achieved by placing the sensor right on the endpoint
    itself and then aggregating the records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/603e6306-f87c-4fbd-85c7-f3773b9daa85.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing the flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many tools help to aid statistical flow analysis. The most common ones are **Yet
    Another Flowmeter** (**YAF**), **System for Internet-Level Knowledge** (**SiLK**),
    iSiLK, Argus, Wireshark, and Bro. While most of them provide a similar set of
    features, we will primarily be discussing YAF and SiLK being open source and *easily
    gettable*. We discussed IPFIX a bit in the previous section. Let's see how we
    can convert a PCAP file into an IPFIX-enabled format through YAF. YAF is a tool
    that processes packets from pcap files or live captures from network interfaces
    into bidirectional flows to an IPFIX-oriented file format. The output retrieved
    from YAF can be fed to popular tools, such as SiLK and other IPFIX-compliant tools.
    YAF contains two primary tools, one is YAF itself, and the other is **yafascii**,
    which prints data in the ASCII format based on the IPFIX-enabled input files.
    YAF has other PCAP tools, such as **yafMetas2Pcap** and **getFlowKeyHash**, which
    we will make use of in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Converting PCAP to the IPFIX format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'YAF can convert PCAP files to the IPFIX format, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5098de2f-6b9f-46c9-94c0-dc322b5398e0.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that executing the preceding command, `yaf --in filename.pcap --out
    filename.yaf`, results in the generation of a new file, `Fullpack.yaf`, in the
    IPFIX format. YAF optionally enables us to perform application labeling, deep-packet
    inspection, DHCP fingerprinting, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the IPFIX data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we have converted the file into the IPFIX format, let''s print the contents
    out in ASCII format using the yafscii tool, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97e8afd7-966c-4999-a161-9b2559fe9b8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the previous command will produce a text file similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bdd8f03-a6cd-4c76-b88b-73ea557cc8e8.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the data is presented in the IPFIX-printable format. Since we've
    covered the basics of PCAP conversion, let's try performing some analysis on the
    IPFIX file.
  prefs: []
  type: TYPE_NORMAL
- en: Flow analysis using SiLK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SiLK is a collection of various tools and scripts by CERT NetSA to facilitate
    analysis in large and vast network setups. SiLK aids the collection, storage,
    and analysis of the network data, and also enables the security teams to query
    a variety of historical datasets. Let's perform some analysis over the file from
    the previous example and make use of different utilities offered by SiLK.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, before we do that, we need the file under analysis to be in the SiLK
    format and not the flat IPFIX one. The reason we convert the file into the SiLK
    format rather than using the flat IPFIX one is that files in the SiLK format are
    more space-efficient. In the previous example, we converted the PCAP file to the
    IPFIX format. Let''s use that converted file and convert it into the SiLK format,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24855f59-2576-4e8e-b9f2-7800a47102e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The SiLK suite contains a **rwipfix2silk** tool that converts IPFIX formats
    to SiLK. We can see that we defined the output file using the `--silk-output`
    switch. Let''s perform some basic file-information gathering on the `test.rw`
    file we just created using the **rwfileinfo** tool, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e682798-bd00-43ca-93c3-41fb4895270f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `rwfileinfo` tool prints the information, such as type, version, byte order,
    header length, record length, and record counts, about a SiLK flow, IPset (command-line
    utility for managing large list of IPs) , or a bag (data structure and a binary
    file format containing IPv6 address) file. Additionally, we can specify the fields
    to print using the `--field` switch followed by the numerically-unique prefix,
    for example, to print count records, we will use the number `7`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e539561-017a-4dc0-8551-809b044878c7.png)'
  prefs: []
  type: TYPE_IMG
- en: To view all the unique prefixes, use the `help` command: `rwfileinfo --help`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view multiple record files, we can specify wildcards in the filename as
    shown in the following screenshot that issuing the `rwfileinfo *.rw –summary`
    command will print the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12635397-cd77-4da6-bc3b-cd844f0b253e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having the `--summary` switch at the end will display the cumulative analysis
    of the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/099b4ff1-22ea-43a3-aea1-12d0ef91fa6d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that using the `--summary` switch has given us a combined summary
    of the total records, number of files, and file sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing flow records as text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can view SiLK records using the **rwcut** tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2df04a83-0b06-40f0-bc45-b2a61db5cdf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `--num-rec` switch allows us to view only a specific set of records, which
    in our case is the first five. Again, we have a variety of options with the rwcut
    tool as well. We can define the fields using the `--fields` switch, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7430b7f4-b3ea-4e53-b085-fafe1199f958.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output from the SiLK set of tools is very flexible and can be delimited
    using the `--delimited` switch, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5b30fb7-4258-4f39-84ca-98ec1473c3ce.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that `|` is the default delimiter. However, we can define our delimiter
    character using the `--column-sep` switch, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **rwtotal** tool summarizes the SiLK flow records by a specified key and
    prints data matching the key. Consider a scenario where we need to count the data
    flowing to the specific ports of the systems in a network, and we can use rwtotal
    with the `--dport` switch as the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/374993ac-700b-4954-ad00-e6b4375c962e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the data traveled massively to port `80`. The `--skip-zero`
    switch eliminates the entries with zero records. Additionally, since SiLK is used
    in large networks, summarizing the data flows from a particular VLAN, or a subnet,
    becomes extremely easy using `--sip-first-16` and its other related options, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2dc14e9-1b90-4221-9a29-a4a63564550f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that using the first 24 in the source IP address; we have four entries
    for `91.189` range having `1`, `2`, `30`, and `1` records, respectively. However,
    if we only choose to view the first 16, the stats get clobbered and we get `34`
    records from that specific range. This becomes extremely handy in dealing with
    large network setups. Similar to rwtotal, **rwuniq** summarizes the records with
    the `--field` switch, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/171a386c-194b-49b7-9d53-44af1672f8d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The rwtotal tool is generally faster than the rwuniq tool but has less functionality.
    The **rwstats** tool summarizes flow records by specified fields into bins, and
    for each of the bins, it computes specific values and then displays the top and
    bottom *N* number of values based on the primary value; let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a823a766-94b8-48ef-95a0-a3dfb520ea19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we used overall stats in the preceding screenshot and we have
    stats related to bytes, packets, and bytes per packet. The stats show vitals related
    to intervals, counts, the percentile of input, and various other details. Let''s
    see a better example where it will eventually make a lot of sense:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b62095f1-df94-40cd-bf9b-85f325afeae3.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we have filtered the top-20 source/destination
    pairs based on the number of  packets and chosen to display fields 1 and 2, that
    is, source IP and destination IP, with packets as the value. We can immediately
    see that the first entry on the output has the highest packet transfer, which
    makes up 19.72% of the total flows from the capture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Figuring out the top-10 sources and destination ports is an easy job as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6895233-d631-4ce2-9ab9-f57b3a6c6a9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that port `80` is one of the highest originating ports, making up
    20.46% of the total packets, while port `56446` is the biggest receiving port,
    receiving 14.76% of the total packets. We can also set threshold values as the
    percentage using the `--percentage` switch, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3c95d97-1518-4891-bc23-8355b0400256.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have the values based on the percentile. The **rwcount** tool allows
    us to break the records into time intervals. Say we want to view the total number
    of packets flowing every two minutes, we can issue the `rwcount` command with
    the `--bin-size` switch having the seconds as the parameter as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a06752d8-ca47-4a94-bf48-afa0095109d2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now see records for every two-minute activity and can deduce that the
    traffic spiked between 14:00 and 14:06 hrs. In a large setup, the preceding tool
    proves to be extremely handy in pinpointing any unusual spikes at random times
    of the day.
  prefs: []
  type: TYPE_NORMAL
- en: '**rwfilter** – what we call the S*wiss Army knife* for filtering flows – is
    one of the most popular tools in the package. Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e172868-5e04-4213-92a5-2cce00e855f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we built a filter for the source, port `80`, and
    fed that as an input to the rwstats tool, where it displayed the source IP and
    number of bytes transferred and its percentage. Additionally, we set a threshold
    of 0.5%. Similarly, we can build filters of various kinds and feed the output
    of one tool as an input to the other. Let''s see how we can make use of `rwscan`
    and `rwsort` together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cd9a347-c514-4e38-a177-d40c05e3af1b.png)'
  prefs: []
  type: TYPE_IMG
- en: The rwscan tool detects scanning activities in the records, while the rwsort
    reads the flow records and sorts them by specified fields. We used `--scan-model=2`,
    which denotes a threshold random walk algorithm for portscan detection. Additionally,
    in the output, we can see that for the source IP addresses, we have a start time,
    end time, total flows, packets, and bytes transferred in the interval.
  prefs: []
  type: TYPE_NORMAL
- en: Well, we have now covered a small number of SiLK utilities; we will cover more
    in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Statistical flow analysis is making the life of forensic investigators easy
    in terms of its portability and ease of maneuvering around the data. However,
    network investigations in most of the cases require full-packet captures to determine
    the payloads. Wireshark also provides basic flow-analysis features, such as protocol
    hierarchy, I/O graphs, and IPv4 and IPv6 statistics. Let''s look at a few of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48d9cf57-973a-449c-9b59-7981b679deef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Browsing to the **Statistics** | **Protocol** hierarchy, we find the detailed
    list of protocols and associated bytes, bits/second and the percentage of bytes
    as well as the count of packets. The Wireshark **Statistics** | **IO Graph** tab
    allows us to view the sudden rise in traffic at certain time intervals:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28fe27c4-66cd-49e4-934e-30c5ff036351.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, browsing to **Statistics** | **IPv4** | **All Addresses** will
    allow us to view statistics related to all the associated IP addresses, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9cfa71e-1f21-4407-9880-0bd1a90f41e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, **Statistics** | **IPv4** | **Destinations and Ports** options allow
    us to view destinations and associated ports statistics, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2070dceb-55c3-4066-99ce-93678408fd98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we can gather quick knowledge of the most transmitting endpoint
    and port used by it with ease. Similar options exist for IPv6 traffic as well.
    The HTTP packet-counter option from the **Statistics** | **HTTP** | **Packet Counter**
    tab allows us to quickly jot down errors in the web applications and the type
    of response sent by the application to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b4efa40-aa60-4163-8ccb-0370c4b0ea80.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use statistical analysis techniques in the upcoming chapters in a much
    more efficient manner. The goal of this chapter was to familiarize ourselves with
    the tools used in the process. We looked at YAF, SiLK, and Wireshark for statistical
    data analysis in the IPFIX and NetFlow formats.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to uncover the tunneled traffic and gain
    forensic value from it. We will look at a variety of techniques to decode and
    decrypt traffic sessions and active encryptions.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions based on the exercises covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between Full packet capture and NetFlow?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of attacks can be analyzed using NetFlow and IPFIX data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the exercise covered in the chapter using the PCAP file from GIT repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to gain most out of this chapter, refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: For more on NetFlow using Silk, refer to this amazing guide at [https://tools.netsa.cert.org/silk/analysis-handbook.pdf](https://tools.netsa.cert.org/silk/analysis-handbook.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more on NetFlow to IPFIX, refer to [https://www.youtube.com/watch?v=LDmy-tVCsHg](https://www.youtube.com/watch?v=LDmy-tVCsHg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to an excellent free training on glow analysis at [http://opensecuritytraining.info/Flow.html](http://opensecuritytraining.info/Flow.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
