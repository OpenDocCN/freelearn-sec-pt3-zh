- en: '*Chapter 8*: Enhancing Your Network Defensive Skills'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"The digital economy and the knowledge society is supported by immense masses
    of data that navigate in cyberspace, enabling the interaction between systems,
    humans and companies. Thus, the future of connected humanity depends on the investment,
    robustness and cybersecurity of telecommunications networks."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Luis Adrian Salazar, Former Minister of Science Technology and Telecommunication
    of Costa Rica*'
  prefs: []
  type: TYPE_NORMAL
- en: The foundation of a network security strategy should be based on knowledge of
    the data that is passing through this network.
  prefs: []
  type: TYPE_NORMAL
- en: You will be amazed by the huge amount of overhead that is passing through your
    network.
  prefs: []
  type: TYPE_NORMAL
- en: But most importantly, you will be surprised with the amount of network traffic
    that flows through your network even when you are not using it. Programs requesting
    updates, programs sending encoded data to their servers (something that we agree
    to when we install social media apps such as TikTok and Facebook), and many other
    things are the cause of this constant flow of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at all the juicy content that is waiting for you in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the *phases of a cyber attack.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A deep dive on one of the best tools for your defensive security arsenal: **Nmap**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of guided examples to get hands-on experience on **Nmap**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A walk through the *biggest security flaws and vulnerabilities on wireless networks.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will create the best-in-class *safety guide for wireless users*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will also review another great tool for network analysis: *the mighty Wireshark.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will look at some vulnerable protocols, plus some *guided demos to show how
    easy it would be for an attacker to capture sensitive data* if those protocols
    were in use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also learn the basics about **IPS** and **IDS**, and their similarities
    and differences, and have a quick look at the best free IPS and IDS available
    to you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plus, this chapter has a **bonus** – yes, a bonus! – in which you will learn
    how to *play old-school games, visit an ancient virtual museum, and even watch
    an ASCII movie for free using Telnet.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make the best of this chapter, you need to install Kali Linux. This way,
    you can play around with the tools that we will overview.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux is very light so you can install it on pretty much any old computer
    with internet access.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to use a virtual machine, but in that case, you may need to
    tweak some settings (especially network settings) to ensure that all tools will
    behave as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'All images, including pre-built virtual images for virtual machines, can be
    found here: [https://www.kali.org/downloads/](https://www.kali.org/downloads/).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the master tool of network mapping – Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's start by understanding the importance of *network mapping tools*.
  prefs: []
  type: TYPE_NORMAL
- en: Cyber attacks are normally composed of five phases in which network mapping
    is the core of the second phase, known as **scanning**. To better understand this,
    let's take a quick look at those five phases of a cyber attack.
  prefs: []
  type: TYPE_NORMAL
- en: Phases of a cyber attack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These phases were not created as a set of best practices that attackers need
    to follow; instead, they were designed by cybersecurity professionals to categorize
    the most common steps that an attacker will be most likely to follow when performing
    a cyber attack.
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain those stages by telling the story of an attacker that wants to
    gather some data from a fictional company called **Bravix**.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 1 – Reconnaissance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, the attacker needs to acquire some basic information about Bravix, such
    as web page name, type of security, basic structure, web services in use, and
    so on. Additionally, the attacker may also want to get other public information
    about the company, such as its location and any information about their employees
    that can be used later in targeted social engineering attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, all the data is collected manually using public sources such as a
    simple Google search.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 2 – Scanning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the attacker knows the web pages associated with Bravix (`bravix.com`,
    `store.bravix.com`, and `mail.bravix.com`), it is time to *scan them* to collect
    more technical information that will be used during the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: OS versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP addresses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web services used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opened ports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the **Content Management System** (**CMS**). Most web pages now
    use a CMS as a platform to run their web pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, this stage is more technical than the previous one and the attacker
    will leverage tools such as vulnerability scanners and network scanners to gather
    this data (*we will see how soon*).
  prefs: []
  type: TYPE_NORMAL
- en: Phase 3 – Gaining access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With all that information, the attacker can determine the vulnerabilities on
    the victim's web pages (or web resources) and exploit them to gain access to the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 4 – Maintaining access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an optional phase that is executed in more elaborate attacks in which
    the attacker wants to harvest more data from the victim; however, in this example,
    the attacker may just grab the information needed from Bravix's web servers and
    run.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 5 – Covering or deleting their tracks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, this intrusion was illegal, therefore to avoid jail, the attacker
    will try to delete any track of this exfiltration of data by deleting any logs
    that may serve as evidence of this crime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the five stages of a cyber attack; however, it is
    very important to highlight that these phases are not always sequential, and in
    fact many times they overlap. For example, an attacker may start covering their
    tracks from the first phase by using a VPN to avoid detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Phases of a cyber attack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Phases of a cyber attack
  prefs: []
  type: TYPE_NORMAL
- en: OK; based on what we just learned, we can determine the importance of the *scanning
    phase* because the more information the attacker gathers here, the higher the
    risk of the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, let's understand how we can leverage the same tools that attackers
    will use against us to proactively protect our systems from attack.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nmap is *must-have* tool for *network discovery* and *security auditing* that
    allows us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform an inventory of our network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gather uptime data for services or hosts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the hosts on a given network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the services offered (or enabled) by those hosts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the OS version of said host machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine any packet filters or firewalls in use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basically, Nmap leverages IP packets to gather all of this data and presents
    it very cleanly using a command-line interface or even a GUI called Zenmap.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is available for most OSes, including Windows, Linux, and macOS, and can
    be downloaded for free from [https://nmap.org/](https://nmap.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Scanning someone's system or network without written authorization from the
    owner is *illegal* in many countries, so before moving any further, make sure
    you only do these scans on systems for which you are authorized.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that if you want to test your knowledge or simply practice
    with Nmap, you can use a system that the people behind Nmap have generously created
    for educational purposes. The page is [http://scanme.nmap.org/](http://scanme.nmap.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how this works by executing the basic `nmap` command on that
    test server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As shown in *Figure 8.2*, the basic command provides very valuable information
    about the server.
  prefs: []
  type: TYPE_NORMAL
- en: Here you can see the ports that are open, and the service associated with each
    port.
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful when auditing your infrastructure to confirm *that just
    the required ports and services are open* and if there are discrepancies, apply
    immediate actions to remediate the vulnerability before the bad guys discover
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – nmap basic output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – nmap basic output
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s be more *aggressive* by adding the `-A` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in *Figure 8.3*, the `-A` parameter gives us some additional and useful
    information such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name and version of the service running on the port**: This is a very important
    auditing tool that enables you to easily identify outdated and vulnerable services,
    so that you can contact the server owner to get them patched ASAP. Additionally,
    and depending on the criticality of the vulnerability (for example, a very old
    version that may jeopardize the entire infrastructure), you can create a policy
    that if the service is not patched in *X* days, then the server will be removed
    from the network. This will cover you from having exposed services on your infrastructure
    but also puts some pressure on the system administrators to ensure that they get
    the service in question patched ASAP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS version**: This will help you to determine if an unsupported OS is present
    in your infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – nmap -A output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – nmap -A output
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned, `Nmap` is a great tool for auditing, and you may need to send
    these results to the server owner so they can take action. The good news is that
    you can use this simple command to export the `nmap` results to a `.txt` file
    so that you can easily send it to the server owner as an attachment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following figure, the result of the preceding `nmap`
    command created a document called `server_audit.txt` and saved it to your working
    directory, ready for you to include in your audit results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – nmap result exported to .txt file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – nmap result exported to .txt file
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also target sections of your network by using an IP range. For example,
    the following command will scan all IPs from `192.168.0.1` to `192.168.0.100`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we also included the `-v` (for *verbose*) parameter, which outputs
    additional information about the process of the scan.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: By default, `Nmap` scans 1,000 ports, but you can increase, decrease, or specify
    that number by using parameters such as `-F` (fast scan of fewer ports), `-p`
    (to specify the ports to scan), or `-r` (to scan all ports in consecutive order).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many more parameters that you can use with `nmap`. To explore them,
    simply type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*But there is more!* `nmap` supports scripts created by the community to augment
    their capabilities, as explained in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's review some of the best `nmap` scripts that you can leverage in defensive
    security.
  prefs: []
  type: TYPE_NORMAL
- en: vulners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This script will make your life easier. It will provide you all `Nmap` scan.
  prefs: []
  type: TYPE_NORMAL
- en: What is a CVE?
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B16290_02_Final_JC_ePub.xhtml#_idTextAnchor035), *Managing
    Threats, Vulnerabilities, and Risks*, we talked about one of the best places to
    go to find vulnerabilities: the **CVE site** at [https://cve.mitre.org/](https://cve.mitre.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The magical script is called `vulners` and can be found on the following link:
    [https://github.com/vulnersCom/nmap-vulners](https://github.com/vulnersCom/nmap-vulners).'
  prefs: []
  type: TYPE_NORMAL
- en: This script is loaded by default into the standard **Nmap Scripting Engine**
    (**NSE**) library, so there is no need to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command structure is very simple, so let''s explain it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, we have the standard `nmap` command, then we use the `-sV` parameter
    because the script needs the version to properly gather the CVE.
  prefs: []
  type: TYPE_NORMAL
- en: Then we call the script by using the `--script {script_name}` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can optionally use the `mincvss` script argument to limit the results to
    CVEs with a score greater than the value provided. An example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, the script will look for all CVEs related to that `nmap` result. Note that
    the script uses a huge database of more than 250 GB, so the scan may take some
    minutes to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows a big list of vulnerabilities related to the version
    of Apache running on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – vulners script result'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – vulners script result
  prefs: []
  type: TYPE_NORMAL
- en: Also notice that the script provides a link to a web page about the CVE so that
    you can easily gather more information about the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw before, you can use the `>> {file_name}` option at the end of the
    preceding command to export the result to a `.txt` file to make it easier to send
    to the server owner (to get the vulnerabilities fixed ASAP). Also, having the
    file exported as `.txt` is great for keeping as evidence for audits.
  prefs: []
  type: TYPE_NORMAL
- en: vulscan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is another super cool script that will search for vulnerabilities related
    to the version found in the `nmap` results.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the script will look for vulnerabilities on the following databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**scipvuldb.csv** - [https://vuldb.com](https://vuldb.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cve.csv** - [https://cve.mitre.org](https://cve.mitre.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**securityfocus.csv** - [https://www.securityfocus.com/bid/](https://www.securityfocus.com/bid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xforce.csv** - [https://exchange.xforce.ibmcloud.com/](https://exchange.xforce.ibmcloud.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expliotdb.csv** - [https://www.exploit-db.com](https://www.exploit-db.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**openvas.csv** - [http://www.openvas.org](http://www.openvas.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**securitytracker.csv** - [https://www.securitytracker.com](https://www.securitytracker.com)
    (end-of-life)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**osvdb.csv** - [http://www.osvdb.org](http://www.osvdb.org) (end-of-life)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unfortunately, this script is not loaded by default. But no worries, here are
    the steps to easily install it in Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `nmap` `scripts` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory for the installation of the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once installed, the script is very simple to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this case, as demonstrated in the following figure, the script did not find
    any vulnerability associated with the current version of OpenSSH on those databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – vulscan script result'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – vulscan script result
  prefs: []
  type: TYPE_NORMAL
- en: 'This script can also be run against additional databases. To do that, just
    add the following argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, one of the cool features of `nmap` is that you can create your
    own scripts.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about how to create your scripts, I highly recommend
    the book *Mastering the Nmap Scripting Engine* by *Paulino Calderon*, available
    from *Packt*.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the protection of wireless networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To better explain this, let's split this section in two.
  prefs: []
  type: TYPE_NORMAL
- en: In the first part, we will do *a technical deep dive on the most dangerous wireless
    network vulnerabilities* that you need to know.
  prefs: []
  type: TYPE_NORMAL
- en: The second part will focus on the user, so it will basically be a *user guide
    to help them to stay secure when using a wireless connection at home*. Remember
    that these kinds of guides are your best bet to reduce the biggest risk to your
    infrastructure and data, *the inadvertent user*.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless network vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, here we are going to look at the protocols, features, and practices
    that represent the top vulnerabilities to wireless networks. Due to the recent
    increase in the number of users working from home, this guide will include vulnerabilities
    that affect both enterprise and home systems.
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi Protected Setup (WPS) – the problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the perfect example of a tradeoff between security and usability (or
    convenience). The reason is that **WPS** was created to make it easier for non-technical
    users to connect new devices such as smart TVs, game consoles, and laptops to
    the network.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that the protocol is extremely insecure and has several vulnerabilities
    that lower the security of your network.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main WPS implementations: one is **PIN based** and the other
    one is known as **Push Button Control (PBC**).'
  prefs: []
  type: TYPE_NORMAL
- en: The **PBC** implementation includes two methods. One method is initiated by
    pressing the WPS button on both devices as seen in *Figure 8.7*. Normally, here
    you have to press the WPS button on your Wi-Fi then you press the WPS button on
    your device to establish the connection.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – WPS connection by pressing the button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – WPS connection by pressing the button
  prefs: []
  type: TYPE_NORMAL
- en: There is also a hybrid mode in which you have to first open an app on your device
    to scan for WPS-enabled devices and then press the WPS button on the router to
    establish the connection, as shown in *Figure 8.8*.
  prefs: []
  type: TYPE_NORMAL
- en: Some routers also have the option to trigger WPS through the router's web interface,
    but that option is only available on a few models and is used by very few people
    (because it lacks the usability part of the solution).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – WPS hybrid connection mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – WPS hybrid connection mode
  prefs: []
  type: TYPE_NORMAL
- en: The other WPS implementation is by using a **PIN code**, which is way easier
    to remember than your super-long and secure password.
  prefs: []
  type: TYPE_NORMAL
- en: But wait…. What is the point of having a super-secure password if we are also
    going to enable insecure PIN access? This is like having a super-secure one-million-dollar
    door that can be bypassed by an open window.
  prefs: []
  type: TYPE_NORMAL
- en: Why is the PIN method less secure?
  prefs: []
  type: TYPE_NORMAL
- en: The PIN is an 8-digit number, which means that the entropy (number of possible
    password combinations) is really small in contrast to an alphanumeric password
    in which you can introduce lower- and uppercase letters to significantly increase
    the entropy. In fact, using a modern cracking engine, an attacker can crack an
    8-digit PIN in less than 8 hours.
  prefs: []
  type: TYPE_NORMAL
- en: But this is not the only vulnerability present on WPS. Researchers also found
    a couple of vulnerabilities in the cryptographic protocol. One is related to the
    fact that some of the digits of the PIN are checksums (which can be calculated),
    reducing the time needed to crack the password.
  prefs: []
  type: TYPE_NORMAL
- en: The other vulnerability is related to the mechanism used by the protocol to
    validate the PIN, called a *cryptodance*, in which one of the steps of the validation
    is not properly encrypted, allowing an attacker to get easy access to the PIN.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, researchers also found some correlation between the MAC address
    and/or the serial number of the router, enabling an attacker to calculate the
    PIN based on those values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – WPS data pasted on the back of the router'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – WPS data pasted on the back of the router
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding figure, those values can be located on a sticker on
    the back of the router, but an attacker can remotely gather them by leveraging
    the vulnerabilities of the probe request packets, which are unencrypted and broadcasted
    by the router, meaning anyone can receive and read them, and they may contain
    the MAC address as well as the serial number. If you want know more about probe
    request vulnerabilities, see [*Chapter 5*](B16290_05_Final_JC_ePub.xhtml#_idTextAnchor109),
    *Cybersecurity Technologies and Tools*,under the *Advanced wireless tools for
    cybersecurity* section.
  prefs: []
  type: TYPE_NORMAL
- en: WPS – the solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be surprised to know that *WPS is enabled by default* on most routers,
    so you may even have this vulnerability at home without knowing it.
  prefs: []
  type: TYPE_NORMAL
- en: So, the best recommendation here is *to completely disable WPS* from your router
    (step-by-step instructions will be provided in the *User's safety guide for wireless
    networks* section).
  prefs: []
  type: TYPE_NORMAL
- en: If for some reason you need to have WPS enabled, then leave the **PCB** *enabled*
    and make sure you *disable the PIN option* (as it is more vulnerable).
  prefs: []
  type: TYPE_NORMAL
- en: Also make sure that you *update your router's firmware* to ensure that your
    router contains the latest WPS fixes and security updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some legacy routers that will not allow you to disable WPS. In those
    cases, you have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the router's firmware to see if the new update gives you the option to
    disable WPS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change your router immediately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s look at a little-known wireless feature that may bring some vulnerabilities
    to your network: **Universal Plug and Play** (**UPnP**).'
  prefs: []
  type: TYPE_NORMAL
- en: UPnP – the problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**UPnP** was also created with the idea of making life easier for users, as
    it enables the sharing of data between devices on a given network.'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that this was created mostly for sharing data between *trusted*
    devices on a home network, therefore UPnP does not do authentication and attackers
    know how to exploit this.
  prefs: []
  type: TYPE_NORMAL
- en: One of the features of UPnP is port forwarding, and attackers can leverage that
    vulnerability to take control of computers and use them as proxies during DDoS
    attacks. This was the case in the famous *Mirai* attack in which this technique
    prevented security systems from identifying the command and control servers, as
    thousands of infected machines around the world were used as proxies between the
    "bot" machines and the real command and controls servers.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples of malicious trojans that leverage UPnP vulnerabilities include
    the banking trojan *Pinkslipbot*, also known as *QakBot* or *QBot*. These trojans
    are very dangerous as they use a keylogger to capture keystrokes and send financial
    information and credentials to remote command and control servers.
  prefs: []
  type: TYPE_NORMAL
- en: UPnP – the solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best way to protect against all these vulnerabilities is by *disabling
    UPnP* in your router (step-by-step instructions will be provided in the *User''s
    safety guide for wireless networks* section). However, if you really need UPnP
    (to enhance the experience of a device), then you must follow these tips:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the model of your router on the internet and verify that the manufacturer
    has released a patch for the latest vulnerabilities related to UPnP. In fact,
    in late 2020, researchers found a vulnerability called **CallStranger** that enabled
    an attacker to exfiltrate data from your systems; therefore, if you want to have
    UPnP enabled, you must keep checking for vulnerabilities and make sure you patch
    them. To find the list of current vulnerabilities, please visit [https://cve.mitre.org](https://cve.mitre.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter all external traffic trying to use UPnP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor network traffic to find abuses of UPnP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have a lot of technical and administrative controls at the office to
    secure your wireless network, but what about users working from home? Do they
    have the same level of security on their wireless connection at home?
  prefs: []
  type: TYPE_NORMAL
- en: This should be a major concern for you because maybe even most of your users
    are now working from home, therefore it is imperative to establish and distribute
    clear guidelines (administrative controls) to the users to ensure they have acceptable
    levels of security to avoid additional risks to business data and systems.
  prefs: []
  type: TYPE_NORMAL
- en: User's safety guide for wireless networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the person in charge of security for your organization, you must provide
    guidance to the users to reduce the risks of attack.
  prefs: []
  type: TYPE_NORMAL
- en: Taking in consideration that most users use Wi-Fi to connect to the internet,
    then it would be a great idea for you to create a *manual of best practices when
    using wireless networks* and distribute it to all employees.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that the key here is to ensure that all users are familiar with
    these guidelines, so some good ideas would be to create infographics to share
    by email or to create some cool videos to call people's attention to this campaign.
    Also, you can designate some influential employees as *security champions* to
    help you disseminate these strategies among all employees.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the security settings are configured on the Wi-Fi router, so let's start
    by showing the steps to log on to the administrative console of the Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your router
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the five simple steps required to access your router settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Google and enter the name of your router (brand and model) and the phrase
    `admin password`. For example, `Linksys E1200 admin password`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the relevant link from the manufacturer (in this case, [linksys.com](http://linksys.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following figure, the link sent us to the manufacturer support
    page, which confirms that the default username and password for this router are
    `admin`/`admin`:![Figure 8.10 – Default admin username and password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.10 – Default admin username and password
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*To access the router, you just need to type the IP address of the router into
    your internet browser*. In this case, the support page mentions the default IP
    address; however, that address may change. But don''t worry, this is very simple
    to confirm with the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Press ![](img/Image.png) + *R* to launch the `cmd` and hit *Enter* to open
    Command Prompt.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. On Command Prompt, type `ipconfig` and hit *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c. Then look for the value called `192.168.0.1`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Router''s IP address'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B16290.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.11 – Router's IP address
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you type the IP address on your browser, it should prompt you with a login
    page asking for your credentials. In this example, both the username and password
    are `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All web interfaces are different (depending on the manufacturer), but the information
    should be the same, so take some time to explore the interface and get familiar
    with it. Linksys has an emulator that you can use to get familiar with the interface
    at [http://ui.linksys.com/E1200/1.0.00/](http://ui.linksys.com/E1200/1.0.00/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let's see what attributes you must change here to make your wireless router
    more secure.
  prefs: []
  type: TYPE_NORMAL
- en: Admin password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you just saw, *the password of your router may be very weak* (and known to
    everyone), so the very first step is to secure the router by changing it. Depending
    on the router, it could be under a tab called **Management**, **Security**, **Login**,
    or **Users**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip – Use a passphrase
  prefs: []
  type: TYPE_NORMAL
- en: The longer the password, the harder it is for an attacker to crack it, so use
    a phrase that you can easily remember as your password, for example, `I.Love.my.wife.since.2014`,
    or something motivational like `I.am.sure.I.will.get.my.masters.in.2021`. Of course,
    these are just examples, but create one that is unique to you with at least 25
    characters. As with any other password, using special characters, slang, and popular
    phrases is better, because then your password will be strong against brute-force
    and dictionary attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Admin user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Attackers knows that the default username to connect to the router is normally
    `admin`, however some routers allow you to change that username. So, if you have
    that option, it is highly recommended that you change that username as it will
    prevent most attacks as they will be targeted at a nonexistent user.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in the preceding section, the use of a strong (long) passphrase
    is recommended for your wireless network. Also, a good practice is to change it
    at least every 6 months.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless security (security mode)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here you have three encryption options: **WEP** (highly insecure), **WPA**
    (vulnerable), **WPA2** (recommended).'
  prefs: []
  type: TYPE_NORMAL
- en: Wireless network name (SSID)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the SSID could be the brand of your wireless router plus some random
    numbers. This is not only ugly, but also dangerous because everyone will know
    the model of your router, so attacking it will be easier. So, as a first step,
    *change the name of your SSID* to a name of your preference. Also avoid using
    your own name in the SSID because that could make you an easier target. Therefore,
    an SSID like *Harper Family* should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: Tip – 2.4 GHz and 5 GHz
  prefs: []
  type: TYPE_NORMAL
- en: Most modern routers have two bands (2.4 GHz and 5 GHz) and in most cases, you
    need to configure them as if they are two different routers (meaning different
    SSIDs, different security modes, different passphrases, different guest accounts,
    and so on). Therefore, make sure that all settings are the same on both networks
    to avoid leaving holes in one of them.
  prefs: []
  type: TYPE_NORMAL
- en: Guest accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Imagine that your neighbor needs to connect to your Wi-Fi for a minute to send
    an urgent email. That means that you need to reveal your ultra-secure passphrase,
    but now your passphrase is saved on their device, so they can connect at any time
    they want. Now, if you change your passphrase to avoid that, then it means that
    you will have to re-enter the new passphrase on all your devices. Therefore, to
    avoid all that trouble, you can enable **guest accounts**. Guest accounts enable
    you to create an account for external people, which has a lot of advantages including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: They can be enabled temporarily and then disabled to prevent any further access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can change the password any time you want without affecting your other devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since you can use them as *temporary* accounts, you can create a new password
    every time that you use them, making it almost impossible to crack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some routers have the option for you to access the management console from a
    remote location (through the internet). This is very insecure as it opens the
    doors to attackers to gain access to your router (and then your network and data).
    Therefore, *always disable the remote access feature.*
  prefs: []
  type: TYPE_NORMAL
- en: Disable WPS (both the button and PIN versions)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in the preceding section, WPS is a highly vulnerable protocol that
    must be disabled (and is normally enabled by default).
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so is very simple – just look for **WPS settings** on your router (as
    shown in the following figure) and click to disable WPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – WPS settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – WPS settings
  prefs: []
  type: TYPE_NORMAL
- en: Disable UPnP
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Similar to WPS, **UPnP** is highly vulnerable and the worst part is that it
    is enabled by default on most routers, so to prevent that vulnerability, it is
    highly recommended to disable it, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – UPnP settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – UPnP settings
  prefs: []
  type: TYPE_NORMAL
- en: Fing app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Fing** is a mobile app that enables you to see all the devices connected
    to your network.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a great tool to confirm if an unauthorized user is connected to your
    network and if so, change the router password immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 8.14*, **Fing** gives us a lot of useful information about
    the connected devices, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Device name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manufacturer or brand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Fing app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Fing app
  prefs: []
  type: TYPE_NORMAL
- en: Use of NFC tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another cool idea is that you can use **NFC cards** to store your wireless settings,
    so instead of typing your secure (long) password, you can just put the tag near
    the phone and it will automatically connect to your Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other advantage of this method is that you don''t need to remember the
    password, which enables you to use a super-secure passphrase like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*ds9*e-sd4SDF-#ta+Dua-43v3r00-#D/*#ef#sfM.?$-#iD2#l¡GE.#d-9#a*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in this guide, once you have the right knowledge about your router,
    securing your wireless network is a very easy task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at one of the most famous cybersecurity tools: **Wireshark**.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireshark is one of the best cybersecurity tools used to monitor and secure
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter aims to give you an overview of the tool and the main things that
    you can achieve with it. However, if you want to learn more about Wireshark, look
    at the book *Learn Wireshark* by *Lisa Bock*, also from *Packt*, which has more
    than 400 pages full of knowledge that will help you to become an expert with this
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: The main characteristic of Wireshark is the ability to gather all network traffic
    passing through a given network adapter and *decode* the captured bits into a
    human-readable format. This is achieved by using decoders or dissectors that are
    constantly updated by the community.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark can be installed on any OS, but as you may know, it comes preinstalled
    on **Kali Linux**, so for this example we are going to use the version on Kali,
    which in our case is **3.2.7**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The very first step to start capturing our first packets will be *to select
    the network card that we want to "listen" to*. As shown in the following figure,
    the Wireshark landing page already shows us the available network cards so that
    we can easily select one and start capturing the packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Wireshark''s initial screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Wireshark's initial screen
  prefs: []
  type: TYPE_NORMAL
- en: However, if you have several network cards (interfaces), it could be confusing
    to know which one you need to select.
  prefs: []
  type: TYPE_NORMAL
- en: The trick here is to click on **Interfaces**, which will display a window with
    detailed information about all network interfaces. From there, you can determine
    which is your active interface by looking at the traffic column.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is no activity on the traffic column, then just ping a server, for
    example, `ping` [www.google.com](http://www.google.com), and as shown in the following
    figure, you will start seeing the traffic column move on your active network interface.
    In this case, we can determine that our active network interface is **eth0**,
    so we can click on it and then click on **Start** to begin the capture of packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Active interfaces on Wireshark'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – Active interfaces on Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: OK, now that we started the monitoring, let's see what happens when we open
    a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Most pages have a lot of ads that will make the scan very *noisy*, so in order
    to avoid all the noise, we will open the page of a university for this example.
    Additionally, using a virtual machine with Kali is great because it does not have
    all the network overhead carried on Windows systems (if you run Wireshark on a
    Windows machine, you will see a lot of packets even if you are *supposedly* not
    using the network).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the output of a scan that we performed on a web
    page so that you can become familiar with the outputs of the tool and better understand
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Wireshark scan results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – Wireshark scan results
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by analyzing the outputs from the top of the preceding figure. You
    will see there that the very first packet is your computer asking the DNS server
    for the IP of the web page. Here, for example, you can validate that the request
    is going to the required DNS server – in our case it is going to `8.8.8.8` (Google's
    DNS). If you notice another DNS then you may be in the presence of a DNS attack
    that may reroute your traffic to malicious sites.
  prefs: []
  type: TYPE_NORMAL
- en: Once we obtained the IP from the DNS server, we start to see some exchange of
    basic TCP packets. After that, we receive some HTTP packets (which is basically
    the web page that we requested), and finally, we see some TLS packets, which means
    that the web page is encrypted with an SSL certificate (HTTPS).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can easily sort the results by column by simply clicking on the name of
    the column. For example, you can click on the protocol tab to sort all the packets
    captured by protocol.
  prefs: []
  type: TYPE_NORMAL
- en: OK, now let's review more advanced ways to leverage Wireshark to enhance your
    security.
  prefs: []
  type: TYPE_NORMAL
- en: Finding users using insecure protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you know, users will always find creative ways to bypass your administrative
    and technical controls. In those cases, using a monitoring tool such as Wireshark
    is a great way to find and stop those wrongdoers.
  prefs: []
  type: TYPE_NORMAL
- en: Telnet vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Telnet is an old client/server protocol for machine-to-machine communications.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that it does not offer encryption, therefore ALL communication
    is transmitted as cleartext.
  prefs: []
  type: TYPE_NORMAL
- en: Due to that risk, Telnet (both server and client) is disabled by default on
    most systems including Windows and even Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, due to this risk, *you must ensure that you have all technical and
    administrative controls in place to prevent the use of telnet for server login
    and communications*.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that you can easily detect if someone is using Telnet with
    Wireshark by simply filtering your results by protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing Telnet data in real time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To perform this example, we first need to install the Telnet client on Kali
    Linux with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now that the **Telnet client** is installed, we can connect to a **Telnet server**,
    and for this example we are going to use an open (and funny) Telnet sever.
  prefs: []
  type: TYPE_NORMAL
- en: But wait, didn't you say that Telnet was insecure?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, there are several vulnerabilities in Telnet servers and Telnet communications,
    however installing a Telnet client does not represent a vulnerability on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to Wireshark to set it up to capture all Telnet data, which
    is a super simple task. As you can see in the following figure, you just need
    to type `telnet` in the **filter** bar to see all Telnet connections in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Wireshark filter field'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.18_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.18 – Wireshark filter field
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's navigate to a test Telnet server and create an account to see if
    we can capture it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, just open a Terminal on our Kali Linux and type the following to
    access the Telnet server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And, as shown in the following figure, we are now connected to the **telehack**
    Telnet server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Telnet connection open to the telehack.com server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.19_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.19 – Telnet connection open to the telehack.com server
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go back to Wireshark to see what we have captured.
  prefs: []
  type: TYPE_NORMAL
- en: The results are very interesting and, as highlighted in *Figure 8.20*, we were
    able to capture in plain text all the information that the Telnet server sent
    (which is the same information that we saw on the command line of *Figure 8.19*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Capture of Telnet packets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.20_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.20 – Capture of Telnet packets
  prefs: []
  type: TYPE_NORMAL
- en: So, we have proved that Telnet communications are not secure and can easily
    be captured. Now, let's see if we can also capture some login details.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve that, let's create an account by using the `login` command. Then
    the system will ask for our username and we need to reply `Y` to confirm the creation
    of a new account (see *Figure 8.21*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Creation of an account on a Telnet server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.21_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.21 – Creation of an account on a Telnet server
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as shown in the following figure, the system will ask for a password,
    so let''s enter a random password and hit *Enter* to finish the creation of the
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22 – Password setup over Telnet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.22_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.22 – Password setup over Telnet
  prefs: []
  type: TYPE_NORMAL
- en: OK, now, let's go back again to Wireshark and see if it captured the password
    that we just created on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may notice that there are too many packets, and in some cases, it looks
    like there is one packet per letter. But no worries – to make our lives easier,
    Wireshark has an option called **TCP stream** that presents all data in a very
    user-friendly way. To access that option, just right-click on one of the packets
    and select **Follow | TCP Stream** (as shown in the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23 – TCP Stream option in Wireshark'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.23_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.23 – TCP Stream option in Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: Now Wireshark will present us a window like in *Figure 8.24*, showing all the
    communication between the client and the server. We can effectively see the password
    in *cleartext*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Password captured in plain text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.24_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.24 – Password captured in plain text
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs: []
  type: TYPE_NORMAL
- en: Try to do the same exercise but over an SSH connection. In that case, you will
    notice that all packets with data will be encrypted, so the information will be
    secure.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving to the next section, let's have a breakand show you how you can
    leverage the **Telnet client** that you just installed to have some fun (and maybe
    impress some friends).
  prefs: []
  type: TYPE_NORMAL
- en: Bonus (having fun with Telnet)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a lot of Telnet servers out there with funny information for you
    to explore (without risk). There are three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Muds**: Old-school games'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bulletin Board Systems** (**BBSes**): An old system to share information
    (Facebook''s prehistoric ancestor?)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Talkers**: Servers configured to *talk* about a given topic such as telling
    jokes (chatbot''s lost grandpa)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, here is a compilation for you to have fun connecting to them (*Just keep
    in mind that everything you type can be captured, so if you create a user, use
    a dummy password*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Star Wars ASCII animation (in case Netflix is down)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 8.25 – The Star Wars movie over telnet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.25_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.25 – The Star Wars movie over telnet
  prefs: []
  type: TYPE_NORMAL
- en: '**NASA JPL HORIZONS Solar System data**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Weather via telnet**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Telehack** **(the one we used in the preceding example, which is considered
    an internet museum)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Achaea, Dreams of Devine Land (Game)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Free chess game**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following figure shows a really cool, retro way to play chess… Cool!!!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.26 – Telnet chess game'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.26_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.26 – Telnet chess game
  prefs: []
  type: TYPE_NORMAL
- en: OK, enough games for today, now let's go back to keep learning about other insecure
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: FTP, HTTP, and other unencrypted traffic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Telnet is not the only insecure protocol – other unencrypted protocols such
    as FTP and HTTP also send unencrypted data that can be easily captured.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following figure, the username and password are clearly sent
    over plaintext when logging in to an FTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.26 – Telnet chess game'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.27_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.27 – FTP username and password captured in plaintext
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, make sure you promote the use of more secure protocols such as **Secure
    FTP** (**SFTP**) and **Secure HTTP** (**HTTPS**) across your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark for defensive security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you know the basics of Wireshark, let's see how you can leverage Wireshark
    in your defensive security role.
  prefs: []
  type: TYPE_NORMAL
- en: Awareness campaigns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you just witnessed, the previous examples are a very good way to show to
    users and systems administrators *the dangers of not following the policies and
    using insecure channels to transmit sensitive information* (such as usernames
    and passwords).
  prefs: []
  type: TYPE_NORMAL
- en: Doing this kind of demonstration live to the employees of your company as part
    of events such as the annual cybersecurity week will help you to reduce a lot
    of risks and also to transform those users from security adversaries to security
    promoters.
  prefs: []
  type: TYPE_NORMAL
- en: Another means of delivery could be by making videos of the preceding demos and
    distributing them to your teams as part of the annual cybersecurity mandatory
    training that your employees *must* complete.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced network audits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wireshark enables you to perform a deep analysis of the network to help you
    achieve the following objectives:'
  prefs: []
  type: TYPE_NORMAL
- en: Compliance audits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal security audits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network risk assessments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware traffic analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification of data exfiltration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network-hardening analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those tasks can be performed either by an internal cybersecurity professional
    or by a service provider (either a third-party company or an external cybersecurity
    professional).
  prefs: []
  type: TYPE_NORMAL
- en: Consulting work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wireshark is a great tool that can be used by independent consults to provide
    data-driven advice to companies to improve the security of their data, systems,
    and networks.
  prefs: []
  type: TYPE_NORMAL
- en: Network troubleshooting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While you may not be directly in charge of doing the troubleshooting, it is
    important for you to know that in many cases, network specialists will use Wireshark
    to troubleshoot network issues such as latency, availability, and stability.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is not an **intrusion detection system** (**IDS**), meaning it will
    not give you an alert when an intruder accesses your network, but it is a great
    tool to investigate further if an intrusion was detected.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry, in the next section we will cover the basics about **Intrusion
    Detection Systems** (**IDSes**) and **Intrusion Prevention Systems** (**IPSes**)
    and even look at a comparison between them.
  prefs: []
  type: TYPE_NORMAL
- en: Working with IPS/IDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explain what an **IDS** and an **IPS** are, provide
    some examples of these systems, and also consider the differences between these
    two similar technologies.
  prefs: []
  type: TYPE_NORMAL
- en: What is an IDS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **IDS** is a passive monitoring solution that detects unwanted intrusions
    in our networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the intrusion is detected, the IDS will send an alert to a security analyst
    for further investigation and action (as shown in the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28 – IDS representation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.28_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.28 – IDS representation
  prefs: []
  type: TYPE_NORMAL
- en: In terms of deployment, an IDS can be deployed at the host level (HIDS) or network
    level (NIDS).
  prefs: []
  type: TYPE_NORMAL
- en: There are two main IDS engines, one that is based on signatures (examples are
    classic antiviruses that use a database of signature to detect malicious software),
    and one that is anomaly-based, which detects intrusions based on deviations from
    established patterns. In this latter category, there are also systems that leverage
    cognitive computing to enhance the recognition and identification of these patterns.
  prefs: []
  type: TYPE_NORMAL
- en: What is an IPS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **IPS** is an active system that prevents access to your network by unauthorized
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'As represented in the following figure, an IPS will automatically block any
    traffic that may be considered a threat to your network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.29 – IPS representation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.29_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.29 – IPS representation
  prefs: []
  type: TYPE_NORMAL
- en: In terms of deployment and the backend (engine) of an IPS, these are very similar
    to the ones mentioned for IDS.
  prefs: []
  type: TYPE_NORMAL
- en: Free IDS/IPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no excuse for not having an IDS/IPS – in fact, here are some free IDS/IPS
    that you can implement in your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Snort
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Probably the most famous IPS/IDS, Snort's engine is mostly signature based.
    The system comes with a base set of policies, but you can expand this by creating
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: You can also integrate Snort with Wireshark to provide alerting capabilities
    to Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: Snort is available on Windows, Fedora, CentOS, FreeBSD, and Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, visit [https://www.snort.org/](https://www.snort.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Security Onion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a Linux distribution that includes an IPS and IDS engine and uses OSSEC
    for host-based IDS/IPS and Snort and Suricata for network-based IDS/IPS.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, visit their GitHub repo at [https://github.com/Security-Onion-Solutions/security-onion](https://github.com/Security-Onion-Solutions/security-onion).
  prefs: []
  type: TYPE_NORMAL
- en: IPS versus IDS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following figure highlights the main differences between an IPS and IDS,
    as well as some of the features they have in common:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.30 – Differences between IDS and IPS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.30_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.30 – Differences between IDS and IPS
  prefs: []
  type: TYPE_NORMAL
- en: Most experts agree that each system complements the other, so the best implementation
    is to deploy them in parallel to enhance the security of your network.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by reviewing the *different phases of a cyber attack*.
    Then we learned *how to use Nmap to check for vulnerabilities* in our infrastructure
    and make the scanning phase of an attack harder for an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Then we reviewed the *most common Wi-Fi vulnerabilities* and how to address
    them. Additionally, we also learned *how to create a Wi-Fi user security guide*
    to reduce risks when using a wireless network. This is a great asset that you
    can leverage to support your *network security strategy* and educate users.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we moved to a more technical topic and learned *how to use Wireshark*
    to find vulnerabilities and even did a couple of labs to see in real time *how
    attackers can capture your data* (including passwords) when you use insecure protocols.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, we closed this journey through network security by doing an *overview
    of IDS and IPS*, what they are, some examples of them, and a comparison between
    them for you to better understand the differences between these two technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Now, get ready, because in the next chapter we are going to learn *all you need
    to know about physical security*, its associated threats, and how to master the
    defensive techniques (tools, systems, and methods) to protect against those threats.
  prefs: []
  type: TYPE_NORMAL
