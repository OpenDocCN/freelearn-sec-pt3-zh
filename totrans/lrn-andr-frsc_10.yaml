- en: Android Malware Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will perform dynamic and static analysis of the malicious
    Android application we identified in the previous chapter. We will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic analysis of malicious Android applications using an online sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Static analysis of malicious Android applications:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unpacking Android applications
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Manifest file decoding and analysis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Android application decompilation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing and analyzing decompiled code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic analysis of malicious Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to perform a malicious Android application analysis is to run
    it in a controlled environment. You already know how to run an emulator and install
    applications via ADB, so you may install a suspicious application in a clean virtual
    system and see what artefacts are left after you run it. For example, you can
    find SQLite databases with data collected by a malicious application or its configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic analysis using an online sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An easier and more efficient approach is to use pre-built sandboxes for malware
    analysis. One of these sandboxes is **Joe Sandbox**. It supports automated dynamic
    analysis of different types of applications, including Windows, macOS, Linux,
    iOS, and of course Android. You can register for a free account and enable 10
    free analyses per month. The sandbox for Android applications can be accessed
    here: [https://www.joesandbox.com/#android](https://www.joesandbox.com/#android).
  prefs: []
  type: TYPE_NORMAL
- en: 'Only a few simple steps are required to run an application in the sandbox:'
  prefs: []
  type: TYPE_NORMAL
- en: First, choose the file you want to analyze using the **Choose file...** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the run time; you can run the application in the sandbox from 30 to 500
    seconds
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the terms and conditions, and click the **Analyze** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the analysis is complete, you will receive an email with a link to the
    analysis results. In our case, it was [https://www.joesandbox.com/analysis/67297](https://www.joesandbox.com/analysis/67297).
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through the HTML report and discuss its most important parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Joe Sandbox has its own detection mechanism based on automated analysis results.
    In our case, the sample got 72 points out of 100 and is classified as **malicious**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbf2309a-e01f-4775-9546-831da8f9e609.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It also uses antivirus engines and VirusTotal to scan the uploaded sample.
    According to the report, our sample is detected as **ANDROID/Spy.Banker.YD.G****en**
    by Avira, and is also detected by 51% of antivirus engines on VirusTotal, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34cca771-b32a-416e-bb88-529e0c8195f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'According to the next section, our sample attempted to escalate its privileges,
    requesting root rights via running a `su` command, and then tried to add a new
    device administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa67ca66-b0b9-48be-928b-3900dc65b2ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the Networking section. It seems our sample attempted to download
    a new APK file, `new.apk`, from `www.poog.co.kr`, but failed to do so as the file
    was unavailable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2839e5a-fa85-46c4-9bcc-417152493612.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another interesting section is E-Banking Fraud. Our sample contains package
    name strings related to banking; they may be used for the detection of banking
    applications installed on the device. Also, it is able to add an overlay to other
    applications, and has permission to list currently running applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d22aa7a5-13c5-4320-b096-6d66a389381c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next section shows that the analyzed application requested permissions
    to perform phone calls in the background, send SMS, and write to SMS storage.
    Also, it''s able to send SMS using SmsManager and end incoming calls; this is
    typical for banking Trojans:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/091aec59-9b21-40a3-8df4-df0f5cc8e5ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **System Summary** section shows us a list of potentially dangerous permissions
    our sample requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90f68fdd-9266-4eda-8450-b340718b2096.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at each of them closely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CALL_PHONE`: Allows an application to initiate phone calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET_TASKS`: Allows an application to collect information about currently running
    applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INTERNET`: Allows an application to open network sockets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`READ_CONTACTS`: Allows an application to read contacts data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`READ_PHONE_STATE`: Allows an application to access phone state in read-only
    mode, including phone number and cellular network information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`READ_SMS`: Allows an application to read SMS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RECEIVE_SMS`: Allows an application to receive SMS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SEND_SMS`: Allows an application to send SMS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYSTEM_ALERT_WINDOW`: Allows an application to create windows shown on top
    of all other applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WAKE_LOCK`: Allows an application to keep the processor from sleeping or the
    screen from dimming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WRITE_CONTACTS`: Allows an application to write contact data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WRITE_EXTERNAL_STORAGE`: Allows an application to write to external storage,
    for example, an SD card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WRITE_SETTINGS`: Allows an application to read or write the system settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WRITE_SMS`: Allows an application to write SMS stored on the phone or its
    SIM card, or delete them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We already know that our sample attempted to download an APK file. If we look
    at the **Persistence and Installation Behavior** section, we see that it is able
    not only to download applications, but also to install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6134b9cd-9fec-457a-a252-d0ff347b4c2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To survive reboots, the sample requested permission to execute the code after
    the phone is rebooted (`RECEIVE_BOOT_COMPLETED`), created a new wake lock to have
    the device stay on, and was able to start a service for autostart purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e73758e9-8e69-4c5c-915e-617faa45ce61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s dive into the **Hooking and other Techniques for Hiding and Protection**
    section. The sample is able to abort broadcast events; it helps malicious application
    to hide phone events, such as incoming SMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3c4ec4c-da51-43b5-8fd9-96bec706711e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another interesting piece of information here is that our sample requested
    permission to terminate background processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a710d47-1900-496d-909e-06c495f6aad8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Language, Device and Operating System Detection** section shows that
    the sample collects information about the SIM provider country code, service provider
    name, mobile country code, mobile network code, WiFi MAC address, voicemail number,
    operating system version, and unique device IDs, such as **International Mobile
    Equipment Identity** (**IMEI**), **M****obile Equipment IDentifier** (**MEID**), and
    **Electronic Serial Number** (**ESN**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5fde6bf-7902-4979-9396-ffc343433342.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the unique device IDs collected by the sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e75da8f1-a373-4402-94a3-5643434470b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next section shows that the application monitors outgoing phone calls,
    is able to create SMS data, and checks whether a SIM card is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbd61e43-0831-4a63-b56b-7f90fd1bf50b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What is more, it monitors incoming phone calls and reads originating phone
    numbers, parses SMS (body and originating number), and queries the list of installed
    applications and packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/996fa3ea-66cb-47a1-acbd-fa5815b40fa5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, if we look at the **URLs** subsection of the **Antivirus Detection**
    section, we see that the APK file that our sample attempted to download was detected
    as malicious by Avira URL Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c6ba1c3-8db3-4960-bfee-f05398b0cb44.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed that there are more URLs in the previous screenshot; these
    are potentially malware command and control servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, let''s gather together the pieces of information we got from the
    dynamic analysis of our sample with **Joe Sandbox**:'
  prefs: []
  type: TYPE_NORMAL
- en: Based on antivirus detection and the artefacts we have uncovered, the piece
    of malware we analyzed is a banking Trojan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's able to download additional pieces of malware from `www.poog.co.kr`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It collects information about banking-related applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is able to add an overlay to other applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is able to monitor incoming and outgoing calls, read and write SMS messages,
    and intercept them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is able to terminate the processes of other applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's able to collect information about the device it's running on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requests permission to execute the code after the phone is rebooted for persistence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It potentially uses `http://rtrjkrykki.iego.net/appHome/` or `http://192.151.226.138:80/appHome/`
    as a command and control server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next sections will walk you through the steps required to perform static
    analysis of Android malicious applications.
  prefs: []
  type: TYPE_NORMAL
- en: Static analysis of malicious Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform dynamic analysis of the previously identified malicious Android application,
    we ran it in a controlled environment with the help of Joe Sandbox. In contrast
    to dynamic analysis, static analysis allows an examiner to understand malware
    behavior without actually running it. Let's start the static analysis of our malware
    sample, beginning with unpacking it.
  prefs: []
  type: TYPE_NORMAL
- en: Unpacking Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To view the contents of an APK file, you can use any archiver. A good example
    is 7-Zip, a free and open source archiver, which is available here: [https://www.7-zip.org/download.html](https://www.7-zip.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To unpack an APK file, right-click on it, choose **7-Zip**, and then **Open
    archive**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1e0d50c-c566-49bd-be70-b483be267b05.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of an APK file
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can browse the contents of the APK file and export its parts for further
    analysis. In the next section, we will focus on the Android manifest file: `AndroidManifest.xml`.'
  prefs: []
  type: TYPE_NORMAL
- en: Manifest file decoding and analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The manifest file describes essential information about an application to the
    Android build tools, the Android operating system, and Google Play. If you open
    such a file in a text editor, you will see that most of the data is encoded and
    can't normally be viewed.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to analyze its contents, we need to use an Android binary XML decoder.
    One such decoder is `axmldec`, which is available for download here: [https://github.com/ytsutano/axmldec/releases](https://github.com/ytsutano/axmldec/releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'To decode the extracted manifest file, run `axmldec` from the Command Prompt
    with the following argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output file can be easily viewed with a text editor of your choice. The
    file contains lots of useful pieces of information. For example, we can get the
    package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we can get information about the main activity. It is the first screen
    to appear when the user launches the application. Each activity can then start
    another activity in order to perform different actions. In our case, the main
    activity is `com.cc.MainActinn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There is another activity – `com.cc.WebInterfaceActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This activity has a number of **broadcast receivers**. Broadcast receivers allow
    applications to receive **intents** that are broadcast by the system or by other
    applications. An intent is a message defined by an intent object that describes
    an action to perform. When an application issues an intent to the system, the
    system locates an application component that can handle the intent, based on the
    intent filter declarations in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start from `com.cc.MyAdminReceiver`, which is used for gaining device
    admin privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next broadcast receiver is `com.cc.BootRt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it receives the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the device finished its booting process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the device is shutting down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the user is present after the device wakes up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another broadcast receiver is `com.cc.A123`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It receives the following information/performs the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: If the device finished its booting process the phone state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it starts a new outgoing call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's connected to a power source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's disconnected from a power source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the timezone changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the time was set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the time has changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a user ID has been removed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the device has entered USB Mass Storage mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the device has exited USB Mass Storage mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a new application package has been installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an existing application package has been changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user has cleared the data of a package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an application is first launched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an application has been completely removed from the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an application has been downloaded and installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a package needs to be verified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a new version of an application package has been installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an application has been fully or only partially uninstalled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user has restarted a package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a new version of a current application has been installed over an existing
    one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media is present but cannot be mounted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If package management should be started due to a low-memory condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media was removed from a SD card slot, but the mount point was not
    unmounted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the **Media Button** was pressed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media is present and being disk checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user has expressed the desire to remove the external storage media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media is present and mounted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media is present, but is using an incompatible filesystem or is
    blank
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media has been removed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the media scanner has finished scanning a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requests the media scanner scans a file and adds it to the media database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the media scanner has started scanning a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If external media is unmounted because it is being shared via USB Mass Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current device's locale has changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an input method has been changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a wired headset has been plugged in or unplugged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a GTalk connection has been disconnected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a GTalk connection has been established
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the resources for a set of packages are currently unavailable since the media
    on which they exist is unavailable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the resources for a set of packages are currently available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are changes in the physical docking state of the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a low storage space condition on the device no longer exists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is a low storage space condition on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the date has changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a user action should request a temporary system dialog to dismiss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Camera Button was pressed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the battery is now okay after being low
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the device has been in a low battery condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charging state, level, and other information about the battery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user has switched the phone into or out of Airplane Mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a provider's data has changed, for example, the number of unread emails changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the device is shutting down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user is present after the device wakes up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current system wallpaper has changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Wi-Fi is enabled, disabled, enabling, disabling, or unknown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls the `su` binary to get root access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a change in network connectivity has occurred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a new text-based SMS message has been received by the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, we have information about three services in our malicious application''s
    manifest file, `com.cc.service.Int`, `com.cc.service.Ir`, and `com.cc.service.Hearttttt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Unlike activities, services do not have a visual user interface. If you look
    at their intent filters, you will notice that each service receives a broadcast
    once the device finishes its booting process, so it can be started automatically
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last section of the manifest file contains the permissions the application
    uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have already discussed permissions in the dynamic analysis section, so we
    won't cover them here again. Let's dive even deeper and start working on code
    decompilation.
  prefs: []
  type: TYPE_NORMAL
- en: Android application decompilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this step, we will need another file from the APK file: `classes.dex`. To
    convert `.dex` (Dalvik Executable) to `.class` files in a `.jar` container, we
    need to perform decompilation. We can use `dex2jar` to solve this task, which
    is available here: [https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar).
  prefs: []
  type: TYPE_NORMAL
- en: 'To decompile `classes.dex`, run `d2j-dex2jar.bat` from the Command Prompt with
    the following argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is it. Now, we have a `classes.jar` file that contains all of the Java
    classes from `classes.dex`. We will view and analyze this `.jar` file in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and analyzing decompiled code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can view and analyze the data we unpacked and decompiled in the previous
    steps. We can use JD-GUI to do this. JD-GUI is a free utility that is able to
    display the Java source codes of `.class` files. You can download this tool here: [http://jd.benow.ca/](http://jd.benow.ca/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the contents of `classes.jar` displayed by JD-GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/504e6253-9391-429b-87f0-6129b4f22693.png)'
  prefs: []
  type: TYPE_IMG
- en: The contents of classes.jar
  prefs: []
  type: TYPE_NORMAL
- en: 'We already know a lot about our banking Trojan; let''s try to learn something
    new from code analysis. We identified two suspicious URLs as the result of dynamic
    analysis, `rtrjkrykki.iego.net/appHome/` and `192.151.226.138:80/appHome/`. Most
    likely this is the same server, so let''s try to find at least one of the URLs
    in the code using JD-GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed826477-6013-4b1e-b39f-2707e9306fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Searching for URL with JD-GUI
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now we know that the URL is found in `ConstantDatas.class`. Let''s look
    inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a3c4026-7f41-4089-b19f-e8eccb3cc532.png)'
  prefs: []
  type: TYPE_IMG
- en: A part of the ConstantDatas.class contents
  prefs: []
  type: TYPE_NORMAL
- en: 'If we search for `BANKURL`, we will find that it''s used in `MainActinn.class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e572e059-3d73-479e-a273-32b876ea4ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: A part of the MainActinn.class contents
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following line: `"ConstantDatas.URL = ConstantDatas.BANKURL;"`.
    Let''s search for `ConstantDatas.URL` now. We''ll find a good hit in `Hearttttt.class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/405dcae8-8b94-4553-be09-828ff7329e88.png)'
  prefs: []
  type: TYPE_IMG
- en: A part of the Hearttttt.class contents
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see that the application collects information about the device
    it's installed on and its operating system, installed banking applications, mobile
    country code and mobile network code, unique subscriber ID, and so on, and posts
    this data in JSON format to `192.151.226.138:80/appHome/servlet/OnLine`.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you can get a lot of additional information from static code
    analysis; sometimes it's relatively easy, sometimes it's not, as a malware sample
    can be highly obfuscated.
  prefs: []
  type: TYPE_NORMAL
- en: To analyze code with a higher rate of success, we highly recommend you start
    learning Android programming. Refer to the books provided in the *Further reading*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced you to dynamic and static analysis of malicious Android
    applications. You've learned how to use an online sandbox to perform dynamic analysis,
    unpack an Android application, analyze its manifest file, and decompile its code.
    Finally, you've been introduced to the concepts of decompiled code analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following references:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Documentation for app developers*: [https://developer.android.com/docs/](https://developer.android.com/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*John Horton, Android Programming for Beginners - Second Edition*: [https://www.packtpub.com/application-development/android-programming-beginners-second-edition](https://www.packtpub.com/application-development/android-programming-beginners-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
