- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Intrusion Detection System (IDS) Using Wazuh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations of all sizes are increasingly concerned about protecting their
    digital landscape. With technology growing and digital systems becoming more important,
    cyber threats are escalating rapidly. Organizations must take a proactive approach
    toward cybersecurity and deploy mechanisms and appropriate visibility controls
    that not only prevent but also detect threats or intrusions. The main goal of
    prevention techniques is to keep threats from getting into a network or system.
    Like deploying perimeter security solutions such as firewalls, **intrusion prevention
    system** (**IPS**) infrastructure, visibility and control, and, most importantly,
    endpoint protection and insider threats. They intend to put up barriers that make
    it impossible for bad people to get in or execute any cyber-attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Detection techniques, along with preventive measures, involve keeping an eye
    on systems all the time for any signs of compromise or strange behavior and taking
    the required steps to mitigate the execution of reported malicious activity/behavior.
    One of the popular tools for this purpose is an **intrusion detection system**
    (**IDS**). Wazuh can help organizations detect potential threats or ongoing attacks,
    and an IDS also allows a security team to enable the early detection of possible
    breaches or suspicious activity, and, as a result, the security team can quickly
    respond to mitigate potential damage. Wazuh is a popular IDS result, which works
    on various levels including host-level visibility along with the capability to
    collect, aggregate, index, and analyze logs from various sources at a perimeter
    and infrastructure level; it also offers end-user activity monitoring solutions
    and protection. It provides a ton of features, including log collection. In addition
    to log collection, it has various inbuilt modules including vulnerability management,
    file integrity, malware detection, automated incident response, and various external
    integrations. Another open source popular IDS/IPS solution is **Suricata**, which
    works on a network level that helps the security team detect anomalous network
    behavior. In this book, we get hands-on with Wazuh capabilities and features,
    however, in this chapter, our focus will be on integrating Suricata IDS/IPS with
    Wazuh. This will help us detect any network anomalous behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is an IDS?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an IDS on Ubuntu and Windows Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Wazuh and Suricata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting network scanning probes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing web-based attacks with **Damn Vulnerable Web** **Application** (**DVWA**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a **network-based IDS** (**NIDS**) using **tmNIDS**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an IDS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An IDS works by monitoring network traffic, system logs, and other relevant
    information to identify and analyze patterns and signatures associated with known
    threats or abnormal behavior. The primary goal of an IDS is to detect and alert
    security administrators about potential threats or breaches. When an IDS identifies
    suspicious behavior or patterns, it generates an alert, notifying the security
    team to take appropriate action.
  prefs: []
  type: TYPE_NORMAL
- en: Types of IDS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two main types of IDS: NIDS and **host-based IDS** (**HIDS**). The
    main difference between a NIDS and a HIDS is the monitoring scope and types of
    activities they detect. Have a look at the following table to look at the differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **NIDS** | **HIDS** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Scope | It works at the network level, monitoring the data going to and from
    different devices to look for abnormal behaviors or events that might indicate
    an intrusion. | It is installed directly on the host’s and monitor’s log files,
    system calls, file integrity, and other host-specific files for any unusual activities.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Location | Functions at one or more central places in a network’s infrastructure
    to monitor and analyze traffic going through those points. | Operates locally
    on individual hosts or devices, keeping an eye on actions that are unique to that
    machine. |'
  prefs: []
  type: TYPE_TB
- en: '| Detection focus | A NIDS detects network attacks and anomalies. It can detect
    port scans, DoS attacks, intrusion attempts, and other network infrastructure
    threats. | A HIDS monitors host activity. It detects unauthorized access, file
    system changes, critical system file modifications, and suspicious processes or
    behaviors that may indicate a compromised host. |'
  prefs: []
  type: TYPE_TB
- en: '| Popular tools | Suricata, Snort | Wazuh, OSSEC |'
  prefs: []
  type: TYPE_TB
- en: Table 1.1 – NIDS versus HIDS
  prefs: []
  type: TYPE_NORMAL
- en: In the following diagram, you can see that a NIDS is installed to monitor network
    traffic while an HIDS monitors individual devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – NIDS versus HIDS](img/B19549_1_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – NIDS versus HIDS
  prefs: []
  type: TYPE_NORMAL
- en: What is Suricata?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Suricata** is an open-source network **intrusion detection and prevention
    system** (**IDS/IPS**). It is intended to monitor network traffic and detect a
    variety of threats, including malware, intrusion attempts, and network anomalies.
    Using a rule-based language, Suricata analyzes network packets in real time, allowing
    it to identify and respond to suspicious or malicious activities. The non-profit
    organization **OISF** (**Open Information Security Foundation**) owns and develops
    Suricata.'
  prefs: []
  type: TYPE_NORMAL
- en: Suricata can also be deployed as an IPS in order to detect and block malicious
    traffic to the organization. Although IPS deployment might sound like the obvious
    option, unfortunately, it isn’t that friendly; it often blocks legitimate traffic
    as well if they aren’t configured properly. And yes, this is why the detection
    approach is sometimes better than the prevention approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download Suricata from the following link: [https://suricata.io/download/](https://suricata.io/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple use cases of Suricata IDS; some of the important use cases
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network traffic monitoring**: Suricata analyzes real-time network traffic
    for threats and anomalies. Organizations need to smartly deploy Suricata at various
    points in the network to analyze both incoming and outgoing traffic. This use
    case can help us detect malware, **Distributed Denial of Service** (**DDoS**)
    attacks, port scans, reconnaissance data exfiltration, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signature and anomaly detection**: Suricata detects known attack patterns
    or signatures by checking network traffic against a library of rules and patterns
    that have already been set up. In this chapter, we will use the Suricata ruleset
    created by the **Emerging Threats** (**ET**) community. This ruleset can help
    us detect known malware, viruses, web-based attacks (SQL Injection, cross-site
    scripting attacks, etc.), known network attack signatures, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol analysis**: Suricata can deeply examine many different network technologies,
    such as HTTP, DNS, and TLS. This helps us to discover anomalous behaviors of protocols,
    such as unusual HTTP requests, DNS tunneling, and unexpected SSL/TLS handshakes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging and alerting**: Suricata keeps logs and sends out alerts when it
    detects possible threats. These alerts can be used to get security teams to act
    right away, or they can be added to **security information and event management**
    (**SIEM**) systems so that they can be analyzed further and linked to other security
    events. Wazuh, Splunk, Elastic, and all the popular SIEM solutions support integration
    with the Suricata IDS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s learn about the deployment methods of the Suricata IDS.
  prefs: []
  type: TYPE_NORMAL
- en: How organizations use Suricata as an IDS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to deploy the Suricata IDS and some of the important
    and popular deployment methods are explained in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inline deployment at network perimeter**: Suricata sits between the external
    internet connection and the internal network, actively monitoring and scrutinizing
    network traffic in real time. It can be deployed as a physical appliance or as
    a **virtual machine** (**VM**). The network traffic passes through Suricata, which
    analyzes the packets and acts based on the criteria that have been defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Inline deployment at network perimeter](img/B19549_1_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Inline deployment at network perimeter
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal network monitoring**: Suricata sensors are strategically located
    within the internal network in order to capture network traffic between segments
    or departments. These sensors could be physical or virtual devices. They analyze
    the captured traffic and transmit alerts or records to a centralized management
    system for additional analysis and response. As you can see in the following diagram,
    the sensors will export the data to a centralized server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Internal network monitoring](img/B19549_1_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Internal network monitoring
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud environment monitoring**: Suricata can be deployed as virtual appliances
    or containers in AWS and Azure cloud environments. It is installed within the
    cloud infrastructure and monitors network traffic within virtual networks and
    between cloud resources. The captured traffic is transmitted to a central analysis
    system for response detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Cloud security monitoring (AWS)](img/B19549_1_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Cloud security monitoring (AWS)
  prefs: []
  type: TYPE_NORMAL
- en: '**Network tap deployment**: Suricata is used in conjunction with **network
    taps** or **port mirroring**. Taps are strategically located at key network nodes
    to capture a copy of network traffic, which is then sent to Suricata for analysis.
    This deployment ensures accurate and comprehensive network activity visibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Network tap deployment](img/B19549_1_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Network tap deployment
  prefs: []
  type: TYPE_NORMAL
- en: We have learned about the different Suricata deployment methods. In the next
    section, we will learn about Wazuh, its core components and deployment methods,
    and then we will learn how to install Suricata IDS on Ubuntu Server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Wazuh and Suricata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wazuh is an open-source security monitoring platform that provides **extended
    detection and response** (**XDR**) and SIEM functionality. Wazuh’s capabilities
    include log analysis, intrusion detection, vulnerability detection, and real-time
    alerting, helping organizations enhance their security posture and respond to
    threats effectively. In this section, we will first get a basic understanding
    of the Wazuh platform and its core components and deployment methods, and then
    we will set up the Wazuh agent and connect with the Wazuh platform. Next, we will
    set up a Suricata IDS and integrate it with the Wazuh agent. Some of the main
    points we will explore are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Core components of Wazuh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh deployment options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh core features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wazuh administration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Wazuh server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Wazuh agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Suricata on Ubuntu Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Windows Server with Suricata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core components of Wazuh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wazuh provides a centralized platform for monitoring and managing security
    events across the organization’s IT infrastructure. Wazuh collects, analyzes,
    and connects log data from different sources, such as endpoints, network devices,
    firewalls, proxy servers, and cloud instances. Once the logs are collected, Wazuh
    provides several capabilities to the security team such as file integrity monitoring,
    malware detection, vulnerability detection, command monitoring, system inventory,
    threat hunting, security configuration assessment, and incident response. The
    Wazuh solution is made up of three main parts: the Wazuh server, the Wazuh indexer,
    and the Wazuh dashboard. The Wazuh agent is installed on the endpoints that need
    to be monitored.'
  prefs: []
  type: TYPE_NORMAL
- en: The Wazuh server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This central component is also used to manage the agents and analyze the data
    received from them:'
  prefs: []
  type: TYPE_NORMAL
- en: It collects logs from several sources such as hosts, network devices, firewalls,
    proxy servers, and syslog servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normalizes and standardizes collected logs and events into a uniform format
    for analysis and correlation. It utilizes the Wazuh decoder to parse logs to display
    the logs in a uniform format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Wazuh server is capable of integrating logs from several data sources such
    as syslog, Windows event logs, Windows Sysmon, Docker logs, Palo Alto firewall
    logs, and Check Point firewall logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Wazuh server also provides an API for interaction, allowing remote servers
    or systems to interact and query, for example, the number of active Wazuh agents,
    vulnerability information, Wazuh rule verification, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Wazuh indexer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is responsible for indexing and storing alerts generated by the Wazuh server:'
  prefs: []
  type: TYPE_NORMAL
- en: The Wazuh indexer stores alerts sent by the Wazuh server and acts as a primary
    repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s made to handle a lot of security alerts, making sure that storage and indexing
    work well as the system grows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Indexing is the process of arranging and arranging data to enable effective
    and quick retrieval. It involves creating a data structure called an **index**.
  prefs: []
  type: TYPE_NORMAL
- en: The Wazuh indexer provides robust search features that make it possible to quickly
    and thoroughly search through saved alerts using particular criteria or patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Wazuh indexer uses four index patterns to store the data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wazuh-alerts-*`: This is the index pattern for alerts generated by the Wazuh
    server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wazuharchives-*`: This is the index pattern for all events sent to the Wazuh
    server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wazuh-monitoring-*`: This pattern is for monitoring the status of Wazuh agents'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wazuh-statistics-*`: This is used for statistical information about the Wazuh
    server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Wazuh dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Wazuh dashboard is a web interface that allows you to perform visualization
    and analysis. It also allows you to create rules, monitor events, monitor regulatory
    compliances (such as PCI DSS, GDPR, CIS, HIPPA, and NIST 800-53), detect vulnerable
    applications, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Wazuh agents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wazuh agents are installed on endpoints such as servers, desktops, laptops,
    cloud compute instances, or VMs. Wazuh utilizes the OSSEC HIDS module to collect
    all the endpoint events.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC is a popular and open-source **host-based IDS** (**HIDS**). It is a powerful
    correlation and analysis module that integrates log analysis, file integrity monitoring,
    Windows registry monitoring, centralized policy enforcement, rootkit detection,
    real-time alerting, and active response. It can be installed on most **operating
    systems** (**OSs**) such as Linux, OpenBSD, FreeBSD, MacOS and Windows.Wazuh deployment
    options
  prefs: []
  type: TYPE_NORMAL
- en: 'Wazuh is known for its ability to fully monitor security and detect threats.
    It also has several flexible deployment options. Depending on your requirement,
    you can deploy Wazuh in an on-premises server, cloud, Docker container, Kubernetes,
    or another environment. For a production environment, Wazuh core components (i.e.,
    the Wazuh server, the Wazuh indexer, and the Wazuh dashboard) should be installed
    in cluster mode. Cluster mode deployment involves setting up more than one Wazuh
    server node to work collectively. By spreading the work and duties among several
    nodes in the cluster, this configuration aims to improve speed, scalability, and
    resilience. Let’s cover some important deployment options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Servers**: Putting Wazuh on dedicated servers gives you more power and lets
    you make changes that work with your system. You can utilize on-premises servers
    or cloud instances. Remember, you need multiple server instances to deploy Wazuh
    in cluster mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VM image**: Wazuh gives you an **Open Virtual Appliance** (**OVA**) formatted
    VM image that is already set up. This can be imported straight into VirtualBox
    or any other virtualization software that works with OVA files. This is good for
    a lab purpose only. You can use this deployment option to test all the scenarios
    mentioned in this book. Download the OVA file from here: [https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html](https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker container**: Docker is an open platform for building and running applications
    inside an isolated software container. Docker containers are the best way to quickly
    and easily set up Wazuh components in independent environments. This option is
    commonly used for testing, development, or situations where setup and takedown
    need to be done quickly. You can download the Docker image from the link here:
    [https://hub.docker.com/u/wazuh](https://hub.docker.com/u/wazuh).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment on Kubernetes**: Kubernetes is an open-source container orchestration
    platform. You can opt for this method when managing large-scale deployment with
    multiple containers. This method gives you higher scalability, automated deployment,
    and resource optimization. You can check out the Wazuh Kubernetes repository at
    the following link: [https://github.com/wazuh/wazuh-kubernetes](https://github.com/wazuh/wazuh-kubernetes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to test all the use cases throughout the book, I suggest you use
    the Wazuh VM deployment option by downloading the OVA file; however, for the production-level
    deployment, you can choose any of the remaining options. The Wazuh community has
    done a brilliant job in documenting the installation guide. You can refer to this
    link for step-by-step assistance: [https://documentation.wazuh.com/current/installation-guide/index.html](https://documentation.wazuh.com/current/installation-guide/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Wazuh modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wazuh has a set of modules that work together to help organizations handle
    security events, find threats, make sure they are following the rules, and keep
    their systems and data safe. Once you access the Wazuh manager, the topmost option
    is **Modules**. By default, you can find multiple modules categorized under four
    sections as mentioned in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Default Wazuh modules](img/B19549_1_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Default Wazuh modules
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look into each of those four sections in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security information management**: This consists of the **Security Events**
    and **Integrity Monitoring** module. Security alerts will be triggered and displayed
    based on predefined Wazuh rules for identified security events. The Integrity
    Monitoring module monitors any unauthorized changes to critical system files and
    directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat detection and response**: By default, this section has two modules:
    **Vulnerabilities** and **MITRE ATT&CK®**. However, you can also add Osquery,
    VirusTotal, and more. The **Vulnerabilities** module identifies, and tracks known
    vulnerabilities in the systems or software. The **MITRE ATT&CK** module maps detected
    threats or incidents to the **MITRE** **ATT&CK** framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**ATT&CK** stands for **adversarial tactics, techniques, and common knowledge**.
    **MITRE** is a government-funded research organization based in Bedford, MA, and
    McLean, VA. MITRE ATT&CK is a framework that helps organizations with attacker’s
    tactics, techniques, and procedures to test their security controls.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auditing and Policy Monitoring**: This section consists of three modules:
    the **Policy Monitoring** module, the **System Auditing** module, and the **Security
    configuration** **assessment** module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Policy Monitoring** module monitors the systems to make sure security
    policies are properly established.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **System Auditing** module tracks and audits use activities including use
    login attempts, file access, and privilege changes in the endpoint.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Security configuration assessment** module is a very popular feature that
    checks system configurations against best practices or predefined security standards.
    Wazuh utilizes the CIS benchmark for most of the security configuration checks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The **Center for Internet Security** (**CIS**) benchmarks are a set of best
    practices that are known around the world and are based on consensus. They are
    meant to help security professionals set up and manage their cybersecurity defenses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Regulatory Compliance**: This section consists of multiple modules including
    PCI DSS compliance, GDPR, HIPPA, NIST 800-53, and TSC modules. Wazuh rules are
    created and tagged with some of these compliances. When any of those rules get
    triggered, we see the alerts. This is how we can align security compliances with
    Wazuh.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s talk about the Wazuh Administration, where we will discuss some
    core features of the Wazuh manager.
  prefs: []
  type: TYPE_NORMAL
- en: Wazuh Administration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Under the **Management** section of the Wazuh dashboard, we have the **Administration**
    section. As you can see in the following diagram, the **Administration** section
    includes capabilities such as **Rules**, **Decoders**, **CDB lists**, **Groups**,
    and **Configuration**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Wazuh administration](img/B19549_1_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Wazuh administration
  prefs: []
  type: TYPE_NORMAL
- en: All the features mentioned under the **Administration** tab play a pivotal role
    in ensuring the effectiveness of the Wazuh platform for real-time monitoring and
    threat detection. We will understand each of these features as explained in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Decoders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Decoders** are responsible for reading incoming log entries, pulling out
    the important information, and putting them into a standard format that the Wazuh
    system can easily understand and analyze. Raw log entries can be in different
    formats, such as syslog, JSON, XML, or custom text formats. The job of the decoder
    is to figure out how these logs are put together and pull out meaningful fields
    and values. There are many pre-built decoders in Wazuh such as the syslog decoder,
    OpenSSH decoder, Suricata decoder, and the Cisco ASA decoder. To understand what
    decoders are and how they work, let us look at how logs from the Barracuda **Web
    Application Firewall** (**WAF**) are processed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the parts of this Wazuh decoder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`decoder name`: This indicates the name of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: This gives us the name of the parent decoder. The parent decoder
    will be processed before the child decoders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prematch`: This is like a condition that must match to apply the decoder.
    It uses regular expressions to look for a match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`regex`: This represents the regular expression to extract data. In the preceding
    decoder, we have two `regex` instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order`: This indicates the list of fields in which the extracted information
    or value will be stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoders have many more configuration options available to them. Visit the *Decoders
    Syntax* page ([https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/decoders.html](https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/decoders.html))
    in the Wazuh documentation to see all of the available options.
  prefs: []
  type: TYPE_NORMAL
- en: Rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wazuh rules help the system detect attacks in the early stages, such as intrusions,
    software misuse, configuration issues, application errors, malware, rootkits,
    system anomalies, and security policy violations. Wazuh comes with several pre-built
    rules and decoders but also allows you to add custom rules. Let’s take a sample
    Wazuh rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this code down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rule id`: This represents the unique identifier for the Wazuh rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`level`: The rule’s classification level ranges between 0 and 15\. According
    to the rule categories page ([https://documentation.wazuh.com/current/user-manual/ruleset/rules-classification.html](https://documentation.wazuh.com/current/user-manual/ruleset/rules-classification.html))
    in the Wazuh documentation, each number indicates a distinct value and severity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if_sid`: This specifies the ID of another rule (in our case, it’s `60009`),
    which triggers the current rule. The “if” condition is considered as the “parent”
    rule that must be checked first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field name`: This specifies the name of the field extracted from the decoder.
    The value is matched by a regular expression. In this case, we are looking for
    the field name `win.system.providerName` with a value of `PowerShell`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group`: This is used to organize the Wazuh rules. It contains the list of
    categories that the rules belong to. We have organized our rule in the `windows_powershell`
    group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are tons of other options available for Wazuh rules. I would suggest
    you check out the *Rules Syntax* page at the following link: [https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/rules.html](https://documentation.wazuh.com/current/user-manual/ruleset/ruleset-xml-syntax/rules.html))
    in the Wazuh documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: CDB lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Constant Database** (**CDB**) list enables the categorization and management
    of IP addresses and domains based on their characteristics. These lists can include
    known malicious IP addresses, suspicious domains, trusted IP addresses, whitelisted
    domains, and more. Admins maintain these lists by adding or removing entries based
    on reputation or risk levels. To learn more about CDB lists, you can visit the
    official Wazuh documentation for CDB lists: [https://documentation.wazuh.com/current/user-manual/ruleset/cdb-list.html](https://documentation.wazuh.com/current/user-manual/ruleset/cdb-list.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Agents can be grouped based on their OS or functionalities using groups; for
    example, all Windows agents can be grouped under a single group named Windows
    Agents. This is helpful when you want to push configuration changes from the Wazuh
    manager to all Windows agents at once. This becomes a simple and single-step solution.
    To learn more about grouping agents, you can visit the official Wazuh documentation
    here: [https://documentation.wazuh.com/current/user-manual/agents/grouping-agents.html](https://documentation.wazuh.com/current/user-manual/agents/grouping-agents.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This helps security teams to fine-tune Wazuh’s main configurations such as cluster
    configuration, alert and output management, log data analysis, cloud security,
    vulnerabilities, inventory data, active response, commands, Docker listeners,
    and monitoring (Amazon S3, Azure logs, Google Cloud, GitHub, Office 365, etc.).
    All these features can even be customized from the command-line option as well.
    You need to locate the `ossec.conf` file in your Wazuh manager or Wazuh agent
    at the `/``var/ossec/etc` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s start deploying our Wazuh agent on the Ubuntu machine and then we
    will install Suricata on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Wazuh server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Wazuh server is the central component of the Wazuh security platform. It
    consists of two important elements: the Wazuh manager and Filebeat. The Wazuh
    manager collects and analyzes data from the Wazuh agents and triggers alerts when
    it detects any threats. Filebeat forwards alerts and events to the Wazuh indexer.
    The Wazuh server can be installed in multiple ways, however, I’d recommend the
    multi-node cluster method for a production environment and the VM method for a
    lab environment. You can follow the guidelines for both methods in the following
    sections.'
  prefs: []
  type: TYPE_NORMAL
- en: For a production environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To set up Wazuh in the production environment, it is recommended to deploy
    the Wazuh server and Wazuh indexer on different hosts. This helps you handle traffic
    from a large number of endpoints and also to achieve high availability. The step-by-step
    guide to install the Wazuh server along with the indexer and dashboard is mentioned
    here: [https://documentation.wazuh.com/current/installation-guide/index.html](https://documentation.wazuh.com/current/installation-guide/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: For a lab environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the Wazuh VM OVA file for a lab environment as it is easy to deploy.
    All the Wazuh components including the Wazuh server, indexer, and dashboard are
    unified. To install Wazuh using an OVA file, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Download the OVA file**: Start by downloading the Wazuh OVA file from the
    official Wazuh website: [https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html](https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Import the OVA file**: Use your favorite virtualization platform (e.g., VMware
    Workstation, VirtualBox, etc.) and import the downloaded OVA file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configure VM settings**: Before powering on the VM, adjust the VM settings
    as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**CPU** **cores**: 4'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAM**: 8 GB'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: 50 GB'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access the Wazuh web interface**: You can start the VM. Next, open the Web
    browser using the VM IP address and enter the default username and password as
    shown in the diagram.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Accessing the Wazuh web interface](img/B19549_1_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Accessing the Wazuh web interface
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Username: `admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Wazuh agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Wazuh agent is compatible with multiple OSs. Once a Wazuh agent is installed,
    it will communicate with the Wazuh server, pushing information and system logs
    in real-time using an encrypted channel.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Wazuh agent on Ubuntu Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To deploy a Wazuh agent on the Ubuntu Server, you need to install the agent
    and configure the deployment variables. To get started with installation, you
    need to log in to your Wazuh dashboard, navigate to **Agents**, click on **Deploy
    an agent** and then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Select an OS, version, and architecture**: As mentioned in the following
    diagram, navigate to the **LINUX** box and choose **DEB amd64** for AMD architecture
    or **DEB aarch64** for ARM architecture.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Deploying a new agent](img/B19549_1_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Deploying a new agent
  prefs: []
  type: TYPE_NORMAL
- en: '**Enter the server address and other optional settings**: Enter the Wazuh server
    address and agent name and select the group. Please make sure your desired agent
    group is created before you add any new agent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![ Figure 1.10 – Choosing a server address and optional settings](img/B19549_1_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Choosing a server address and optional settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down what we’ve inputted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`192.168.29.32`: This is the IP address of the Wazuh server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ubu-serv`: This indicates the name of the Wazuh agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: It represents the Wazuh agent group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`curl` command to download the Wazuh module and start the Wazuh agent service
    as mentioned in the following diagram.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![ Figure 1.11 – Retrieving the commands to download and install a Wazuh agent](img/B19549_1_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Retrieving the commands to download and install a Wazuh agent
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that there are no firewall rules blocking communication between the
    agent and the Wazuh manager. The agent should be able to communicate with the
    manager over the configured port (the default is `1514`/`514` for syslog).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can verify whether the agent is connected and activated by logging
    in to the Wazuh manager and navigating to **Agents**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Visualizing Wazuh agents](img/B19549_1_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Visualizing Wazuh agents
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding diagram, the `ubu-serv-03` agent is connected
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`006`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`192.168.29.172`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group(s)**: **default**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system**: **Ubuntu 22.04**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: **active**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s install the Wazuh agent on Windows Server. The process will be the
    same for the Windows desktop, too.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Wazuh agent on Windows Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can monitor real-time events from Windows Server or a desktop on the Wazuh
    server by using the **command line interface** (**CLI**) or **graphical user interface**
    (**GUI**). To get started with installation, you need to log in to your Wazuh
    dashboard, navigate to **Agents**, click on **Deploy an agent** and then follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Select an OS, version, and architecture**: As shown in the following diagram,
    navigate to the **WINDOWS** box, choose the **MSI 32/64 bits** package, and then
    enter the Wazuh server IP address.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Selecting the Windows package for the Wazuh agent](img/B19549_1_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Selecting the Windows package for the Wazuh agent
  prefs: []
  type: TYPE_NORMAL
- en: '**Enter the server address and other optional settings**: Enter the Wazuh server
    address and agent name and select the group. Please make sure your desired agent
    group is created before you add any new agent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![ Figure 1.14 – Entering the server address and optional settings](img/B19549_1_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Entering the server address and optional settings
  prefs: []
  type: TYPE_NORMAL
- en: '**Download the package and enable the service**: Copy the PowerShell command
    to download the Wazuh module and start the Wazuh agent service as shown in the
    following diagram. The following command needs to be entered on a Windows PowerShell
    terminal.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Retrieving the commands to download and install the Wazuh agent
    on a Windows machine](img/B19549_1_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Retrieving the commands to download and install the Wazuh agent
    on a Windows machine
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can verify whether the agent is connected and activated by logging
    in to the Wazuh manager and navigating to **Agents**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Visualizing Wazuh agents installed on a Windows machine](img/B19549_1_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Visualizing Wazuh agents installed on a Windows machine
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding diagram, the `WIN-AGNT` agent is connected
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`004`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`192.168.29.77`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group(s)**: **default**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system**: **Microsoft Windows Server 2019 Datacenter** **Evaluation
    10.0.17763.737**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: **active**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have successfully learned how to deploy Wazuh agents on both the Ubuntu Server
    and Windows Server. In the next section, we will learn how to set up a Suricata
    IDS on Ubuntu Server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Suricata on Ubuntu Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the ability to detect malicious or suspicious activities in real time,
    Suricata is an NSM tool, which has the potential to work as an IPS/IDS. Its goal
    is to stop intrusion, malware, and other types of malicious attempts from taking
    advantage of a network. In this section, we will learn how to install Suricata
    on Ubuntu server. Let’s first learn about the prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Suricata IDS on Ubuntu Server, the prerequisites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to have Ubuntu Server installed (version 20.04 or higher)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudo Privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This process involves the installation of Suricata packages using the `apt-get`
    command line tool and then we need to install the free and open source Suricata
    rules created by the ET community. The rules within the ET ruleset cover a broad
    spectrum of threat categories, including malware, exploits, policy violations,
    anomalies, botnets, and so on. To complete the installation, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Install Suricata**: Log in to the terminal on Ubuntu Server and install the
    Suricata IDS package with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: cd /tmp/ && curl -LO https://rules.emergingthreats.net/open/suricata-6.0.8/emerging.rules.tar.gz
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sudo tar -xvzf emerging.rules.tar.gz && sudo mv rules/*.rules /etc/suricata/rules/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sudo chmod 640 /etc/suricata/rules/*.rules
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the rule directory is not present, you can create one by using the `mkdir
    /etc/suricata/` rules and then you can enter the previously mentioned commands.
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/suricata/suricata.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`EXTERNAL_NET`: This variable needs to be set with `"any"` to ensure Suricata
    will monitor the traffic from any external IP address.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`default-rule-path`: This is set to our Suricata rule path.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`af-packet`: This is a packet capture method used to capture network traffic
    directory from a `ifconfig` command and updating the `af-packet` settings.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Restart the Suricata service**: In order for configuration changes to take
    effect, we are required to restart the Suricata service using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <ossec_config>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <localfile>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <log_format>json</log_format>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <location>/var/log/suricata/eve.json</location>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </localfile>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ossec_config>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Restart the Wazuh agent service**: For the current changes to take effect,
    you need to restart the Wazuh agent services using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes Suricata’s integration with Wazuh. The Suricata IDS has been
    installed on Ubuntu Server along with the ET ruleset. Your endpoints are ready
    to trigger alerts if any malicious traffic is matched against any of the ET rulesets.
    Before getting into some practical use cases, let’s first get a basic understanding
    of Suricata rules and how to create one.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Suricata rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suricata is powerful when you have a set of powerful rules. Although there are
    thousands of Suricata rule templates available online, it is still important to
    learn how to create a custom Suricata rule from scratch. In this section, we’ll
    learn basic Suricata rule syntax and some common use cases with attack and defense.
  prefs: []
  type: TYPE_NORMAL
- en: Suricata rule syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suricata uses rules to detect different network events, and when certain conditions
    are met, it can be set up to do things such as alert or block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an overview of the Suricata rule syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this code down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`action`: This says what should be done when the rule is true. It can be `alert`
    to send an alert, `drop` to stop the traffic, or any of the other actions that
    are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proto`: This shows what kind of traffic is being matched, such as `tcp`, `udp`,
    and `icmp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src_ip`: This is the source IP address or range of source IP addresses. This
    is where the traffic comes from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src_port`: This is the port or range of ports where the traffic is coming
    from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dest_ip`: This is the IP address or range of IP addresses where the traffic
    is going.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dest_port`: This is the port or range of ports where the traffic is going.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msg`: The message that will be shown as an alert when the rule is true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content`: This is an optional field that checks the packet payload for a certain
    string or content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, based on our current Suricata configuration, we have the `$HOME_NET` and
    `$EXTERNAL_NET` network variables. Let’s get an understanding of an example rule
    to detect an SSH connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alert`: The rule specifies that an alert should be generated if the specified
    conditions are met.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcp`: This refers to **Transmission Communication Protocol** (**TCP**) based
    traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$EXTERNAL_NET any -> $HOME_NET 22`: The traffic flow is defined by directing
    traffic from any external network IP address (`$EXTERNAL_NET`) to any home or
    local network IP (`$HOME_NET`) on port `22` (SSH).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(msg:"SSH connection detected";)`: This specifies a detailed message to be
    added to the alert. It indicates that the rule has identified an SSH connection
    in this instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flow:to_server,established`: This defines the direction of the traffic that
    initiates the rule. It is looking for established connections between the server
    (home network) and the server (external network). This portion of the rule prevents
    initial connection attempts from generating alerts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content:"SSH-2.0-OpenSSH`: This part looks at the payload of the packet for
    a particular string (`"SSH-2.0-OpenSSH"`). It searches the traffic payload for
    this specific string, which signifies the utilization of the OpenSSH protocol
    and the SSH protocol in general.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sid:100001`: It is a unique identifier for a particular rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we’ve learned how to create some basic Suricata rules, let’s go through
    some Suricata IDS use cases with the Wazuh platform.
  prefs: []
  type: TYPE_NORMAL
- en: Network scanning probe attack and detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Network scanning** is the initial stage of most hacking exercises, and the
    most powerful tool used for this purpose is none other than the **Nmap** scanner.
    Nmap is a free and open source Linux command-line tool. Nmap helps us to scan
    any host to discover opened ports, software versions, OSs, and so on. It is used
    by security professionals for security testing, network exploration, and vulnerability
    detection. Threat actors also perform network scanning to discover any open ports,
    software versions, or vulnerability packages. In this section, we will initiate
    network scanning probes using the Nmap tool against our Wazuh agent (running Suricata
    services). The ET ruleset already consists of rules to detect Nmap-based scanning
    probes. We will verify it using this attack scenario.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be following the points in these sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack simulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualize on the Wazuh manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this mini lab setup, we need three parts: an attacker machine (Kali Linux
    or Ubuntu), an Ubuntu machine or Windows machine with the Wazuh agent installed
    on it, and finally, our Wazuh server. If you use a Kali Linux machine, Nmap is
    preinstalled; however, if you use an Ubuntu machine, you can install the Nmap
    package using the `sudo apt-get install` `nmap` command.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Lab setup of network scanning probe detection using Nmap](img/B19549_1_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – Lab setup of network scanning probe detection using Nmap
  prefs: []
  type: TYPE_NORMAL
- en: Attack simulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using Kali Linux or Ubuntu as an attacker machine, you can open
    the terminal and enter the `nmap` command using the `-sS` keyword for an SYN scan
    and `-Pn` to skip host discovery. The Nmap SYN scan is a half-open scan that works
    by sending a TCP SYN packet to the target machine (the Wazuh agent). If the port
    is open, the target device responds with a `-sS` and second, to check for software
    version using `-sV` (version scan):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you run the preceding command, you will learn what all the ports are open
    and second, what version of the package is installed on the target machine. Let’s
    look at the output of the Nmap port scan command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, STATE of port `22/tcp` and `80/tcp` are open. Now, let’s look
    at the output of the Nmap version check command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output, you can see from the `VERSION` column that the target is running
    two software packages: `OpenSSH 8.9` and Apache with version `2.4.52`.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualize on the Wazuh dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To visualize the Suricata alerts, log in to the Wazuh manager and navigate to
    **Security events**. Next, select the agent. You will find the security alert
    shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Visualizing network scanning probes on the Wazuh dashboard](img/B19549_1_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – Visualizing network scanning probes on the Wazuh dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also apply a filter with `rule.group: suricata`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Visualizing network scanning probes using a Suricata filter](img/B19549_1_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Visualizing network scanning probes using a Suricata filter
  prefs: []
  type: TYPE_NORMAL
- en: Let’s expand one of the alerts, as shown in the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – The ET SCAN Potential SSH Scan OUTBOUND alert](img/B19549_1_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – The ET SCAN Potential SSH Scan OUTBOUND alert
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break some of the following down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data.alert.signature`: This field talks about the `ET SCAN Potential SSH Scan
    OUTBOUND` Suricata rule that detected this abnormal traffic. `ET` represents the
    ET ruleset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.dest_ip`: This gives us the victim IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.src_ip`: This gives us the attacker IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.alert.action`: This field indicates the action taken by Wazuh in response
    to a detected security event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alerts.severity`: This field represents the severity level assigned to the
    security event by Wazuh.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, this was the simple use case of how Suricata can detect the network scanning
    probes and how Wazuh visualizes it on the dashboard. In the next section, we will
    learn how to detect web-based attacks on our intentionally vulnerable application
    DVWA.
  prefs: []
  type: TYPE_NORMAL
- en: Testing web-based attacks using DVWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per a CDNetworks report, around 45.127 billion web applications were detected
    and blocked throughout 2022, which is an increase of 96.35% compared to 2021 ([https://www.cdnetworks.com/news/state-of-waap-2022/](https://www.cdnetworks.com/news/state-of-waap-2022/)).
    Attacks on web applications have become so common that they are now the main cause
    of data breaches. Some of the most common types of web application attacks include
    **cross-site scripting** (**XSS**), DDoS, **cross-site request forgery** (**CSRF**),
    **XML External Entity** (**XXE**), and SQL Injection. Suricata with the ET ruleset
    can detect such attacks by dissecting packet payloads and scrutinizing HTTP/HTTPS
    protocol headers for anomalies or abnormal traffic patterns. In this section,
    we will utilize an intentionally infected web application, DVWA. DVWA is a PHP-based
    application and is popular among penetration testers and ethical hackers as it
    helps them get hands-on with security vulnerability and exploitation. We will
    cover these points in the following subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the victim server with DVWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test an SQL Injection attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test a reflected XSS attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this lab setup, we need four parts: an attacker machine (Kali Linux or Ubuntu),
    a victim server (DVWA running on a Debian server), a TAP server (Wazuh and Suricata
    agents on Ubuntu), and a Wazuh server. The lab design is in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – The lab setup for detecting web-based attacks using Suricata](img/B19549_1_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – The lab setup for detecting web-based attacks using Suricata
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down further:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker machine is Kali Linux, but you can use any other machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DVWA application has been installed on a Debian-based server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Server deployed in promiscuous mode (a network setting) and running a
    Suricata IDS and Wazuh agent. Promiscuous mode allows the network adapter to intercept
    and read all the network traffic that it receives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Wazuh server is deployed as a VM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the victim server with DVWA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be installing a DVWA application on a Debian-based Linux distribution.
    You can download it from the following link: [https://www.debian.org/distrib/](https://www.debian.org/distrib/).
    Our DVWA application has some dependencies such as `php`, an `apache2` web server,
    and a MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first install all of them with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: CREATE USER 'dvwa'@'localhost' IDENTIFIED BY 'password'; GRANT ALL PRIVILEGES
    ON dvwa.* TO 'dvwa'@'localhost' IDENTIFIED BY 'password';
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, install the DVWA application. The DVWA source code is available on GitHub.
    You can enter the following command under `/var/www/html`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: config.inc.php file. Change the db_user to dvwa and db_password to password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `mysql` service:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Search for `allow_url_include` and set to **On**.*   Launch DVWA.*   Open DVWA
    with [http://localhost/DVWA/setup.php](http://localhost/DVWA/setup.php) and then
    reset the database.*   Now, log in to DVWA with the default credentials:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes our DVWA application installation. Next, we can start testing
    the DVWA application from Kali Linux against SQL Injection and XSS as explained
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Test an SQL Injection attack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SQL Injection, or **SQLi**, is a type of cyberattack in which malicious SQL
    code is injected into an application. This lets the attacker extract or modify
    the contents of the database. This attack modifies the database by tricking the
    program into running SQL commands that weren’t intended to be run. In order to
    test the DVWA application against SQL Injection vulnerability, we need to insert
    our malicious payload into the HTTP request itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UNION SELECT "Hello","Hello Again"`: The `UNION SELECT` statement is used
    to combine the results of two or more `SELECT` queries into a single result set.
    In this case, the attacker wants to add their own information to the query result.
    `"Hello"` and `"Hello Again"` are the text information that the attacker wants
    to inject into the query result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-- -`: This is a comment in SQL. Everything following this on the same line
    is considered a comment and ignored by the SQL processor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`&Submit=Submit`: This part suggests that the query could be part of a form
    submission where the `Submit` parameter is sent with the `Submit` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s check on our Wazuh dashboard for the relevant security alerts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Visualizing SQL Injection alerts](img/B19549_1_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Visualizing SQL Injection alerts
  prefs: []
  type: TYPE_NORMAL
- en: 'As you expand the individual security alert, you will see detailed information
    about the alert, the Suricata ET rule, and the category as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Suricata alert for SQL Injection on the Wazuh dashboard](img/B19549_1_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Suricata alert for SQL Injection on the Wazuh dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Suricata: Alert - ET WEB_SERVER Possible SQL Injection Attempt UNION SELECT`:
    This represents the security alert name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.alert.category` `Web Application Attack`: This shows the category of
    the rule as specified in the Suricata ET ruleset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Data.alert.metadata.tag: SQL_Injection`: This shows the metadata of the Suricata
    ET ruleset for web application attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we scroll down the alert information even further, we will see more information,
    as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Detailed information of a Suricata alert for SQL Injection](img/B19549_1_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – Detailed information of a Suricata alert for SQL Injection
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data.http.http.user_agent`: This represents the browser information from where
    the attack has been attempted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.http.url: /DVWA/vulnerabilities/sqli/?id=a%27%20UNION%20SELECT%20%22text1%22,%22text2%22;--%20-&Submit=Submit`:
    This represents a URL query string for the DVWA, specifically targeting a SQL
    Injection vulnerability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we have learned about how to detect SQL Injection attacks using a Suricata
    IDS and visualize them on a Wazuh dashboard. In the next section, we will test
    our DVWA application for XSS vulnerabilities. We will later detect and visualize
    them on a Wazuh dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Test a reflected XSS attack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XSS is a type of code injection attack that targets websites and sends malicious
    scripts to a user’s web browser to execute. In a **reflected XSS** attack, the
    attacker inserts malicious script into a website or app, which is subsequently
    reflected onto the user’s browser from the web server. This kind of attack is
    possible when a user inputs information into the application, and the application
    reflects it back to the user without enough sanitization or validation. To test
    if our intentionally vulnerable application, DVWA, for a reflected XSS attack,
    we can submit a piece of JavaScript code and verify whether it is reflecting the
    data back to our browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can open the DVWA application and navigate to the **XSS (Reflected)** tab.
    Next, enter a sample JavaScript code as written here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<script> tag`: This indicates a piece of JavaScript code that should be executed
    by the browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Alert("Hello")`: This is a function that tells the browser to display a pop-up
    box with the **Hello** text when the script is executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can enter the JavaScript code and click on the **Submit** button as shown
    in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Initiating a reflected XSS attack on DVWA](img/B19549_1_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – Initiating a reflected XSS attack on DVWA
  prefs: []
  type: TYPE_NORMAL
- en: The DVWA application doesn’t have a sanitization check for user inputs, making
    it vulnerable to reflected XSS attacks. As a result, we will see the **Hello**
    text reflected back to our browser as shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Visualizing reflected XSS on DVWA](img/B19549_1_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – Visualizing reflected XSS on DVWA
  prefs: []
  type: TYPE_NORMAL
- en: So, the attack was successful. Let’s visualize the alert on the Wazuh dashboard.
    Navigate to **Security Alerts** and select the agent.
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 1.27 – Suricata alert against an XSS attack](img/B19549_1_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – Suricata alert against an XSS attack
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Security Alert – ET WEB_SERVER Script tag in URI Cross Site Scripting Attempt`:
    This represents the security alert name and signature name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.alert.category` `Web Application Attack`: This represents the category
    of the alert based on the Suricata ET ruleset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.alert.metadata.tag` `Cross_Site_Scripting, XSS`: This represents the
    metadata of the security alerts. In our case, it’s `Cross_Site_Scripting` and
    `XSS`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we have successfully launched the SQL Injection and reflected
    XSS on the intentionally vulnerable application called DVWA. Finally, we were
    able to detect the attacks using Suricata ET rules and visualize them on the Wazuh
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will emulate multiple attacks on an Ubuntu machine using
    the tmNIDS project and visualize it on the Wazuh manager.
  prefs: []
  type: TYPE_NORMAL
- en: Testing NIDS with tmNIDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**tmNIDS** is a GitHub project maintained by *3CoreSec*. tmNIDS is a simple
    framework designed for testing the detection capabilities of NIDS such as Suricata
    and Snort. The tests inside tmNIDS are designed to align with rulesets compatible
    with the ET community. The ET community builds and shares Suricata rules to detect
    a wide range of attacks such as web-based attacks, network attacks, and DDoS attacks.
    In this section, we will learn to simulate attacks using tmNIDS and we will visualize
    them on the Wazuh dashboard. We will cover these points in the following subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing tmNIDS on Ubuntu Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for a malicious User-Agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for a Tor connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test everything at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this lab setup, we have two devices: Ubuntu Server running the Wazuh agent,
    Suricata IDS, and tmNIDS, and second, the Wazuh server installed using a VM OVA
    file. The lab design is in the following figure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 1.28 – Lab set for testing Suricata IDS rules using tmNIDS](img/B19549_1_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – Lab set for testing Suricata IDS rules using tmNIDS
  prefs: []
  type: TYPE_NORMAL
- en: Installing tmNIDS on Ubuntu Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The source code of the tmNIDS project is published on GitHub ([https://github.com/3CORESec/testmynids.org](https://github.com/3CORESec/testmynids.org)).
    To install tmNIDS, we can run a `curl` command to download the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`curl`: This is a utility tool that initiates a request to download data from
    the specific URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sSL`: Here, `-s` stands for showing progress without any output. The `S`
    flag will show errors if `curl` encounters any problem during the request and
    the `L` flag represents redirection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o /tmp/tmNIDS`: This informs `curl` to save downloaded files as `/``tmp`
    directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod +x /tmp/tmNIDS`: It changes the file permissions of the downloaded file
    to executable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the package has been executed, you will see a list of 12 tests for Suricata
    IDS as in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Visualizing tmNIDS detection tester](img/B19549_1_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – Visualizing tmNIDS detection tester
  prefs: []
  type: TYPE_NORMAL
- en: So, now that our tmNIDS is ready, we can start testing our Ubuntu Server (running
    Suricata IDS) against multiple attacks as explained in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for a malicious User-Agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this scenario, we will execute test 3 from the tmNIDS tests, which is `HTTP
    Malware User-Agent`. For every HTTP request, there is a `User-Agent` header that
    describes the user’s browser, device, and OS. When an HTTP web browser sends a
    request to a web server, it inserts this header to identify itself to the server.
    The `User-Agent` string usually contains information such as the browser’s name
    and version, OS, device type, and sometimes extra data such as rendering engine
    details. If you take a closer look at the HTTP header using Google developer mode,
    you will find the `User-Agent` information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This `User-Agent` string says that the browser is running on a Windows 10 64-bit
    system, using the Chrome browser (version `96.0.4664.45`) with rendering engines
    associated with both WebKit (Safari) and Gecko (Firefox).
  prefs: []
  type: TYPE_NORMAL
- en: To test the Ubuntu Server (running Suricata IDS) against `HTTP Malware User-Agent
    test`, enter `3` on the `tmNIDS` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30 – Choosing option 3 from the tmNIDS detection tester](img/B19549_1_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.30 – Choosing option 3 from the tmNIDS detection tester
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s visualize the alerts on the Wazuh dashboard. You can navigate to
    the **Security Alerts** module and select the endpoint. You can find the alerts
    as shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31 – Suricata alert against a suspicious User-Agent](img/B19549_1_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.31 – Suricata alert against a suspicious User-Agent
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break some of the following down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Suricata: Alert – ET POLICY GNU/LINUX APT User-Agent Outbound likely to package
    management`: This represents the **Security alerts** name and signature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.alert.category : Not Suspicious Traffic`: This represents the category
    of the ET ruleset category'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.alert.signature : ET POLICY GNU/Linux APT User-Agent Outbound likely
    related to package management`: This suggests potential APT-related outbound network
    activity, possibly tied to package management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After successfully testing `HTTP Malicious User-Agent` and visualizing alerts
    on the Wazuh dashboard, we will test the Tor connection in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Tor connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this scenario, we will execute test 5, which is `Tor`. **Tor** is a decentralized,
    anonymous network that users can use to browse the internet privately and safely.
    However, it is often used by hackers, malicious actors, and cybercriminals who
    access the dark web and sell stolen data and illegal goods online. Its anonymity
    features can keep attackers’ identities secret, making it hard for the government
    to track their actions and hence, it is important for every organization to block
    any traffic from Tor services. The most popular Tor application is **Tor Browser**.
    When anyone accesses any website through the Tor Browser, it goes through proxy
    nodes, making it difficult for anyone to intercept. From a cybersecurity point
    of view, we can build a list of IP addresses of such nodes and eventually block
    them, or block Tor-based applications based on their signatures.
  prefs: []
  type: TYPE_NORMAL
- en: To test this scenario, go back to the tmNIDS prompt and enter `5`. The Tor attack
    will be executed on our Ubuntu Server running Suricata IDS.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.32 – Choosing option 5 from the tmNIDS detection tester](img/B19549_1_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.32 – Choosing option 5 from the tmNIDS detection tester
  prefs: []
  type: TYPE_NORMAL
- en: To visualize the alert, navigate to the **Security Alerts** module of Wazuh
    and check for the relevant alerts shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.33 – Suricata alert against Tor hidden traffic](img/B19549_1_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.33 – Suricata alert against Tor hidden traffic
  prefs: []
  type: TYPE_NORMAL
- en: 'Both have been detected by the Suricata ET ruleset. There are two rule descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Suricata: Alert - ET POLICY DNS Query for TOR Hidden Domain .onion Accessible`
    `Via TOR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Suricata: Alert - ET MALWARE Cryptowall .onion` `Proxy Domain`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have successfully tested the Tor .onion DNS response test and visualized
    the alerts on the Wazuh manager. In the next section, we will run all the tests
    at once and visualize the alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Testing everything at once
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, this is like a non-stop rifle. You basically launch all the tests at once.
    To start, type `11` under the tmNIDS tests prompt and monitor the events on the
    Wazuh manager.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.34 – Suricata alerts against all the tmNIDS tests](img/B19549_1_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.34 – Suricata alerts against all the tmNIDS tests
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have received alerts against all the tests listed in the
    tmNIDS detection tester. This shows that our Suricata IDS along with the ET ruleset
    are effective against attacks launched by the tmNIDS project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Wazuh and its integration with the Suricata
    IDS to effectively detect anomalous traffic behavior. We started by exploring
    the Suricata IDS and its deployment method. We then covered the setup of Wazuh,
    the configuration of Suricata rules, and practical threat detection using DVWA.
    We then learned about testing Suricata rulesets using a tmNIDS tester.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the different malware detection capabilities
    of the Wazuh platform. We will also explore third-party integration for the purpose
    of detecting advanced malware files and signatures.
  prefs: []
  type: TYPE_NORMAL
