["```\n00  @PluginInfo(\n```", "```\n01    status = PluginStatus.STABLE,\n```", "```\n02    packageName = ExamplesPluginPackage.NAME,\n```", "```\n03    category = PluginCategoryNames.EXAMPLES,\n```", "```\n04    shortDescription = \"Plugin short description.\",\n```", "```\n05    description = \"Plugin long description goes here.\"\n```", "```\n06  )\n```", "```\n07  public class SkeletonPlugin extends ProgramPlugin {\n```", "```\n08\n```", "```\n09    MyProvider provider;\n```", "```\n10    public SkeletonPlugin (PluginTool tool) {\n```", "```\n11      super(tool, true, true);\n```", "```\n12\n```", "```\n13      // TODO: Customize provider (or remove if a provider\n```", "```\n14      //       is not desired)\n```", "```\n15      String pluginName = getName();\n```", "```\n16      provider = new MyProvider(this, pluginName);\n```", "```\n17\n```", "```\n18      // TODO: Customize help (or remove if help is not\n```", "```\n19      //       desired)\n```", "```\n20      String topicName = \n```", "```\n21                   this.getClass().getPackage().getName();\n```", "```\n22      String anchorName = \"HelpAnchor\";\n```", "```\n23      provider.setHelpLocation(new HelpLocation(\n```", "```\n24                                          topicName,\n```", "```\n25                                          anchorName)\n```", "```\n26      );\n```", "```\n27    }\n```", "```\n28\n```", "```\n29    @Override\n```", "```\n30    public void init() {\n```", "```\n31      super.init();\n```", "```\n32      // TODO: Acquire services if necessary\n```", "```\n33    }\n```", "```\n34  }\n```", "```\n00  private static class MyProvider extends ComponentProvider{\n```", "```\n01  \n```", "```\n02  \t\tprivate JPanel panel;\n```", "```\n03  \t\tprivate DockingAction action;\n```", "```\n04  \n```", "```\n05  \t\tpublic MyProvider(Plugin plugin, String owner) {\n```", "```\n06  \t\t\tsuper(plugin.getTool(), owner, owner);\n```", "```\n07  \t\t\tbuildPanel();\n```", "```\n08  \t\t\tcreateActions();\n```", "```\n09  \t\t}\n```", "```\n10  \n```", "```\n11  \t\t// Customize GUI\n```", "```\n12  \t\tprivate void buildPanel() {\n```", "```\n13  \t\t\tpanel = new JPanel(new BorderLayout());\n```", "```\n14  \t\t\tJTextArea textArea = new JTextArea(5, 25);\n```", "```\n15  \t\t\ttextArea.setEditable(false);\n```", "```\n16  \t\t\tpanel.add(new JScrollPane(textArea));\n```", "```\n17  \t\t\tsetVisible(true);\n```", "```\n18  \t\t}\n```", "```\n19  \n```", "```\n20  \t\t// TODO: Customize actions\n```", "```\n21  \t\tprivate void createActions() {\n```", "```\n22  \t\t\taction = new DockingAction(\n```", "```\n23                                         \"My Action\", \n```", "```\n24                                         getName()) {\n```", "```\n25  \t\t\t\t@Override\n```", "```\n26  \t\t\t\tpublic void actionPerformed(\n```", "```\n27                                 ActionContext context) {\n```", "```\n28  \t\t\t\t\tMsg.showInfo(\n```", "```\n29                               getClass(),\n```", "```\n30                               panel,\n```", "```\n31                               \"Custom Action\",\n```", "```\n32                               \"Hello!\"\n```", "```\n33                         );\n```", "```\n34  \t\t\t\t}\n```", "```\n35  \t\t\t};\n```", "```\n36  \t\t\taction.setToolBarData(new ToolBarData(\n```", "```\n37                                           Icons.ADD_ICON,\n```", "```\n38                                           null)\n```", "```\n39              );\n```", "```\n40  \t\t\taction.setEnabled(true);\n```", "```\n41  \t\t\taction.markHelpUnnecessary();\n```", "```\n42  \t\t\tdockingTool.addLocalAction(this, action);\n```", "```\n43  \t\t}\n```", "```\n44  \n```", "```\n45  \t\t@Override\n```", "```\n46  \t\tpublic JComponent getComponent() {\n```", "```\n47  \t\t\treturn panel;\n```", "```\n48  \t\t}\n```", "```\n49  \t}\n```", "```\n00  @PluginInfo(\n```", "```\n01    status = PluginStatus.RELEASED,\n```", "```\n02    packageName = ExamplesPluginPackage.NAME,\n```", "```\n03    category = PluginCategoryNames.EXAMPLES,\n```", "```\n04    shortDescription = \"Show Info\",\n```", "```\n05    description = \"Sample plugin demonstrating how to \"\n```", "```\n06                + \"access information from a program. \"\n```", "```\n07                + \"To see it work, use with the \"\n```", "```\n08                + \"CodeBrowser.\"\n```", "```\n09  )\n```", "```\n00  public class ShowInfoPlugin extends ProgramPlugin {\n```", "```\n01\n```", "```\n02    private ShowInfoComponentProvider provider;\n```", "```\n03\n```", "```\n04    public ShowInfoPlugin(PluginTool tool) {\n```", "```\n05      super(tool, true, false);\n```", "```\n06      provider = new ShowInfoComponentProvider(\n```", "```\n07                                               tool,\n```", "```\n08                                               getName()\n```", "```\n09      );\n```", "```\n10    }\n```", "```\n11\n```", "```\n12    @Override\n```", "```\n13    protected void programDeactivated(Program program) {\n```", "```\n14      provider.clear();\n```", "```\n15    }\n```", "```\n16\n```", "```\n17    @Override\n```", "```\n18    protected void locationChanged(ProgramLocation loc) {\n```", "```\n19      provider.locationChanged(currentProgram, loc);\n```", "```\n20    }\n```", "```\n21  }\n```", "```\n00  public class ShowInfoComponentProvider extends \n```", "```\n01                                  ComponentProviderAdapter {\n```", "```\n02    private final static ImageIcon CLEAR_ICON = \n```", "```\n03        ResourceManager.loadImage(\"images/erase16.png\");\n```", "```\n04    private final static ImageIcon INFO_ICON =\n```", "```\n05        ResourceManager.loadImage(\"images/information.png\");\n```", "```\n06    private JPanel panel;\n```", "```\n07    private JTextArea textArea;\n```", "```\n08    private DockingAction clearAction;\n```", "```\n09    private Program currentProgram;\n```", "```\n10    private ProgramLocation currentLocation;  \n```", "```\n11    public ShowInfoComponentProvider(\n```", "```\n                                       PluginTool tool,\n```", "```\n                                       String name) {\n```", "```\n12      super(tool, name, name);\n```", "```\n13      create();\n```", "```\n14      setIcon(INFO_ICON);\n```", "```\n15      setDefaultWindowPosition(WindowPosition.BOTTOM);\n```", "```\n16      setTitle(\"Show Info\");\n```", "```\n17      setVisible(true);\n```", "```\n18      createActions();\n```", "```\n19    } \n```", "```\n20    @Override\n```", "```\n21    public JComponent getComponent() {\n```", "```\n22      return panel;\n```", "```\n23    }\n```", "```\n24    void clear() {\n```", "```\n25      currentProgram = null;\n```", "```\n26      currentLocation = null;\n```", "```\n27      textArea.setText(\"\");\n```", "```\n28    }  \n```", "```\n29    void locationChanged(\n```", "```\n30                         Program program,\n```", "```\n31                         ProgramLocation location\n```", "```\n32                         ) {\n```", "```\n33      this.currentProgram = program;\n```", "```\n34      this.currentLocation = location;\n```", "```\n35      if (isVisible()) {\n```", "```\n36        updateInfo();\n```", "```\n37      }\n```", "```\n38    }  \n```", "```\n39    private void updateInfo() {\n```", "```\n40      if (currentLocation == null || \n```", "```\n41          currentLocation.getAddress() == null) {\n```", "```\n42        return;\n```", "```\n43      }\n```", "```\n44  \n```", "```\n45      CodeUnit cu = \n```", "```\n46         currentProgram.getListing().getCodeUnitContaining(\n```", "```\n47                          currentLocation.getAddress()\n```", "```\n48      );\n```", "```\n49  \n```", "```\n50      // TODO -- create the string to set\n```", "```\n51      String preview = \n```", "```\n52             CodeUnitFormat.DEFAULT.getRepresentationString(\n```", "```\n53                                                  cu, true\n```", "```\n54      );\n```", "```\n55      if (cu instanceof Instruction) {\n```", "```\n56        textArea.setText(\"Instruction: \" + preview);\n```", "```\n57      }\n```", "```\n58      else {\n```", "```\n59        Data data = (Data) cu;\n```", "```\n60        if (data.isDefined()) {\n```", "```\n61          textArea.setText(\"Defined Data: \" + preview);\n```", "```\n62        }\n```", "```\n63        else {\n```", "```\n64          textArea.setText(\"Undefined Data: \" + preview);\n```", "```\n65        }\n```", "```\n66      }\n```", "```\n67    }  \n```", "```\n68    private void create() {\n```", "```\n69      panel = new JPanel(new BorderLayout());\n```", "```\n70      textArea = new JTextArea(5, 25);\n```", "```\n71      textArea.setEditable(false);\n```", "```\n72      JScrollPane sp = new JScrollPane(textArea);\n```", "```\n73      panel.add(sp);\n```", "```\n74    }  \n```", "```\n75    private void createActions() {\n```", "```\n76      clearAction = new DockingAction(\n```", "```\n77                                      \"Clear Text Area\",\n```", "```\n78                                      getName()\n```", "```\n79                                      ) {\n```", "```\n80        @Override\n```", "```\n81        public void actionPerformed(ActionContext context) {\n```", "```\n82          textArea.setText(\"\");\n```", "```\n83        }\n```", "```\n84      };\n```", "```\n85      clearAction.setToolBarData(new ToolBarData(CLEAR_ICON, \n```", "```\n86                                                 null)\n```", "```\n87      );\n```", "```\n88  \n```", "```\n89      clearAction.setEnabled(true);\n```", "```\n90      tool.addLocalAction(this, clearAction);\n```", "```\n91    }\n```", "```\n92  \n```", "```\n93    @Override\n```", "```\n94    public void componentShown() {\n```", "```\n95      updateInfo();\n```", "```\n96    }\n```", "```\n97  }\n```"]