- en: Android Data Extraction Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using any of the screen lock bypass techniques explained in [Chapter 8](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml),
    *Android Forensic Setup and Pre-Data Extraction Techniques*, an examiner can try
    to access a locked device. Once the device is accessible, the next task is to
    extract the information present on the device. This can be achieved by applying
    various data extraction techniques to the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will help you to identify the sensitive locations present on an
    Android device and explain various logical and physical techniques that can be
    applied to the device to extract the necessary information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding data extraction techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual data extraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical data extraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical data extraction, which covers imaging an Android device and SD card,
    JTAG, and chip-off techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding data extraction techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data residing on an Android device may be an integral part of civil, criminal,
    or internal investigations done as part of a corporate company''s internal probe.
    While dealing with investigations involving Android devices, you, as the forensic
    examiner, need to be mindful of the issues that need to be taken care of during
    the forensic process; this includes determining whether root access is permitted
    (via consent or legal authority) and what data can be extracted and analyzed during
    the investigation. For example, in a criminal case involving stalking, the court
    may only allow SMS, call logs, and photos to be extracted and analyzed on the
    Android device belonging to the suspect. In this case, it may make the most sense
    to logically capture only those specific items. However, it is best to obtain
    a full physical data extraction from the device and only examine the areas admissible
    by the court. You never know where your investigation may lead and it is best
    to obtain as much data from the device as possible immediately, rather than wishing
    you had a full image should the scope of consent change. Data extraction techniques
    on an Android device can be classified into three types:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual data extraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical data extraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical data extraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As described in Chapter 1, *Introduction to Mobile Forensics*, manual extraction
    involves browsing through the device normally and capturing any valuable information,
    while logical extraction deals with accessing the filesystem, and physical extraction
    is about extracting a bit-by-bit image of the device. The extraction methods for
    each of these types will be described in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Some methods may require the device to be rooted to fully access the data. Each
    method has different implications and their success rates will depend on the tool
    and method used as well as the device's make and model.
  prefs: []
  type: TYPE_NORMAL
- en: Manual data extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method of extraction involves you utilizing the normal user interface of
    the mobile device to access content present in the memory. You will browse through
    the device normally by accessing different menus to view details such as call
    logs, text messages, and IM chats. The content of each screen is captured by taking
    pictures and can be presented as evidence.
  prefs: []
  type: TYPE_NORMAL
- en: The main drawback of this type of examination is that only the files that are
    accessible via the operating system (in UI mode) can be investigated. Care must
    be taken when manually examining the device, as it's easy to press the wrong button
    and erase or add data. Manual extraction should be used as the last resort to
    verify findings extracted using one of the other methods. Certain circumstances
    may warrant you to conduct a manual examination as the first step. This may include
    cases of life or death situations or missing persons where a quick scan of the
    device may lead the police to the individual.
  prefs: []
  type: TYPE_NORMAL
- en: Logical data extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logical data extraction techniques extract the data present on the device by
    interacting with the operating system and accessing the filesystem. These techniques
    are significant because they provide valuable data, work on most devices, and
    are easy to use. Once again, the concept of rooting comes into the picture while
    extracting the data. Logical techniques do not actually require root access for
    data extraction. However, having root access on a device allows you to access
    all of the files present on a device. This means that some data may be extracted
    on a non-rooted device while root access will open the device and provide access
    to all of the files present on the device. Hence, having root access to a device
    would greatly influence the amount and kind of data that could be extracted through
    logical techniques. The following sections explain various techniques that can
    be used to extract data logically from an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: ADB pull data extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As seen earlier, `adb` is a command-line tool that helps you to communicate
    with a device to retrieve information. Using `adb`, you can extract data from
    all of the files on the device or just the relevant files in which you are interested.
    This is the most widely used technique as part of logical extraction.
  prefs: []
  type: TYPE_NORMAL
- en: To access an Android device through `adb`, the USB debugging option must be
    enabled. From Android 4.2.2, due to secure USB debugging, the host connecting
    to the device should also be authorized. If the device is locked and USB debugging
    is not enabled, try to bypass the screen lock using the techniques explained in
    [Chapter 8](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml), *Android Forensic Setup
    and Pre-Data Extraction Techniques*.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a forensic examiner, it''s important for you to know how the data is stored
    on the Android device and to understand where important and sensitive information
    is stored so that the data can be extracted accordingly. Application data often
    contains a wealth of user data that may be relevant to the investigation. All
    files pertaining to applications of interest should be examined for relevance,
    as will be explained in [Chapter 10](5bb0cc1b-d89c-408a-b2c9-6b946519151d.xhtml),
    *Android Data Analysis and Recovery*. The application data can be stored in one
    of the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared preferences**: This stores data in key-value pairs in a lightweight
    XML format. Shared preference files are stored in the `shared_pref` folder of
    the application `/data` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal storage**: This stores data that is private and is present in the
    device''s internal memory. Files saved to the internal storage are private and
    cannot be accessed by other applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External storage**: This stores data that is public in the device''s external
    memory, which does not usually enforce security mechanisms. This data is available
    in the `/sdcard` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQLite database**: This data is available in the `/data/data/PackageName/`
    database. It is usually stored with the `.db` file extension. The data present
    in a SQLite file can be viewed using the SQLite browser ([https://sourceforge.net/projects/sqlitebrowser/](https://sourceforge.net/projects/sqlitebrowser/))
    or by executing the necessary SQLite commands on the respective files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every Android application stores data on the device using one or more of the
    preceding data storage options. So, the Contacts application would store all of
    the information about the contact details in the `/data/data` folder under its
    package name. Note that `/data/data` is a part of your device's internal storage,
    where all of the apps are installed under normal circumstances. Some application
    data will reside on the SD card and in the `/data/data` partition. Using `adb`,
    we can pull the data present in this partition for further analysis using the
    `adb pull` command. Once again, it's important to note that this directory is
    only accessible on a rooted phone.
  prefs: []
  type: TYPE_NORMAL
- en: In Android 7.0 (Nougat), a new storage type called device encrypted storage
    has been introduced to allow apps to store certain kinds of data in this storage.
    As a result of this, you will notice new file paths such as `misc_de`, `misc_ce`,
    `system_de`, and `system_ce` under the `/data` folder. From a forensic perspective,
    this is a very important change because what this also means is that, on devices
    running Android Nougat, `/data/data` is *not* the only location where artifacts
    are stored, for example,
  prefs: []
  type: TYPE_NORMAL
- en: 'SMS data location on old devices: `/data/com.android.providers.telephony/databases/smsmms.db` and
    SMS data location on Nougat devices: `/user_de/0/com.android.providers.telephony/databases/smsmms.db`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a rooted phone, the `adb pull` command on the `databases` folder of the
    Dropbox app can be executed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3731c5c6-0015-457d-9ed0-ce4ae1dc9bd0.png)'
  prefs: []
  type: TYPE_IMG
- en: The adb pull command
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, on a rooted phone, the entire `/data` folder can be pulled in this
    manner. As shown in the following screenshot, the complete `/data` directory on
    the Android device can be copied to the local directory on the machine. The entire
    `data` directory was extracted in 97 seconds. The extraction time will vary depending
    on the amount of data residing in `/data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c118d6b7-a15a-42f1-9b7a-1224ace5a3a2.png)'
  prefs: []
  type: TYPE_IMG
- en: The /data directory extracted to a forensic workstation
  prefs: []
  type: TYPE_NORMAL
- en: 'On a non-rooted device, a `pull` command on the `/data` directory does not
    extract the files, as shown in the following output, since the shell user does
    not have permission to access those files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f175857-1f6f-4e06-bbaa-93cb07465527.png)'
  prefs: []
  type: TYPE_IMG
- en: ADB pull command on non-rooted device
  prefs: []
  type: TYPE_NORMAL
- en: The data copied from a rooted phone through the preceding process maintains
    its directory structure, hence allowing an investigator to browse through the
    necessary files to gain access to the information. By analyzing the data of the
    respective applications, a forensic expert can gather critical information that
    can influence the outcome of the investigation. Note that examining the folders
    natively on your forensic workstation will alter the dates and times of the content.
    You should make a copy of the original output to use for a date/time comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Using SQLite Browser to view the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLite Browser is a tool that can help during the course of analyzing extracted
    data. SQLite Browser allows you to explore database files with the following extensions: `.sqlite`,
    `.sqlite3`, `.sqlitedb`, `.db`, and `.db3`. The main advantage of using SQLite
    Browser is that it shows data in a table form.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to File | Open Database to open a `.db` file using SQLite Browser.
    As shown in the following screenshot, there are three main tabs: Database Structure,
    Browse Data, and Execute SQL. The Browse Data tab allows you to see the information
    present in different tables within the `.db` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be mostly using this tab during our analysis. Alternatively, tools
    such as Oxygen Forensic SQLite Viewer can also be used for the same purpose. Recovering
    deleted data from database files is possible and will be explained in [Chapter
    10](5bb0cc1b-d89c-408a-b2c9-6b946519151d.xhtml), *Android Data Analysis* *and
    Recovery*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8857866-309c-4595-ac02-07cdf0e51b93.png)'
  prefs: []
  type: TYPE_IMG
- en: SQLite Browser
  prefs: []
  type: TYPE_NORMAL
- en: The following sections throw light on identifying important data and manually
    extracting various details from an Android phone. Gaining access to the Terminal
    on Android has been covered in earlier chapters. In the following section, we
    will directly jump into gaining device information from there.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting device information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Knowing the details of your Android device, such as the model, version, and
    more, will aid your investigation. For example, when the device is physically
    damaged and this prohibits the examination of the device information, you can
    grab details about the device by executing the following command under the `/system`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3378156a-13cf-440a-96e5-77ec39ed16f2.png)'
  prefs: []
  type: TYPE_IMG
- en: The build.prop file
  prefs: []
  type: TYPE_NORMAL
- en: After extracting device information, we will now extract call logs.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting call logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Accessing the call logs of a phone is often required during an investigation
    to confirm certain events. The information about call logs is stored in the `contacts2.db`
    file located at `/data/data/com.android.providers.contacts/databases/`. As mentioned
    earlier, you can use SQLite Browser to see the data present in this file after
    extracting it to a local folder on the forensic workstation. Let''s see how to
    extract call logs by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, using the `adb pull` command, the necessary
    `.db` files can be extracted to a folder on the forensic workstation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e701571d-1308-4ed6-b4e5-599300752f2b.png)'
  prefs: []
  type: TYPE_IMG
- en: The contacts2.db file copied to a local folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that applications used to make calls can store call log details in the
    respective application folder. All communication applications must be examined
    for call log details, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a311a289-ac04-46a8-a94d-80f7913be712.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open the `contacts2.db` file using SQLite Browser (by navigating to File
    | Open Database) and browse through the data present in different tables. The
    calls table present in the `contacts2.db` file provides information about the
    call history. The following screenshot highlights the call history along with
    the name, number, duration, and date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b0a7aa8-f098-4985-8614-d7bf30bdc610.png)'
  prefs: []
  type: TYPE_IMG
- en: On devices running Android 7.0 (Nougat), call log data has been moved out of
    the `contacts2.db` file. On these devices, call log data can be accessed at `/data/com.android.providers.contacts/databases/calllog.db`
  prefs: []
  type: TYPE_NORMAL
- en: Extracting SMS/MMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the course of an investigation, you may be asked to retrieve the text
    messages that were sent by and delivered to a particular mobile device. Hence,
    it is important to understand where the details are stored and how to access the
    data. The `mmssms.db` file, which is present under `/data/data/com.android.providers.telephony/databases`,
    contains the necessary details. As with call logs, you must ensure that applications
    capable of messaging are examined for relevant message logs by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/953d91f5-744b-4ed9-93d8-710bdfe854eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Extracting SMS data
  prefs: []
  type: TYPE_NORMAL
- en: 'The phone number can be seen under the address column and the corresponding
    text message can be seen under the body column, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eb6323e-c01c-4c6e-afe6-46793be9d519.png)'
  prefs: []
  type: TYPE_IMG
- en: The calls table in the contacts2.db file
  prefs: []
  type: TYPE_NORMAL
- en: We will now extract browser history information.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting browser history information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Extracting browser history information is one task that is often required of
    a forensic examiner. Apart from the default Android browser, different browser
    applications can be used on an Android phone, such as Firefox Mobile and Google
    Chrome. All of these browsers store their browser history in the SQLite `.db`
    format. For our example, we are extracting data from the default Android browser
    to our forensic workstation. This data is located at `/data/data/com.android.browser`.
    The file named `browser2.db` contains the browser history details. The following
    screenshot shows the browser data, as represented by Oxygen Forensic SQLite Viewer.
    Note that the trial version will hide certain information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e1c3bcb-e0e5-418f-884f-dd545c30ab6d.png)'
  prefs: []
  type: TYPE_IMG
- en: The browser2.db file in Oxygen Forensic SQLite Viewer
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the aforementioned behavior might change if the browser's incognito
    mode is used.
  prefs: []
  type: TYPE_NORMAL
- en: Several details covered in the preceding section are not stored on the device
    if the browser's incognito mode is used. Next, we will be analyzing social networking
    and IM chats.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis of social networking/IM chats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social networking and IM chat applications such as Facebook, Twitter, and WhatsApp
    reveal sensitive data that could be helpful during the investigation of any case.
    The analysis is pretty much the same as with any other Android application. Download
    the data to a forensic workstation and analyze the `.db` files to find out whether
    you can unearth any sensitive information. For example, let's look at the Facebook
    application and try to see what data can be extracted.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we extract the `/data/data/com.facebook.katana` folder and navigate
    to the `databases` folder. The `fb.db` file present under this folder contains
    the information that is associated with the user''s account. The `friends_data`
    table contains information about the user''s friends'' names, along with their
    phone numbers, email IDs, and dates of birth, as shown in the following screenshot.
    Similarly, other files can be analyzed to find out whether any sensitive information
    can be gathered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31287bf1-f5b4-47b0-a513-3976365b6902.png)'
  prefs: []
  type: TYPE_IMG
- en: The fb.db file in SQLite Browser
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, by analyzing the data present in the `/data/data` folder, information
    about the geolocation, calendar events, user notes, and more can be grabbed.
  prefs: []
  type: TYPE_NORMAL
- en: ADB backup extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting from Android 4.0, Google implemented the `adb backup` functionality,
    which allows users to back up application data to a computer using the `adb` tool.
    This process does not require root access and, hence, can be very useful during
    forensic examination. The main drawback is that it does not back up every application
    installed on the device. The backup feature is application dependent, as the owner
    of the application can choose to allow backups. Backups are allowed by default,
    but the developer can disable it if they want to. Hence, most third-party apps
    have this enabled and the `adb backup` command will work for them. Here is the
    syntax for the `adb backup` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s discuss this in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-f`: This is used to choose where the backup file will be stored. If not specified,
    it defaults to `backup.ab` in the present working directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-apk|noapk]`: This is used to choose whether or not to back up the `.apk`
    file. The default is `-noapk`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-obb|-noobb]`: This is used to choose whether or not to back up the `.obb`
    (APK expansion) files. It defaults to `-noobb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-shared|-noshared]`: This is used to choose whether or not to back up data
    from shared storage and the SD card. The default is `-noshared`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-all]`: This includes all applications for which backups are enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[-system|-nosystem]`: This is used to choose whether or not to include system
    applications. It defaults to `-system`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[<packages>]`: This is used to list a specific package name to be backed up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the device is connected to the workstation and `adb` can access it, run
    the `adb backup -shared -all` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a06189c7-2d38-40fa-9af4-d6164ebb7f9c.png)'
  prefs: []
  type: TYPE_IMG
- en: The adb backup command
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the command is run, the user then needs to approve the permission on the
    device, as shown in the following screenshot. For this reason, if the device is
    screen locked, it''s not possible to make a backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0589699a-734b-4c0a-b2fc-868070038f61.png)'
  prefs: []
  type: TYPE_IMG
- en: Backup permission on the device
  prefs: []
  type: TYPE_NORMAL
- en: 'An Android backup file is stored as a `.ab` file and, by default, it is stored
    in the `platform- tools` folder of the Android SDK. There are free tools, such
    as Android Backup Extractor, that can convert the `.ab` file into a `.tar` file,
    which can then be viewed. Android Backup Extractor can be downloaded from [https://sourceforge.net/projects/adbextractor/](https://sourceforge.net/projects/adbextractor/).
    This tool is a Java-based application, so ensure that Java is installed on the
    workstation before using the tool. To convert the backup file into `.tar` format,
    issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will automatically create a file with the `.tar` extension, which can then
    be viewed easily using Archive tools such as WinRAR or 7Zip. However, note that
    if the password was entered on the device when the backup was created, the file
    will be encrypted and, therefore, you'll need to provide the password as an argument
    in the preceding command. The backup file contains two main folders—`apps` and
    `shared`. The `apps` folder contains all of the information that is present under
    `/data/data` for the applications included in the backup. The `shared` folder
    contains all of the data present on the SD card.
  prefs: []
  type: TYPE_NORMAL
- en: ADB dumpsys extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `adb dumpsys` command allows you to gather information about services and
    applications running on the system. The `adb shell dumpsys` command gives diagnostic
    output for all system services. The `dumpsys` command does not require root privileges
    to be executed and requires only USB debugging to be enabled as with any other
    `adb` command. As shown in the following screenshot, to see the list of all the
    services that you can use with `dumpsys`, run the `adb.exe shell service list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b00b1090-9432-4e58-93f8-eb5fb55eb31e.png)'
  prefs: []
  type: TYPE_IMG
- en: The dumpsys service list command
  prefs: []
  type: TYPE_NORMAL
- en: 'Analyzing certain `dumpsys` services, such as Wi-Fi, user, and notification,
    can be helpful in certain scenarios. Here are some of the interesting cases where
    running the `dumpsys` command could be helpful during forensic analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dumpsys iphonesubinfo` service can be used to get information about a
    device ID or the IMEI number, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/310dee13-d763-488c-b4c7-3227abebd8d1.png)'
  prefs: []
  type: TYPE_IMG
- en: The dumpsys command showing the IMEI number
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dumpsys wifi` service gives information about Wi-Fi points accessed by
    the user. It shows the SSIDs of the connections that have been saved. This information
    can be used to pin down the user to a particular location. Here is the `adb dumpsys`
    command, which gives this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7705ecd1-0ce6-4014-aeaf-d565e858aceb.png)'
  prefs: []
  type: TYPE_IMG
- en: The dumpsys command showing the last connected Wi-Fi details
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dumpsys usagestats` service gives information about recently used applications,
    along with their date of usage. For example, the following screenshot shows that
    no apps were used on February 1, 2016, but on January 31, 2016, the Google Chrome
    browser was used and there was an attempt to back up the phone data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7d95867-0cf2-4901-82f6-5149ccab2e1b.png)'
  prefs: []
  type: TYPE_IMG
- en: The dumpsys command showing recently used apps
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe that against `Date 20160201, android: 0` times denotes that no apps
    were used. But for `Date: 20160131, android: 1 times` confirms that one app was
    used and the later sections provide more details on what app was used and so on.
    Depending on the case being investigated, the forensic analyst needs to figure
    out whether any of the `dumpsys` commands can be of use. Running a `dumpsys` command
    immediately after a device seizure can be extremely helpful later on. By running
    the `adb shell dumpsys` command, you can record all of the `dumpsys` service information.'
  prefs: []
  type: TYPE_NORMAL
- en: Using content providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, the data of one application cannot be accessed by another application
    under normal circumstances. However, Android provides a mechanism through which
    data can be shared with other applications. This is precisely achieved through
    the use of content providers. Content providers present data to external applications
    in the form of one or more tables. These tables are no different from the tables
    found in a relational database. They can be used by applications to share data,
    usually through the URI addressing scheme. They are used by other applications
    that access the provider using a provider-client object. During the installation
    of an app, the user determines whether or not the app can gain access to the requested
    data (content providers). For instance, contacts, SMS/MMS, and a calendar are
    examples of content providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, by taking advantage of this, we can create an app that can grab all
    of the information from all of the available content providers. This is precisely
    how most commercial forensic tools work. The advantage of this method is that
    it can be used on both rooted and non-rooted devices. For our example, we use
    AFLogical, which takes advantage of the content provider mechanism to gain access
    to the information. This tool extracts the data and saves it to an SD card in
    CSV format. The following steps extract the information from an Android device
    using AFLogical Open Source Edition 1.5.2:'
  prefs: []
  type: TYPE_NORMAL
- en: Download AFLogical OSE 1.5.2 from [https://github.com/nowsecure/android-forensics/downloads](https://github.com/nowsecure/android-forensics/downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The AFLogical LE edition is capable of extracting a large amount of information
    and requires registration via forensics using an active law enforcement or government
    agency email address. AFLogical OSE can pull all available MMSes, SMSes, contacts,
    and call logs.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that USB debugging mode is enabled and connect the device to the workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the device is identified by issuing the `adb.exe devices` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9bf7260b-c029-4047-ade4-82af65b65d1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Identify connected device
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the AFLogical OSE app in the home directory and issue the `adb.exe install
    AFLogical-OSE_1.5.2.apk` command to install it on the device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1320ae1a-9c10-46e4-8e94-2f9aa414bfa8.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing AFLogical app
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the application is installed, you can run it directly from the device
    and click on the Capture button present at the bottom of the app, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5a35c3a-3deb-41c7-8b33-e553d6f7884d.png)'
  prefs: []
  type: TYPE_IMG
- en: The AFLogical OSE app
  prefs: []
  type: TYPE_NORMAL
- en: 'The app starts extracting data from the respective content providers and, once
    the process is complete, a message will be displayed, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77e3267f-4820-4e69-a728-e331fd6c33f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Message displayed after the extraction is complete
  prefs: []
  type: TYPE_NORMAL
- en: 'The extracted data is saved to the SD card of the device in a directory named
    `forensics`. The extracted information is stored in CSV files, as shown in the
    following screenshot. The CSV files can be viewed using any editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6aa8734c-bdf1-40a2-a472-c471c6170ea0.png)'
  prefs: []
  type: TYPE_IMG
- en: Files extracted using AFLogical OSE
  prefs: []
  type: TYPE_NORMAL
- en: The `info.xml` file present in the same directory provides information about
    the device, including the IMEI number, IMSI number, Android version, information
    about installed applications, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, note that third-party app installation should be allowed (by selecting
    the Unknown Sources option) on the device for this to work. Other tools that can
    help during an investigation to logically extract data will be covered in [Chapter
    11](882decf1-336b-416f-98ab-dadecc71efef.xhtml), *Android App Analysis, Malware,
    a**nd Reverse Engineering*.
  prefs: []
  type: TYPE_NORMAL
- en: This section covered various logical acquisition techniques. We will now look
    into physical data extraction techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Physical data extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Physical extraction refers to the process of obtaining an exact bit-by-bit image
    of a device. It is important to understand that a bit-by-bit image is not the
    same as copying and pasting the contents of a device. If we copy and paste the
    contents of a device, it will only copy the available files, such as visible files,
    hidden files, and system-related files. This method is considered a logical image.
    With this method, deleted files and files that are not accessible are not copied
    by the `copy` command. Deleted files can be recovered (based on the circumstances)
    using certain techniques, which we will see in the following chapters. Unlike
    logical extraction, physical extraction is an exact copy of the device's memory
    and includes more information, such as the slack space and unallocated space.
  prefs: []
  type: TYPE_NORMAL
- en: Android data extraction through physical techniques is commonly performed using
    the `dd` command, while other advanced techniques such as JTAG and chip-off are
    also available, but are usually hard to implement and require great precision
    and experience to try them on real devices during the course of an investigation.
    As with any other technique, if an individual performs these procedures incorrectly,
    data on the device can be corrupted or become irretrievable, thereby making it
    non-admissible in a court of law. JTAG and chip-off techniques are covered in
    detail in the following sections. However, extracting data through the `dd` command
    requires root access. The following sections provide an overview of various techniques
    that can be used to perform physical extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Imaging an Android phone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imaging a device is one of the most important steps in mobile device forensics.
    When possible, it's imperative to obtain a physical image of an Android device
    before performing any techniques to extract the data directly from the device.
    In forensics, this process of obtaining a physical acquisition is commonly called
    *imaging the device*. The terms physical image, forensic image, and raw image
    are often used to refer to the image captured through this process. Let's first
    revisit how imaging is done on a desktop computer as it helps us to correlate
    and realize the problems associated with imaging Android devices. Let's assume
    that a desktop computer, which is not powered on, is seized from a suspect and
    sent for forensic examination. In this case, a typical forensic examiner would
    remove the hard disk, connect it to a write blocker, and obtain a bit-by-bit forensic
    image using any of the available tools. The original hard disk is then safely
    protected during the forensic imaging of the data.
  prefs: []
  type: TYPE_NORMAL
- en: With an Android device, all of the areas that contain data cannot be easily
    removed. Also, if the device is active at the time of receiving it for examination,
    it is not possible to analyze the device without making any changes to it, because
    any interaction would change the state of the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Android device may have two file storage areas: internal and external storage.
    Internal storage refers to the built-in non-volatile memory. External storage
    refers to the removable storage medium, such as a micro SD card. However, it''s
    important to note that some devices do not have a removable storage medium such
    as an SD card, but they divide the available permanent storage space into internal
    and external storage. Hence, it''s not always true that external storage is removable.
    When a removable SD card is present, a forensic image of the memory card has to
    be obtained. As discussed in [Chapter 7](eb3f20e0-270d-4e7d-bb69-3bfd1e707f38.xhtml),
    *Understanding Android*, these removable cards are generally formatted with the
    FAT32 filesystem. Some mobile device acquisition methods will acquire the SD card
    through the Android device. This process, while useful, will be slow due to the
    speed limitations of USB phone cables.'
  prefs: []
  type: TYPE_NORMAL
- en: Android, by default, does not provide access to internal directories and system-related
    files. This restricted access is to ensure the security of the device. For instance,
    the `/data/data` folder is not accessible on a non-rooted device. This folder
    is especially of interest to us because it stores most of the user-created data
    and many applications write valuable data into this folder. Hence, to obtain an
    image of the device, we need to root the Android device. Rooting a device gives
    us superuser privileges and access to all of the data. It is important to realize
    that this book has been stressing that all of the steps taken should be forensically
    sound and should not make changes to the device whenever possible. Rooting an
    Android device will make changes to it and should be tested on any device that
    you have not previously investigated. Rooting is common for Android devices, but
    getting root access could alter the device in a manner that renders the data changed
    or—worse yet—wiped. Some Android devices, such as the Nexus 4 and 5, may force
    the data partition to be wiped before allowing root access. This negates the need
    to root the device to gain access because all of the user data is lost during
    the process. Just remember that, while rooting provides access to more data when
    successfully done, it can also wipe data or destroy the phone. Hence, you must
    ensure that you have consent or legal rights to manipulate an Android device before
    proceeding with the root. As rooting techniques have been discussed in [Chapter
    8](b1621e6e-80a3-495e-a288-c8db601149f8.xhtml), *Android Forensic Setup and Pre-Data
    Extraction Techniques*, we will proceed with the example assuming that the device
    is rooted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a step-by-step process to obtain a forensic image of a rooted
    Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the Android device to the workstation and verify that the device is
    identified by issuing the `adb devices` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb713f1a-4310-4b65-b740-5259e1d54a4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Identify connected devices
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `adb` access is ready, the partitions can be acquired from the Android
    device using the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Using the** `dd` **command**: The `dd` command can be used to create a raw
    image of the device. This command helps us to create a bit-by-bit image of the
    Android device by copying low-level data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inserting a new SD card**: Insert a new SD card into the device to copy the
    image file to this card. Make sure that this SD card is wiped and does not contain
    any other data. You might also need to testify that no additional data is present
    on the drive.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Executing the command**: The filesystem of an Android device is stored in
    different locations within the `/dev` partition. A simple `mount` command on a
    Samsung Galaxy S3 phone returns the following output:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a7a902ef-2668-4aaf-9c42-c1ce2dd44c16.png)'
  prefs: []
  type: TYPE_IMG
- en: mount command output on an Android device
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, we can identify the blocks where the `/system`,
    `/data`, and `/cache` partitions are mounted. Although it''s important to image
    all of the files, most of the data is present in the `/data` and `/system` partitions.
    When time allows, all partitions should be acquired for completeness. Once this
    is done, execute the following command to image the device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the data partition of a Samsung Galaxy S3 was used
    (where `if` is the input file and `of` is the output file).
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command will make a bit-by-bit image of the `mmcblk0p12` file
    (data partition) and copy the image file to an SD card. Once this is done, the
    `dd` image file can be analyzed using the available forensic software.
  prefs: []
  type: TYPE_NORMAL
- en: You must ensure that the SD card has enough storage space to contain the data
    partition image. Other methods are available to acquire data from rooted devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the image cannot be written to the SD card directly, you can use the `netcat`
    command to write the output directly to the machine. The `netcat` tool is a Linux-based
    tool used for transferring data over a network connection. Android devices do
    not usually come with `netcat` installed. Let''s see how to use this command in
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To check whether `netcat` is installed, simply open the ADB shell and type `nc`.
    If it returns saying nc is not found, `netcat` will have to be installed manually
    on the device. You can download `netcat` compiled for Android at [https://sourceforge.net/projects/androidforensics-netcat/files/](https://sourceforge.net/projects/androidforensics-netcat/files/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push `netcat` on to the device using the following command on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The command should have created `Case_Folder` in `/dev` and `nc` should be in
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to give it permission to execute from the ADB shell. This can
    be done as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Open two Terminal windows with the ADB shell open in one of them. The other
    will be used to listen to the data being sent from the device. Now, we need to
    enable port forwarding over ADB from your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`9999` is the port we chose to use for `netcat`; it can be any arbitrary port
    number between `1023` and `65535` on a Linux or Mac system (`1023` and below are
    reserved for system processes and require root permission to use them). In the
    other Terminal window, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `data_partition.img` file should now be created in the current directory
    of your computer. When the data is finished transferring, `netcat` will terminate
    in both terminals and return to Command Prompt. The process can take a significant
    amount of time depending on the size of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Imaging a memory (SD) card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many tools available that can image a memory card. The following
    example uses `WinHex` to create a raw disk image of the SD card. The following
    is the step-by-step process with which to image a memory card using WinHex:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting the memory card**: Remove the SD card from the memory slot and
    use a card reader to connect the memory card to the forensic workstation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Write-protect the card**: Open the disk using WinHex. Navigate to Options
    | Edit Mode and select Read-only Mode (=write-protected mode), as shown in the
    following screenshot. This is to make sure that the device is write-protected
    and no data can be written on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8c84dc71-82dc-40a6-9299-c287d2f8fc20.png)'
  prefs: []
  type: TYPE_IMG
- en: WinHex view of Edit Mode (left) and WinHex Read-only Mode enabled (right)
  prefs: []
  type: TYPE_NORMAL
- en: '**Calculating the hash value**: Calculate the hash value of the memory card
    to make sure that no changes are made at any point during the investigation. Navigate
    to Tools | Compute hash and choose any hashing algorithm.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating the image of the disk**: Navigate to File | Create Disk Image, as
    shown in the following screenshot. Select the raw image option (`.dd`) to create
    an image. This completes the imaging of the memory card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e6cc2f1-a0ca-47a2-958a-f71bafa8e538.png)'
  prefs: []
  type: TYPE_IMG
- en: The WinHex disk image option
  prefs: []
  type: TYPE_NORMAL
- en: Once a forensic image is obtained using any of the methods described previously,
    it needs to be analyzed to extract the relevant information. There are several
    commercial tools, such as Cellebrite and XRY, that can analyze image files. Analyzing
    Android images is covered in detail in Chapter 10, *Android Data Analysis and
    Recovery*.
  prefs: []
  type: TYPE_NORMAL
- en: Joint Test Action Group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Joint Test Action Group** (**JTAG**) involves using advanced data acquisition
    methods, which involve connecting to specific ports on the device and instructing
    the processor to transfer the data stored on the device. Using this method, a
    full physical image of a device can be acquired. It is always recommended to first
    try out the other techniques mentioned earlier, as they are easy to implement
    and require less effort. An analyst must be experienced and properly trained before
    attempting JTAG as the device may be damaged if not handled properly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The JTAG process usually involves the following forensic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In JTAG, the device **Test Access Ports** (**TAPs**) are used to access the
    CPU of the device. Identifying the TAPs is the primary and most important step.
    TAPs are identified and the connection is traced to the CPU to find out which
    pad is responsible for each function. Although device manufacturers document resources
    about the JTAG schematics of a particular device, they are not released for general
    viewing. A good site for JTAG on an Android device is [https://forensicswiki.xyz/wiki/index.php?title=JTAG_Forensics](https://forensicswiki.xyz/wiki/index.php?title=JTAG_Forensics).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wire leads are then soldered to appropriate connector pins and the other end
    is connected to the device that can control the CPU, as shown in the following
    photograph (published by Jim Swauger at [http://www.binaryintel.com/services/jtag-chip-off-forensics/jtag-forensics/](http://www.binaryintel.com/services/jtag-chip-off-forensics/jtag-forensics/) ).
    JTAG jigs can be used to forgo soldering for certain devices. The use of a jig
    or JTAG adapter negates the need to solder, as it connects the TAPs to the CPU:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5acf214d-c2d8-4d2d-bb02-2f5165131b1d.png)'
  prefs: []
  type: TYPE_IMG
- en: The JTAG setup
  prefs: []
  type: TYPE_NORMAL
- en: Once the preceding steps are complete, power must be applied to boot the CPU.
    The voltage that must be applied depends on the specifications released by the
    hardware manufacturer. Do not apply a voltage beyond the number given in the specification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After applying the power, a full binary memory dump of the NAND flash can be
    extracted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze the extracted data using the forensic techniques and tools learned in
    this book. A raw `.bin` file will be obtained during the acquisition; most forensic
    tools support the ingestion and analysis of this image format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JTAG may sound complicated (perhaps it is), but it serves many useful purposes
    and three advantages are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of this technique is that it works even if the device is
    not powered on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not require root, ADB, or USB debugging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used to recover device PINs/passwords and so can image the entire
    flash memory and recover/crack password files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also important to understand that the JTAG technique should not result
    in the loss of functionality of the device. If reassembled properly, the device
    should function without any problems. Although the JTAG technique is effective
    in extracting data, only experienced and qualified personnel should attempt it.
    Any error in soldering the JTAG pads or applying the wrong voltage could severely
    damage the device.
  prefs: []
  type: TYPE_NORMAL
- en: The chip-off technique
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chip-off, as the name suggests, is a technique where the NAND flash chips are
    removed from the device and examined to extract information. Hence, this technique
    will work even when the device is passcode-protected and USB debugging is not
    enabled. Unlike the JTAG technique, where the device functions normally after
    examination, the chip-off technique usually results in the destruction of the
    device, that is, it is more difficult to reattach the NAND flash to the device
    after examination. The process of reattaching the NAND flash to the device is
    called re-balling and requires training and practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chip-off techniques usually involve the following forensic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: All of the chips on the device must be researched to determine which chip contains
    user data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once determined, the NAND flash is physically removed from the device. This
    can be done by applying heat to desolder the chip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29816483-c302-4e11-be48-9cb6ba0517b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Chip-off technique
  prefs: []
  type: TYPE_NORMAL
- en: Source: http://www.binaryintel.com/services/jtag-chip-off-forensics/chip-off_forensics/
  prefs: []
  type: TYPE_NORMAL
- en: This is a very delicate process and must be done with great care, as it may
    result in damaging the NAND flash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The chip is then cleaned and repaired to make sure that the connectors are present
    and functioning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using specialized hardware device adapters, the chip can now be read. This is
    done by inserting the chip into the hardware device, that supports the specific
    NAND flash chip. In this process, raw data is acquired from the chip, resulting
    in a `.bin` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data acquired can now be analyzed using forensic techniques and the tools
    described earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The chip-off technique is most helpful when a device is damaged severely, locked,
    or otherwise inaccessible. However, the application of this technique requires
    not only expertise but also costly equipment and tools. There is always a risk
    of damaging the NAND flash while removing it and, hence, it is recommended to
    try out the logical techniques first to extract any data.
  prefs: []
  type: TYPE_NORMAL
- en: While root access is a must to perform any of the techniques discussed earlier,
    it must be noted here that, at the time of writing this book, none of these techniques
    would work on devices that have **Full Disk Encryption** (**FDE**) enabled. As
    discussed in [Chapter 7](eb3f20e0-270d-4e7d-bb69-3bfd1e707f38.xhtml), *Understanding
    Android*, Google has mandated the use of FDE for most devices starting from Android
    6.0\. Although some techniques were demonstrated and published for decrypting
    full disk encryption, they are device-specific and are not widely applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered various manual, logical, and physical data extraction techniques.
    We learned when and how to apply these techniques during the course of an investigation.
    Logical techniques extract data by interacting with the device using tools such
    as ADB. Physical techniques, on the other hand, access a larger set of data; they
    are complex and require a great deal of expertise to perform. Imaging a device
    produces a bit-by-bit image of the device, which is later analyzed using tools.
    Imaging a device is one of the primary steps to ensure that the data on the device
    is not modified. Android 7.0 and above poses a new challenge to forensic investigators
    by bringing in new security features and file paths that may limit acquisition.
    With this knowledge, you can perform device acquisition to extract relevant data
    from an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to extract relevant data such as call logs,
    text messages, and browsing history from an image file. We will also cover data
    recovery techniques, using which we can recover data deleted from a device.
  prefs: []
  type: TYPE_NORMAL
