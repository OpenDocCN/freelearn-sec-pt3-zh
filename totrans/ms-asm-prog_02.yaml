- en: Setting Up a Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are slowly approaching the point where we will be able to begin to actually
    deal with Assembly language itself--writing code, examining programs, solving
    problems. We are just one step away, and the step is setting up a development
    environment for Assembly programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite the fact that the assembler used in this book is a **Flat Assembler**
    (**FASM**), it is important to cover at least two other options and, therefore,
    in this chapter, you will learn how to configure three types of development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting up a development environment for Windows-based applications using
    Visual Studio 2017 Community**: This will allow the direct integration of Assembly
    projects with existing solutions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing GNU Compilers Collection** (**GCC**): Although it is possible
    to use GCC on both Windows and *nix platforms, we will emphasize GCC usage on
    Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flat Assembler**: This one seems to be the simplest and most comfortable
    one to use for Assembly programming on either Windows or Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will end each section with a short test program written in the Assembly language
    specifically for the assembler described in the section.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Macro Assembler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name of this assembler states, it supports macros and has a nice set
    of built-in ones. However, it is hard to find a more or less valuable assembler
    without this feature today.
  prefs: []
  type: TYPE_NORMAL
- en: The first assembler I ever used was **Macro Assembler** (**MASM**) (I do not
    remember which version) on DOS installed on a Sony laptop with 4-MB RAM and a
    100-MB hard disk (ah, good old times), and MS-DOS edit.exe was the only IDE. Needless
    to say, the compilation and linking was performed manually in the command line
    (as if DOS had any other interface).
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, this is the best way to learn Assembly or any other programming
    language--just a simple editor with as few features as possible (however, syntax
    highlighting is a great advantage, as it helps in avoiding typos) and a set of
    command-line tools. Modern **integrated development environments** (**IDEs**)
    are very complex, yet very powerful tools, and I am not trying to underestimate
    them; however, it is much better to use them once you understand what happens
    behind this complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the intent behind this book is to learn the language the CPU speaks,
    not a specific Assembly dialect or specific assembler command-line options. Not
    to mention the fact that the currently available Microsoft Visual Studio 2017
    Community (the easiest way to get MASM is to install Visual Studio 2017 Community--free
    and convenient) comes with several assembler binaries:'
  prefs: []
  type: TYPE_NORMAL
- en: A 32-bit binary that produces 32-bit code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 32-bit binary that produces 64-bit code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 64-bit binary that produces 32-bit code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 64-bit binary that produces 64-bit code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our goal is to know how the CPU thinks rather than how to make it understand
    our thoughts and how we can find the location of libraries and executables installed
    on the system. Therefore, if MASM is your choice, it's good to use Visual Studio
    2017 Community, as it will save you a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Microsoft Visual Studio 2017 Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may safely skip this step if you already have Microsoft Visual Studio 2017
    Community or any other version of Microsoft Visual Studio installed.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the easiest actions described in this book. Go to [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    and download and run the installer for Visual Studio 2017 Community.
  prefs: []
  type: TYPE_NORMAL
- en: The installer has many options that you may want to select depending on your
    development needs; however, there is one that we need for Assembly development,
    and it is called Desktop development with C++.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you insist on using the command line to build your Assembly programs, you
    can find MASM executables at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VS_2017_install_dir\VC\bin\amd64_x86\ml.exe`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VS_2017_install_dir\VC\bin\amd64\ml64.exe`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VS_2017_install_dir\VC\bin\ml.exe`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VS_2017_install_dir\VC\bin\x86_amd64\ml64.exe`'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Assembly project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unfortunately, Visual Studio, by default, has no template for Assembly language
    projects, therefore, we have to create one ourselves:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Visual Studio and create an empty solution, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55af3526-45f6-46dc-aa46-b4c56a13670d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating blank VS2017 solution
  prefs: []
  type: TYPE_NORMAL
- en: Look at the bottom-right part of the Start Page window, where you will see the
    option to create a blank solution. If there is no such option, click on More project
    templates... and select Blank Solution from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the solution has been created for us, we may add a new project. Right-click
    on the name of the solution and go to Add | New Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7314b70a-8938-4b95-8c39-b9a5e2e2f372.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new project to the solution
  prefs: []
  type: TYPE_NORMAL
- en: 'As Visual Studio has no built-in template for an Assembly project, we will
    add an empty C++ project to our solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/591ac333-ae73-4aee-be46-1e99bfd0dbfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an empty project
  prefs: []
  type: TYPE_NORMAL
- en: Choose a name for the project and click on OK. There are a two more things we
    have to do before we can add source files. To be more precise, we can add sources
    and then take care of these two things, as the order does not really matter. Just
    keep in mind that we will not be able to build (or, correctly build) our project
    before we take care of these.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing to take care of is setting the subsystem for the project; otherwise,
    the linker will not know what kind of executable to generate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the project name in the Solution Explorer tab and go to Properties.
    In the project properties window, we go to Configuration Properties | Linker |
    System and select Windows (/SUBSYSTEM:WINDOWS) under SubSystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6607db15-b944-43f2-9c20-adc4bf14bdb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the target subsystem
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to tell Visual Studio that this is an Assembly language project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f7ed48d-65b7-4ce5-b503-49c5640a6b47.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening the "Build Customizations" window
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the project name and go to Build Dependencies in the context
    menu, click on Build Customizationsâ€¦, and from the build customizations window,
    select `masm(.targets, .props)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de28f203-e473-4739-b338-677df284b96b.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting proper targets
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to add the first Assembly source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b592922-ad41-4af4-ab45-742a2b2145cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new Assembly source file
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, Visual Studio does not seem to be prepared for Assembly projects
    and, therefore, has no built-in template for Assembly files. So, we right-click
    on Source Files in the Solution Explorer, select New Item under Add, and since
    there is no template for the Assembly source file, we select C++ File (.cpp),
    but set the name of the file with the `.asm` extension. We click on Add, and voila!
    Our first Assembly source file is shown in the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just for fun, let''s add some code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Do not worry if the code does not "speak" to you yet; we will begin to get acquainted
    with the instructions and program structure in [Chapter 3](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml),
    *Intel Instruction Set Architecture (ISA)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, let''s build the project and run it. The code does not do much,
    as it simply displays a message box and terminates the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/574ca98e-c5b5-4027-b82a-1204fbda8a3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample output
  prefs: []
  type: TYPE_NORMAL
- en: By now, we have a working setup for Assembly development on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: GNU Assembler (GAS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GNU Assembler or GAS, or simply AS, is the most used assembler on *nix (Unix
    and Linux) platforms. While it is cross-platform (having the right build of GAS,
    we can compile Assembly code for a wide variety of platforms including Windows),
    flexible and powerful, it defaults to the AT&T syntax, which is, for those used
    to Intel syntax, weird, to say the least. GAS is free software released under
    the terms of GNU General Public License v3.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GAS is distributed as part of the `binutils` package, but since it is the default
    backend for GCC (GNU Compilers Collection), it would be better if we install GCC.
    In fact, installing GCC instead of `binutils` alone will slightly simplify the
    creation of executables out of our Assembly code, as GCC would automatically handle
    a few tasks during the linking process. Despite having its roots in *nix systems,
    GAS is also available for Windows and may be downloaded from [https://sourceforge.net/projects/mingw-w64/](https://sourceforge.net/projects/mingw-w64/)
    (just remember to add the `bin` subfolder in the installation folder to the `PATH`
    environment variable). Installation on Windows is quite straightforward--simply
    follow the steps in the GUI installation wizard.
  prefs: []
  type: TYPE_NORMAL
- en: Another option for those of us using Windows is "Bash on Windows;" however,
    this is only available on 64-bit Windows 10 with Anniversary/Creators Update installed.
    The installation steps for GAS would then be the same as those for running Ubuntu
    or Debian Linux.
  prefs: []
  type: TYPE_NORMAL
- en: As this book is intended for developers, it might be safe to assume that you
    already have it installed on your system, if you are on a *nix system, however,
    let's leave assumptions aside and install GAS.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - installing GAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your favorite terminal emulator and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on a Debian-based distribution or if it is RH based, then use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Step 2 - let's test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once ready, let's build our first Assembly program on Linux. Create an Assembly
    source file named, for example, `test.S`.
  prefs: []
  type: TYPE_NORMAL
- en: Assembly source files on *nix platforms have the extension `.S` or `.s` instead
    of `.asm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Prepend `printf` and `main` with an underscore (`_`) if you are on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'If on Linux, build the code with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for this code to be compiled correctly on a 64-bit system, as it is
    written for 32-bit assembler, you should install the 32-bit toolchain and libraries,
    as well as add the `-m32` option, which tells GCC to generate code for a 32-bit
    platform, with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`gcc -m32 -o test test.S`**'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the documentation of your Linux distro for instructions on how to install
    32-bit libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re on Windows, change the name of the output executable accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the executable in the Terminal. You should see the message followed by
    a new line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you may have noticed, the syntax of this Assembly source is different from
    that supported by MASM. While MASM supports what is called Intel syntax, GAS originally
    supported only the AT&T syntax. However, the support for Intel syntax was added
    at some point, thus making the life of new adepts significantly easier.
  prefs: []
  type: TYPE_NORMAL
- en: Flat Assembler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen the complexities introduced by MASM and GAS, whether it
    is syntax or setup complexity, let's take a look at Flat Assembler, a free, portable,
    self-compiling assembler for Windows and Linux with Intel syntax (very similar
    to that of MASM, but much less complicated and much more understandable). Exactly
    the tool we need for easier and faster understanding of Intel Assembly language
    and usage thereof.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to support for various executable file formats (DOS COM files to
    begin with, through Windows PE (both 32 bit and 64 bit) and up to ELF (both 32
    bit and 64 bit)), FASM has a very powerful macro engine, which we will definitely
    take advantage of. Not to mention the fact that FASM can be easily integrated
    into existing development environments for more complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Flat Assembler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Regardless of whether you are on Windows or on Linux, you can get the Flat
    Assembler in the same easy way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, visit [https://flatassembler.net/download.php](https://flatassembler.net/download.php)
    and select the proper package for your operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/404e2f83-c55c-489d-8b0c-f5b92f84a1d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Flat Assembler download page
  prefs: []
  type: TYPE_NORMAL
- en: 'Unpack the package. Both Windows and Linux packages come with FASM sources,
    documentation, and examples. As we see in the following screenshot, the Windows
    version comes with two executables: `fasm.exe` and `fasmw.exe`. The only difference
    between the two is that `fasmw.exe` is a GUI implementation of Flat Assembler,
    while `fasm.exe` is the command line only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/827183a1-e26f-484d-89de-8346c68a845a.png)'
  prefs: []
  type: TYPE_IMG
- en: Content of the Flat Assembler package
  prefs: []
  type: TYPE_NORMAL
- en: Both executables may be run from the directory you unpacked the package to,
    as they have no external dependencies. If you decide to move it elsewhere, do
    not forget to put the `INCLUDE` folder and the `FASMW.INI` file (if one has already
    been created) into the same directory. If you copy `FASMW.INI`, then you will
    have to manually edit the `Include` path under the `[Environment]` section. Alternatively,
    you may skip copying `FASMW.INI`, as it will be automatically created the first
    time you launch `FASMW.EXE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Linux version lacks the GUI part, but it still contains the `fasm` source
    code, documentation, and examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bfd5451-679b-416c-8fb1-ba6e53688407.png)'
  prefs: []
  type: TYPE_IMG
- en: The content of the Flat Assembler package for Linux
  prefs: []
  type: TYPE_NORMAL
- en: While the `fasm` executable for Linux, just like its Windows counterpart, has
    no external dependencies and may be executed directly from the folder you unpacked
    the package to, it is a matter of convenience to copy it to a more proper location,
    for example, to `/usr/local/bin`.
  prefs: []
  type: TYPE_NORMAL
- en: The first FASM program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have installed the Flat Assembler, we cannot move further on unless
    we build a tiny test executable for either Windows or Linux. Interestingly enough,
    both examples may be compiled with the same assembler, meaning that the Linux
    example may be compiled on Windows and vice versa. But let's get to the example
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are on Windows, launch `fasmw.exe` and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Again, do not worry if you hardly understand anything in this code; it will
    begin to become clearer starting with the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In order to run the preceding code, go to the Run menu and select Run.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ac22574-311d-40fc-9675-963ceaefc682.png)'
  prefs: []
  type: TYPE_IMG
- en: Compiling sources in FASMW
  prefs: []
  type: TYPE_NORMAL
- en: Admire the result for a few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1868385c-240a-4f02-8700-37292c4f43c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Example output
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are on Linux, the source code will be even shorter. Open your favorite
    source editor, whether it is `nano`, `emacs`, or `vi`, or whatever, and enter
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is much more compact than that on Windows, as we are not using any
    high-level API functions; we''d rather use Linux system calls directly (this could
    turn into a nightmare on Windows). Save the file as `fasm1lin.asm` (this is not
    GAS or GCC, so we are free to give the Assembly source file its usual extension)
    and go to the terminal emulator. Issue the following command (assuming the `fasm`
    executable is in the place mentioned in the `PATH` environment variable) in order
    to build the executable out of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, try to run the file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29d2fb0e-c2e8-4036-a8f0-99fd33905e69.png)'
  prefs: []
  type: TYPE_IMG
- en: Building and running a Linux executable with Flat Assembler
  prefs: []
  type: TYPE_NORMAL
- en: As simple as that.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, we have reviewed three different assemblers: **Microsoft Macro Assembler**
    (**MASM**), this is an integral part of Visual Studio, **GNU Assembler** (**GAS**),
    this is the default backend for GNU Compilers Collection (GCC), **Flat Assembler**
    (**FASM**), this is a standalone, portable, flexible, and powerful assembler.'
  prefs: []
  type: TYPE_NORMAL
- en: Although we will be using FASM, we may still refer to the other two from time
    to time, when the need arises (and it will).
  prefs: []
  type: TYPE_NORMAL
- en: Having an installed and working assembler, we are ready to proceed to [Chapter
    3](57c5447c-2cc4-4a48-9c46-6825e4a83a9c.xhtml), *Intel Instruction Set Architecture
    (ISA)*, and start working with the Assembly language itself. There is a long road
    ahead, and we have not made the first step yet. In [Chapter 3](https://cdp.packtpub.com/mastering_assembly_programming/wp-admin/post.php?post=52&action=edit&save=save#post_108),
    *Intel Instruction Set Architecture (ISA)*, we will go through the instruction
    set architecture of Intel processors, and you will learn how to write simple programs
    for both Windows and Linux, 32 and 64-bit.
  prefs: []
  type: TYPE_NORMAL
