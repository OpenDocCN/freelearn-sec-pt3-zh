["```\n        .686\n        .model flat, stdcall\n\n        *; this is a comment*\n *; Imported functions*\n        ExitProcess proto uExitCode:DWORD\n        MessageBoxA proto hWnd:DWORD, lpText:DWORD, lpCaption:DWORD, \n        uType:DWORD\n\n        *; Here we tell assembler what to put into data section*\n        .data\n            msg db 'Hello from Assembly!', 0\n            ti db 'Hello message', 0\n\n        *; and here what to put into code section*\n        .code\n\n        *; This is our entry point*\n        main PROC\n            push 0              *; Prepare the value to return to the* \n *; operating system*\n            push offset msg     *; Pass pointer to MessageBox's text to* \n *; the show_message() function*\n            push offset ti      *; Pass pointer to MessageBox's title to* \n *; the show_message() function*\n            call show_message   *; Call it*\n\n            call ExitProcess    *; and return to the operating system*\n        main ENDP\n\n        *; This function's prototype would be:*\n *; void show_message(char* title, char* message);*\n        show_message PROC\n            push ebp\n            mov  ebp, esp\n            push eax\n\n            push 0              *; uType*\n            mov  eax, [dword ptr ebp + 8]\n            push eax            *; lpCaption*\n            mov  eax, [dword ptr ebp + 12]\n            push eax            *; lpText*\n            push 0              *; hWnd*\n            call MessageBoxA    *; call MessageBox()*\n\n            pop  eax\n            mov  esp, ebp\n            pop  ebp\n            ret  4 * 2          *; Return and clean the stack*\n        show_message ENDP\n        END main\n```", "```\nsudo apt-get install binutils gcc\n```", "```\nsudo yum install binutils gcc\n```", "```\nsu -c \"yum install binutils gcc\"\n```", "```\n*/**\n *This is a multiline comment.*\n**/*\n*// This is a single line comment.*\n*# Another single line comment.*\n\n*# The following line is not a necessity.*\n   .file \"test.S\"\n\n*# Tell GAS that we are using an external function.*\n   .extern printf\n\n*# Make some data - store message in data section 0*\n   .data\nmsg:\n   .ascii \"Hello from Assembly language!xaxdx0\"\n\n*# Begin the actual code*\n   .text\n*# Make main() publicly visible*\n   .globl main\n*/**\n *This is our main() function.* \n *It is important to mention,* \n *that we can't begin the program with* \n *'main()' when using GAS alone. We have then*\n *to begin the program with 'start' or '_start'* \n *function.*\n**/*\n\nmain:\n   pushl %ebp\n   movl %esp, %ebp\n   pushl $msg          *# Pass parameter (pointer*\n *# to message) to output_message function.*\n   call output_message *# Print the message*\n   movl $0, %eax\n   leave\n   ret\n\n*# This function simply prints out a message to the Terminal*\noutput_message:\n   pushl %ebp\n   movl %esp, %ebp\n   subl $8, %esp\n   movl 8(%ebp), %eax\n   movl %eax, (%esp)\n   call _printf        *# Here we call printf*\n   addl $4, %esp\n   movl $0, %eax\n   leave\n   ret $4\n```", "```\ngcc -o test test.S\n```", "```\ngcc -o test.exe test.S\n```", "```\nHello from Assembly language!\n```", "```\n include 'win32a.inc'\n\n format PE GUI\n entry _start\n\n section '.text' code readable executable\n _start:\n    push 0\n    push 0\n    push title\n    push message\n    push 0\n    call [MessageBox]\n    call [ExitProcess]\n\n section '.data' data readable writeable\n    message db 'Hello from FASM!', 0x00\n    title db 'Hello!', 0x00\n\n section '.idata' import data readable writeable\n library kernel, 'kernel32.dll',\n         user, 'user32.dll'\n\n import kernel,\\\n        ExitProcess, 'ExitProcess'\n\n import user,\\\n        MessageBox, 'MessageBoxA'\n```", "```\n format ELF executable 3\n entry _start\n\n segment readable executable\n _start:\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, message\n    mov edx, len\n    int 0x80\n\n    xor ebx, ebx\n    mov eax, ebx\n    inc eax\n    int 0x80\n\n segment readable writeable\n    message db 'Hello from FASM on Linux!', 0x0a\n    len = $ - message\n```", "```\nfasm fasm1lin.asm fasm1lin\n```", "```\n./fasm1lin\n```"]