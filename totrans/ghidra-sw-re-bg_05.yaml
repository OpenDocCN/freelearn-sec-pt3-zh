- en: '*Chapter 4*: Using Ghidra Extensions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce Ghidra extensions or modules. By using Ghidra
    extensions, you will be able to incorporate new functionalities into Ghidra according
    to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are optional components that can extend Ghidra's functionality with
    experimental or user-contributed Ghidra plugins or analyzers. By using extensions,
    you can, for instance, integrate other tools into Ghidra, such as Eclipse or IDA
    Pro.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue using the Eclipse IDE for development but we will also need
    to install Gradle in order to compile Ghidra extensions. Both the Ghidra program
    and its extensions are prepared to be built using Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: By developing extensions or modules (formerly known as contribs), you will be
    able to make higher contributions to the Ghidra project (such as adding integration
    with other reverse engineering tools, supporting new file formats and processors,
    and so on) than developing mere plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will learn how to use the Eclipse IDE for extension development
    and how to export a Ghidra extension from Eclipse after the development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing existing Ghidra extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Ghidra extension skeleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a Ghidra extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Java JDK 11 for x86_64 (available here: [https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot](https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Eclipse IDE for Java developers (any version supporting JDK 11 available
    here: [https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/))
    as it is the IDE that is officially integrated and supported by Ghidra'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gradle (the build automation tool required to compile Ghidra extensions): [https://gradle.org/install/](https://gradle.org/install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PyDev 6.3.1 (available here: [https://netix.dl.sourceforge.net/project/pydev/pydev/PyDev%206.3.1/PyDev%206.3.1.zip](https://netix.dl.sourceforge.net/project/pydev/pydev/PyDev%206.3.1/PyDev%206.3.1.zip))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assuming you have installed Java JDK 11, PyDev 6.3.1, and the Eclipse IDE for
    Java developers as explained in the previous chapter, you will need some additional
    software requirements in order to compile the Ghidra extensions: [https://gradle.org/next-steps/?version=5.0&format=bin](https://gradle.org/next-steps/?version=5.0&format=bin).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Gradle is a straightforward process. It consists of decompressing
    the ZIP file in the `C:\Gradle\` folder (as specified by the official install
    documentation), then setting the `GRADLE_HOME` system environment variable to
    point to `C:\Gradle\gradle-5.0`, and finally, adding `%GRADLE_HOME%\bin` to the
    `PATH` system environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub repository containing all the necessary code for this chapter can
    be found at [https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter04](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/2VTiUfw](https://bit.ly/2VTiUfw)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Gradle documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on installing Gradle, you can refer to the official documentation
    available online at [https://docs.gradle.org/current/userguide/installation.html](https://docs.gradle.org/current/userguide/installation.html).
    You can also refer to the offline documentation contained in the Gradle ZIP file:
    `getting-started.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing existing Ghidra extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Ghidra extension is a Java code which extends Ghidra in some way and is distributed
    as an installable package. Ghidra extensions have access to the internals of Ghidra,
    allowing them to freely extend it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some ready-to-use extensions are available in the appropriate `ghidra_9.1.2\
    Extensions\Ghidra` folder of your installation of Ghidra:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ghidra_9.1.2_PUBLIC_20200212_GnuDisassembler.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ghidra_9.1.2_PUBLIC_20200212_sample.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ghidra_9.1.2_PUBLIC_20200212_SampleTablePlugin.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ghidra_9.1.2_PUBLIC_20200212_SleighDevTools.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the steps to install these already-available extensions.
    Please, open the `Chapter04` Ghidra project, `hello world.gpr`, and follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: These extensions can be easily installed from Ghidra by clicking on `Extensions\Ghidra`
    directory of your Ghidra distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After checking **SampleTablePlugin** and clicking **OK**, you will see the following
    screen, so you will know for sure that you checked the extension:![Figure 4.2
    – Extensions Changed! message after installing SampleTablePlugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_002.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.2 – Extensions Changed! message after installing SampleTablePlugin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking **OK** and manually restarting Ghidra, a prompt message asking
    to configure the plugin will appear when you open **CodeBrowser** via **Tools**
    | **Run Tool** | **CodeBrowser**:![Figure 4.3 – New Plugins Found! message after
    installing SampleTablePlugin and restarting Ghidra
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.3 – New Plugins Found! message after installing SampleTablePlugin and
    restarting Ghidra
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By answering affirmatively, we can take the opportunity to configure which plugins
    we are interested in enabling:![Figure 4.4 – Sample table plugin configuration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.4 – Sample table plugin configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After this step, a new option named **Sample Table Provider** will appear in
    the **Window** menu:![Figure 4.5 – The Sample Table Provider window implemented
    by the plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.5 – The Sample Table Provider window implemented by the plugin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By clicking on it, you will see that the functionality of Ghidra has been extended
    with a docking window allowing you to calculate function metrics. In this case,
    I checked `__main` function on the disassembly window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can easily locate the `__main` function (notice it starts with two `_`
    characters) using the **Filter** option in the **Symbol Tree** pane:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Using Symbol Tree to locate the __main function in disassembly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_04_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Using Symbol Tree to locate the __main function in disassembly
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of running the algorithms targeting `__main` looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Sample Table Provider executed over the __main function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_04_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Sample Table Provider executed over the __main function
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will analyze the source code of this Ghidra extension.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the code of the Sample Table Provider plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most Ghidra components are extensible but, when developing, you must first
    decide what kind of project you are dealing with: analyzer, plugin, loader, filesystem,
    or exporter.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, Sample Table Provider consists of a plugin Ghidra extension. A
    plugin extension is a program that extends from the `ghidra.app.plugin.ProgramPlugin`
    class, allowing it to handle the most common program events and also implement
    GUI components.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look over the code available in the `SampleTablePlugin\lib\SampleTablePlugin-src\ghidra\examples`
    directory of `ghidra_9.1.2_PUBLIC_20200212_SampleTablePlugin.zip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin part of Sample Table Provider is implemented by the `SampleTablePlugin.java`
    file, whose class extends from `ghidra.app.plugin.ProgramPlugin`, allowing you
    to update its internal `currentFunction` attribute when an event related to the
    current function happens, as mentioned in [*Chapter 3*](B16207_03_Final_SK_ePub.xhtml#_idTextAnchor041),
    *Ghidra Debug Mode*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As `SampleTableModel.java` implements the table model by extending from `ThreadedTableModelStub`,
    `ThreadedTableModelStub` admits an abstract data type as a row, allowing you to
    define a custom class to store the rows. In this case, rows are objects whose
    class is `FunctionStatsRowObject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FunctionStatsRowObject.java` class is a Java class containing row fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SampleTableProvider.java` class is responsible for painting the table
    on the screen, filling the content, and defining the behavior when interacting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FunctionAlgorithm.java` class defines the interface for those classes
    used to retrieve the data to fill the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'At last, there are some classes allowing you to calculate the values of the
    `Score` column in Sample Table Provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BasicBlockCount``erFunctionAlgorithm.java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FunctionAlgorithm.java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReferenceFunctionAlgorithm.java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SizeFunctionAlgorithm.java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For instance, the `SizeFunctionAlgorithm` class retrieves the number of addresses
    contained in the current function to determine the size of the function. The retrieved
    data, as is evident, is obtained via Ghidra API calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We will delve much deeper into the peculiarities of every kind of extension
    in *Section 3*, *Extending Ghidra*.
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra extensions inheritance
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that you can search for the classes you are extending from in the
    source code of Ghidra: [https://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/ProgramPlugin.java](https://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/ProgramPlugin.java).
    These classes are pretty well commented, so you can also check the auto-generated
    documentation from Ghidra via **Help** | **Ghidra API Help**.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned what a Ghidra extension is, how it works internally,
    and how it looks in Ghidra from the users' perspective. In the next section, we
    will cover the skeleton of an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Ghidra extension skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `ghidra_9.1.2\Extensions\Ghidra` Ghidra extensions folder, there is also
    a `skeleton` folder, which includes five skeleton source code located in `ghidra_9.1.2\Extensions\Ghidra\Skeleton\src\main\java\skeleton`,
    which enables us to write any kind of Ghidra extension.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss the different types of plugin extensions by overviewing
    its skeletons. Those skeletons are available from Eclipse and we will create an
    extension later using a skeleton in the *Developing a Ghidra extension* section.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Analyzers allow us to extend the Ghidra code analysis functionality. The skeleton
    to develop analyzers is available in the `SkeletonAnalyzer.java` file, which extends
    from `ghidra.app.services.AbstractAnalyzer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The analyzer skeleton consists of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A constructor, which indicates the analyzer''s name, its description, and the
    analyzer''s type. In addition, you can call to `setSupportOneTimeAnalysis` before
    the call to `super` to indicate that the analyzer supports it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The analyzer''s type can be one of the following: `BYTE_ANALYZER`, `DATA_ANALYZER`,
    `FUNCTION_ANALYZER`, `FUNCTION_MODIFIERS_ANALYZER`, `FUNCTION_SIGNATURES_ANALYZER`,
    `INSTRUCTION_ANALYZER`, or `ONE_SHOT_ANALYZER`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `getDefaultEnablement` method returns a Boolean value indicating whether
    this analyzer will be enabled all the time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `canAnalyze` method returns true if the program can be analyzed. You can
    check here, for instance, if your analyzer supports the assembly language of the
    program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to let the user set some options for your analyzer, then you can
    override the `registerOptions` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, when things are added to the program, the method added will get called
    in order to perform the analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzer tips
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Don't let `getDefaultEnablement` return true if your analyzer is not fast enough
    because it can slow down Ghidra.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Analyzers can be useful, for instance, when analyzing a C++ program to obtain
    object-oriented programming information.
  prefs: []
  type: TYPE_NORMAL
- en: Filesystems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filesystems allow us to extend Ghidra to support archive files. Examples of
    archive files are APK, ZIP, RAR, and so on. The skeleton to develop filesystems
    is available in the `SkeletonFileSystem.java` file, which extends from `GFileSystem`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The filesystem skeleton consists of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A constructor. It receives as a parameter the root of the filesystem as the
    **Filesystem Resource Locator** (**FSRL**) and the filesystem provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A filesystem implementation is complex. It consists of the following methods:
    `mount`, `close`, `getName`, `getFSRL`, `isClosed`, `getFileCount`, `getRefManager`,
    `lookup`, `getInputStream`, `getListing`, `getInfo`, and `getInfoMap`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugins allow us to extend Ghidra in a lot of ways by accessing the GUI and
    the event notification systems. The skeleton to develop plugins is available in
    the `SkeletonPlugin.java` file, which extends from `ghidra.app.plugin.ProgramPlugin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin skeleton consists of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A constructor. It receives the parent tool as a parameter and allows us to customize
    or remove both the provider and the help of the plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `init` method allowing us to acquire services if needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also includes an example of a provider extending from `ComponentProvider`,
    allowing us to customize the GUI and the actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin tips
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to see the complete list of services, please search for `ghidra.app.services`
    in Ghidra''s Java documentation: `/api/ghidra/app/services/package-summary.html`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can imagine, plugin extensions are very versatile.
  prefs: []
  type: TYPE_NORMAL
- en: Exporters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exporters allow us to extend Ghidra by implementing the ability to export parts
    of a program available in Ghidra's program database. The skeleton to develop exporters
    is available in the `SkeletonExporter.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exporter skeleton consists of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A constructor. It allows us to set the name of the exporter and also associate
    a file extension to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `getOptions` method is also available to define custom options if required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `setOptions` method to assign custom options, if they exist, to the exporter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `export` method where the export operation must be implemented, and returns
    a Boolean value indicating whether the operation was successful or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some examples of preinstalled Ghidra exporters are the following: `AsciiExporter`,
    `BinaryExporter`, `GzfExporter`, `HtmlExporter`, `IntelHexExporter`, `ProjectArchiveExporter`,
    and `XmlExporter`.'
  prefs: []
  type: TYPE_NORMAL
- en: Loaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loaders allow us to extend Ghidra by adding support to new binary code formats.
    Examples of binary code formats are `SkeletonLoader.java` file, which extends
    from `AbstractLibrarySupportLoader`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The loader skeleton consists of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A `getName` method, which must be overridden to return the loader's name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `findSupportedLoadSpecs` method, which must return an `ArrayList` with the
    specifications of the file if it is able to load it. If it is not able to load
    it, then it must return an empty `ArrayList`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `load` method where the bulk of the implementation takes place. It loads the
    bytes from the provider into the program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the loader has custom options, then you must define them in the `getDefaultOptions`
    method and also validate them in the `validateOptions` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we went over the skeleton for every type of Ghidra extension.
    Go ahead and modify any skeleton in a way that may help you for development. In
    the next section, we will cover what Ghidra extension skeletons look like in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a Ghidra extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will cover how to create a Ghidra extension in Eclipse
    and then how to export it to Ghidra:'
  prefs: []
  type: TYPE_NORMAL
- en: First, to create a new Ghidra extension in Eclipse, click on **GhidraDev** |
    **New** | **Ghidra Module Project…**:![Figure 4.8 – Creating a new Ghidra module
    project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.8 – Creating a new Ghidra module project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set a name for the Ghidra project as well as the project root directory. In
    this case, I'm setting `MyExtensions` as the project name and leaving the default
    values for the rest of the parameters:![Figure 4.9 – Setting the project name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.9 – Setting the project name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you know from the previous section, Ghidra has some module templates available.
    Choose those that are useful for your purpose. We are choosing all of them because
    we want to have all the Ghidra module skeletons. Click on **Next >** instead of
    **Finish** to take two additional and useful steps:![Figure 4.10 – Choosing the
    module templates needed for this Ghidra module project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.10 – Choosing the module templates needed for this Ghidra module project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Associate a Ghidra installation with your module project. This is an important
    step because the Ghidra module will be generated for this version of Ghidra:![Figure
    4.11 – Associating a Ghidra installation with your module project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.11 – Associating a Ghidra installation with your module project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also enable Python by clicking on **Enable Python** and selecting a
    Jython interpreter:![Figure 4.12 – Enabling Python support
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_012.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.12 – Enabling Python support
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can configure the Ghidra installation and Python support at any time later
    by clicking on **GhidraDev** | **Link Ghidra…**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Linking the Ghidra installation and enabling Python support
    if desired at any time'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16207_04_013.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.13 – Linking the Ghidra installation and enabling Python support if
    desired at any time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Develop your Ghidra extension using the Eclipse IDE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Developing Ghidra extensions using the Eclipse IDE'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_04_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Developing Ghidra extensions using the Eclipse IDE
  prefs: []
  type: TYPE_NORMAL
- en: 'After developing your Ghidra extension, you can export it to Ghidra using the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **File** | **Export…**, choose **Ghidra Module Extension**, and click
    on the **Next >** button:![Figure 4.15 – Exporting a Ghidra module extension from
    Eclipse
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.15 – Exporting a Ghidra module extension from Eclipse
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose the Ghidra module project you want to export:![Figure 4.16 – Selecting
    the Ghidra module project to export
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16207_04_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.16 – Selecting the Ghidra module project to export
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set the Gradle installation directory. If you followed the steps explained
    at the beginning of this chapter, it will be available in the `GRADLE_HOME` environment
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Setting the Gradle installation directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_04_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – Setting the Gradle installation directory
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on `dist` directory of your Ghidra module project has been generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Console output after exporting a Ghidra extension project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_04_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.18 – Console output after exporting a Ghidra extension project
  prefs: []
  type: TYPE_NORMAL
- en: As explained before, the generated extension will only be valid for the version
    of Ghidra chosen during the module project creation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install existing Ghidra extensions and how
    to drop new ones into Ghidra in order to later install it. We analyzed the code
    of an example plugin Ghidra extension and also the development templates of every
    kind of Ghidra extension.Finally, we followed the steps for creating a new Ghidra
    module project in the Eclipse IDE and also covered how to export our new project
    to Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are able to identify useful extensions and install them. You are also
    able to understand how the code works and perform modifications and adaptions
    when needed. Of course, you can also now write your own Ghidra extensions, but
    you will improve these skills in *Section 3*, *Extending Ghidra*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter of this book, we will cover how to reverse engineer malware
    using Ghidra, which is a great opportunity to demonstrate how to use this knowledge
    to solve real-world challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between Ghidra extensions and Ghidra scripts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are analyzing a program developed in C++ (which is an object-oriented
    programming language), what kind of Ghidra extension can help you to identify
    classes, methods, and so on?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you know, Ghidra extensions have access to Ghidra internals, which is really
    powerful. Is it always better to write a Ghidra extension than to write a Ghidra
    script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to learn more about the topics covered in this chapter, go ahead
    and check out the following books and links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ghidra advanced development course: [http://ghidra.re/courses/GhidraClass/AdvancedDevelopment/GhidraAdvancedDevelopment_withNotes.html#GhidraAdvancedDevelopment.html](http://ghidra.re/courses/GhidraClass/AdvancedDevelopment/GhidraAdvancedDevelopment_withNotes.html#GhidraAdvancedDevelopment.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Python development*, *Burkhard. A Meier*, *November 2016* [Video]: [https://www.packtpub.com/eu/application-development/python-projects-video](https://www.packtpub.com/eu/application-development/python-projects-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PyDev official manual: [http://www.pydev.org/manual.html](http://www.pydev.org/manual.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Java Projects – Second Edition*, *Peter Verhas*, *August 2018*: [https://www.packtpub.com/eu/application-development/java-projects-second-edition](https://www.packtpub.com/eu/application-development/java-projects-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
