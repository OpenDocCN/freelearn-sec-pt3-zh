["```\n00 def isAnInterestingString(string):\n```", "```\n01     \"\"\"Returns True if the string is interesting for us\"\"\"\n```", "```\n02     return string.startswith(\"http\")\n```", "```\n03\n```", "```\n04 def getStringReferences(insn):\n```", "```\n05     \"\"\"Get strings referenced in any/all operands of an \n```", "```\n06        instruction, if present\"\"\"\n```", "```\n07     numOperands = insn.getNumOperands()\n```", "```\n08     found = []\n```", "```\n09     for i in range(numOperands):\n```", "```\n10         opRefs = insn.getOperandReferences(i)\n```", "```\n11         for o in opRefs:\n```", "```\n12             if o.getReferenceType().isData():\n```", "```\n13                 string = getStringAtAddr(o.getToAddress())\n```", "```\n14                 if string is not None and \\\n```", "```\n15                              isAnInterestingString(string):\n```", "```\n16                     found.append(StringNode(\n```", "```\n17                                       insn.getMinAddress(),\n```", "```\n18                                       o.getToAddress(), \n```", "```\n19                                       string))\n```", "```\n20     return found\n```", "```\n00 public class TranslateStringsScript extends GhidraScript {\n```", "```\n01\n```", "```\n02   private String translateString(String s) {\n```", "```\n03     // customize here\n```", "```\n04     return \"TODO \" + s + \" TODO\";\n```", "```\n05   }\n```", "```\n06\n```", "```\n07   @Override\n```", "```\n08   public void run() throws Exception {\n```", "```\n09\n```", "```\n10     if (currentProgram == null) {\n```", "```\n11       return;\n```", "```\n12     }\n```", "```\n13\n```", "```\n14     int count = 0;\n```", "```\n15\n```", "```\n16     monitor.initialize(\n```", "```\n17             currentProgram.getListing().getNumDefinedData()\n```", "```\n18     );\n```", "```\n19     monitor.setMessage(\"Translating strings\");\n```", "```\n20     for (Data data : DefinedDataIterator.definedStrings(\n```", "```\n21                                       currentProgram,\n```", "```\n22                                       currentSelection)) {\n```", "```\n23       if (monitor.isCancelled()) {\n```", "```\n24         break;\n```", "```\n25       }\n```", "```\n26       StringDataInstance str = StringDataInstance. \\\n```", "```\n27                                getStringDataInstance(data);\n```", "```\n28       String s = str.getStringValue();\n```", "```\n29       if (s != null) {\n```", "```\n30 \t      TranslationSettingsDefinition. \\ \n```", "```\n31            TRANSLATION.setTranslatedValue(data,\n```", "```\n32              translateString(s));\n```", "```\n33\n```", "```\n34          TranslationSettingsDefinition. \\ \n```", "```\n35            TRANSLATION.setShowTranslated(data, true);\n```", "```\n36          count++;\n```", "```\n37          monitor.incrementProgress(1);\n```", "```\n38       }\n```", "```\n39     }\n```", "```\n40     println(\"Translated \" + count + \" strings.\");\n```", "```\n41   }\n```", "```\n42 }\n```", "```\n//TODO write a description for this script\n```", "```\n//@author \n```", "```\n//@category Strings\n```", "```\n//@keybinding \n```", "```\n//@menupath \n```", "```\n//@toolbar \n```", "```\n//@menupath Tools.Packt.Learn Ghidra script\n```", "```\nimport ghidra.app.script.GhidraScript;\n```", "```\nimport ghidra.program.model.util.*;\n```", "```\nimport ghidra.program.model.reloc.*;\n```", "```\nimport ghidra.program.model.data.*;\n```", "```\nimport ghidra.program.model.block.*;\n```", "```\nimport ghidra.program.model.symbol.*;\n```", "```\nimport ghidra.program.model.scalar.*;\n```", "```\nimport ghidra.program.model.mem.*;\n```", "```\nimport ghidra.program.model.listing.*;\n```", "```\nimport ghidra.program.model.lang.*;\n```", "```\nimport ghidra.program.model.pcode.*;\n```", "```\nimport ghidra.program.model.address.*;\n```", "```\npublic class NewScript extends GhidraScript {\n```", "```\n    public void run() throws Exception {\n```", "```\n//TODO Add User Code Here\n```", "```\n    }\n```", "```\n}\n```", "```\n#TODO write a description for this script\n```", "```\n#@author \n```", "```\n#@category Strings\n```", "```\n#@keybinding \n```", "```\n#@menupath \n```", "```\n#@toolbar \n```", "```\n#TODO Add User Code Here\n```", "```\n//This simple script allows you to patch bytes with NOP opcode\n```", "```\n//@author Packt\n```", "```\n//@category Memory\n```", "```\n//@keybinding ctrl alt shift n \n```", "```\n//@menupath Tools.Packt.nop\n```", "```\n//@toolbar \n```", "```\nimport ghidra.app.script.GhidraScript;\n```", "```\nimport ghidra.program.model.util.*;\n```", "```\nimport ghidra.program.model.reloc.*;\n```", "```\nimport ghidra.program.model.data.*;\n```", "```\nimport ghidra.program.model.block.*;\n```", "```\nimport ghidra.program.model.symbol.*;\n```", "```\nimport ghidra.program.model.scalar.*;\n```", "```\nimport ghidra.program.model.mem.*;\n```", "```\nimport ghidra.program.model.listing.*;\n```", "```\nimport ghidra.program.model.lang.*;\n```", "```\nimport ghidra.program.model.pcode.*;\n```", "```\nimport ghidra.program.model.address.*;\n```", "```\n00 public class NopScript extends GhidraScript {\n```", "```\n01\n```", "```\n02   public void run() throws Exception {\n```", "```\n03     Address startAddr = currentLocation.getByteAddress();\n```", "```\n04     byte nop = (byte)0x90;\n```", "```\n05     try {\n```", "```\n06       Instruction instruction = getInstructionAt(startAddr)\n```", "```\n07       int istructionSize = \n```", "```\n                instruction.getDefaultFallThroughOffset();\n```", "```\n08       removeInstructionAt(startAddr);\n```", "```\n09       for(int i=0; i<istructionSize; i++){\n```", "```\n10         setByte(startAddr.addWrap(i), nop);\n```", "```\n11       }\n```", "```\n12       disassemble(startAddr);\n```", "```\n13     }\n```", "```\n14     catch (MemoryAccessException e) {\n```", "```\n15       popup(\"Unable to nop this instruction\");\n```", "```\n16       return;\n```", "```\n17     }\n```", "```\n18   }\n```", "```\n19 }\n```", "```\n#This simple script allows you to patch bytes with NOP opcode\n```", "```\n#@author Packt\n```", "```\n#@category Memory\n```", "```\n#@keybinding ctrl alt shift n\n```", "```\n#@menupath Tools.Packt.Nop\n```", "```\n#@toolbar \n```", "```\ncurrentAddr = currentLocation.getByteAddress()\n```", "```\nnop = 0x90\n```", "```\ninstruction = getInstructionAt(currentAddr)\n```", "```\ninstructionSize = instruction.getDefaultFallThroughOffset()\n```", "```\nremoveInstructionAt(currentAddr)\n```", "```\nfor i in range(instructionSize):\n```", "```\n    setByte(currentAddr.addWrap(i), nop)\n```", "```\ndisassemble(currentAddr) \n```"]