- en: WLAN Forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of wireless LAN has become an integral part of our lives. Our reliance
    on it means that it's all too common for criminals to use it to break into your
    Wi-Fi and steal all your data, see your day-to-day activities through your web
    camera, or reach a critical data server, in the case of a corporate environment.
    The possibilities of what a cyber criminal can do once they are in your network
    (or have forced you into their network) are endless.
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of this chapter, we will learn how to identify rogue access
    points, which can allow an attacker to view all of your communication. We will
    also look at strategies to identify and physically find these rogue devices. We
    will also look at some of the attack patterns that an attacker can follow when
    conducting advanced attacks. We will also look at what to do when a criminal falsifies
    their MAC address, one of the most important criminal techniques that is used
    while committing a crime on Wi-Fi. Before we move ahead with the exercises in
    the chapter, let's learn a bit about the wireless 802.11 standard, and the type
    of packets that will help us during the wireless forensic exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The 802.11 standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet types and subtypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating wireless devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying rogue access points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study—identifying the attacker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the exercises covered in this chapter, we will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark v3.0.0 ([https://www.wireshark.org/download.html](https://www.wireshark.org/download.html))
    installed on Windows 10 OS/ Ubuntu 14.04.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download the codes and PCAP files used in this chapter from [https://github.com/nipunjaswal/networkforensics/tree/master/Ch9](https://github.com/nipunjaswal/networkforensics/tree/master/Ch9).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMWare Player/VirtualBox installation with Kali Operating system installed.
    You can download it from [https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/](https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aircrack-ng suite (already a part of Kali Linux).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An external wireless card (TP-Link WN722N/Alfa card).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python (already installed on Kali Linux).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 802.11 standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The 802.11 standards denote the family of specifications defined by the IEEE
    for wireless local area networks. The 802.11 standard describes an over-the-air
    interface between a client and a base station or between any two wireless clients.
    There are several standards in the 802.11 family, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**802.11**: 802.11 uses a 1-2 Mbps transmission rate using either **frequency-hopping
    spread spectrum **(**FHSS**) or **direct-sequence spread spectrum **(**DSSS**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**802.11a**: The speed is increased from 1-2 Mbps to 54 Mbps in the 5 GHz band.
    Instead of using FHSS or DSSS, it uses an orthogonal frequency division multiplexing (OFDM)
    encoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**802.11b**: This has an 11 Mbps transmission in the 2.4 GHz band and uses
    only DSSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**802.11g**: This has an increased speed of up to 54 Mbps in the 2.4 GHz band.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**802.11n**: The *n* standard adds **multiple-input multiple-output** (**MIMO**).
    The speeds are over 100 Mbit/s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**802.11ac**: This has a speed of 433 Mbps to 1.3 Gbps and operates only in
    the 5 GHz band. Hence, its important to have the right Wi-Fi adapter to capture
    traffic on both 2.4 GHz and 5 GHz bands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a working knowledge of the wireless standards, let's look at the type
    of evidence we can have in the wireless forensics scenario in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless evidence types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The evidence from a wireless investigation would come in a PCAP file or logs
    from the wireless access points. However, in the case of a live environment, you
    can set up captures using the **aircrack-ng** suite. The aircrack-ng suite we
    used in the previous chapters allows us to put our wireless network card in a
    promiscuous mode where we can capture the activity that occurs in the wireless
    network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can do this by going through the following steps. We will
    be using a Windows 10 host laptop with Kali Linux installed in VMware Workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will connect our external Wi-Fi card, which is a TP-Link TL-WN722M
    150 Mbps high gain external USB adapter. On connecting it to the laptop, we will
    get the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54a0f95f-e62a-4bee-a888-0e47d4adb8cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click OK and open a terminal on the Kali Linux machine as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ffb6fab8-dc34-4537-b07a-d1469dc58db1.png)'
  prefs: []
  type: TYPE_IMG
- en: Upon running the `iwconfig` command, we can see that the wireless interface
    is available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to put this into monitor mode. We can use the `airmon-ng` tool
    to put the wireless interface in monitor mode by issuing `airmon-ng start wlan0` command,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b08e77ae-de3f-45a7-a741-fe3f5355de6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By providing the command `airmon-ng` followed by `start` and the identifier
    for our wireless interface, airmon-ng creates an additional virtual interface
    for us called `wlan0mon`. Let''s verify this by again typing the `iwconfig` command
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5120b3f3-b643-422f-b75e-a97ce3f67244.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the interface has been created and is in `Monitor` mode.
  prefs: []
  type: TYPE_NORMAL
- en: Using airodump-ng to tap the air
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s investigate by using another utility from the aircrack suite, `airodump-ng`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8e2f69f-9913-45eb-8f65-29e32b97cd1a.png)'
  prefs: []
  type: TYPE_IMG
- en: By providing the `airodump-ng wlan0mon` command, starts sniffing the wireless
    networks around us while continually hopping to different channels. This will
    give us a list containing the numerous wireless networks that are available in
    the vicinity. The list in the upper half of the screen displays wireless access
    points that have a BSSID (MAC address of the access point) and an ESSID (name
    of the network) and many other details. The bottom half of the screenshot contains
    the stations which are nothing but the endpoint devices.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that the preceding list contains `CH`, which is the channel
    number on which the access point is operating. The channels are nothing but frequencies,
    with channel 1 being 2,412 MHz and channel 14 being 2,484 MHz. The channels are
    separated by a 5 MHz gap, which means that if channel 1 is 2,412 MHz, then channel
    2 is 2,417 MHz, channel 3 is 2,422 MHz, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we have a `PWR` field that denotes the power. A lower power value
    means that the access point is far from our wireless interface. We can see that
    the wireless network `VIP3R` has `-51` `PWR`, which means that it's quite near
    to us, while the access point `dlink-DAD9_EXT` is very far from us, with the least
    power. The power value is very important when physically locating the device in
    a building or a floor.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we can see the type of encryption used, the cipher, the authentication
    type, and much more in the preceding list. In the lower pane, we can see the devices
    that are connected to the listed Wi-Fi access points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s capture all the details from a single wireless network VIP3R by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, we used the `-bssid` switch to filter the packets
    originating only from the `78:44:76:E7:B0:58` (VIP3R) access point while only
    capturing from channel 11 by using the `-c 11` switch. We have also chosen to
    write all the output to a file named `viper` by using the `-w` switch. The preceding
    command would yield the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63df6c4a-a7bf-4351-8cba-955ca44ef274.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that by running the command, we obtain the details listed in the
    preceding screenshot. We can see three stations connected to the access point,
    and, along with that, we have a **WPA handshake** as well. A WPA handshake means
    that someone tried to authenticate with the wireless network. If there is an increase
    in the number of stations after a WPA handshake, then this would typically mean
    that the authentication was successful; if there is no increase, then it was not
    successful. Again, finding stations can be done through the PWR signal as well.
    Generally, attackers capture this WPA handshake through two different means:'
  prefs: []
  type: TYPE_NORMAL
- en: Listening when someone tries to authenticate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intentionally forcing away stations connected to the access point and allowing
    them to reconnect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attackers will brute-force the handshake to find the network password and gain
    access to the network. We saw that we captured the handshake using `airodump-ng`
    as soon as we stop the capturing, `airodump-ng` will create capture file along
    with some others as shown through the `ls -la` command in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e740d402-b3f0-49f3-96e2-e57f58a24fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s open the capture (`.cap`) file in Wireshark by issuing `wireshark viper-01.cap
    &` command and selecting WLAN traffic from the **Wireless** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41e9eda8-2c8b-4510-9a6f-ec360e52a7bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be shown the statistics of the wireless traffic, as shown in the preceding
    screenshot. Additionally, airodump captures other networks as well. Let''s put
    a filter on the MAC address of our wireless access point, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63a03ebb-3061-46e2-941a-de8e4448b7a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Well, we can see that using `wlan.addr` followed by the MAC/ BSSID of the access
    point filters all the packets for the **access point** (**AP**) of interest. We
    can see that one of the client starting with the MAC address `2c:33:61:xx:xx:xx`
    is from an Apple device. Additionally, all the base stations and MAC addresses
    can be resolved for the type using the Resolved Addresses option from Wireshark,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e312c46-a54a-40c1-90cd-394dde3388bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we are not able to get precise statistics on how many stations
    our AP is talking to from Wireshark. Let''s use `tshark -r viper-01.cap -2 -R
    wlan.da==78:44:76:e7:b0:54 -T fields -e wlan.sa | sort | uniq` to help us out,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6ed0bb4-10cb-4983-b41c-8b04156c16c9.png)'
  prefs: []
  type: TYPE_IMG
- en: The `tshark` tool runs by reading the file from the `-r` switch and using the
    filter `wlan.da==78:44:76:e7:b0:54` as the destination address while printing
    only the `wlan` sources using the `-T` fields and `-e wlan.sa` switch. With the
    output, we sort and print unique items by using the `sort` and `uniq` Linux commands.
  prefs: []
  type: TYPE_NORMAL
- en: In case of LUA errors for the preceding command, disable LUA by editing line
    29 of the `/usr/share/Wireshark/init.lua` file and setting `disable_lua=true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check the found MAC addresses at [https://macvendors.com/](https://macvendors.com/),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15999f20-e2f7-478a-8180-44f315eb830a.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, since MAC vendors provide an API, we can always develop a nice
    Python script to do the MAC checking for us. You can look at one of the scripts
    at [https://macvendors.co/api/python](https://macvendors.co/api/python).
  prefs: []
  type: TYPE_NORMAL
- en: Packet types and subtypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into packet types and subtypes, let''s see what happens when
    we connect to a Wi-Fi access point. For this demonstration, we will be using a
    **TP-Link router** and an Apple iPhone 7\. I will try to connect to the VIP3R
    network from the phone, but I will not use the correct password. Look at the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6b040e2-7d70-424d-86c0-25a80b7083ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Generally, when we open the settings on the iPhone or any other phone, we start
    to see the networks in the vicinity of the phone. This is because each access
    point constantly sends out beacon frames to denote its presence. For the phone
    to know more about the network, a probe request is sent to the access point. We
    can see that our Wi-Fi access point (`78:44:76:E7:B0:58`) sends a probe response
    (8155) to the iPhone with the station parameters and supported rates.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the authentication process is initiated by the iPhone, and the router
    responds well to it. Generally, the authentication request/response consists of
    a few packets exchanged between both of the communicating devices.
  prefs: []
  type: TYPE_NORMAL
- en: Next, an association request (8162) is sent by the iPhone to associate itself
    with the network, to which an association response (8164) is sent back with the
    association ID. Then, the key exchange process happens, and since the key was
    wrong, a disassociation packet is sent by the router to the iPhone denoting the
    failed attempt and immediately breaking the association. Since we now know how
    this stuff works, let's move on and discuss the types of wireless 802.11 frames
    in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'We primarily have data, management, and control frames in the 802.11 standards.
    From a pure play forensic point of view, the most we will be dealing with are
    the management frames. The following table highlights the types of frames and
    their subtypes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Packet Types** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| **Type** | **Subtype** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 0 | Association request | The transmitter must already be authenticated
    to gain a successful association with the access point. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 1 | Association response | The response to the association request
    is an association response. If the request is successful, the response packet
    will contain an identifier known as the association ID. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 10 | Reassociation request | This is similar to an association
    request, but this packet type is sent when there are lapses in time, or when the
    station is moving toward another access point. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 11 | Reassociation response | This is similar to the association
    response. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 100 | Probe request | Used to actively check any, or a particular,
    access point. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 101 | Probe response | The response contains station parameters
    and supported data rates. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 1000 | Beacon | Beacon packets are indicator packets sent continuously
    by the AP denoting its presence in the network. Beacon frames also help to find
    rogue access points. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 1010 | Disassociation | This packet is a notification that an
    existing association has been broken. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 1011 | Authentication | Authentication packets are sent time and
    again between two endpoints in order to establish authenticity. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | mgmt | 1100 | Deauthentication | This is an announcement message, stating
    that the receiver is no longer authenticated. |'
  prefs: []
  type: TYPE_TB
- en: For more information on wireless packet types and subtypes, refer to [https://www.savvius.com/networking-glossary/wireless_lan_overview/wlan_packet_types/](https://www.savvius.com/networking-glossary/wireless_lan_overview/wlan_packet_types/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the value of subtypes is given in binary. We can use its hex
    equivalent in Wireshark as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f100c989-5906-4935-a208-abf7d43f6156.png)'
  prefs: []
  type: TYPE_IMG
- en: The information that we have gained regarding the packet types and subtypes
    will help us identify attack patterns in the latter half of the chapter. Let's
    now dive deep into the exercises.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the types of management frames, refer to [https://mrncciew.com/2014/09/29/cwap-802-11-mgmt-frame-types/](https://mrncciew.com/2014/09/29/cwap-802-11-mgmt-frame-types/).
  prefs: []
  type: TYPE_NORMAL
- en: Locating wireless devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As network forensic investigators, sometimes we encounter rogue devices in
    a building or on a floor. It is important to find these devices, as they may contain
    vital information about the attacker and the attack itself. Wi-Fi is no exception.
    Say that we have a rogue access point running in the network. As forensic investigators,
    let''s try to find the location of the device. We will make use of some scripts
    to accomplish this. Remember the `PWR` field in the airodump-ng tool? We need
    to develop something like that to poll the networks continuously. For this purpose,
    let''s write the following Python 2.7 script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is quite self-explanatory. We used a schedule to run a wireless scan
    every five seconds using the `iwlist` command. We used regex expressions to filter
    the data out and displayed it using the `PrettyTable` Python module. To calculate
    the distance between the AP and our interface, we used a **free-space path loss**
    (**FSPL**) algorithm and the `PWR` field (power/ signal strength) and `Frequency`
    (channel ID) to calculate the distance using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use the preceding formula and calculate the reading for a VIP3R access
    point that is running on channel 11 with a power value of -56\. We can see that
    we need two values for the preceding formula to work. For `decibel`, we will use
    its absolute value, which is 56\. To calculate the frequency of channel 11, we
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using these expressions, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, putting these values into the formula, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Well, the distance equals 6.112 meters, which is almost accurate, given the
    distance from my current position where I am writing this text to my wireless
    router. However, an important thing to consider here is that this formula is for
    free-space path loss, and it may not be too accurate with a ton of walls and objects
    in between.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to an excellent white paper on the various types of signal loss
    due to various types of object, along with their values, at [https://arxiv.org/pdf/1707.05554.pdf](https://arxiv.org/pdf/1707.05554.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the preceding Python script we built and see what values we get
    as we move closer to the AP, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad0facf0-eddf-4858-b971-b5ce06874f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Moving a little closer toward the access point, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6b67841-59c7-432c-adea-ea1127a69240.png)'
  prefs: []
  type: TYPE_IMG
- en: We have the distance measured quite correctly. We now know how to use a few
    of the values from the `iwlist` scan command in Linux to create something that
    will aid us in wireless network forensics.
  prefs: []
  type: TYPE_NORMAL
- en: For a more precise reading, you can look at the upper and lower frequencies
    as well; find out how at [https://www.electronics-notes.com/articles/connectivity/wifi-ieee-802-11/channels-frequencies-bands-bandwidth.php](https://www.electronics-notes.com/articles/connectivity/wifi-ieee-802-11/channels-frequencies-bands-bandwidth.php).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying rogue access points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Rogue access points** are an increasing area of concern. The attackers perform
    a** denial of service** (**DOS**) attack on the legitimate router and set up a
    fake access point with the same SSID, forcing the stations to connect to the rogue
    access point. The attackers can set up a fake access point through a number of
    ways. Identifying these rogue APs is what we will look at next.'
  prefs: []
  type: TYPE_NORMAL
- en: Obvious changes in the MAC address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Say that we have a rogue access point in the vicinity. Using `airodump-ng`
    to capture packets, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04fef946-3529-4306-9162-f947d0875b21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have two networks with similar configurations, and the only
    changes we can see for now is the BSSID (MAC address) and the MB (link speed).
    While the MB is the most obvious change, let''s investigate both MAC addresses
    at the MAC vendor''s website, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb195e4d-3ee4-489b-a61b-1392f966a10a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the address on the left is from Zioncom, which is a popular
    company that develops routers, while the address on the right is from a company
    called Analog & Digital Systems, which is not a router-manufacturing company.
    However, if the attacker has randomly spoofed this address, they could have done
    it for a legitimate-looking vendor. Additionally, we found an MB rate (maximum
    speed) that is missing an `e` from the airodump-ng result  list. The missing `e` denotes
    whether the AP supports quality of service. The last thing we can denote from
    the airodump-ng interface is the speed at which beacons are transmitted. So, to
    sum up our first analysis, we have the following IoCs:'
  prefs: []
  type: TYPE_NORMAL
- en: Change in BSSID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BSSID not resolving to a legitimate vendor (MAC vendors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change in the data rate's quality of service parameter (a missing `e` means
    that QOS is not supported)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An excessive number of beacon frames from the fake AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While these are all key checks when it comes to a fake AP detection, we will certainly look
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The tagged perimeters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now investigate the original and fake access point in Wireshark and
    figure out the missing/modified details from the original access point, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ef7e66c-d518-4eba-809a-18129a98467e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the differences between both the beacon frames, we can see that
    there is plenty of information missing from the fake AP (on the left), and the
    key indicators are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fake AP support rates are considerably lower than the original AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No ERP information in the fake AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No details concerning the **High Throughput** (**HT** capabilities/HT information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completely missing vendor-specific tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, we can see that the fake AP doesn''t have any tag related to
    WPS, an original access point; most APs these days have WPS capabilities, which
    are missing from the fake access point. On investigating the original access point''s
    WPS tag, we find the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f389b52-cfd7-4f24-95ab-fe2877c97e44.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the WPS tags and data is present in case of the original access
    point.
  prefs: []
  type: TYPE_NORMAL
- en: The time delta analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since an advanced attacker can emulate fixes for most of the red flags identified
    in the preceding section, we need a serious mechanism to identify a rogue access
    point among the legitimate ones. We will make use of time delta for the beacon
    frames to identify the fake access point. While the fake access point tries to
    fool the analysis systems by spoofing the fixed beacon interval, time delta analysis
    allows us to figure out the exact beacon intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'A real AP would produce a time delta graph denoting an almost straight line;
    this is not the case for a fake AP. Let''s confirm what we just said using `tshark
    -r beacon-01.cap -2 -R "wlan.sa==7c:8b:ca:ea:27:52 && wlan.fc.type_subtype==0x08"
    -T fields -e frame.time.delta | head -n 20`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30c0b8b8-6842-420f-ac2d-99a49749f891.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding command runs `tshark` on the `beacon-01.cap` file while filtering
    out all the beacon frames originating from `78:44:76:e7:b0:54` and displaying
    `time_delta`, which is the difference between the arrival time of the packet and
    the previous packet. Keeping it short to only 20 entries, we can see that most
    of the values are close to 0.102 ms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do the same for the suspicious access point `00:20:30:40:43:21`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ca6841b-a5ff-4566-95c8-325078a02277.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Well! We can see a clear difference in the values: the suspicious access point
    has very shaky values compared to the original access point. Plotting a graph
    with the first 100 time delta values for both, we will look at the differences
    as shown in the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b80d23fc-f7b2-43b6-b733-1c4399cc891c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the difference: the original access point has kept it quite linear
    compared to the shaky fake access point. We now have a clear picture of how we
    can differentiate between an original and a fake access point. Summarizing the
    key indicators, we have the following indicators that can very well identify the
    fake access point from the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: Change in BSSID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BSSID not resolving to a legitimate vendor (MAC Vendors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change in the Data Rates Quality of Service parameter (A missing e means QoS
    is not supported)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An excessive number of beacon frames from the fake AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fake AP support rates are fairly less than the original AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No ERP information in the fake AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No information on HT Capabilities/HT Information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completely missing the Vendor Specific Tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time-Delta value analysis show a stable graph for the real access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, you will find that because of the delay and packet loss, the delta
    value we get is around 0.2, 0.3, or 0.4\. In such cases, we should divide the
    value by its associated gap. So, for a value of, say, 0.204, we divide the value
    by 2 and obtain 0.102, or, for a value 0.412, we divide the value by 4 to obtain
    0.103.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding analysis is based on an access point created with a TP TL-WN722N
    wireless card and would have similar details for Alfa and other cards. However,
    if an access point has been created using the original router itself, this will
    pose additional challenges, and making use of all the techniques discussed will
    lead to a correct analysis. Using the original access point for malicious purposes
    will have a different MAC address, as it's not easy to spoof a MAC address in
    the original access point. In the case of an advanced attacker mimicking/spoofing
    the original MAC, all of the preceding techniques will detect at least some of
    the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attack identification on wireless LANs is not as easy as it is with Ethernet
    networks. Identifying the attacker is also not straightforward. In the previous
    exercises, we saw how supplying a wrong password generates a disassociation response
    from the AP to the station that is trying to connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at more attack patterns that are commonly used against WLANs, as
    shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Rogue AP attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peer-to-peer attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rogue AP attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how rogue APs could be identified. Now let's
    look at what this attack actually does. In this type of attack, the attacker mimics
    an original access point and, in a parallel manner, disconnects the legitimate
    users from the original access point. In this case, what happens is that when the
    station tries to connect back to the network, it is not able to connect to the
    original access point and instead gets connected to the fake one. Because of this,
    all the network data passes through the rogue access point, and the attacker can
    harvest sensitive details about the targets.
  prefs: []
  type: TYPE_NORMAL
- en: Peer-to-peer attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a **peer-to-peer** attack, the attacker and the target are on the same network,
    such as a public hotspot, and the attacker tries to carry out network-based attacks,
    such as exploiting a vulnerability in the network application. SMB-enabled attacks
    are the most common example of such attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Putting our interface in monitor mode and silently capturing all the data around
    us, as we did for the first example, is called **eavesdropping**. Once the data
    is captured, we can see how many stations are connected to an AP and calculate
    the distances, or even go further and crack the network key and then decrypt the
    captured data to unveil the activities of the various users. The key challenge
    in this attack type is that we are not able to detect an attacker, since their
    device is running passively and collecting data.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Wired equivalent privacy** (**WEP**)  encryption in 802.11 is very weak and
    is susceptible to cracking. The cracking involves the process of finding how the
    RC4 key is generated by WEP which is by concatenating the 5 or the 13 byte key
    with the 3 byte IV value. Additionally, it involves finding that how RC4 processes
    that key in the initial permutation and finally how the permutation is used to
    generate the initial key stream. The attacker can see the IV value moreover the
    first byte in the keystream might directly be related to one of the key bytes.
    Hence, observing enough of these key bytes, the attacker can find the key'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WPA and WPA2 (Wi-Fi protected access) are vulnerable to password-cracking attacks,
    especially when a weak password is used by the network. In order to break into
    a WPA-enabled AP, the attacker will use the following techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sniffing wireless packets in the air**: This involves putting the wireless
    network card in monitor mode and listening and recording everything that is happening
    around on the local wireless networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wait for a client to authenticate**: APs use a four-way handshake to exchange
    information with WPA wireless clients for authentication. Mostly, the client needs
    to prove that they are a legitimate user and has the passcode to the network.
    This four-way handshake, or the **Extensible Authentication Protocol over LAN**
    (**EAPOL**), encrypts the password in a way that the APs can decrypt it and check
    whether it matches the one that has been set on the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a brute-force attack**: Having recorded everything and obtaining the
    EAPOL packets, the attacker can brute-force the password using an offline dictionary
    attack against the captured file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An important point here is that if there aren't any users on the network or
    if there aren't any users connected to the network, then the attack will fail.
    However, if a user is active and already authenticated, the attacker can use a
    variety of attacks, such as a deauthentication attack, against the network AP
    or the connected or clients to disconnect them and force the client's device to
    authenticate again.
  prefs: []
  type: TYPE_NORMAL
- en: Denial of service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using deauthentication packets, an attacker can force users to disconnect from
    the AP. Sending a single deauthentication  packet will force the stations to reauthenticate
    to the access point, and in the process, the attacker captures the WPA handshakes.
    However, if the attacker sends multiple deauthentication  packets continuously
    over time, they create a denial-of-service situation, where the clients are not
    able to connect to the AP for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating deauthentication packets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will analyze a sample capture file covering the details
    of an attack on a WPA2 network. Loading the file in Wireshark, we can see that
    we have 3,818 packets, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29ae4e22-8c18-48b1-8d09-a2244949ca93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s clear the noise by filtering out only management frames using the `wlan.fc.type`
    filter and the value `0x0`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/074b2c44-ab7e-47cf-9f9c-baedde34aec1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we are left with only 420 packets, and we can also see plenty
    of deauthentication packets in the screenshot. Let''s find out which device got
    affected by this deauthentication attack and reinitiated the key handshake:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5b13f57-e958-43b0-ace1-315ff8f80214.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks as though `b0:10:41:c8:46:df` was deauthenticated and reinitiated
    the key exchange. We can see that the authentication packets started at frame
    number `377`. Let''s look at what happened before this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c7fa8dc-7164-44d9-9ec5-38c52465296a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that plenty of deauthentication packets started arriving, which
    caused the device with the MAC address `b0:10:41:c8:46:df` to reinitiate the connection.
    However, we can''t see the key packets anywhere. Let''s find out where they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a06b1684-657f-46be-8ed2-dd1aa579298e.png)'
  prefs: []
  type: TYPE_IMG
- en: Simply putting a filter on `eapol` allows us to see that the key is exchanged
    between the devices. An attacker with access to this file needs to brute-force
    it to find the network key. We saw how we could gather details on the deauthentication
    attack; however, we also saw that we were not able to find the original attacker's
    MAC address, as they pretended to be one of the victims or the AP itself.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – identifying the attacker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we have received two capture files for analysis. We start
    investigating the first file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3234ffed-844d-45a0-bdc1-e6ebb03c083a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the Link type is 802.11, which means that we are investigating
    a WLAN. Let''s see the endpoints on this network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02df08c9-8e5c-45fc-a240-97898a686775.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding statistics, we can see that we have plenty of deauthenticated
    packets that have been directed to the broadcast address. We can also see that
    two stations, `54:99:63:82:64:f5` and `2c:33:61:77:23:ef`, were both involved
    in deauthentication, which means that they might have received the deauthentication
    packets as well. Let''s check this in Wireshark, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f208d965-d700-4373-81a1-a61147f1d8c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the first deauthentication packet was broadcast at frame 4,175\.
    Most of the time, the deauthentication packet will contain the reason code: the
    Class 3 frame received from a non-associated STA (0x0007), which happens mostly
    in cases of a forced deauth. After the deauthentication packet was received by
    the station, the station responds with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb1442b5-4199-456d-aaba-8e4b71e6c038.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason mentioned by the stations is `Deauthenticated` because the sending
    STA is leaving (or has left) IBSS or ESS (0x0003). Finally, all the clients were
    disassociated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92763128-897d-4bf2-b9e3-c7a6aeded7a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the stations'' attempts to exchange keys, which the attacker
    might have captured to obtain information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7a8d5ca-2540-45d6-9fac-09d6da0e9c13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We simply used the filter `-2 -R "eapol"` to view the key exchange and then
    printed the WLAN destination addresses, sorted them, and found the unique entries.
    The next thing would be to identify whether there has been any new authentication
    other than these four addresses. Let''s investigate the second PCAP, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/330268fa-5824-4e8b-ad9f-940b1fdd18a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the same `tshark` command on the second PCAP file, we can see that
    there is a new MAC address that authenticated on the network. Let''s check whether
    it was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fbcb467-c57f-48bf-bacb-d8138a38bc25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking for authentication type packets, we can see that the authentication
    was successful. Interestingly, there are no signs of deauthentication or dissociations
    in the PCAP file. Let''s look at the following overview of the timeline by taking
    input from **Statistics** | **Capture File Properties**, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:18:04.380420000 EDT**: The file capture was started and the
    first packet was captured'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:20.587840000 EDT**: `78:44:76:e7:b0:58` broadcast the
    first deauthentication packet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:20.688171000 EDT**: Stations started authenticating (`2c:33:61:77:23:ef`,
    `54:99:63:82:64:f5`, and `b0:10:41:c8:46:df`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:20.691243000 EDT**: `b0:10:41:c8:46:df` sent the first
    reassociation request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:20.696323000 EDT**: Key exchange started for all stations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:22.850949000 EDT**: Stations stopped authenticating (`2c:33:61:77:23:ef`,
    `54:99:63:82:64:f5`, and `b0:10:41:c8:46:df`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:25.684608000 EDT**: Deauthentications stopped'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:27.285187000 EDT**: Dissociation started on all stations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:27.847874000 EDT**: Key exchange ended for all stations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:20:28.847362000 EDT**: Dissociation ended'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019 08:23:44.857619000 EDT**: A new MAC address (`f0:79:60:25:be:ac`) that
    was not seen before was authenticated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mar 10, 2019, 08:23:48.642582000 EDT**: Key exchange completed for the new
    MAC address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5cdffbee-47db-448e-8dea-38f66c1bf021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s quite evident that no attacks happened after `08:20:25.684`, and a new
    MAC address joined the network. This might be our attacker, but we are not sure.
    Let''s decrypt the conversation exactly in a way we did in [Chapter 5](3d24aeb7-0dd7-4fe4-a29b-8f340fb2d00b.xhtml), *Combatting
    Tunneling and Encryption*, which is to use Aircrack-ng as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/490e3ea2-1392-43c4-aa82-ee3dcbdc5a12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We found the key using Aircrack-ng and applied it in Wireshark, as we did in
    the previous chapters. Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f1093f7-c4c9-4022-a816-41de29459f00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks as though the attacker is running a port scan since the destination
    ports are increasing by one. On filtering the HTTP requests and following the
    HTTP stream, we can see that the attacker tried to reach the Hue portal which
    is a popular wireless lighting system by Philips as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53b7a621-c90f-4299-a7f1-aa8448e8a6cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, they may have tried conducting further attacks, but the PCAPs were
    cut short.
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of this case study, we saw how we could work with 802.11 packets
    to reveal a ton of information about the attacker. We developed a timeline and
    decrypted the 802.11 encapsulation by decrypting the key and finding the real
    intentions of the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this chapter, we learned a lot about 802.11 packets. We covered
    tools such as airodump-ng, learned about the packet types and subtypes and locating
    rogue access points using time delta analysis, and tagged parameters and changes
    in MAC addresses. We looked at a variety of attack types and worked with deauthentication
    packets.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at summarizing and automating tools and scripts
    to perform network forensics quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the packet is subtype 0 in the management packets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Association request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Beacon frame
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Probe request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the packet is subtype 8 in the management packets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Association request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Beacon frame
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Probe request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the packet is subtype 12 or C in the management packets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deauthentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Disassociation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reassociation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Probe response
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following methods can detect fake AP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Investigating HTTP packets
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Investigating time delta
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Investigating data frames
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cracking the router's password
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following tools can crack a wireless router's login password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kismet
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Aircrack-ng
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To gain the most out of this chapter, please go through the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: Read more on wireless forensics at [https://www.sans.org/reading-room/whitepapers/wireless/80211-network-forensic-analysis-33023](https://www.sans.org/reading-room/whitepapers/wireless/80211-network-forensic-analysis-33023)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More on fake AP Detection at [https://www.sans.org/reading-room/whitepapers/detection/detecting-preventing-rogue-devices-network-1866](https://www.sans.org/reading-room/whitepapers/detection/detecting-preventing-rogue-devices-network-1866)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
