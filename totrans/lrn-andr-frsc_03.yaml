- en: Understanding Data Storage on Android Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary motive of forensic analysis is to extract necessary data from a
    device. Hence, for effective forensic analysis, it''s imperative to know what
    kind of data is stored on the device, where it is stored, how it is stored, and
    details of the filesystems on which the data is stored. This knowledge is very
    important for a forensic analyst to make an informed decision about where to look
    for data and techniques that can be used to extract it. In this chapter, we are
    going to learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Android partition layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android file hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data storage on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android filesystems overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android partition layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Partitions are logical storage units made inside the device's persistent storage
    memory. Partitioning allows you to logically divide the available space into sections
    that can be accessed independently of one another.
  prefs: []
  type: TYPE_NORMAL
- en: Common partitions in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The partition layout varies between vendors and versions, but a few partitions
    are present in all Android devices. The following are some of the common partitions
    found in most Android devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BOOT`:As the name suggests, this partition has the information and files required
    for the phone to boot. It contains the kernel and the RAMDisk and so, without
    this partition, the phone can''t start its processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CACHE`: This partition is used to store frequently accessed data and various
    other files such as recovery logs and update packages downloaded over-the-air.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RECOVERY`: Recovery partition allows the device to boot into the recovery
    console through which activities such as phone updates and other maintenance operations
    are performed. For this purpose, a minimal Android boot image is stored, which
    serves as a failsafe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYSTEM`:All of the major components other than the kernel and RAMDisk are
    present here. The Android system image here contains the Android framework, libraries,
    system binaries, and pre-installed applications. Without this partition, the device
    cannot boot into normal mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USERDATA`:This partition is usually called the data partition and is the device''s
    internal storage for application data. A bulk of userdata is stored here and this
    is where most of our forensic evidence will reside. It stores all app data and
    standard communications as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying partition layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a given Android device (Samsung Galaxy J7), the partition layout can be
    determined in a number of ways. The partitions file under `/proc` would give us
    details about all of the partitions available on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the content of the partitions file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f748e36-1006-4f27-8727-bfddf0cb4a9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Partitions file in Android
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding entries show only the block names. To get a mapping of these
    blocks to their logical functions, check the contents of the directory by name
    present under `/dev/block/platform/13540000.dwmmc0`. The following screenshot
    shows the content of this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1682c75e-6e40-471e-86b1-72f700347529.png)'
  prefs: []
  type: TYPE_IMG
- en: Mapping of blocks to their logical functions
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding output, various partitions such as `SYSTEM` and `USERDATA`,
    are present in the partition layout.
  prefs: []
  type: TYPE_NORMAL
- en: Android file hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to perform forensic analysis on any system (desktop or mobile), it's
    important to understand the underlying file hierarchy. Basic understanding of
    how Android organizes its data in files and folders helps a forensic analyst to
    narrow down his/her research to specific locations. If you are familiar with Unix-like
    systems, you'll understand the file hierarchy in Android very well. In Linux,
    the file hierarchy is a single tree with the top of the tree being denoted as
    `/`, called the *root*. This is different from the concept of organizing files
    in drives (as with Windows).
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether the filesystem is local or remote, it will be present under the *root*.
    Android file hierarchy is a customized version of this existing Linux hierarchy.
    Based on the device manufacturer and the underlying Linux version, the structure
    of this hierarchy, may have a few insignificant changes. To see the complete file
    hierarchy you need root access. The following screenshot shows the file hierarchy
    on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e18fcb98-8316-4ae3-9e89-f90f3591671c.png)'
  prefs: []
  type: TYPE_IMG
- en: Folders present under / (root) in Android
  prefs: []
  type: TYPE_NORMAL
- en: Overview of directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following sections provide an overview of the directories present in the
    file hierarchy of an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: The acct directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the mount point for the acct control group (`cgroup`), which provides
    for user accounting.
  prefs: []
  type: TYPE_NORMAL
- en: The cache directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the directory (`/cache`) where Android stores frequently accessed data
    and app components. Wiping the cache doesn't affect your personal data but simply
    deletes the existing data there. There is also another directory in this folder
    called `lost+found` that holds recovered files (if any) as a result of filesystem
    corruption, such as that caused by incorrectly removing the SD card without unmounting
    it. The cache may contain forensically relevant artifacts such as images, browsing
    history, and other app data.
  prefs: []
  type: TYPE_NORMAL
- en: The config directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This directory contains configuration files for the SDCardFS (an in-kernel FAT32
    emulation layer) and USB gadget.
  prefs: []
  type: TYPE_NORMAL
- en: The data directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `/data/data` partition contains the private data of all of the applications.
    Most of the data belonging to the user is stored in this folder. This folder has
    significant importance from a forensic point of view as it holds valuable data.
    This partition is covered in detail in the *Internal storage *section. The following
    screenshot shows the content of data partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9652134-be49-4f9a-bce1-9b7c99e818b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Content of data partition of an Android device
  prefs: []
  type: TYPE_NORMAL
- en: The dev directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This directory contains special device files for all devices. This is the mount
    point for the `tempfs` filesystem, which defines the devices available to the
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The mnt directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This directory serves as a mount point for all of the filesystems, internal
    and external SD cards, and so on. The following screenshot shows the mount points
    present in this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d4cf7b3-1c7b-428f-b7ef-811bc9b8a567.png)'
  prefs: []
  type: TYPE_IMG
- en: The proc directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the mount point for the `procfs` filesystem, which provides access
    to the kernel data structures. Several programs use `/proc` as the source for
    their information. It contains files that have useful information about the processes.
    For instance, as shown in the following screenshot, `meminfo`, present under `/proc`,
    gives information about the memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75a8d911-494a-4939-a775-b36e4bd62438.png)'
  prefs: []
  type: TYPE_IMG
- en: The meminfo file under the proc folder in Android
  prefs: []
  type: TYPE_NORMAL
- en: The sbin directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This contains binaries for several important daemons. It is not of much significance
    from a forensic perspective.
  prefs: []
  type: TYPE_NORMAL
- en: The storage directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here you can find SD card contents. Please note that this SD card can be either
    removable storage or non-removable storage. Any app on your phone with the `WRITE_EXTERNAL_STORAGE`
    permission may create files or folders in this location. There are some default
    folders such as `Android`, `DCIM`, and `Downloads` present in most mobiles. The
    following screenshot shows the contents of the `/storage/self/primary` location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c41838d0-c907-44cc-965a-1f386cd149bb.png)'
  prefs: []
  type: TYPE_IMG
- en: The content of /storage/self/primary (/sdcard is a symlink)
  prefs: []
  type: TYPE_NORMAL
- en: '**Digital Camera Images** (**DCIM**) is the default directory structure for
    digital cameras, smartphones, tablets, and related solid state devices. Some tablets
    have a `Photos` folder that points to the same location. Within DCIM, you will
    find photos you have taken, videos, and thumbnails (cache files). Photos are stored
    in `/DCIM/Camera`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Android developer''s reference explains that there are certain public storage
    directories that are not tied to a specific program. The following is a quick
    overview of those folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Music`: Media scanner classifies all media found here as user music'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Podcasts`: Media scanner classifies all media found here as podcasts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ringtones`: Media files present here are classified as ringtones'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Alarms`: Media files present here are classified as alarms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Notifications`: Media files under this location are used for notification
    sounds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pictures`: All photos except the ones taken with the camera are stored in
    this folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Movies`: All movies except the ones taken with the camera are stored in this
    folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Download`: Miscellaneous downloads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This directory contains libraries, system binaries, and other system-related
    files. The pre-installed applications that come along with the phone are also
    present in this partition. The following screenshot shows the files present in
    the system partition on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f1e4a09-5574-4129-9c3e-60dba86f615f.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of system partition of an Android device
  prefs: []
  type: TYPE_NORMAL
- en: Application data storage on the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android devices store lots of sensitive data through the use of apps. Although
    we have earlier categorized apps as system and user-installed apps, here is a
    more detailed split:'
  prefs: []
  type: TYPE_NORMAL
- en: Apps that come along with Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps installed by the manufacturer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps installed by the wireless carrier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps installed by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these store different types of data on the device. Application data
    often contains a wealth of information that is relevant to the investigation.
    Here is a sample list of possible data that can be found on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: SMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chat messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pictures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPS data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files or documents downloaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data that belongs to installed apps (Facebook, Twitter, and other social media
    apps)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calendar appointments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data belonging to different applications can be stored either internally or
    externally. In the case of external storage (SD card), data can be stored in any
    location. But in the case of internal storage, the location is predefined. To
    be specific, the internal data of all apps present on the device (either system
    apps or user-installed apps) is automatically saved in a subdirectory of `/data/data`
    named after the package name. For example, the default Android email app has a
    package name of `com.android.email` and the internal data is stored in `/data/data/com.android.email`.
    We are going to discuss this in detail in the coming sections but, for now, this
    knowledge is sufficient to understand the following details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android provides developers with certain options to store data to the device.
    The option that can be used depends on the underlying data that is to be stored.
    Data that belongs to applications can be stored in one of the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: Shared preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following sections provide clear explanations regarding each of these options.
  prefs: []
  type: TYPE_NORMAL
- en: Shared preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shared preferences provide a framework to store key-value pairs of primitive
    data types in XML format. Primitive data types includes Boolean, float, int, long,
    and string. Strings are stored in the **Unicode Transformation Format** (**UTF**)
    format. These files are typically stored in an application''s `/data/data/shared_pref`
    path. For instance, the `shared_pref` folder for Android email app contains the
    following three XML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a08196e3-8892-4a87-bf90-f803346e4918.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the shared_prefs folder of the Android email app
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained in [Chapter 2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml), *Setting
    up Android Forensic Environment*, the content of these files can be viewed using
    the `cat` command. The following screenshot shows the contents of the `UnifiedEmail.xml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b275c2cf-04e4-4bca-9b95-78449e915b3e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Android email app's shared preferences file content
  prefs: []
  type: TYPE_NORMAL
- en: Different XML files may contain different pieces of information that can be
    very helpful during forensic examinations, for example, account names or even
    passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Internal storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The files here are stored in the internal storage. These are located typically
    in the application's `/data/data` subdirectory. Data stored here is private and
    cannot be accessed by other applications. Even the device owner is prevented from
    viewing the files (unless they have root access).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, based on the requirement, the developer can allow other processes
    to modify and update these files. The following screenshot shows the details of
    the apps stored with their package name under the `/data/data` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1a636a9-5cca-4f81-a597-d68eec777f9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the /data/data folder in Android
  prefs: []
  type: TYPE_NORMAL
- en: 'The internal data of each app is stored in their respective folders. For instance,
    the following screenshot shows internal storage that belongs to the YouTube app
    on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/550bd5a7-3f3c-4073-ad51-9b412f1b51f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Internal storage of the Android YouTube app
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually the `databases`, `lib`, `shared_pref`, `cache` folders are created
    for most of the applications. The following table provides a brief description
    of these folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Sub directory** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `shared_prefs` | XML file of shared preferences |'
  prefs: []
  type: TYPE_TB
- en: '| `lib` | Custom library files required by an app |'
  prefs: []
  type: TYPE_TB
- en: '| `files` | Developer saved files |'
  prefs: []
  type: TYPE_TB
- en: '| `cache` | Files cached by app |'
  prefs: []
  type: TYPE_TB
- en: '| `databases` | SQLite and journal files |'
  prefs: []
  type: TYPE_TB
- en: 'Folders other than these are custom folders created by the app developer. The
    `databases` folder is the one that contains crucial data that helps in forensic
    investigations. As shown in the following screenshot, data in this folder is stored
    in SQLite files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f3d3443-c9b5-4182-b188-87c1b5d27ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: SQLite files present under the databases folder of the Android browser app
  prefs: []
  type: TYPE_NORMAL
- en: This data can be viewed using tools such as DB Browser for SQLite. More details
    about how to extract data is covered in detail under [Chapter 4](b5ab11df-1911-4deb-accd-f92c74650e6d.xhtml),
    *Extracting Data Logically from Android Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: External storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Files can also be stored by the apps in external storage. External storage can
    be a removable media such as a SD card or non-removable storage that comes with
    the phone. In the case of a removable SD card, data could be used on other devices
    just by removing the SD card and inserting in any other device. SD cards are usually
    formatted with the FAT32 filesystem but other filesystems such as EXT3 and EXT4
    are also being increasingly used. Unlike internal storage, external storage does
    not have strict security enforcements. In other words, data stored here is public
    and can be accessed by other applications provided the requesting apps have the
    necessary permissions.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLite is a popular database format present in many mobile systems and is used
    for structured data storage. SQLite is open source and, unlike many other databases,
    it is compact and offers a lot of functionality. Android supports SQLite through
    dedicated APIs and hence developers can take advantage of it. SQLite databases
    are a rich source of forensic data. The SQLite files used by apps are generally
    stored under `/data/data/<ApplicationPackageName>/databases`. For example, in
    the case of the Android email app, the following screenshot shows the SQLite files
    present in its databases folder. We will examine these details more in the next
    sections. From a forensic point of view, they are highly valuable since they often
    store lot of important data handled by the application.
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the network to store and retrieve data on your own web-based services.
    To do network operations, the classes in the `java.net.*` and `android.net.*`
    packages can be used. These packages provide developers with low level APIs necessary
    to interact with the network, web servers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Android filesystem overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the filesystem is very important in Android forensics, as it helps
    us to gain knowledge on how data is stored and retrieved. This knowledge about
    properties and the structure of a filesystem proves to be useful during forensic
    analysis. Filesystem refers to the way data is stored, organized, and retrieved
    from a volume. A basic installation may be based on one volume split into several
    partitions; here, each partition can be managed by a different filesystem. Microsoft
    Windows users are familiar with FAT32 or NTFS filesystems, whereas Linux users
    are more familiar with EXT2 or EXT4 filesystems. As is true in Linux, Android
    utilizes mount points and not drives (that is, `C:` or `E:`). Each filesystem
    defines its own rules for managing the files on the volume. Depending on these
    rules, each filesystem offers a different speed for file retrieval, security,
    size, and so on. Linux uses several filesystems, and so does Android. From a forensic
    point of view, it's important to understand what filesystems are used by Android
    and to identify the filesystems that are of significance to the investigation.
    For example, the filesystem that stores the user's data is of primary concern
    to us, as opposed to a filesystem used to boot the device.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, Linux is known to support a large number of filesystems.
    These filesystems used by the system are not accessed by drive names, but instead
    are combined into a single hierarchical tree structure that represents the filesystem
    as a single entity. Each new filesystem is added into this single filesystem tree
    when it is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, mounting is an act of attaching an additional filesystem to the currently
    accessible filesystem of a computer.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the filesystems are mounted onto a directory and files present in this
    filesystem are now the contents of that directory. This directory is called a *mount
    point*. It makes no difference whether the filesystem exists on the local device
    or on a remote device. Everything is integrated into a single file hierarchy that
    begins with root. Each filesystem has a separate kernel module that registers
    the operations that it supports with something called **Virtual File System **(**VFS**).
    VFS allows different applications to access different filesystems in a uniform
    way. By separating the implementation from the abstraction, adding a new filesystem
    becomes a matter of writing another kernel module. These modules are either part
    of the kernel or are dynamically loaded on demand. The Android kernel comes with
    a subset of the vast collection of filesystems that range from the **Journal File
    System** (**JFS**) to the Amiga file system. All of the background work is handled
    by the kernel when a filesystem is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing filesystems on an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The filesystems supported by the Android kernel can be determined by checking
    the content of the `filesystems` file present in the `proc` folder. The content
    of this file can be viewed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, the filesystems preceded by the `nodev` property are
    not mounted on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Common Android filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The filesystems present in Android can be divided into three main categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Flash memory filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media-based filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What data can be recovered logically?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the most part, any and all user data may be recovered logically:'
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMS/MMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System logs and information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bulk of this data is stored in SQLite databases, so it's even possible to
    recover large amounts of deleted data through a logical extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Flash memory filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Flash memory is a type of constantly-powered nonvolatile memory that can be
    erased and reprogrammed in units of memory called blocks. Due to the particular
    characteristics of flash memories, special filesystems are needed write over the
    media and deal with the long erase times of certain blocks. While the supported
    filesystems vary on different Android devices, the common flash memory filesystems
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extended File Allocation Table** (**exFAT**)is a Microsoft proprietary filesystem
    optimized for flash drives. Because of the license requirements, it isn''t part
    of the standard Linux kernel. But still, a few manufacturers provide support for
    this filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flash Friendly File System** (**F2FS**) was introduced by Samsung as an open
    source filesystem. The basic intention was to build a filesystem that takes into
    account the characteristics of NAND flash memory-based storage devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Journal Flash File System version 2** (**JFFS2 **) is a log-structured filesystem
    used in Android. JFFS2 is the default flash filesystem for **Android Open Source
    Project** (**ASOP**)since the Ice Cream Sandwich version. Filesystems such as
    LogFS, UBIFS, YAFFS, and so on have been developed as a replacement for JFFS2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yet Another Flash File System version** **2** (**YAFFS2**) is an open source,
    single-threaded filesystem released in 2002\. It is mainly designed to be fast
    when dealing with NAND flash. YAFFS2 utilizes **out-of-band** (**OOB**) and that
    is often not captured or decoded correctly during forensic acquisition, which
    makes analysis difficult. YAFFS2 was the most popular release at one point and
    is still widely used in Android devices. YAFFS2 is a log-structured filesystem.
    Data integrity is guaranteed even in the case of sudden power outage. In 2010,
    there was an announcement stating that, in releases after Gingerbread, devices
    were going to move from YAFFS2 to EXT4\. Currently, YAFFS2 is not supported in
    newer kernel versions, but certain mobile manufacturers might still continue to
    support it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robust File System** (**RFS**) supports NAND flash memory on Samsung devices.
    RFS can be summarized as a FAT16 (or FAT32) filesystem where journaling is enabled
    through a transaction log. Many users complain that Samsung should stick with
    EXT4\. RFS has been known to have lag times that slow down the features of Android.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media-based filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides the previously discussed flash memory filesystems, Android devices
    typically support the following media-based filesystems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EXT2/EXT3/EXT4 (EXTended filesystem)**, which was introduced in 1992 specifically
    for the Linux kernel, was one of the first filesystems and used the virtual filesystem.
    EXT2, EXT3, and EXT4 are the subsequent versions. Journaling is the main advantage
    of EXT3 over EXT2\. With EXT3, in the case of an unexpected shutdown, there is
    no need to verify the filesystem. The EXT4 filesystem, the fourth extended filesystem,
    has gained significance with mobile devices implementing dual-core processors.
    The YAFFS2 filesystem is known to have a bottleneck on dual-core systems. With
    the Gingerbread version of Android, the YAFFS filesystem was swapped for EXT4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FAT** **(File Allocation Table)** filesystems such as FAT12, FAT16, and FAT32
    are supported by the MSDOS driver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VFAT** **(Virtual File Allocation Table)** is an extension to the FAT16 and
    FAT32 filesystems. Microsoft''s FAT32 filesystem is supported by most Android
    devices. It is supported by almost all of the major operating systems, including
    Windows, Linux, and macOS. This enables these systems to easily read, modify,
    and delete the files present on the FAT32 portion of the Android device. Most
    of the external SD cards are formatted using the FAT32 filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudo filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to these, there are also pseudo filesystems, which can be thought
    of as logical groupings of files. The following are some of the important pseudo
    filesystems found in Android devices:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cgroup` pseudo filesystem provides a way to access and define several
    kernel parameters. There are a number of different process control groups present.
    As shown in the following command-line output, the list of groups can be seen
    in the `/proc/cgroups` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/53bf3334-fa67-4a84-8f78-c0b14b4aaaad.png)'
  prefs: []
  type: TYPE_IMG
- en: Android devices use this filesystem to track their job. They are responsible
    for aggregating the tasks and keeping track of them.
  prefs: []
  type: TYPE_NORMAL
- en: The `rootfs` filesystem is one of the main components of Android and contains
    all of the information required to boot the device. When the device starts the
    boot process, it needs access to many core files and hence mounts the root filesystem.
    This filesystem is mounted at `/` (the `root` folder). Hence, this is the filesystem
    on which all other filesystems are slowly mounted. If this filesystem is corrupt,
    the device cannot be booted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Procfs` filesystem contains information about kernel data structures,
    processes, and other system-related information under the `/proc` directory. For
    instance, the `/proc/filesystems` file displays the list of available filesystems
    on the device. The following command shows all information about the CPU of the
    device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/568f4d57-dd85-4385-9e6a-e88b7840d522.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `sysfs` filesystem mounts the `/sys` folder, which contains information
    about the configuration of the device. The following output shows various folders
    under the `sys` directory in an Android device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since the data present in these folders is mostly related to configuration,
    this is not usually of much significance to a forensic investigator. But there
    could be some circumstances where we might want to check whether a particular
    setting was enabled on the phone, and analyzing this folder could be useful under
    such conditions. Note that each folder consists of a large number of files. Capturing
    this data through forensic acquisition is the best method to ensure this data
    is not changed during examination.
  prefs: []
  type: TYPE_NORMAL
- en: '`tmpfs` is a temporary storage facility on the device that stores the files
    in RAM (volatile memory). This is often mounted on the `/dev` directory. The main
    advantage of using RAM is faster access and retrieval. But, once the device is
    restarted or switched off, this data won''t be accessible anymore. Hence, it''s
    important for a forensic investigator to examine the data in RAM before a device
    reboot happens or to extract the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the `mount` command to see different partitions and their filesystems
    available on the device, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As seen in the preceding command-line output, different partitions have different
    filesystems and they are mounted accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having sound knowledge of Android's partition layout, filesystems, and important
    locations would help the forensic investigator during the process of extracting
    data from the device. The userdata location on the Android device contains a bulk
    of user information that can be crucial for any forensic investigation. However,
    most of these files may be accessed only on a rooted phone (especially files present
    under the `/data/data` location). We have also seen Android data storage options,
    various filesystems used by Android, and their significance.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, we will now learn in the upcoming chapters about how to
    logically and physically extract data from an Android device.
  prefs: []
  type: TYPE_NORMAL
