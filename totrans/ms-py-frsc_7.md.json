["```\nuser@lab:~$ sudo apt-get install bison g++-multilib git gperf libxml2-utils make python-networkx zlib1g-dev:i386 zip openjdk-7-jdk\n\n```", "```\n# adb protocol on passion (Nexus One)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4e12\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on passion (Nexus One)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0bb4\", ATTR{idProduct}==\"0fff\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on crespo/crespo4g (Nexus S)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4e22\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on crespo/crespo4g (Nexus S)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4e20\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on stingray/wingray (Xoom)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"22b8\", ATTR{idProduct}==\"70a9\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on stingray/wingray (Xoom)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"708c\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on maguro/toro (Galaxy Nexus)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"04e8\", ATTR{idProduct}==\"6860\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on maguro/toro (Galaxy Nexus)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4e30\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on panda (PandaBoard)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d101\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on panda (PandaBoard ES)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"d002\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on panda (PandaBoard)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d022\", MODE=\"0600\", OWNER=\"user\"\n# usbboot protocol on panda (PandaBoard)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d00f\", MODE=\"0600\", OWNER=\"user\"\n# usbboot protocol on panda (PandaBoard ES)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0451\", ATTR{idProduct}==\"d010\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on grouper/tilapia (Nexus 7)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4e42\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on grouper/tilapia (Nexus 7)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4e40\", MODE=\"0600\", OWNER=\"user\"\n# adb protocol on manta (Nexus 10)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4ee2\", MODE=\"0600\", OWNER=\"user\"\n# fastboot protocol on manta (Nexus 10)\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", ATTR{idProduct}==\"4ee0\", MODE=\"0600\", OWNER=\"user\"\n```", "```\nuser@lab:~$ mkdir ~/bin\n\nuser@lab:~$ PATH=~/bin:$PATH\n\nuser@lab:~$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n\nuser@lab:~$ chmod a+x ~/bin/repo\n\nuser@lab:~$ repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.4_r1\n\nuser@lab:~$ repo sync\n\n```", "```\nuser@lab:~$ git clone https://android.googlesource.com/device/lge/mako-kernel/kernel\n\nuser@lab:~$ git clone https://android.googlesource.com/kernel/msm.git\n\n```", "```\nuser@lab:~$ git clone https://github.com/504ensicsLabs/LiME.git\n\n```", "```\nuser@lab:~$ export SDK_PATH=/path/to/android-sdk-linux/\n\nuser@lab:~$ export NDK_PATH=/path/to/android-ndk/\n\nuser@lab:~$ export KSRC_PATH=/path/to/kernel-source/\n\nuser@lab:~$ export CC_PATH=$NDK_PATH/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86/bin/\n\nuser@lab:~$ export LIME_SRC=/path/to/lime/src\n\n```", "```\nuser@lab:~$ adb pull /proc/config.gz\n\nuser@lab:~$ gunzip ./config.gz\n\nuser@lab:~$ cp config $KSRC_PATH/.config\n\nuser@lab:~$ cd $KSRC_PATH \n\nuser@lab:~$ make ARCH=arm CROSS_COMPILE=$CC_PATH/arm-eabi-modules_prepare\n\n```", "```\nobj-m := lime.o\nlime-objs := main.o tcp.o disk.o\nKDIR := /path/to/kernel-source\nPWD := $(shell pwd)\nCCPATH := /path/to/android-ndk/toolchains/arm-linux-androideabi-4.4.4/prebuilt/linux-x86/bin/\ndefault:\n $(MAKE) ARCH=arm CROSS_COMPILE=$(CCPATH)/arm-eabi- -C $(KDIR) M=$(PWD) modules\n```", "```\ntypedef struct {\n  unsigned int magic;         // Always 0x4C694D45 (LiME)\n  unsigned int version;         // Header version number\n  unsigned long long s_addr;     // Starting address of physical RAM\n  unsigned long long e_addr;     // Ending address of physical RAM\n  unsigned char reserved[8];     // Currently all zeros\n  } __attribute__ ((__packed__)) lime_mem_range_header;\n```", "```\nuser@lab:~$ adb push lime.ko /sdcard/lime.ko\nuser@lab:~$ adb forward tcp:4444 tcp:4444\nuser@lab:~$ adb shell\nnexus4:~$ su\nnexus4:~$ insmod /sdcard/lime.ko \"path=tcp:4444 format=lime\"\n\n```", "```\nuser@lab:~$ nc localhost 4444 > nexus4_ram.lime\n\n```", "```\nuser@lab $ zip Nexus4.zip module.dwarf System.map\n\n```", "```\nclass dalvik_app_calllog(linux_common.AbstractLinuxCommand):\n\n     def __init__(self, config, *args, **kwargs):\n          linux_common.AbstractLinuxCommand.__init__(self, config, *args, **kwargs)\n          dalvik.register_option_PID(self._config)\n          dalvik.register_option_GDVM_OFFSET(self._config)\n          self._config.add_option('CLASS_OFFSET', short_option = 'c', default = None,\n          help = 'This is the offset (in hex) of system class PhoneCallDetails.java', action = 'store', type = 'str')\n\n     def calculate(self):\n          # if no gDvm object offset was specified, use this one\n          if not self._config.GDVM_OFFSET:\n               self._config.GDVM_OFFSET = str(hex(0x41b0))\n\n          # use linux_pslist plugin to find process address space and ID if not specified\n          proc_as = None\n          tasks = linux_pslist.linux_pslist(self._config).calculate()\n          for task in tasks:\n               if str(task.comm) == \"ndroid.contacts\":\n                    proc_as = task.get_process_address_space()\n                    if not self._config.PID:\n                         self._config.PID = str(task.pid)\n                    break\n\n          # use dalvik_loaded_classes plugin to find class offset if not specified\n          if not self._config.CLASS_OFFSET:\n              classes = dalvik_loaded_classes.dalvik_loaded_classes(self._config).calculate()\n              for task, clazz in classes:\n                   if (dalvik.getString(clazz.sourceFile)+\"\" == \"PhoneCallDetails.java\"):\n                        self._config.CLASS_OFFSET = str(hex(clazz.obj_offset))\n                        break\n\n          # use dalvik_find_class_instance plugin to find a list of possible class instances\n          instances = dalvik_find_class_instance.dalvik_find_class_instance(self._config).calculate()\n          for sysClass, inst in instances:\n               callDetailsObj = obj.Object('PhoneCallDetails', offset = inst, vm = proc_as)\n               # access type ID field for sanity check\n               typeID = int(callDetailsObj.callTypes.contents0)\n               # valid type ID must be 1,2 or 3\n               if (typeID == 1 or typeID == 2 or typeID == 3):\n                    yield callDetailsObj\n\n     def render_text(self, outfd, data):\n          self.table_header(outfd, [    (\"InstanceClass\", \"13\"),\n                                        (\"Date\", \"19\"),\n                                        (\"Contact\", \"20\"),\n                                        (\"Number\", \"15\"),\n                                        (\"Duration\", \"13\"),\n                                        (\"Iso\", \"3\"),\n                                        (\"Geocode\", \"15\"),\n                                        (\"Type\", \"8\")                                      \n                                        ])\n          for callDetailsObj in data:\n               # convert epoch time to human readable date and time\n               rawDate = callDetailsObj.date / 1000\n               date =    str(time.gmtime(rawDate).tm_mday) + \".\" + \\\n                         str(time.gmtime(rawDate).tm_mon) + \".\" + \\\n                         str(time.gmtime(rawDate).tm_year) + \" \" + \\\n                         str(time.gmtime(rawDate).tm_hour) + \":\" + \\\n                         str(time.gmtime(rawDate).tm_min) + \":\" + \\\n                         str(time.gmtime(rawDate).tm_sec)\n\n               # convert duration from seconds to hh:mm:ss format\n               duration =     str(callDetailsObj.duration / 3600) + \"h \" + \\\n                              str((callDetailsObj.duration % 3600) / 60) + \"min \" + \\\n                              str(callDetailsObj.duration % 60) + \"s\"\n\n               # replace call type ID by string\n               callType = int(callDetailsObj.callTypes.contents0)\n               if callType == 1:\n                    callType = \"incoming\"\n               elif callType == 2:\n                    callType = \"outgoing\"\n               elif callType == 3:\n                    callType = \"missed\"\n               else:\n                    callType = \"unknown\"\n\n               self.table_row(     outfd,\n                                   hex(callDetailsObj.obj_offset),\n                                   date,\n                                   dalvik.parseJavaLangString(callDetailsObj.name.dereference_as('StringObject')),\n                                   dalvik.parseJavaLangString(callDetailsObj.formattedNumber.dereference_as('StringObject')),\n                                   duration,               \n                                   dalvik.parseJavaLangString(callDetailsObj.countryIso.dereference_as('StringObject')),\n                                   dalvik.parseJavaLangString(callDetailsObj.geoCode.dereference_as('StringObject')),\n                                   callType)\n```", "```\nclass dalvik_app_lastInput(linux_common.AbstractLinuxCommand):\n\n     def __init__(self, config, *args, **kwargs):\n          linux_common.AbstractLinuxCommand.__init__(self, config, *args, **kwargs)\n          dalvik.register_option_PID(self._config)\n          dalvik.register_option_GDVM_OFFSET(self._config)\n          self._config.add_option('CLASS_OFFSET', short_option = 'c', default = None,\n          help = 'This is the offset (in hex) of system class RichInputConnection.java', action = 'store', type = 'str')\n\n     def calculate(self):\n\n          # if no gDvm object offset was specified, use this one\n          if not self._config.GDVM_OFFSET:\n               self._config.GDVM_OFFSET = str(0x41b0)\n\n          # use linux_pslist plugin to find process address space and ID if not specified\n          proc_as = None     \n          tasks = linux_pslist.linux_pslist(self._config).calculate()\n          for task in tasks:\n               if str(task.comm) == \"putmethod.latin\":                    \n                    proc_as = task.get_process_address_space()\n                    self._config.PID = str(task.pid)\n                    break\n\n          # use dalvik_loaded_classes plugin to find class offset if not specified\n          if not self._config.CLASS_OFFSET:\n              classes = dalvik_loaded_classes.dalvik_loaded_classes(self._config).calculate()\n              for task, clazz in classes:\n                   if (dalvik.getString(clazz.sourceFile)+\"\" == \"RichInputConnection.java\"):\n                        self._config.CLASS_OFFSET = str(hex(clazz.obj_offset))\n                        break\n\n          # use dalvik_find_class_instance plugin to find a list of possible class instances\n          instance = dalvik_find_class_instance.dalvik_find_class_instance(self._config).calculate()\n          for sysClass, inst in instance:\n               # get stringBuilder object\n               stringBuilder = inst.clazz.getJValuebyName(inst, \"mCommittedTextBeforeComposingText\").Object.dereference_as('Object')\n               # get superclass object\n               abstractStringBuilder = stringBuilder.clazz.super.dereference_as('ClassObject')\n\n               # array object of super class\n               charArray = abstractStringBuilder.getJValuebyName(stringBuilder, \"value\").Object.dereference_as('ArrayObject')\n               # get length of array object\n               count = charArray.length\n               # create string object with content of the array object\n               text = obj.Object('String', offset = charArray.contents0.obj_offset,\n               vm = abstractStringBuilder.obj_vm, length = count*2, encoding = \"utf16\")\n               yield inst, text\n\n     def render_text(self, outfd, data):\n          self.table_header(outfd, [    (\"InstanceClass\", \"13\"),\n                                        (\"lastInput\", \"20\")                                 \n                                        ])\n          for inst, text in data:\n\n               self.table_row(     outfd,\n                                   hex(inst.obj_offset),\n                                   text)\n```", "```\nuser@forensic-target $ uname –a\nLinux forensic-target 3.2.0-88-generic #126-Ubuntu SMP Mon Jul 6 21:33:03 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n\n```", "```\nuser@lab src $ make -C /usr/src/linux-headers-3.2.0-88-generic M=$PWD\n\n```", "```\nuser@forensic-target $ sudo insmod lime.ko path=/path/to/dump.lime format=lime\n\n```", "```\nuser@lab src $ make -C /usr/src/linux-headers-3.2.0-88-generic CONFIG_DEBUG_INFO=y M=$PWD\n\n```", "```\nuser@lab $ dwarfdump -di module.ko > module.dwarf\n\n```", "```\nuser@lab $ zip Ubuntu3.2.0-88.zip module.dwarf System.map\n\n```", "```\nuser@lab $ sudo cp Ubuntu3.2.0-88.zip /usr/local/lib/python2.7/dist-packages/volatility-2.4-py2.7.egg/volatility/plugins/overlays/linux/\n\n```", "```\nuser@lab $ vol.py --info\n\n```", "```\nProfiles\n--------\nLinuxUbuntu3_2_0-88x64 - A Profile for Linux Ubuntu3.2.0-88 x64\n\n```", "```\nuser@lab $ vol.py --profile=LinuxUbuntu3_2_0-88x64 --file=memDump.lime linux_pslist\nVolatility Foundation Volatility Framework 2.4\n\nOffset             Name                 Pid             Uid             Gid    DTB                Start Time\n------------------ -------------------- --------------- --------------- ------ ------------------ ----------\n0xffff8802320e8000 init                 1               0               0      0x000000022f6c0000 2015-08-16 09:51:21 UTC+0000\n0xffff8802320e9700 kthreadd             2               0               0      ------------------ 2015-08-16 09:51:21 UTC+0000\n\n0xffff88022fbc0000 cron                 2500            0               0      0x000000022cd38000 2015-08-16 09:51:25 UTC+0000\n0xffff88022fbc1700 atd                  2501            0               0      0x000000022fe28000 2015-08-16 09:51:25 UTC+0000\n0xffff88022f012e00 irqbalance           2520            0               0      0x000000022df39000 2015-08-16 09:51:25 UTC+0000\n0xffff8802314b5c00 whoopsie             2524            105             114    0x000000022f1b0000 2015-08-16 09:51:25 UTC+0000\n0xffff88022c5c0000 freshclam            2598            119             131    0x0000000231fa7000 2015-08-16 09:51:25 UTC+0000\n\n```", "```\nuser@lab $ vol.py --profile=LinuxUbuntu3_2_0-88x64 --file=memDump.lime linux_arp\n[192.168.167.22                            ] at 00:00:00:00:00:00    on eth0\n[192.168.167.20                            ] at b8:27:eb:01:c2:8f    on eth0\n\n```", "```\nuser@lab $ vol.py --profile=LinuxUbuntu3_2_0-88x64 --file=memDump.lime linux_netstat\nTCP      192.168.167.21  :55622 109.234.207.112  :  143 ESTABLISHED           thunderbird/3746\nUNIX 25129          thunderbird/3746\nTCP      0.0.0.0         : 7802 0.0.0.0         :    0 LISTEN                      skype/3833\n\n```", "```\nuser@lab $ vol.py --profile=LinuxUbuntu3_2_0-88x64 --file=memDump.lime linux_list_raw\nProcess          PID    File Descriptor Inode \n---------------- ------ --------------- ------------------\ndhclient           2817               5              15831\n\n```", "```\nuser@lab $ vol.py --profile=LinuxUbuntu3_2_0-88x64 --file=memDump.lime linux_yarascan –-yara-rules=\"microsoft.com\" --wide\n\nTask: skype pid 3833 rule r1 addr 0xe2be751f\n0xe2be751f  6d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00   m.i.c.r.o.s.o.f.\n0xe2be752f  74 00 2e 00 63 00 6f 00 6d 00 2f 00 74 00 79 00   t...c.o.m./.t.y.\n0xe2be753f  70 00 6f 00 67 00 72 00 61 00 70 00 68 00 79 00   p.o.g.r.a.p.h.y.\n0xe2be754f  2f 00 66 00 6f 00 6e 00 74 00 73 00 2f 00 59 00   /.f.o.n.t.s./.Y.\n0xe2be755f  6f 00 75 00 20 00 6d 00 61 00 79 00 20 00 75 00   o.u...m.a.y...u.\n0xe2be756f  73 00 65 00 20 00 74 00 68 00 69 00 73 00 20 00   s.e...t.h.i.s...\n0xe2be757f  66 00 6f 00 6e 00 74 00 20 00 61 00 73 00 20 00   f.o.n.t...a.s...\n0xe2be758f  70 00 65 00 72 00 6d 00 69 00 74 00 74 00 65 00   p.e.r.m.i.t.t.e.\n0xe2be759f  64 00 20 00 62 00 79 00 20 00 74 00 68 00 65 00   d...b.y...t.h.e.\n0xe2be75af  20 00 45 00 55 00 4c 00 41 00 20 00 66 00 6f 00   ..E.U.L.A...f.o.\n0xe2be75bf  72 00 20 00 74 00 68 00 65 00 20 00 70 00 72 00   r...t.h.e...p.r.\n0xe2be75cf  6f 00 64 00 75 00 63 00 74 00 20 00 69 00 6e 00   o.d.u.c.t...i.n.\n0xe2be75df  20 00 77 00 68 00 69 00 63 00 68 00 20 00 74 00   ..w.h.i.c.h...t.\n0xe2be75ef  68 00 69 00 73 00 20 00 66 00 6f 00 6e 00 74 00   h.i.s...f.o.n.t.\n0xe2be75ff  20 00 69 00 73 00 20 00 69 00 6e 00 63 00 6c 00   ..i.s...i.n.c.l.\n0xe2be760f  75 00 64 00 65 00 64 00 20 00 74 00 6f 00 20 00   u.d.e.d...t.o...\nTask: skype pid 3833 rule r1 addr 0xedfe1267\n0xedfe1267  6d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00   m.i.c.r.o.s.o.f.\n0xedfe1277  74 00 2e 00 63 00 6f 00 6d 00 2f 00 74 00 79 00   t...c.o.m./.t.y.\n0xedfe1287  70 00 6f 00 67 00 72 00 61 00 70 00 68 00 79 00   p.o.g.r.a.p.h.y.\n0xedfe1297  2f 00 66 00 6f 00 6e 00 74 00 73 00 2f 00 59 00   /.f.o.n.t.s./.Y.\n0xedfe12a7  6f 00 75 00 20 00 6d 00 61 00 79 00 20 00 75 00   o.u...m.a.y...u.\n0xedfe12b7  73 00 65 00 20 00 74 00 68 00 69 00 73 00 20 00   s.e...t.h.i.s...\n0xedfe12c7  66 00 6f 00 6e 00 74 00 20 00 61 00 73 00 20 00   f.o.n.t...a.s...\n0xedfe12d7  70 00 65 00 72 00 6d 00 69 00 74 00 74 00 65 00   p.e.r.m.i.t.t.e.\n0xedfe12e7  64 00 20 00 62 00 79 00 20 00 74 00 68 00 65 00   d...b.y...t.h.e.\n0xedfe12f7  20 00 45 00 55 00 4c 00 41 00 20 00 66 00 6f 00   ..E.U.L.A...f.o.\n0xedfe1307  72 00 20 00 74 00 68 00 65 00 20 00 70 00 72 00   r...t.h.e...p.r.\n0xedfe1317  6f 00 64 00 75 00 63 00 74 00 20 00 69 00 6e 00   o.d.u.c.t...i.n.\n0xedfe1327  20 00 77 00 68 00 69 00 63 00 68 00 20 00 74 00   ..w.h.i.c.h...t.\n0xedfe1337  68 00 69 00 73 00 20 00 66 00 6f 00 6e 00 74 00   h.i.s...f.o.n.t.\n0xedfe1347  20 00 69 00 73 00 20 00 69 00 6e 00 63 00 6c 00   ..i.s...i.n.c.l.\n0xedfe1357  75 00 64 00 65 00 64 00 20 00 74 00 6f 00 20 00   u.d.e.d...t.o...\n\n```", "```\nrule APT_Derusbi_Gen\n{\nmeta:\n  author = \"ThreatConnect Intelligence Research Team\"\nstrings:\n  $2 = \"273ce6-b29f-90d618c0\" wide ascii\n  $A = \"Ace123dx\" fullword wide ascii\n  $A1 = \"Ace123dxl!\" fullword wide ascii\n  $A2 = \"Ace123dx!@#x\" fullword wide ascii\n  $C = \"/Catelog/login1.asp\" wide ascii\n  $DF = \"~DFTMP$$$$$.1\" wide ascii\n  $G = \"GET /Query.asp?loginid=\" wide ascii\n  $L = \"LoadConfigFromReg failded\" wide ascii\n  $L1 = \"LoadConfigFromBuildin success\" wide ascii\n  $ph = \"/photoe/photo.asp HTTP\" wide ascii\n  $PO = \"POST /photos/photo.asp\" wide ascii\n  $PC = \"PCC_IDENT\" wide ascii\ncondition:\n  any of them\n}\n```", "```\nuser@lab $ vol.py --profile=LinuxUbuntu3_2_0-88x64 --file=memDump.lime linux_yarascan --yara-file=apt_derusbi_gen.rule --wide\n\n```"]