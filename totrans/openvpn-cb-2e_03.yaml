- en: Chapter 3. Client-server Ethernet-style Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple configuration - non-bridged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling client-to-client traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bridging - Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bridging - Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking broadcast and non-IP traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An external DHCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the status file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The management interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating IPv6 into TAP-style networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter will cover the deployment model of a single server
    with multiple remote clients capable of forwarding Ethernet traffic.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at several common configurations, including bridging, the use of
    an external DHCP server, and also the use of the `OpenVPN` status file. Please
    note that bridging should only be used as a last resort. Most of the functionality
    provided by bridging can be achieved through other methods. Moreover, there are
    many disadvantages to using bridging, especially in terms of performance and security.
  prefs: []
  type: TYPE_NORMAL
- en: Simple configuration - non-bridged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a TAP-based connection in client
    or server mode using certificates. It also uses masquerading to allow the OpenVPN
    clients to reach all the machines behind the OpenVPN server. The advantage of
    masquerading is that with it, no special routes are needed on the server LAN.
    Masquerading for OpenVPN servers is available only on the Linux and UNIX variants.
    This recipe is similar to the *Server-side routing* recipe from the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, both the server computer and the client computer
    were running CentOS 6 Linux and OpenVPN 2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-1-server.conf`. Note that on some Linux distributions,
    the group `nogroup` is used instead of `nobody`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up IP forwarding and an `iptables` masquerading rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-1-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output generated is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00353.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'After the connection is established, we can verify that it is working. First,
    we ping the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Second, we ping a host on the server-side LAN:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the server starts, it configures the first available TAP interface with
    the IP address `192.168.99.1`. After that, the server listens on the UDP port
    1194 for incoming connections, which serves as an OpenVPN default.
  prefs: []
  type: TYPE_NORMAL
- en: The client connects to the server on this port. After the initial TLS handshake
    using both the client and server certificates, the client is assigned the IP address
    `192.168.99.2`. The client configures its first available TAP interface using
    this information; after this, the VPN is established.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the OpenVPN configuration, this recipe also uses an `iptables` command
    to enable the client to reach Site B''s LAN without having to set up additional
    routes on Site B''s LAN gateway. The following command instructs the Linux kernel
    to rewrite all of the traffic coming from the subnet `192.168.99.0/24` (which
    is our OpenVPN subnet) and that is leaving the Ethernet interface `eth0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these packets has its source address rewritten so that it appears as
    if it is coming from the OpenVPN server itself instead of coming from the OpenVPN
    client. The `iptables` module keeps track of these rewritten packets so that when
    a return packet is received, the reverse is done and the packets are forwarded
    back to the OpenVPN client again. This is an easy method to enable routing to
    work, but there is a drawback when many clients are used: it would not be possible
    to distinguish traffic on Site B''s LAN if it is coming from the OpenVPN server
    itself, from client1via the VPN tunnel or from clientN via the VPN tunnel.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few things to keep in mind when setting up a TAP-style network.
  prefs: []
  type: TYPE_NORMAL
- en: Differences between TUN and TAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The differences between this setup and the *Server-side routing* recipe of
    the previous chapter are minimal. There are a few subtle differences, however,
    which can lead to unforeseen effects if you are not aware of them:'
  prefs: []
  type: TYPE_NORMAL
- en: When using a TAP adapter, the full Ethernet frame is encapsulated. This causes
    a slightly larger overhead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the machines that are connected to a TAP-style network form a single broadcast
    domain. The effects of this will become clearer in the next recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If bridging is needed, a TAP-style tunnel is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the TCP protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we chose the UDP protocol. The configuration files in this
    recipe can be easily converted to use the TCP protocol by changing the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Change this to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Do this in both the client and server configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: The UDP protocol normally gives optimal performance, but some routers and firewalls
    have problems forwarding UDP traffic. In such cases, the TCP protocol often does
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Making IP forwarding permanent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On most Linux systems, the proper way to permanently set up IP forwarding is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the `/etc/sysctl.con` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `sysctl.conf` file using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, in which a
    basic TUN-style setup is explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling client-to-client traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is a continuation of the previous recipe. It will demonstrate how
    to set up a TAP-based connection in client or server mode using certificates.
    Using the `client-to-client` directive, it will also enable different OpenVPN
    clients to contact each other. For TAP-based networks, this leads to some important
    side effects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, the server was running CentOS 6 Linux and OpenVPN 2.3.10; both
    clients were running Windows 7 64 bit and OpenVPN 2.3.10\. For the server, keep
    the configuration file `example3-1-server.conf` from the previous recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-2-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up IP forwarding and an `iptables` masquerading rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file for the first client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-2-client1.ovpn`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Similarly, for the second client, create the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-2-client2.ovpn`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Windows clients, one from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start Client2 using the OpenVPN GUI:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00355.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As the private key file `client2.key` is protected using a passphrase, we will
    be prompted for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00356.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After the connection is established, the GUI window will disappear and a balloon
    will pop up:![How to do it...](img/image00357.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now verify that the VPN connection is working by doing this. First,
    ping the server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, ping the second client:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the higher round-trip time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, verify that we can still ping a host on the server-side LAN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both clients connect to the OpenVPN server in the regular manner. The following
    directive is all that is needed for the clients to see each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Communication between the clients will still pass through the OpenVPN server,
    which explains the higher round-trip time for the ICMP packets. The flow of an
    ICMP (`ping`) echo and reply is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVPN client encrypts the packet and forwards it to the server over a
    secure link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server decrypts the packet and determines that the packet needs to be forwarded
    to another OpenVPN client. Therefore, the packet is not forwarded to the kernel-routing
    modules, but is encrypted again and is forwarded to the second client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second client receives the packet, decrypts it, and sends a reply back to
    the server over the secure link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server decrypts the reply packet and determines that the packet needs to
    be forwarded to the first client. Therefore, the packet is not forwarded to the
    kernel-routing modules but is encrypted again and is forwarded to the original
    client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As always, there are some caveats to watch out for.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast traffic may affect scalability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All machines that are connected to a TAP-style network form a single broadcast
    domain. When `client-to-client` is enabled, this means that all of the broadcast
    traffic from all the clients is forwarded to all other clients. Wireshark running
    on `client2` indeed shows a lot of broadcast packets from `client1`, all of which
    passed through the OpenVPN server. This can lead to a scalability problem when
    a large number of clients are connected.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering traffic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the current version of OpenVPN, it is not possible to filter the traffic
    between VPN clients when the `client-to-client` directive is used. OpenVPN does
    have the capability for a filtering plugin, but this plugin is not maintained
    and requires extensive configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'A second method of filtering traffic between clients is to use the system''s
    routing tables, in combination with a Linux kernel flag, `proxy_arp_pvlan`. This
    flag is available in modern Linux kernels (2.6.34+ or kernels with back-ported
    options). This flag instructs the Linux kernel to resend the ARP request back
    out of the same interface from where it came. It is exactly this flag that is
    needed for client-to-client traffic to work without using the `client-to-client`
    directive. Thus, in order to filter traffic, we first enable client-to-client
    traffic in tap mode by setting this flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We can then use `iptables` command to filter traffic between clients.
  prefs: []
  type: TYPE_NORMAL
- en: TUN-style networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `client-to-client` directive can also be used in TUN-style networks. It
    works in exactly the same manner as in this recipe, except that the OpenVPN clients
    do not form a single broadcast domain.
  prefs: []
  type: TYPE_NORMAL
- en: Bridging - Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a bridged OpenVPN server. In this
    mode, the local network and the VPN network are bridged, which means that all
    of the traffic from one network is forwarded to the other and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: This setup is often used to securely connect remote clients to a Windows-based
    LAN, but it is quite hard to get it right. In almost all cases, it suffices to
    use a TUN-style network with a local WINS server on the OpenVPN server itself.
    A bridged VPN does have its advantages, as will become apparent in the next few
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are also disadvantages to using bridging, especially in terms
    of performance: the performance of a bridged 100 Mbps Ethernet adapter is about
    half the performance of a non-bridged adapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00358.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only networks*. For this recipe, the server was running CentOS 6 Linux and
    OpenVPN 2.3.10\. The client computer was running Windows 7 64 bit and OpenVPN
    2.3.10\. For the client, keep the client configuration file `example3-2-client2.ovpn`
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-3-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create a script to start the network bridge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this script as `example3-3-bridge-start` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Similarly, use a script to stop the Ethernet bridge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this script as `example3-3-bridge-stop` file. These scripts are based on
    the `bridge-start` and `bridge-stop` examples, which are part of the OpenVPN distribution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the network bridge and verify that it is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the client:![How to do it...](img/image00359.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the assigned VPN address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, verify that we can ping a machine on the remote server LAN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remember to tear down the network bridge after stopping the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `bridge-start` script forges a bond between two network adapters: on the
    one side, the LAN adapter `eth0`, and on the other side, the VPN adapter `tap0`.
    The main property of a network bridge is that all of the traffic is copied from
    one side to the other and vice versa. This allows us to set up a VPN where the
    client almost truly becomes a part of the server-side LAN.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The downside of a bridged network is the increased overhead and the performance
    penalty on the OpenVPN server itself: if there is a lot of broadcast traffic from
    many clients on either side, the bridge can become overloaded.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixed addresses and the default gateway
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, the OpenVPN server is assigned a fixed address on the server
    LAN, as is done most often for a bridged interface. The difficulty with assigning
    a dynamic address to a network bridge is that it is not clear from which network
    the dynamic address should be chosen. This also enables us to specify a fixed
    server-bridge address in the server configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: When using bridges, it is also important to check that the default route is
    available after the bridge is started. In most setups, `eth0` is assigned a dynamic
    address, including a default gateway. When the `bridge-start` script is executed, `br0`
    is assigned a fixed address, but as a side effect, the default gateway is often
    lost.
  prefs: []
  type: TYPE_NORMAL
- en: Name resolution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the difficulties in setting up a bridged network in the proper fashion
    is related to name resolution. OpenVPN only does Ethernet (Layer2) or IP-based
    routing. Setting up a proper name resolution system (for example, a Domain Controller
    and/or a WINS server in a Windows network) can be tricky in a bridged environment
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe in this chapter, in which bridging on a Windows server is explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bridging- Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to set up a bridged OpenVPN server on Windows.
    Bridging on Windows is slightly different from Linux or UNIX, but the concept
    is the same.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is very similar to the previous recipe, apart from the different
    methods used to set up bridging.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only networks*.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, the server computer was running Windows 7 64 bit and OpenVPN
    2.3.10\. The client computer was running Fedora 20 Linux and OpenVPN 2.3.10\.
    For the Linux client, keep the client configuration file `example3-1-client.conf`
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00360.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example-3-4-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the network bridge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Network and Sharing Center** and **Change adapter settings**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rename the `TAP-Win` adapter as `tapbridge` by right-clicking on it and selecting **Rename**.
    On the test computer used, the Ethernet adapter connected to the LAN was renamed
    to `eth0`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the two adapters that need to be bridged by pressing the *Ctrl* key and
    clicking on each adapter, then right-clicking and selecting **Bridge Connections**:![How
    to do it...](img/image00361.jpeg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This will create a new bridge adapter icon in the control panel, usually named **Network
    Bridge (...)**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The network bridge is now ready to be configured:![How to do it...](img/image00362.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a command window, verify that the bridge is configured correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Windows firewall will pop up a security warning. Allow OpenVPN access to
    the VPN:![How to do it...](img/image00363.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check the assigned VPN address and verify that we can ping a machine on
    the remote server LAN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from the way the bridge is created and configured, this recipe is very
    similar to the previous one. The one thing to keep in mind is how the adapter
    is selected in the server configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux and other UNIX variants, this could be achieved using a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: But the naming scheme for the TAP adapters on Windows is different. To overcome
    this, the `dev-node` directive needs to be added.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe, where bridging on Linux is explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking broadcast and non-IP traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main reason for a bridged setup is to create a single broadcast domain for
    all the clients connected, both via the VPN and via a regular network connection.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason is the ability to route or forward non-IP based traffic, such
    as the older Novell IPX and Appletalk protocols.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe focuses on the use of tools such as `tcpdump` and `wireshark` to
    detect whether the broadcast domain is functioning and if non-IP traffic is flowing
    in the correct manner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we use the setup from the *Bridging - Linux* recipe of this
    chapter. We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00364.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For this recipe, the server computer was running CentOS 6 Linux and OpenVPN
    2.3.9\. For the server, keep the server configuration file `example3-3-server.conf`
    from the *Bridging - Linux* recipe ready. The first client computer was running
    Windows 7 64 bit and OpenVPN 2.3.10 and was in the same LAN segment as the OpenVPN
    server. The second client was running Windows XP and OpenVPN 2.1.1\. For this
    client, keep the client configuration file `example3-2-client2.ovpn` from the *Enabling
    client-to-client traffic* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the AppleTalk and IPX protocols are installed on both the Windows
    machines. Bind the protocols to the Local Area Network adapters (this is the default
    setting).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the network bridge and verify that it is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the OpenVPN clients:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start Client 2 using the OpenVPN GUI:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00365.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In this recipe, the Windows 7 client was assigned `192.168.4.64`. The Windows
    XP client was assigned `192.168.4.128`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the client has successfully connected, we first check for ARP messages.
    On the server, run the `tcpdump` command and listen for traffic on the bridge
    interface `br0`:![How to do it...](img/image00366.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this output, `192.168.4.254` is the address of the server-side gateway. So
    the gateway is asking for ARP information and the ARP replies are coming from
    both the OpenVPN server and the OpenVPN client itself. This can only happen if
    the ARP request is forwarded over the bridge to the OpenVPN client.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, on the Windows 7 client, check for the broadcast traffic coming from the
    Windows XP client. For this, we use Wireshark. Wireshark is available for both
    Linux and Windows. Configure it to capture all of the traffic from the Ethernet
    adapter. Here's an example of it:![How to do it...](img/image00367.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this output, we see a lot of Netbios broadcast traffic when the OpenVPN client
    first connects to the network.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As a final example, we look for IPX traffic:![How to do it...](img/image00368.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows that non-IP traffic is also forwarded over the bridge.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the traffic that is forwarded over the bridge is intercepted by programs
    such as Wireshark. By filtering for certain types of traffic, it is easy to show
    that in a bridged setup, traffic from the OpenVPN clients is indeed flowing over
    the server-side LAN. This is very important when troubleshooting an almost-working
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: An external DHCP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will configure a bridged OpenVPN server so that it uses an
    external DHCP server to assign addresses to the OpenVPN clients to further increase
    the integration of remote clients with the clients already present on the server-side
    LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.10\. The client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    For this client, keep the client configuration file `example3-2-client2.ovpn` from
    the *Enabling client-to-client traffic* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example3-6-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the Windows client:![How to do it...](img/image00370.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the VPN connection is established, verify the IP address and the routing
    tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, check that we can reach other hosts in the server-side LAN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the server directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Without any parameters, this directive instructs OpenVPN to not allocate a pool
    of IP addresses for the clients. So, all of the incoming DHCP requests from the
    clients are forwarded out over the bridge. The DHCP server on the server-side
    LAN then replies with an IP address.
  prefs: []
  type: TYPE_NORMAL
- en: The tricky part here is that the DHCP server almost always also returns a default
    gateway, which will be the LAN gateway. If a remote client sets its default gateway
    to the gateway of the LAN, funny things will happen, as in most cases the direct
    route to the OpenVPN server will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following directive instructs the OpenVPN client to add an explicit default
    route via the `net_gateway`, which is always the LAN gateway at the client side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: For Windows clients, this trick works and the default gateway remains intact.
  prefs: []
  type: TYPE_NORMAL
- en: For Linux clients, it is easier to tweak the `dhclient` and `network-scripts`
    settings. However, this is distribution-dependent.
  prefs: []
  type: TYPE_NORMAL
- en: With the default gateway intact, the OpenVPN client is properly assigned an
    address from the DHCP server on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using an external DHCP setup, keep in mind the following.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP server configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The proper solution is to configure the DHCP server such that DHCP requests
    from the VPN clients do not get a default gateway assigned. This adds a burden
    to the administration of the server-side DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, it also makes sense to explicitly set a unique MAC address in
    each client configuration file using the following, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: On Linux, the MAC address is computed randomly when the TAP interface comes
    up, so each time the OpenVPN client is stopped and started, a new IP address is
    allocated. It is also possible to create a permanently fixed, static MAC address
    by using the system configuration scripts to bring up the TAP device before OpenVPN
    is started.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP relay
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is also possible to use an external DHCP server without using bridging.
    If the TAP adapter is configured before OpenVPN is started and the server configuration
    file from this recipe is used, then an external DHCP server can be used using
    the Linux `dhrelay` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to list both the TAP adapter and the Ethernet adapter to which the
    external DHCP server is connected. By combining this with a `proxy-arp` script
    (see the  *Proxy ARP* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*), it eliminates
    the need to use bridging in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking /etc/sysconfig/network-scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On RedHat, Fedora, and OpenSuSE-based systems, the TAP adapter is brought up
    using a script `/etc/sysconfig/network-scripts/ifup-tap0` and the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding the line to the `/etc/sysconfig/network-scripts/ifup-tap0` file,
    the `dhclient` script ignores the gateway that is assigned from the DHCP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: A similar hack can be developed for Debian/Ubuntu-based systems.
  prefs: []
  type: TYPE_NORMAL
- en: Using the status file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN offers several options to monitor the clients connected to a server.
    The most commonly used method is using a status file. This recipe will show how
    to use and read the OpenVPN status file. We will also focus on some subtleties
    of the status file in a TAP-style setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.10\. The first client was running Fedora 20 Linux and OpenVPN
    2.3.10\. The second client was running Windows 7 64 bit and OpenVPN 2.3.10\. For
    the Linux client, keep the client configuration file `example3-1-client.conf`
    at hand. For the Windows client, keep the client configuration file `example3-2-client2.ovpn`
    at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf.`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example3-7-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, start the Linux client using the configuration file from the earlier
    recipe and ping a host on the remote network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the VPN is established, list the contents of the `openvpn.status` file
    (as user root):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the Windows client:![How to do it...](img/image00371.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ping a host on the remote network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'List the contents of the status file again on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each time a client connects to the OpenVPN server, the status file is updated
    with the connection information. The **OPENVPN ** **CLIENT** **LIST** and **ROUTING **
    **TABLE** tables are the most interesting tables, as they show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Which clients are connected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From which IP address the clients are connecting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of bytes each client has received and transferred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time at which the client connected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The routing table also shows which networks are routed to each client. This
    routing table is filled when clients start sending traffic that needs to be routed.
    The `ping` commands in the recipe were used to trigger the routing table entries.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When comparing this example with a TUN-style setup there are many similarities
    but also some differences:'
  prefs: []
  type: TYPE_NORMAL
- en: Difference with TUN-style networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The major difference in the status file when using a TAP-style network compared
    to a TUN-style network (see the *Using the status file* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*)
    is in the **ROUTING ** **TABLE**. The recipe from the previous chapter shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas, in this recipe, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The address `5e:52:73:5c:6a:ce` is the randomly chosen MAC address of the tap
    adapter on the `client1` machine.
  prefs: []
  type: TYPE_NORMAL
- en: Disconnecting clients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that when a client disconnects, the status file is not updated immediately.
    OpenVPN first tries to reconnect to the client based on the `keepalive` parameters
    in the server configuration file. The server configuration file in this recipe
    uses this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells the server that it will ping the client every 10th second. The OpenVPN
    server will double the second argument: if it does not get a response after 2
    * 60 seconds, the connection is restarted. The server will also tell the client
    to ping the server every 10 seconds and to restart the connection after 60 seconds
    if it does not get any response.'
  prefs: []
  type: TYPE_NORMAL
- en: If the client explicitly closes the connection using the `explicit-exit-notify`
    directive or when a TCP-based setup is used, the server does not wait for ping
    responses from the client.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the status file* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    which explains how the status file can be configured and used for IP-only style
    networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The management interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how OpenVPN can be managed using the management interface
    on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, the server computer was running CentOS 6 Linux and OpenVPN
    2.3.10\. The first client was running Fedora 20 Linux and OpenVPN 2.3.10\. The
    second client was running Windows 7 64 bit and OpenVPN 2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: For the server, keep the configuration file `example3-1-server.conf` from the
    first recipe of this chapter at hand. For the Linux client, keep the client configuration
    file `example3-1-client.conf` from the first recipe of this chapter at hand. For
    the Windows client, keep the client configuration file `example3-2-client2.ovpn`
    from the *Enabling client-to-client traffic* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file by adding a line to the `example3-1-server.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example3-8-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The OpenVPN server will now first ask for a password for the management interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the clients using the configuration files from the earlier recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the Windows client as well:![How to do it...](img/image00373.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the VPN is established, we can connect from the server to the management
    interface of the OpenVPN client using the `telnet` program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that it looks exactly like the status file from the previous recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is also possible to disconnect a client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use *Ctrl* + *]* or exit to exit the telnet program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the OpenVPN server starts, a special management interface is set up using
    the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The interface is set up with these parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The IP `127.0.0.1` to bind the management interface to localhost only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The port `23000` on which the management interface will be listening.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last parameter is the password file or the special keyword `stdin` to indicate
    that the management interface password will be specified when OpenVPN starts up.
    Note that this password is completely unrelated to the private key passphrases
    or any other user management passwords that OpenVPN uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the management interface comes up, the server operator can connect to
    it using `telnet` and can query the server. By typing the following, the operator
    can disconnect a client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Note that if the OpenVPN client is configured to reconnect automatically, it
    will do so after a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: When comparing the output of the management interface's `status` command with
    the status file output shown in the *Using the status file* recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*, the major difference is the fact that here, the clients' MAC
    addresses are listed instead of the VPN IP addresses. The OpenVPN does not even
    need to know the clients' IP addresses, as they can be assigned by an external
    DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The management interface can also be run on the OpenVPN clients. See the *Management
    interface* recipe in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: It is expected that the management interface will become more important in future
    versions of OpenVPN, both on the client and the server side, as the preferred
    method to programmatically interact with the OpenVPN software.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The Management interface* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks,*
    in which the client-side management interface is explained'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the status file* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    where the details of the status file for a TUN-style network are explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating IPv6 into TAP-style networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the final recipe of this chapter, we will show how to integrate IPv6 settings
    into TAP-style networks. TAP-style networks have had support for IPv6 traffic
    longer than TUN-style networks, as a TAP-style network provides an Ethernet-like
    layer. This layer is capable of transporting almost any kind of network protocol,
    including IPv6\. In OpenVPN 2.3, better IPv6 support was added so that an OpenVPN
    server could provide a DHCP pool with IPv6 addresses. In this recipe, we will
    show just how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, both the server computer and the client computer
    were running CentOS 6 Linux and OpenVPN 2.3.10\. For the server, keep the configuration
    file `example3-1-server.conf` from the first recipe of this chapter at hand. For
    the client, keep the client configuration file `example3-1-client.conf` from the
    first recipe of this chapter at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the server configuration file, `example3-1-server.conf`, by adding a
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example3-9-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we have suppressed timestamps in the log file using the command-line
    directive `--suppress-timestamps`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the VPN is established, verify that we can reach the server using the `ping6`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'IPv6 support for TAP-style networks is nearly identical to IPv6 support for
    TUN-style networks. By adding a single line to the server configuration file,
    we provide IPv6 addresses to the connecting VPN clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The same directives, ending in `-ip6`, which apply to TUN-based setups, also
    apply to TAP-style networks.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The firewall rules for IPv6 traffic are slightly different from the firewall
    rules for IPv4 traffic. Also, with TAP-style networks, it is often useful to allow
    all incoming and outgoing traffic on the `tap+` adapter range. This can be especially
    helpful when debugging a non-working setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Note that such rules should be used for debugging purposes only.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding IPv6 support* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2. 
    Client-server IP-only Networks"), *Client-server IP-only Networks*, in which IPv6
    support is added to a very similar TUN-style setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
