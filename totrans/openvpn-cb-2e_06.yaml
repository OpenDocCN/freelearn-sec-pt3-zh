- en: Chapter 6. Troubleshooting OpenVPN - Configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Cipher mismatches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TUN versus TAP mismatches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compression mismatches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key mismatches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting MTU and `tun-mtu` issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting network connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting `client-config-dir` issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting multiple `remote` issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting bridging issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to read the OpenVPN log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The topic of this chapter and the next is troubleshooting OpenVPN. This chapter
    will focus on troubleshooting OpenVPN misconfigurations, whereas the next chapter
    will focus on the all-too-common routing issues that occur when setting up a VPN.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in these chapters will therefore deal first with breaking things.
    We will then provide the tools on how to find and solve the configuration errors.
    Some of the configuration directives used in this chapter have not been demonstrated
    before, so even if you are not interested in breaking things, this chapter will
    still be insightful.
  prefs: []
  type: TYPE_NORMAL
- en: Cipher mismatches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will change the cryptographic ciphers that OpenVPN uses.
    Initially, we will change the cipher only on the client side, which will cause
    the initialization of the VPN connection to fail. The primary purpose of this
    recipe is to show the error messages that appear, not to explore the different
    types of ciphers that OpenVPN supports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11, and the client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file by appending a line to the `basic-udp-client.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example6-1-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the client, after which the following message will appear in the client
    log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, similarly, on the server side:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The connection will not be successfully established, but it will also not be
    disconnected immediately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the connection phase, the client and the server negotiate several parameters
    needed to secure the connection. One of the most important parameters in this
    phase is the encryption cipher, which is used to encrypt and decrypt all the messages.
    If the client and server are using different ciphers, then they are simply not
    capable of talking to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'By adding the following configuration directive to the server configuration
    file, the client and the server can communicate again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenVPN supports quite a few ciphers, although support for some of the ciphers
    is still experimental. To view the list of supported ciphers, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will list all ciphers with both variables and fixed cipher length. The
    ciphers with variable cipher length are very well supported by OpenVPN, the others
    can sometimes lead to unpredictable results.
  prefs: []
  type: TYPE_NORMAL
- en: Pushable ciphers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting with version 2.4, OpenVPN clients support the option to process a cipher
    pushed from the server to the client. Thus, if all clients are running OpenVPN
    2.4 or later it becomes much easier to change the encryption cipher in an existing
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: TUN versus TAP mismatches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common mistake when setting up a VPN based on OpenVPN is the type of adapter
    that is used. If the server is configured to use a TUN-style network but a client
    is configured to use a TAP-style interface, then the VPN connection will fail.
    In this recipe, we will show what is typically seen when this common configuration
    error is made.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as`example6-2-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The client log will show the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, you can try pinging the server, but it will respond with an
    error:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A TUN-style interface offers a point-to-point connection over which only TCP/IP
    traffic can be tunneled. A TAP-style interface offers the equivalent of an Ethernet
    interface that includes extra headers. This allows a user to tunnel other types
    of traffic over the interface. When the client and the server are misconfigured,
    the expected packet size is different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This shows that each packet that is sent through a TAP-style interface is 32-
    bytes larger than the packets sent through a TUN-style interface.
  prefs: []
  type: TYPE_NORMAL
- en: By correcting the client configuration, this problem is resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Compression mismatches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN supports on-the-fly compression of the traffic that is sent over the
    VPN tunnel. This can improve the performance over a slow network line, but it
    does add a little overhead. When transferring uncompressible data (such as ZIP
    files), the performance actually decreases slightly.
  prefs: []
  type: TYPE_NORMAL
- en: If the compression is enabled on the server but not on the client, then the
    VPN connection will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the *Setting up public and private
    keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For this recipe, the server
    computer was running CentOS 6 Linux and OpenVPN 2.3.11\. The client was running
    Fedora 22 Linux and OpenVPN 2.3.11\. Keep the configuration file, `basic-udp-server.conf`,
    from the *Server-side routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    as well as the client configuration file, `basic-udp-client.conf`, at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append a line to the server configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example6-3-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The connection will initiate, but when data is sent over the VPN connection,
    the following messages will appear:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the connection phase, no compression is used to transfer information
    between the client and the server. One of the parameters that is negotiated is
    the use of compression for the actual VPN payload. If there is a configuration
    mismatch between the client and the server, then both the sides will get confused
    by the traffic that the other side is sending.
  prefs: []
  type: TYPE_NORMAL
- en: 'This error can easily be fixed for all the clients by just adding another line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Key mismatches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN offers extra protection for its TLS control channel in the form of HMAC
    keys. These keys are exactly the same as the static "secret" keys used in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1.  Point-to-Point Networks"), *Point-to-Point
    Networks*, for point-to-point style networks. For multi-client style networks,
    this extra protection can be enabled using the `tls-auth` directive. If there
    is a mismatch between the client and the server related to this `tls-auth` key,
    then the VPN connection will fail to get initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the lack of the second parameter for `tls-auth`. Save it as `example6-4-client.conf`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The client log will show no errors, but the connection will not be established
    either. In the server log we''ll find the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This shows that the client, `client1`, is connecting using the wrong `tls-auth`
    parameter and the connection is refused.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the very first phase of the connection initialization, the client and the
    server verify each other's HMAC keys. If an HMAC key is not configured correctly,
    then the initialization is aborted and the connection will fail to establish.
    As the OpenVPN server is not able to determine whether the client is simply misconfigured
    or whether a malicious client is trying to overload the server, the connection
    is simply dropped. This causes the client to keep listening for the traffic from
    the server until it eventually times out.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, the misconfiguration consisted of the missing parameter `1`
    at the end of the configuration line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The second parameter to the `tls-auth` directive is the direction of the key.
    Normally, the following convention is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: from server to client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: from client to server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This parameter causes OpenVPN to derive its HMAC keys from a different part
    of the `ta.key` file. If the client and server disagree on which parts the HMAC
    keys are derived from, the connection cannot be established. Similarly, when the
    client and server are deriving the HMAC keys from different `ta.key` files, the
    connection can also not be established.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Multiple secret keys* recipe from [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1.  Point-to-Point Networks"), *Point-to-Point Networks*, in which the
    format and usage of the OpenVPN secret keys is explained in detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting MTU and tun-mtu issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the more advanced features of OpenVPN is the ability to tune the network
    parameters of both the TUN (or TAP) adapter and the parameters of the encrypted
    link itself. This is a frequent cause of configuration mistakes, leading to low
    performance or even the inability to successfully transfer data across the VPN
    tunnel. This recipe will show what happens if there is an MTU (Maximum Transfer
    Unit) mismatch between the client and the server and how this mismatch can cause
    the VPN tunnel to fail only under certain circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11, and the client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the client configuration file, `basic-udp-client.conf`, handy along with
    the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe, from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration file by appending a line to the `basic-udp-client.conf`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example6-5-client.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the client and look at the client log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are a few warnings when the tunnel comes up, but the connection is initialized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is possible to send traffic over the link, which we can verify using the `ping`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, consider when sending larger packets, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In such a case, the following messages appear in the client log file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The same thing will happen if the client tries to download a large file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MTU determines how large packets can be that are sent over the tunnel without
    breaking up (fragmenting) the packet into multiple pieces. If the client and the
    server disagree on this MTU size, then the server will send packets to the client
    that are simply too large. This causes an HMAC failure (if `tls-auth` is used,
    as in this recipe) or the part of the packet that is too large is thrown away.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the Windows platform, it is not easy to change the MTU setting for the Tap-Win32
    adapter that OpenVPN uses. The `tun-mtu` directive can be specified but the Windows
    version of OpenVPN cannot alter the actual MTU setting, as Windows did not support
    this until Windows Vista. OpenVPN, however, does not yet have the capability of
    altering the MTU size on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 9](part0103.xhtml#aid-3279U1 "Chapter 9. OS Integration"), *Performance
    Tuning*, which gives some hints and examples on how to optimize the `tun-mtu`
    directive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting network connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will focus on the type of log messages that are typically seen when
    the OpenVPN configurations are fine, but the network connectivity is not. In most
    cases, this is due to a firewall blocking access to either the server or the client.
    In this recipe, we explicitly block access to the server and then try to connect
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11, and the client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the client configuration file, `basic-udp-client.conf`, handy along with
    the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the server, explicitly block access to OpenVPN using `iptables`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start the client using the configuration file, `basic-udp-client.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The client will try to connect the server using the UDP protocol. After a while,
    a timeout will occur because no traffic is getting through and the client will
    restart:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Abort the client and stop the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When OpenVPN is configured to use the default UDP protocol, the client will
    wait for an answer from the server for 60 seconds. If no answer was received,
    the connection is restarted. As we are explicitly blocking UDP traffic, the timeout
    occurs and the client is never able to connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amount of time for which the client waits for the connection to start is
    controlled using the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here, `N` is the number of seconds to wait for the initial handshake to complete.
    The default value is 60 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the connection can be repaired by removing the firewall rule.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the major differences between the UDP protocol and the TCP protocol
    is the way connections are established: every TCP connection is started using
    a TCP handshake by both the client and the server. If the handshake fails, then
    the connection is not established. There is no need to wait for traffic coming
    back from the server, as the connection itself is dropped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Troubleshooting client-config-dir issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to troubleshoot issues related to the
    use of the `client-config-dir` directive. This directive can be used to specify
    a directory for so-called CCD files. CCD files can contain OpenVPN directives
    to assign a specific IP address to a client, based on the client's certificate.
    Experience has shown that it is easy to misconfigure this directive. In this recipe,
    we will make one of the common misconfigurations and then show how to troubleshoot
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11\. The client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the client configuration file, `basic-udp-client.conf`, handy along with
    the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Append the following lines to the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example6-7-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make sure that the `/etc/openvpn/cookbook/clients` directory is accessible
    only to the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start the client using the configuration file, `basic-udp-client.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the client will fail to connect with the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The server log file is a bit confusing: first; it mentions that there was a
    problem reading the CCD file, `client1`, but then it states that the client is
    connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: However, the VPN connection has not been properly initiated.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following directives are used by the OpenVPN server to look in the  `/etc/openvpn/cookbook/clients`
    directory for a CCD file with the name (CN) of the client certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The purpose of the second directive, `ccd-exclusive`, is to only allow clients
    for which a CCD file is present. If a CCD file for a client is not present, the
    client will be denied access. The name of the client certificate is listed in
    the server log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it can also be retrieved using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Look for the first part starting with `/CN=` and convert all spaces to underscores.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVPN server process is running as user `nobody`. And because we have
    set very restrictive permissions on the `/etc/openvpn/cookbook/clients` directory,
    this user is not capable of reading any files in that directory. When the client
    with the `client1` certificate connects, the OpenVPN server is not capable of
    reading the CCD file (even though it might be there). Because of the `ccd-exclusive`
    directive, the client is then denied access.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will explain how to increase the logging verbosity and what
    some of the most common `client-config-dir` mistakes are.
  prefs: []
  type: TYPE_NORMAL
- en: More verbose logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Increasing the verbosity of logging is often helpful when troubleshooting `client-config-dir`
    issues. With `verb 5` and the right permissions, you will see the following log
    file entries in the OpenVPN server log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If this message is not present in the server log, then it is safe to assume
    that the CCD file has not been read.
  prefs: []
  type: TYPE_NORMAL
- en: Other frequent client-config-dir mistakes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few frequent `client-config-dir` mistakes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A non-absolute path is used to specify the `client-config-dir` directive, for
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This might work in some cases, but you have to be very careful when starting
    the server or when combining this with directives such as `--chroot` or `--cd`.
    Especially when the `--chroot` directive is used, all paths, including the absolute
    path, will be relative to the `chroot` path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The CCD file itself must be correctly named, without any extension. This typically
    tends to confuse Windows users. Look in the server log to see what the OpenVPN
    server thinks; the `/CN= name` is of the client certificate. Also, be aware that
    OpenVPN rewrites some characters of the `/CN= name`, such as spaces. For the full
    list of characters that will be remapped, refer to the manual page in the *String
    types and remapping* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CCD file and the full path to it must be readable to the user under which
    the OpenVPN server process is running (usually `nobody`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using client-config-dir files* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    which explains the basic usage of client configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting multiple remote issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to troubleshoot issues related to the
    use of multiple `remote` directives. The ability to use multiple `remote` directives
    is one of the lesser well-known features of OpenVPN that has been available since
    version 2.2\. It allows a user to specify multiple connection profiles to different
    hosts, different ports, and different protocols (for example, TCP versus UDP).
  prefs: []
  type: TYPE_NORMAL
- en: When using this directive, there is a pitfall to watch out for when specifying
    extra directives elsewhere in the configuration files, or on the command line.
    In this recipe, we will demonstrate what this pitfall is.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11, and the client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the client configuration file, `basic-udp-client.conf`, handy along with
    the configuration file, `basic-udp-server.conf`, from the *Server-side routing*
    recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only
    Networks"), *Client-server IP-only Networks*, as well as the client configuration
    file, `basic-udp-client.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the client configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we are specifying two connection profiles, one to the server using
    the UDP protocol, `port 1195`, and one using the TCP protocol, `port 1196`. However,
    we expect to overrule the port number using the line `port 1194`. Save this file
    as `example6-8-client.conf` .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the client will fail to connect with a message:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, even though we explicitly stated `port 1194`, the client is still connecting
    using protocol UDP, port `1195`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you specify a remote connection entry using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: OpenVPN transforms this internally into a connection profile. In general, connection
    profiles inherit settings from the global configuration. Anything specified inside
    a connection profile overrules whatever is specified globally, even if it is specified
    later in the configuration file, or on the command line. Thus, the line `port
    1194` does not have any effect and the client attempts to connect using the first
    (default) `remote` connection profile, protocol UDP, and port `1195`.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this issue, the port number needs to be modified in the `remote` line
    in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative way to specify the `remote openvpnserver.example.com 1195 udp`
    is by using a connection block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: However, inside connection blocks, you can specify more directives, as we will
    see in the *Using connection blocks* recipe in [Chapter 10](part0115.xhtml#aid-3DLGM1
    "Chapter 10.  Advanced Configuration"), *Advanced Configuration*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using connection blocks* recipe in [Chapter 10](part0115.xhtml#aid-3DLGM1
    "Chapter 10.  Advanced Configuration"), *Advanced Configuration*, which goes into
    detail into the usage of connection blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting bridging issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to troubleshoot a common issue related
    to bridging. OpenVPN bridging can be tricky to configure, as the warning and error
    messages can be confusing. In this recipe, we will make one of the common misconfigurations
    and then show how to troubleshoot it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set up the client and server certificates using the first recipe from [Chapter
    2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server IP-only Networks"), *Client-server
    IP-only Networks*. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.11, and the client was running Fedora 22 Linux and OpenVPN 2.3.11\.
    Keep the scripts, `example3-3-bridge-start` and `example3-3-bridge-stop`, from
    the *Bridging - Linux *recipe from [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*, handy along
    with the client configuration file, `example-3-2-client2.ovpn`, from the *Enabling
    client-to-client traffic* recipe, from [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we did not explicitly specify the adapter name (tap0). Save it as `example-6-9-server.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the network bridge and verify that it is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the OpenVPN server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the client:![How to do it...](img/image00379.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, try to reach the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even though the connection is established, the client will fail to reach the
    server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember to shut down the Ethernet bridge after stopping the OpenVPN server
    process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The connection failures in this example are due to the fact that the OpenVPN
    server opened a new tap adapter at startup instead of connecting to the bridge.
    A hint is given in the server log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'When checking the tap interfaces on the server, we see that there are now two
    tap interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The second tap interface, `tap1`, is the one in use by OpenVPN, and it does
    not have an IP address assigned!
  prefs: []
  type: TYPE_NORMAL
- en: To solve this issue, the correct tap adapter needs to be specified in the server
    configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Linux - bridging* recipe, from [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*, which explains
    in detail how to set up bridging on Linux in detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to read the OpenVPN log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting an OpenVPN setup often comes down to reading and interpreting
    the OpenVPN log file correctly. In this recipe, no new features of OpenVPN will
    be introduced, but a detailed walk-through of an OpenVPN log file will be given.
    The setup from the *Troubleshooting MTU and tun-mtu issues *recipe earlier in
    this chapter will be used as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the same setup as in the *Troubleshooting MTU and tun-mtu issues* recipe
    earlier in this chapter. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.11, and the client was running Fedora 22 Linux and OpenVPN
    2.3.11\. Keep the configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe from [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*. For the client, keep the
    configuration file, `example6-5-client.conf`, from the *Troubleshooting MTU and
    tun-mtu issues* recipe at hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the server using the configuration file, `basic-udp-server.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start the client with an increased verbosity setting and without timestamps
    in the log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The connection will initiate, but it will not be possible to send large packets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Trigger an error by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Abort the client. The log file will have become large quite quickly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the log file using a text editor and browse through it. An explanation
    of the general structure of the log file is given in the next section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first part of the log file contains the configuration as specified in the
    configuration file and from the command-line parameters. This is the section starting
    with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'It ends with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This section is about 275 lines long depending on the configuration and it contains
    what OpenVPN thinks is the configuration. Check this section carefully to make
    sure that you agree.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next interesting section is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This part shows that a `tls-auth` key is read and used and that the two separate
    HMAC keys are derived. The keys are actually printed in the log file, so you can
    reference them with the output from the server log file. The server incoming key
    should be the same as the client outgoing key and vice versa. The misconfiguration
    from the *Key mismatches* recipe earlier in this chapter would have appeared here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right after this section is the warning that is the root cause of the misconfiguration
    from the *Troubleshooting MTU and tun-mtu issues* recipe earlier in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Log file messages starting with `WARNING` should always be given special attention
    to. In some cases, they can be ignored, but in this case, it was the root cause
    of the VPN connection not working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this warning comes a whole range of messages of the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'These messages are all part of the initial handshake between the client and
    the server to exchange configuration information, encryption keys, and other information
    for setting up the VPN connection. Right after this is another hint about the
    misconfiguration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We skip forward over a lot of `TLS_prf` messages to come to the end of the
    connection handshake:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, the OpenVPN client has established the initial connection with
    the server and it is now ready to process the configuration directives pushed
    by the server, if any:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This is another important line to check for, as it shows what the server has
    actually pushed to the client. Verify that this actually matches what you thought
    the server should push.
  prefs: []
  type: TYPE_NORMAL
- en: After this, the local TUN adapter is opened and initialized and the first packets
    can begin to flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first `ping` command worked fine, as we can see from this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TUN READ` is the ping command being read from the TUN interface, followed
    by a write over the encrypted channel to the remote server. Notice the difference
    in packet size: the packet sent over the encrypted tunnel is 125 bytes, which
    is 41- bytes larger than the original packet read from the TUN interface. This
    exactly matches the difference between the `link-mtu` and `tun-mtu` options as
    shown earlier in the log file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the section where the `ping -s 1450` command breaks down. A `ping`
    of 1450 bytes cannot be read in one piece if the MTU of the interface is set to
    1400, hence two `TUN READS` are necessary to capture all data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the data is actually sent as two separate packets to the server.
    This is perfectly normal behavior, as the packet needs to be fragmented. Calculation
    of the packet sizes versus the MTU sizes breaks down in this case, as the second
    packet is not a complete IP packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The server receives the large `ping` command and sends an equally large reply.
    As the server has an MTU setting of 1500, there is no need to fragment the data,
    so it arrives at the client as a single packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The client, however, is expecting a packet with a maximum size of 1400 bytes.
    It is not able to properly decode the larger packet and write out the `packet
    HMAC authentication failed` message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, when we abort the client, we see an `interrupted system call` message
    (in this case,  ***Ctrl*** +  ***C*** was used to abort the client, along with
    a range of clean-up messages before the client actually stops):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider that the client configuration had included this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we would also have seen messages of this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In this case, these are harmless.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On UNIX-based operating systems, it is also possible to send the OpenVPN log
    output via `syslog`. This allows a system administrator to effectively manage
    a large set of computers using a single system logging interface. To send log
    messages via `syslog`, replace the directive `log-append` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Here, `name` is an optional parameter to specify the name of the OpenVPN instance
    in the syslog log files. This is particularly useful if there are multiple instances
    of OpenVPN running on a single host, and they are all using `syslog` to log their
    output and error messages.
  prefs: []
  type: TYPE_NORMAL
