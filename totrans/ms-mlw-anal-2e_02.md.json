["```\npush Arg02 \npush Arg01 \ncall Func01\n```", "```\nmov eax, [esp + 8] ; Arg01\npush eax\nmov ecx, [esp + C] ; Arg01 keeping in mind the previous push\n```", "```\npush ebp\nmov ebp, esp\n...\nmov ecx, [ebp + 8] ; Arg01\npush eax\nmov ecx, [ebp + 8] ; still Arg01 (no changes)\n```", "```\nmov esp, ebp\npop ebp \nret\n```", "```\nleave \nret\n```", "```\npush ebp\nmov ebp, esp \nsub esp, 8\n```", "```\nmov ebp, esp \npop ebp \nret\n```", "```\nret 8 ; 2 arguments, 4 bytes each\n```", "```\nCaller:\n  push Arg02 \n  push Arg01 \n  call Callee\n  add esp, 8 ; cleans up the stack\n```", "```\nSVC{cond} #imm\n```", "```\n    mov eax, 50\n    mov dword ptr [00010000h], eax\n    ```", "```\n    mov eax, dword ptr [00020000h]\n    add eax, 50\n    mov dword ptr [00010000h], eax\n    ```", "```\n    mov eax, dword ptr [00020000h]\n    push eax    ; save Y for now\n    mov eax, 50 ; do the multiplication first\n    mov ebx, 2\n    imul ebx    ; the result is in edx:eax\n    mov ecx, eax\n    pop eax     ; gets back Y value\n    add eax, ecx\n    mov dword ptr [00010000h], eax\n    ```", "```\n    mov eax, dword ptr [00020000h]\n    push eax ; save Y for now\n    mov eax, 50\n    mov ebx,2\n    div ebx  ; the result is in eax, and the remainder is in edx\n    mov ecx, eax\n    pop eax\n    add eax, ecx\n    mov dword ptr [00010000h], eax\n    ```", "```\n    mov eax, dword ptr [00020000h]\n    push eax ; save Y for now\n    mov eax, 50\n    mov ebx, 2\n    div ebx  ; the remainder is in edx\n    mov ecx, edx\n    pop eax\n    add eax, ecx\n    mov dword ptr [00010000h], eax\n    ```", "```\n    mov eax, 50\n    cmp dword ptr [00010000h], eax\n    ```", "```\n    mov eax, 000001000b\n    test dword ptr [00010000h], eax\n    ```", "```\n    cmp dword ptr [00010000h], 50\n    jnz 3rd_Block ; if not true\n    …\n    Some Code\n    …\n    3rd_Block:\n    Some code\n    ```", "```\n    cmp dword ptr [00010000h], 50\n    jnz Else_Block ; if not true\n    ...\n    Some code\n    ...\n    jmp 4th_Block  ; Jump after Else\n    Else_Block:\n    ...\n    Some code\n    ...\n    4th_Block:\n    ...\n    Some code\n    ```"]