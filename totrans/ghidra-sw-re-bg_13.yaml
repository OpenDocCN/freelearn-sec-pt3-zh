- en: '*Chapter 10*: Developing Ghidra Plugins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will dig into the details of Ghidra plugin development,
    as introduced in [*Chapter 4*](B16207_04_Final_SK_ePub.xhtml#_idTextAnchor063),
    *Using Ghidra Extensions*. Throughout this chapter, you will learn how to implement
    your own plugins in order to arbitrarily extend Ghidra's features.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by providing an overview of some existing plugins so that you
    can explore some ideas from other developers that may inspire you. Next, we will
    analyze the source code of the plugin skeleton included with Ghidra and available
    from Eclipse when creating a new plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will review a Ghidra plugin example based on the skeleton mentioned
    previously. This will allow us to dig into the details of implementing a new GUI
    docking window by adding components and actions to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of existing plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ghidra plugin skeleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ghidra plugin development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: This book's GitHub repository, which contains all the necessary code for this
    chapter, at [https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter10](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter10).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java JDK 11 for x86_64 (available here: [https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot](https://adoptopenjdk.net/releases.html?variant=openjdk11&jvmVariant=hotspot)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Eclipse IDE for Java developers (any version that supports JDK 11 that''s available
    here: [https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/))
    since it is the IDE that''s officially integrated and supported by Ghidra.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle, a build automation tool required for compiling Ghidra extensions ([https://gradle.org/install/](https://gradle.org/install/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PyDev 6.3.1 (available here: [https://netix.dl.sourceforge.net/project/pydev/pydev/PyDev%206.3.1/PyDev%206.3.1.zip](https://netix.dl.sourceforge.net/project/pydev/pydev/PyDev%206.3.1/PyDev%206.3.1.zip)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3gmDazk](https://bit.ly/3gmDazk)'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of existing plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the *Analyzing the code of the Sample Table Provider plugin* section
    in [*Chapter 4*](B16207_04_Final_SK_ePub.xhtml#_idTextAnchor063), *Using Ghidra
    Extensions*, a plugin extension is a Java program that extends from the `ghidra.app.plugin.ProgramPlugin`
    class, allowing us to handle the most common program events and implement GUI
    components.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will overview how Ghidra features are mostly implemented
    by plugins which can be easily found on the Ghidra repository. By analyzing an
    example we will understand the relation between the source code of an existing
    plugin and the Ghidra component that it implements.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins included with the Ghidra distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of Ghidra features are implemented as plugins, so, in addition to the
    plugin examples that come with Ghidra and the ones available in the `ghidra_9.1.2\
    Extensions\Ghidra` folder, you can also learn how to implement your own features
    by reviewing the source code of the program and/or reusing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily find plugins by looking for classes containing the string `extends
    ProgramPlugin` ([https://github.com/NationalSecurityAgency/ghidra/search?p=1&q=extends+ProgramPlugin&unscoped_q=extends+ProgramPlugin](https://github.com/NationalSecurityAgency/ghidra/search?p=1&q=extends+ProgramPlugin&unscoped_q=extends+ProgramPlugin)),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Looking for Ghidra features implemented as plugins'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Looking for Ghidra features implemented as plugins
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, 70 plugins (of course, these search results include plugin
    examples) are part of Ghidra. A lot of the features that are available from Ghidra''s
    GUI that you are already familiar with are implemented in this way. Remember that
    when you download a release version of Ghidra, the mentioned source code will
    be compiled in JAR files and distributed via compressed ZIP files named following
    the pattern: `*-src.zip`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can locate the `ByteViewer` extension in the `ghidra_9.1.2\Features`
    folder distributed in both forms: compiled JAR file and source code. These are
    available in the `lib` directory of the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – ByteViewer extension file tree view – I'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – ByteViewer extension file tree view – I
  prefs: []
  type: TYPE_NORMAL
- en: 'It is implemented as a Ghidra plugin extension located at `ghidra_9.1.2/Ghidra/Features/ByteViewer/src/main/java/ghidra/app/plugin/core/byteviewer/ByteViewerPlugin.java`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – ByteViewer extension file tree view – II'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – ByteViewer extension file tree view – II
  prefs: []
  type: TYPE_NORMAL
- en: 'This plugin implements an essential reverse engineering framework feature.
    The following screenshot shows the functionality provided by Ghidra''s GUI mode
    when the [*Chapter 4*](B16207_04_Final_SK_ePub.xhtml#_idTextAnchor063), *Using
    Ghidra Extensions*'' `hello_world.exe` program is run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – ByteViewer extension file tree view – III'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – ByteViewer extension file tree view – III
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, you can relate the GUI component to its source code, which allows
    you to modify it or reuse some code snippets when you're developing your own Ghidra
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the plugins that come with your Ghidra distribution, you can
    install third-party plugins from the internet. The following are some examples
    of useful third-party developed plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ret-sync` ([https://github.com/bootleg/ret-sync](https://github.com/bootleg/ret-sync)):
    A Ghidra plugin extension that allows you to synchronize Ghidra with a lot of
    common debuggers, such as WinDbg, GDB, LLDB, OllyDbg, OllyDbg2, and x64dbg.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gdbghidra` ([https://github.com/Comsecuris/gdbghidra](https://github.com/Comsecuris/gdbghidra)):
    This plugin allows you to synchronize Ghidra with GDB, set breakpoints from Ghidra,
    show the register values on Ghidra while debugging, and more. Since Ghidra does
    not incorporate its own debugger, this Ghidra plugin extension can be very useful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OOAnalyzer` ([https://github.com/cmu-sei/pharos/tree/master/tools/ooanalyzer/ghidra/OOAnalyzerPlugin](https://github.com/cmu-sei/pharos/tree/master/tools/ooanalyzer/ghidra/OOAnalyzerPlugin)):
    A plugin that allows you to import C++ object-oriented information provided by
    the OOAnalyzer component of the Pharos Static Binary Analysis Framework (https://github.com/cmu-sei/pharos/blob/master/tools/ooanalyzer/ooanalyzer.pod).
    This is extremely useful for reverse engineering C++ binary files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the next section, we will provide an overview of the structure of the simplest
    Ghidra plugin: the plugin skeleton.'
  prefs: []
  type: TYPE_NORMAL
- en: The Ghidra plugin skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we explained in the *Deveeloping a Ghidra extension* section of [*Chapter
    4*](B16207_04_Final_SK_ePub.xhtml#_idTextAnchor063), *Using Ghidra Extensions*,
    by clicking on **New** | **Ghidra Module Project…**, you can create any kind of
    Ghidra extension by starting from a given skeleton.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will provide an overview of the Ghidra plugin extension
    skeleton in order to understand the basics that allow us to develop complex plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first part of a plugin''s skeleton is the documentation that describes
    the plugin. Its documentation contains four required fields (optionally, you can
    add some others):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The status of the plugin, which can be one of four possible values: `HIDDEN`,
    `RELEASED`, `STABLE`, or `UNSTABLE`. (See line `01` of the following code).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package of the plugin (see line `02`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A short description of the plugin (see line `03`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A long description of the plugin (see line `04`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code is a plugin documentation skeleton that you can customize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: PluginInfo documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to include optional description fields inside `PluginInfo`, check
    out the following link: https://ghidra.re/ghidra_docs/api/ghidra/framework/plugintool/PluginInfo.html.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the plugin''s information is shown by
    Ghidra once the plugin has been installed and detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Plugin configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Plugin configuration
  prefs: []
  type: TYPE_NORMAL
- en: After installing `PluginInfo`, you can write the code for the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the plugin code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Plugins and their actions are managed by `PluginTool`, so, it is provided as
    a parameter to the plugin class. There are three important things in all Ghidra
    plugin source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`provider` (line `09`) implements the plugin''s GUI. It can be permanent (closing
    the plugin only hides it) or transient (closing the plugin removes the plugin,
    such as when you''re showing the results of a search).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructor can customize `provider` and the plugin's help options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `init()` method can be used to acquire services like `FileImporterService`
    or `GraphService`. Check the following link for a full list of documented services:
    https://ghidra.re/ghidra_docs/api/ghidra/app/services/package-.summary.html.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code is the body of an extremely simple plugin example named
    `SkeletonPlugin`. Of course, the `MyProvider` class (line `09`), as we mentioned
    previously, is a plugin `provider` that implements the GUI of the plugin. We will
    explain this in detail later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If you want to offer a GUI feature with your plugin, then you need to implement
    a provider. This can be developed using a separate Java file. In the next section,
    we will provide an overview of the structure of a Ghidra plugin provider.
  prefs: []
  type: TYPE_NORMAL
- en: The provider for a plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The provider implements the GUI component of a plugin. It is usually stored
    in a separated file named `*Provider.java`, which consists of the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The constructor (lines `05-09`), which builds the panel and creates the required
    actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The panel (lines `11-18`), which creates the GUI components and customizes them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actions of the GUI (lines `21-43`), which are added using `addLocalAction(docking.action.DockingActionIf)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A getter that lets us get the panel (lines `46-48`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code is the implementation for a custom plugin `provider`; that
    is, the one for the `MyProvider` class (used in line `09` of the preceding code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The Provider Actions documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the `addLocalAction` method (used in line `31` of
    the preceding code) at the following link: [https://ghidra.re/ghidra_docs/api/docking/ComponentProvider.html#addLocalAction(docking.action.DockingActionIf](https://ghidra.re/ghidra_docs/api/docking/ComponentProvider.html#addLocalAction(docking.action.DockingActionIf)).
    You can learn more about Docking Actions by looking for the `DockingActionIf`
    interface known implementing classes at: [https://ghidra.re/ghidra_docs/api/docking/action/DockingActionIf.html](https://ghidra.re/ghidra_docs/api/docking/action/DockingActionIf.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result of executing this plugin, which you
    can do by going to **Window** | **SkeletonPlugin** via **CodeBrowser**, and clicking
    on the green cross button located at the top-right of the screen, which triggers
    the action (a message box appears once you''ve done this):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Plugin configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Plugin configuration
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to implement a plugin using this skeleton
    as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a Ghidra plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll analyze how the `ShowInfoPlugin` Ghidra plugin example
    is implemented in order to understand how to develop a more complex plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for ShowInfoPlugin
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for `ShowInfoPlugin` is available here: [https://github.com/NationalSecurityAgency/ghidra/blob/49c2010b63b56c8f20845f3970fedd95d003b1e9/Ghidra/Extensions/sample/src/main/java/ghidra/examples/ShowInfoPlugin.java](https://github.com/NationalSecurityAgency/ghidra/blob/49c2010b63b56c8f20845f3970fedd95d003b1e9/Ghidra/Extensions/sample/src/main/java/ghidra/examples/ShowInfoPlugin.java).
    The component provider used by this plugin is available in a separate file: [https://github.com/NationalSecurityAgency/ghidra/blob/49c2010b63b56c8f20845f3970fedd95d003b1e9/Ghidra/Extensions/sample/src/main/java/ghidra/examples/ShowInfoComponentProvider.java](https://github.com/NationalSecurityAgency/ghidra/blob/49c2010b63b56c8f20845f3970fedd95d003b1e9/Ghidra/Extensions/sample/src/main/java/ghidra/examples/ShowInfoComponentProvider.java).'
  prefs: []
  type: TYPE_NORMAL
- en: To implement a plugin, you need to master three key steps. Let's take a look
    at each!
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To document a plugin, you must describe it using the `PluginInfo` structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the documentation indicates that this is a release version of
    the plugin (line `01`). The package that the plugin belongs to is `ExamplesPluginPackage.NAME`,
    as established in line `02`. The plugin is classified in the `PluginCategoryNames.EXAMPLES`
    category to indicate that this is an example plugin. Finally, the plugin is described
    in both short (line `04`) and full (lines `05`-`08`).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the plugin class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugin class is called `ShowInfoPlugin` and extends from `ProgramPlugin`
    (line `00`), as expected by Ghidra when you're developing a plugin extension.
    It declares a `ShowInfoComponentProvider` (for implementing the GUI of the plugin)
    named provider (line `02`) that is initialized inside the constructor of the class
    (line `06`). This, as usual, receives `PluginTool` as a parameter (line `04`).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, two of the methods provided by `ProgramPlugin` are overridden.
    The first method, `programDeactivated`, allows us to perform certain actions when
    the program becomes inactive – in this case, it lets us clear the provider (line
    `11`). The second method, `locationChanged`, allows us to act once we''ve received
    program location events. In this case, it passes the current program and the location
    to the provider''s `locationChanged` method (line `19`). The body of the plugin
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned previously, the preceding code declares a `ShowInfoComponentProvider`
    for implementing the plugin's GUI on line `02`. In the next section, we will cover
    the implementation of this class.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the provider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned previously, the provider consists of a class (in this case,
    `ShowInfoComponentProvider`) that extends from `ComponentProviderAdapter` (lines
    `00` and `01`) that implements the GUI of a Ghidra plugin and handles related
    events and actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'It starts by loading two image resources (lines `02` and `05`). The appropriate
    way to load resources in Ghidra is by using the resource manager ([https://ghidra.re/ghidra_docs/api/resources/ResourceManager.html](https://ghidra.re/ghidra_docs/api/resources/ResourceManager.html)),
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: To implement the GUI, the `06`) and a text area component (line `07`).
  prefs: []
  type: TYPE_NORMAL
- en: A `DockingAction` (line `08`) associating a user action with a toolbar icon
    and/or menu item ([https://ghidra.re/ghidra_docs/api/docking/action/DockingAction.html](https://ghidra.re/ghidra_docs/api/docking/action/DockingAction.html))
    is also defined here. Finally, two attributes are also declared for accessing
    the current location (line `09`) of the current program (line `10`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code corresponds to the aforementioned provider attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the class constructor creates the GUI by calling the `create()` function
    declared on lines `13` and `55`. It sets some provider attributes, including the
    provider icon (line `14`), the default window position (line `15`), and its title
    (`16`) before setting the provider to visible on line `17`. It also creates the
    `DockingActions` call to the `createActions()` function that''s defined on line
    `18` and implemented on line `62`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the `getComponent()` (line `21`) function of a component provider returns
    the component to be displayed, it returns `panel` (line `22`), which contains
    the GUI components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'The `clear` function clears the current program and current location by setting
    it to `null` (lines `25` and `26`) and clears the text of the text area component
    (line `27`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'When the location of the program changes, its location information is updated
    (lines `33` and `34`). Not only does it change the program and its new location,
    but it also updates the program''s information by calling the `updateInfo()` function
    (line `36`), which is implemented on line `33`. This is the main feature of this
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: The `updateInfo()` function starts checking whether it can access the address
    of the current location (line `34`). If this is not possible, then it returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the `updateInfo()` function obtains `CodeUnit` ([https://ghidra.re/ghidra_docs/api/ghidra/program/model/listing/CodeUnit.html](https://ghidra.re/ghidra_docs/api/ghidra/program/model/listing/CodeUnit.html))
    from the current location address of the listing of the program ([https://ghidra.re/ghidra_docs/api/ghidra/program/model/listing/Listing.html](https://ghidra.re/ghidra_docs/api/ghidra/program/model/listing/Listing.html))
    by using the `getCodeUnitContaining` function (line `46`). Finally, it shows the
    `CodeUnit` string representation (line `52`) for prepending a substring, which
    indicates whether the current `CodeUnit` is an instruction (lines `55`-`57`),
    a defined piece of data (lines `58`-`62`), or an undefined piece of data (lines
    `63`-`65`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: The `create()` method creates a new panel containing `BorderLayout` (line `69`).
    This allows us to put GUI components on any of the four borders of the panel,
    as well as in the center of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it creates a non-editable text area that''s 5 rows and 25 columns in
    size (lines `70`-`71`) with scroll capabilities (line `72`) and attaches it to
    the panel (line `73`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the `createActions()` function creates a `DockingAction` to clear the
    text area (you can locate it on line `76` of the following code snippet).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see how the implementation of `createActions()`produces
    a GUI button that allows us to trigger the **Clear Text Area** action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Docking Action – Clear Text Area'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Docking Action – Clear Text Area
  prefs: []
  type: TYPE_NORMAL
- en: 'The `createActions()` function also overrides the `actionPerformed()` function
    ([https://ghidra.re/ghidra_docs/api/ghidra/app/context/ListingContextAction.html#actionPerformed(docking.ActionContext](https://ghidra.re/ghidra_docs/api/ghidra/app/context/ListingContextAction.html#actionPerformed(docking.ActionContext))
    with the implementation of the clearing action (line `82`). It also establishes
    a link between the action''s logic and the GUI by preparing the toolbar icon of
    the action (lines `85`-`87`), setting it to enabled (line `89`), and adding it
    to the current tool (line `90`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – ShowInfo plugin extension available from CodeBrowser''s Window
    menu option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_10_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – ShowInfo plugin extension available from CodeBrowser's Window
    menu option
  prefs: []
  type: TYPE_NORMAL
- en: 'When the GUI component is shown (line `94`), it immediately populates the text
    area with the corresponding `CodeUnit` information (line `95`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Here, we learned how to implement a simple plugin provider. If you are interested
    in implementing more complex GUI extensions, it is highly recommended that you
    learn more about the **Swing widget toolkit**. For learning about it, please,
    check the online documentation ([https://docs.oracle.com/javase/7/docs/api/javax/swing/package-summary.html](https://docs.oracle.com/javase/7/docs/api/javax/swing/package-summary.html))
    or refer to *Further reading* section located at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to incorporate both official and third-party
    extensions for Ghidra. This new skill allowed us to mitigate Ghidra's drawback
    of not including a debugger. We performed a search over Ghidra's source code to
    discover that a lot of Ghidra's core features are implemented as Ghidra plugins.
    Finally, we learned how to extend Ghidra with our own ideas, access the program
    being analyzed by it, implement custom GUI socking windows, and add actions to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to incorporate support for new binary
    formats in Ghidra. This skill will be very valuable to you because it will enable
    you to reverse-engineer exoteric binary files using Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ghidra plugin extensions are implemented in the Java language. Is Ghidra fully
    implemented using Java?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you add external debugging synchronization to Ghidra?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a provider in the context of Ghidra plugin development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following links for more information on the topics that
    were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*From 0 to 1: JavaFX and Swing for Awesome Java UIs* [Video]: [https://www.packtpub.com/product/from-0-to-1-javafx-and-swing-for-awesome-java-uis-video/9781789132496](https://www.packtpub.com/product/from-0-to-1-javafx-and-swing-for-awesome-java-uis-video/9781789132496)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Swing Extreme Testing*, *Lindsay Peters, Tim Lavers*, *June 2008*: [https://www.packtpub.com/product/swing-extreme-testing/9781847194824](https://www.packtpub.com/product/swing-extreme-testing/9781847194824)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Java 9 Cookbook*, *Mohamed Sanaulla, Nick Samoylov*, *August 2017*: [https://www.packtpub.com/product/java-9-cookbook/9781786461407](https://www.packtpub.com/product/java-9-cookbook/9781786461407)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
