- en: Chapter 3\. Acquisition â€“ Approaching Android Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Approximately, 82% of mobile devices (Q1, 2016) run the Android OS. The total
    number of active Android devices is about 1.4 billion (although not all of these
    are Google devices).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to iOS, the data is not stored exclusively on mobile devices. In Android
    6, Google officially introduced a cloud backup option, allowing users to maintain
    limited automatic backups for Android devices on Google Drive. Learning what Google
    knows about the user can be essential for an investigation.
  prefs: []
  type: TYPE_NORMAL
- en: An excellent resource with lots of detailed (but not too technical) information
    exists to help forensic experts get a better understanding of Android forensics.
    The **Free Android Forensics** blog at [http://freeandroidforensics.blogspot.com](http://freeandroidforensics.blogspot.com)
    offers excellent insight into the Android platform, imaging tools, and techniques.
    The blog mostly talks about using free forensic tools and acquisition techniques,
    which in our opinion can limit the available acquisition options and require more
    time and effort than an examiner may have at their disposal. However, the information
    presented in the blog is an excellent read for understanding what exactly the
    acquisition tools do on your behalf when acquiring information from mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, we will discuss the options available for acquiring
    information from Android devices, as well as for pulling associated data from
    Google servers. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Android platform fragmentation and why it matters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AOSP and GMS demystified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical acquisition via ADB backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with unallocated space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of advanced acquisition methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android platform fragmentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android is a heavily fragmented platform. Nearly 1,300 manufacturers and over
    24,000 device models introduce a huge degree of variance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android platform fragmentation](img/0007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: http://opensignal.com/reports/2015/08/android-fragmentation/'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hardware specifications demonstrate wild variations in screen size, resolution,
    and display ratio, CPU, SoC, and even architectures (ARMv7, ARMv8, and Intel''s
    x86/x64 are among the most popular Android platforms). Android devices also vary
    in the version of the core OS and available API''s. Compare this to Apple''s iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android platform fragmentation](img/0008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: iOS and Android distribution charts (April 2016)
  prefs: []
  type: TYPE_NORMAL
- en: Android devices come with many different versions of Android and many different
    API levels that are available at any given time. For the purpose of mobile forensics,
    this means that one must either become familiar with the acquisition and protection
    specifics of all versions of Android or revert to using a dedicated Android acquisition
    product.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on Android fragmentation is available at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The genius of Google Play Services: Tackling Android fragmentation, malware
    and forking in one fell swoop** at [http://www.androidcentral.com/genius-google-play-services](http://www.androidcentral.com/genius-google-play-services)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSignal Android Fragmentation Report at [http://opensignal.com/reports/2015/08/android-fragmentation/](http://opensignal.com/reports/2015/08/android-fragmentation/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Another Android ''fragmentation'' report misses the point** at [http://www.androidcentral.com/another-android-fragmentation-report-misses-point](http://www.androidcentral.com/another-android-fragmentation-report-misses-point)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AOSP, GMS, and their forensic implications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android and Google are not synonymous. The core Android OS is developed and
    maintained by Google and published open source via **Android Open Source Project**
    (**AOSP**). AOSP Android is freely available for everyone to take with no contracts
    to sign and no restrictions on how manufacturers can use and modify it. Manufacturers
    have the ability (both technical and legal) to create so-called Android forks,
    which are heavily modified versions of Android that may or may not be compatible
    with all Android apps. AOSP Android does not include any proprietary Google services
    (we will discuss more on that later).
  prefs: []
  type: TYPE_NORMAL
- en: Majority of Chinese smartphones sold in mainland China are based on AOSP Android,
    while some are running customized versions of the OS (for example, Xiaomi MIUI
    or Meizu FlyMe).
  prefs: []
  type: TYPE_NORMAL
- en: What makes Android devices so popular in the Western hemisphere is the Google-provided
    ecosystem. Google Play Store offers access to millions of games and applications.
    Google Maps offers convenient mapping services with free navigation and live traffic.
    Gmail (Google mail), Google Drive, Google Photos, Google Keep (notes), Google
    Chrome (browser), and a lot of other things Google comprise a closed-source ecosystem
    working under the **Google Mobile Services** (**GMS**) umbrella.
  prefs: []
  type: TYPE_NORMAL
- en: In order to preinstall GMS on their devices, manufacturers must join the **Open
    Handset Alliance** (**OHA**) and sign a very restrictive agreement. The agreement
    does not allow OHA members to manufacture devices based on Android forks, which
    makes manufacturers choose between making AOSP-based devices without Google services
    or shipping GMS-enabled devices. It's an either/or condition.
  prefs: []
  type: TYPE_NORMAL
- en: Google Mobile Services are included with virtually all Android smartphones sold
    in the Western hemisphere. Google uses its services to collect large amounts of
    information from GMS-enabled devices. Location reporting, Google Account details,
    notes, search and browsing history, stored forms and passwords, synced application
    data, and a lot of other information is automatically transmitted to Google services
    by GMS-enabled devices.
  prefs: []
  type: TYPE_NORMAL
- en: Most of this data can be acquired or requested from Google. AOSP-based devices
    without Google Mobile Services do not report their usage to Google servers, and
    therefore, are much less susceptible to over-the-air acquisition techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In the U.S., Amazon is the biggest company making devices based on an Android
    fork. Amazon's custom Android-based OS-dubbed Fire OS empowers the company's Fire
    tablets, including the original Amazon Kindle Fire, Kindle Fire HD, Kindle Fire
    HDX 7, Kindle Fire HDX 8.9 (2013), Fire HDX 8.9 (2014), as well as the entire
    2015 range. The only Amazon smartphone, Amazon Fire Phone, is also based on the
    Fire OS. Amazon Fire OS replaces Google Mobile Services with Amazon's in-house
    alternatives, offering alternative Maps, push and sync services, as well as its
    own app store. Older versions of Fire OS differed greatly from stock Android to
    the extent that Google Play Store would not run on the platform. The latest versions
    (Fire OS 5) are much closer to stock Android in look and feel, and offer much
    greater compatibility with Google services.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play Services help overcome platform fragmentation by providing timely
    background updates to users of all versions of Android since 2.3 Gingerbread.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The genius of Google Play Services: Tackling Android fragmentation, malware
    and forking in one fell swoop** at [http://www.androidcentral.com/genius-google-play-services](http://www.androidcentral.com/genius-google-play-services).'
  prefs: []
  type: TYPE_NORMAL
- en: Android logical acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pure Android OS offers limited support for offline backups via ADB. Google
    implemented the ADB backup functionality in Android 4.0 Ice Cream Sandwich. The
    ADB backup functionality allows examiners to extract application data to a local
    PC over ADB. This process does not require root and works without custom recoveries
    or unlocking the bootloader; however, it extracts a very limited amount of information,
    and should only be used as the last resort. Additionally, using the ADB backup
    requires having the phone unlocked and the **ADB Debugging** option enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'XDA developers published a complete guide for backing up the phone via ADB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://forum.xda-developers.com/galaxy-nexus/general/guide-phone-backup-unlock-root-t1420351](http://forum.xda-developers.com/galaxy-nexus/general/guide-phone-backup-unlock-root-t1420351)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional information is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://android.stackexchange.com/questions/28481/how-do-you-extract-an-apps-data-from-a-full-backup-made-through-adb-backup](http://android.stackexchange.com/questions/28481/how-do-you-extract-an-apps-data-from-a-full-backup-made-through-adb-backup)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command should produce a full backup of the device, complete
    with all APK files, including system apps and the content of the shared (`/sdcard`)
    storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The options are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Write an archive of the device's data to . If no `-f` option is supplied, then
    the data is written to `backup.ab` in the current directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-apk|-noapk` will enable/disable backup of the `.apks` itself in the archive;
    the default is `noapk`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-shared|-noshared` will enable/disable backup of the device''s shared storage
    / SD card contents; the default is `noshared`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-all` means to back up all installed applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-system|-nosystem` toggles whether `-all` automatically includes system applications;
    the default is to include system apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<packages...></packages...>`is the list of applications to be backed up. If
    the `-all` or `-shared` flags are passed, then the package list is optional. Applications
    explicitly given on the command line will be included even if `-nosystem` would
    ordinarily cause them to be omitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this to work, the phone must have **ADB Debugging** enabled and unlocked.
    The phone may display a prompt asking you to confirm the action.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In real life, specifying certain keys may cause the backup to fail. For example,
    when we attempted to back up a Motorola Nexus 6 with the `-noapk` option, the
    backup failed. However, using the `adb backup â€“all â€“f c:\temp\nexus6.ab` command
    completed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Without root access, extraction via ADB backup is limited. ADB backup cannot
    acquire every application installed on the device. Developers can choose whether
    their apps allow backups or not. While the default setting is set to `on`, some
    developers choose to disable backups. It's worth noting that ADB backup does not
    capture the content of application cache. The ADB backup functionality is separate
    from the new cloud backups introduced with Android 6.0 Marshmallow.
  prefs: []
  type: TYPE_NORMAL
- en: 'While performing logical acquisition of an Android device is possible without
    the use of any specific mobile forensic tools by using the manufacturer-specific
    drivers and **Android Debug Bridge** (**ADB**), you may want to use a commercial
    mobile forensic tool if you already own one. For example, the following is how
    you perform logical acquisition of an Android device with Oxygen Forensic Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn on and unlock the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **USB debugging** is enabled in the **Developer** options, as shown
    in the following screenshot:![Android logical acquisition](img/0009.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device to your computer via a USB cable. On some devices, you may
    need to switch the USB connection mode from **Charging only** to **PTP** or **MTP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Android offers a choice of connectivity options. You may see **Charging**, **File
    transfers (MTP)**, **Photo transfer (PTP)**, and other options. An ADB connection
    can only be established once you choose either **MTP** (Media Transfer Protocol
    for transferring files between your Android device and a Windows or Mac) or **PTP**
    (Photo Transfer Protocol, generally employed by devices such as printers and cameras
    for transferring photos). In our tests, we had a better success rate on selecting
    the **PTP** option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Android logical acquisition](img/0010.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Select **Connect device** | **Fast backup/image extraction...**, as shown in
    the following screenshot:![Android logical acquisition](img/0011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Android backup** and click on **Next**:![Android logical acquisition](img/0012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device and follow the instructions:![Android logical acquisition](img/0013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Android device, you may need to authorize your PC as a debug bridge:![Android
    logical acquisition](img/0014.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Oxygen Forensic Extractor will automatically establish a connection with the
    device and begin extracting the backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional information on ADB backups is available in [Chapter 4](ch04.html
    "Chapter 4\. Practical Steps to Android Acquisition"), *Practical Steps to Android
    Acquisition*.
  prefs: []
  type: TYPE_NORMAL
- en: OEM software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some manufacturers offer companion software to enable communication between
    the phone and the PC. The most common example is Apple iTunes, which is commonly
    used by forensic experts during logical acquisition. As an example, SONY PC Companion
    provides full backup and restore functionality for Xperia devices without the
    need to root or unlock bootloader. While using SONY PC Companion requires the
    user to unlock the device with the correct method (PIN, pattern, and so on), we''ve
    seen evidence of such lock measures being bypassed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OEM software](img/0015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Sony PC Companion backup
  prefs: []
  type: TYPE_NORMAL
- en: In addition, some OEMs (LG, ASUS, and many others) include their own proprietary
    software to allow backing up and restoring the entire contents of the device.
    Using these tools, however, requires that the device is unlocked, in which case
    other acquisition methods may be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'A backup extracted from an ASUS ZenPad S 8.0 tablet contains all of the following
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OEM software](img/0016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The content of ASUS ZenPad S 8.0 backup
  prefs: []
  type: TYPE_NORMAL
- en: Backups made with proprietary tools generally contain device settings, passwords
    (or, in certain cases, authentication tokens that may or may not have expired
    by the time they are restored), the list of installed applications, as well as
    application data (and often application binaries). These backups do not have provision
    for accessing unallocated space.
  prefs: []
  type: TYPE_NORMAL
- en: Android acquisition â€“ special considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What happens to information that the user attempts to destroy? Deleted evidence
    may still be recoveredâ€”at least in Android smartphones. Rarely encrypted, Android
    devices are susceptible to various acquisition techniques, many of which enable
    access to deleted data. Let's look at how Android deletes information and what
    can be done to recover deleted data.
  prefs: []
  type: TYPE_NORMAL
- en: Unallocated space
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Android, unallocated space can usually be extracted along with the filesystem
    (which is not the case with Apple devices due to iOS full-disk encryption). However,
    it is important to realize that Android devices employ trim support, erasing the
    content of unallocated disk space every time the device is shut down. This is
    one of the reasons why standard acquisition techniques don't recommend turning
    the phone off at any time; instead, they advice putting the device on a charger
    and placing it into a Faraday bag.
  prefs: []
  type: TYPE_NORMAL
- en: So what happens to unallocated (or released) space inside an Android phone?
  prefs: []
  type: TYPE_NORMAL
- en: eMMC storage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's take a look at how recent smartphones and tablets store information. Since
    2011, most Android smartphones use eMMC flash chips for non-volatile storage.
    Unlike the *plain* flash chips, eMMC storage integrates flash memory and controller
    onto a single chip planted into the phone's main board. The built-in controller
    is responsible for flash-specific operations to maintain data integrity while
    ensuring the optimum performance and lifespan of the NAND cells. The controller
    performs, among other things, operations such as trimming unused data blocks,
    remapping logical addresses to physical chips. The controller is also responsible
    for performing secure data erasure when requested.
  prefs: []
  type: TYPE_NORMAL
- en: Remapping and overprovisioning
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Internally, the built-in controller is responsible for establishing a link between
    addressable (logical) storage space and physical blocks in the flash chip. In
    other words, each logical block is mapped to a corresponding physical block by
    the eMMC controller. The reverse, however, is not trueâ€”we cannot say that each
    physical block has a corresponding addressable logical block assigned.
  prefs: []
  type: TYPE_NORMAL
- en: eMMC chips have more actual storage capacity than they advertise to the outside
    world. The extra physical data blocks are therefore non-addressable until called
    into service by the integral eMMC controller. This feature is called overprovisioning.
    Overprovisioned data blocks have no logical addresses. Any *bad sectors* (unstable
    or unreadable data blocks) will be permanently placed into the overprovisioned
    area. They'll never be assigned a logical address or be visible to the operating
    system, or anything at all, except the built-in eMMC controller.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Important**: There is no feasible way of extracting information contained
    in the overprovisioned area. The entire area is invisible to logical or physical
    acquisition tools as these data blocks are not mapped onto available address space.
    These data blocks are only accessible to the internal controller, there is no
    interface available to intentionally access their contents from the outside the
    eMMC chip. As a result, even performing chip-off extraction will not give you
    access to physical blocks from the overprovisioned area, as chip-off extraction
    of eMMC chips is still based on sending commands to the eMMC controller.'
  prefs: []
  type: TYPE_NORMAL
- en: Wear leveling
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Flash memory has several qualities unique to this type of storage. NAND flash
    chips have a limited lifespan by only supporting a finite number of write-erase
    cycles. After reaching the end of its effective lifespan, the flash chip may continue
    functioning, yet the data retention period may be severely affected (the data
    will get corrupted or disappear completely after the flash storage is powered
    off for a certain amount of time). As a result, the embedded eMMC controller will
    attempt to evenly distribute write cycles among available data blocks. This is
    called wear leveling.
  prefs: []
  type: TYPE_NORMAL
- en: Trimming
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another quality unique to flash storage is how they write information. Blocks
    must be erased before they can be written to. Erasing a *dirty* flash cell takes
    significantly more time than writing into an already empty block. In order to
    work around this issue, the eMMC controller will perform background garbage collection
    by trimming (erasing) released blocks when the controller is idle. In order to
    make a certain logical address immediately writeable after its content was deleted
    (and the block was advertised as available, but not yet erased), the controller
    may perform address remapping by pointing this logical block to an already empty
    physical cell. Unlike erasing, remapping happens instantly, making the block that
    used to contain deleted data writeable without the wait associated with erasing
    its content.
  prefs: []
  type: TYPE_NORMAL
- en: Due to Android platform fragmentation, trim support in Android varies between
    versions and among the different OEMs. Full-trim support only came to Android
    in version 4.3 Jelly Bean. Moreover, full-trim support is only guaranteed in devices
    that originally shipped with Android 4.3 or newer, which excludes devices upgrading
    from earlier versions of Android. While some manufacturers implemented trim support
    during the course of updating devices to newer versions of Android, some other
    OEMs never bothered. As a result, a large number of devices that originally shipped
    with Android 4.2 and were updated to Android Kit Kat or even Lollipop never received
    proper trim support.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier versions of Android without full-trim support used to include a basic
    form of trimming. With no *live* trimming available in older Android builds, the
    cleanup (trimming) was performed every time the device was shut down. This is
    one of the reasons for the ACPO requirements to keep devices powered on instead
    of shutting them down. On a side note, simply removing the battery would not trigger
    the cleanup stage.
  prefs: []
  type: TYPE_NORMAL
- en: If you are handling an Android device, and it's one of the older ones, you may
    be able to dump a physical image of its eMMC chip and access information about
    its unallocated space.
  prefs: []
  type: TYPE_NORMAL
- en: What happens to the deleted data?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: So what happens to information stored in the blocks released by the operating
    system? The Android OS (depending on the version) will pass a `trim` command to
    the eMMC controller, telling it that a certain logical block is no longer used.
    The controller assigns a special status of *do not care* to the physical block
    corresponding to this logical address, adding the physical block to the *to be
    erased* list and remapping the logical address to a clean physical block (either
    from an existing address space or from the overprovisioned area).
  prefs: []
  type: TYPE_NORMAL
- en: Notably, the controller may or may not decide to push a newly released physical
    block out of the addressable space and into the overprovisioned area. As a result,
    the content of a deleted logical block may remain available in the addressable
    space for a while. This phenomenon enables forensic specialists to carve information
    from unallocated areas.
  prefs: []
  type: TYPE_NORMAL
- en: If you need more information about what happens to information deleted from
    Android devices, refer to the *Security Analysis of Android Factory Resets* publication
    by *Laurent Simon* and *Ross Anderson* (*University of Cambridge*) at [http://www.cl.cam.ac.uk/~rja14/Papers/fr_most15.pdf](http://www.cl.cam.ac.uk/~rja14/Papers/fr_most15.pdf)
    . In this paper, the scientists studied the implementation of factory reset on
    multiple Android smartphones running Android versions 2.3.x to 4.3, reviewed how
    Android smartphones handle deleted files, and discovered that, in many cases,
    user data is still available after a factory reset due to improper implementations
    of the function by many device manufacturers.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG forensics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JTAG forensics is an advanced acquisition procedure that uses **test access
    ports** (**TAP**) standardized by the **Joint Test Action Group** (**JTAG**) association.
    These ports, among other things, can be utilized to access raw data stored in
    the connected device. The acquisition process involves using existing solder points
    on the device's circuit board. By using specialized equipment and a matching device-specific
    JTAG cable, one can retrieve the entire flash memory contents (less the eMMC overprovisioned
    area, but including addressable unallocated space) from compatible devices. Notably,
    JTAG acquisition is often available even for locked, damaged, or otherwise inaccessible
    devices. JTAG acquisition is available for many Android devices, as well as some
    feature phones and Windows Phone 7 and 8 devices.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG forensics is a labor-intensive and time-consuming process requiring an
    expert to use a well-equipped lab. As such, forensic experts tend to try JTAG
    acquisition after other methods prove unsuccessful.
  prefs: []
  type: TYPE_NORMAL
- en: When to JTAG a device
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: JTAG is an invasive acquisition method since it requires disassembling the device
    to a certain level and soldering wires to the contacts of the test port. While
    being invasive, JTAG is not considered a destructive method by many experts. If
    JTAG is performed carefully, the device, if it was in working order prior to the
    JTAG procedure, will continue to work post JTAGâ€”which is exactly what the test
    port is designed for. From time to time, JTAG can still result in the device being
    rendered inoperable. For this reason, JTAG forensics is normally used when commercial
    forensic tools fail to image the device, or when the device is soft-bricked or
    unbootable. This includes devices locked with an unknown passcode and the **USB
    debugging** option not enabled if no exploit is available to bypass protection.
  prefs: []
  type: TYPE_NORMAL
- en: 'JTAG acquisition produces a full image of the device''s memory complete with
    unallocated space. This is how JTAG acquisition may look in a lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![When to JTAG a device](img/0017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'JTAG acquisition of Nokia Lumia 920\. Image source: SYTECH Digital Forensics,
    http://sytech-consultants.com/.'
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of JTAG forensics
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: JTAG extraction is a low-level acquisition method that returns raw content of
    the device storage. If full-disk encryption is enabled, JTAG will extract a raw
    encrypted image. Breaking the encryption may or may not be an option, depending
    on the manufacturer (Samsung is renowned for *making things different*), phone
    model, and Android version.
  prefs: []
  type: TYPE_NORMAL
- en: In order to extract a decrypted image, a higher level API must be used. This,
    however, may require unlocking the device with the correct passcode (or an alternative
    method, such as pattern or knock code). Full-disk encryption is active out-of-the-box
    on some Samsung devices, Google-manufactured devices running Android 5 (such as
    Nexus 6 and Nexus 9), as well as some other flagship phones sold by leading manufacturers.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG processes are minimally documented and require an expert examiner. Some
    manufacturers disable TAP on their devices after they leave the factory, so JTAG
    acquisition may not be available even if a TAP port is visibly present.
  prefs: []
  type: TYPE_NORMAL
- en: The full image extracted via JTAG does not include the overprovisioned area.
    JTAG will not bypass the controller and can only obtain access to the device memory
    area allowed by the controller of the device being acquired, unless the examiner
    is using an advanced form of JTAG called **Boundary Scan**. In other words, without
    using the Boundary Scan technique, the overprovisioned area is inaccessible with
    standard JTAG method. Yet, even using the Boundary Scan technique, examiners can
    only access as much information as can be obtained from the embedded storage.
    If the device uses eMMC memory, all extraction requests are still routed through
    the embedded controller integrated into the eMMC chip, which in turn will not
    allow accessing the content of flash chip(s) directly. As a result, the Boundary
    Scan technique is only effective if the device is equipped with plain flash chips,
    which is not the case for up-to-date devices (for example, majority of Android
    smartphones has been using eMMC chips since Android 2.3). Notably, some entry-level
    no-name Chinese smartphones are still equipped with plain flash chips instead
    of eMMC.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the limitations, JTAG remains a viable acquisition method for compatible
    devices. Google decided to back away from encrypting new Android 5.0 devices ([http://arstechnica.com/gadgets/2015/03/google-quietly-backs-away-from-encrypting-new-lollipop-devices-by-default/](http://arstechnica.com/gadgets/2015/03/google-quietly-backs-away-from-encrypting-new-lollipop-devices-by-default/)),
    removing the requirement to enforce full-disk encryption in existing devices receiving
    an upgrade to Android 5.0/5.1, as well as newly released phones running Lollipop
    out-of-the-box. You can use JTAG forensics on compatible phones only if they are
    not using whole-disk encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step JTAG acquisition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This book targets mobile forensic experts in general, so we don''t discuss
    JTAG extraction in detail. Sending the phone to a lab specializing in low-level
    extractions is probably your best option. In the lab, they''ll perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The expert will attempt to identify TAP by researching available service documentation
    for the particular device model. If no service documentation is available, the
    examiner will open the device and inspect its PCB for potential TAPs, and then
    manually probe to identify TAP connector pins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The expert will then attach wire leads to the correct connector pins by either
    soldering the connectors or utilizing a solderless jig.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wire leads will be connected to an appropriate JTAG emulator supporting
    the device being analyzed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By sending appropriate commands to the exhibit device via the TAP, the expert
    will make the device dump its flash memory contents. The raw dump will be captured
    by the JTAG emulator and will be saved into a binary file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The binary file with raw contents of the memory chips will be presented to you
    for analysis. The dump may or may not be encrypted, and it may or may not be possible
    to decrypt its content at that time even if the lock screen passcode is known.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this time, you can use a mobile forensic tool of your choice to load the
    content of the JTAG dump and parse and analyze its content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chip-off acquisition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chip-off acquisition is a highly advanced, destructive extraction technique
    that requires attaching wire leads to the PCB contacts or physically removing
    (desoldering) the phone's flash memory chip. Chip-off is considered more difficult
    compared to JTAG; however, the amount of information acquired via chip-off acquisition
    is similar to the amount of data acquired by JTAGging the device. Since most smartphones
    use standard eMMC flash modules, the process is standardized and typically presents
    no surprises to the examiner.
  prefs: []
  type: TYPE_NORMAL
- en: In the world of mobile forensics, the lowest-level access is not always the
    best. While reading the chips directly produces a complete raw dump of the memory
    chips, the investigator may be faced with an encrypted partition with no decryption
    keys stored anywhere around. In the case of Apple devices, many Samsung phones,
    and some other devices (for example, the Android 5 Nexus line), encryption is
    enforced out-of-the-box and may not be bypassed during or after the chip-off acquisition
    even if the correct passcode is known. Ð¡hip-off acquisition delivers the best
    result when used on unencrypted devices.
  prefs: []
  type: TYPE_NORMAL
- en: Chip-off and encryption
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Chip-off often involves removing the memory chip from the circuit board and
    using special eMMC adapters to make a raw dump of the memory chip. If full-disk
    encryption was enabled on the device, on many Android versions prior to Android
    5.0 Lollipop (with the default encryption scheme), it is then possible to attempt
    carving the raw data dump in order to locate and extract the encryption metadata.
    If the encryption metadata is successfully extracted, the analyst can then attempt
    to brute-force the passcode and decrypt the image.
  prefs: []
  type: TYPE_NORMAL
- en: Chip-off extraction is the lowest-level acquisition method available. Chip-off
    is often used as a last resort if both physical acquisition and JTAG extraction
    fail. If full-disk encryption has been used, chip-off acquisition will result
    in an encrypted image that may or may not be possible to decrypt.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this technique does not work on many Samsung phones with fairly recent
    firmware, as well as on most devices running Android 5.0 and later versions of
    Android. Recent Samsung devices (as well as all Android 5.x smartphones) encrypt
    metadata with a master key, while the master key itself is stored in a protected
    area that cannot be accessed via chip-off.
  prefs: []
  type: TYPE_NORMAL
- en: In-system programming forensics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In-system programming forensics is a non-destructive variation of the chip-off
    acquisition. ISP is an advanced acquisition process that is in between JTAG and
    chip-off. During the acquisition process, examiners can attempt to dump the content
    of the eMMC memory without removing the chip. ISP acquisition is only available
    for devices utilizing eMMC or eMCP-style BGA chips. Access to the memory is obtained
    through access points around the BGA chip. This acquisition process is considered
    non-destructive in that, if all stars align, the device can be reassembled and
    booted after the extraction. This is how ISP acquisition may look in a lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![In-system programming forensics](img/0018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'eMMC adapter attached to a smartphone PCB. Source: http://easy-jtag.com/.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a schematic image of JTAG eMMC pinout (courtesy of Easy Jtag):'
  prefs: []
  type: TYPE_NORMAL
- en: '![In-system programming forensics](img/0019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Easy JTAG eMMC box. Source: http://easy-jtag.com/.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Teel Technologies ([http://www.teeltech.com/mobile-device-forensics-training/in-system-programming-for-mobile-device-forensics/](http://www.teeltech.com/mobile-device-forensics-training/in-system-programming-for-mobile-device-forensics/))
    lists the following benefits for ISP acquisition:'
  prefs: []
  type: TYPE_NORMAL
- en: Enables examiners to bypass lock codes and recover the complete dataset from
    phones that are not supported by JTAG or commercial tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-destructive practice that achieves the same results as a chip-off, while
    leaving the original evidence intact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquires data much faster than JTAG, enabling examiners to process more phones
    faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fewer resources and tools are required to perform an ISP download compared to
    chip-off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the Android OS from the forensic standpoint. We
    reviewed the various acquisition options and discussed how to perform logical
    acquisition of an Android device. We also took a look at the issue of deleted
    evidence, and discussed when and how deleted data can be recovered. In the next
    chapter, we'll continue working with Android devices, learning about some of the
    most commonly used forensic techniquesâ€”physical acquisition.
  prefs: []
  type: TYPE_NORMAL
