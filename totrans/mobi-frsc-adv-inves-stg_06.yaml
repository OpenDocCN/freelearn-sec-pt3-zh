- en: Chapter 6\. iOS Logical and Cloud Acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll refer to logical acquisition in the sense of acquiring
    and analyzing iTunes backups. Every time an iPhone user syncs their device with
    a PC (Windows or macOS X), iTunes creates a local copy of all user data stored
    in the device (unless the user opts for cloud backups, which will be covered in
    the next chapter). While it is arguable whether automated backups with no user
    intervention are a good thing or a bad thing, unless a *cloud* option is selected,
    users end up having backup copies of their device contents on every computer they
    sync with.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, the chance of encountering a local copy of an iPhone on the user''s
    PC is not insignificant. By default, iTunes stores offline backups in the following
    folders on the user''s computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS X**: `~/Library/Application Support/MobileSync/Backup/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows XP**: `Documents and Settings\(username)\Application Data\Apple Computer\MobileSyncBackup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Vista, Windows 7, 8, and 8.1, Windows 10**: `Users\(username)\AppData\Roaming\Apple
    Computer\MobileSyncBackup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While these locations can be changed, having a large set of files stored in
    one of the above folders is a good indication of a local backup being present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to the device itself, local backups contain somewhat less information.
    However, even that is a lot of data. According to Apple, an offline backup may
    contain:'
  prefs: []
  type: TYPE_NORMAL
- en: Address Book and Address Book favorites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Store Application data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application settings, preferences, and data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autofill for web pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CalDAV and subscribed calendar accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calendar accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calendar events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera Roll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-app purchases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keychain (encrypted with a strong hardware-dependent encryption key in non-password
    backups, but encrypted with a backup password if one is present)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of External Sync Sources (Mobile Me, Exchange, ActiveSync)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location service preferences for apps and websites you have allowed to use your
    location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mail accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed Configurations/Profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map bookmarks, recent searches, and the current location displayed in Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Exchange account configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network settings (saved Wi-Fi hotspots, VPN settings, network preferences)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nike + iPod saved workouts and settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline web application cache/database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paired Bluetooth devices (which can only be used if restored to the same phone
    that made the backup)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari bookmarks, cookies, history, offline data, and currently open pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saved suggested corrections (these are saved automatically as one rejects suggested
    corrections)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMS and MMS (pictures and video) messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trusted hosts that have certificates that cannot be verified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voice memos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voicemail token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wallpapers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web clips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube bookmarks and history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An iTunes backup is not made as a single file. Instead, Apple produces a large
    number of randomly named files containing various bits of information. The names
    of the files are probably not completely random; our guess is that the filenames
    are hash sums of full paths to those same files when stored inside the device.
  prefs: []
  type: TYPE_NORMAL
- en: According to unofficial iOS Forensics blog, *the filenames produced by the backup
    through iTunes result from iTunes computing a SHA1 hash value of the file's path
    and name appended to the iOS domain via a hyphen (that is, iOSDomain-FilePath/FileName)*.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, these files are in fact SQLite database files. In the case of
    an unprotected backup, they can be read and analyzed with pretty much any forensic
    tool supporting the SQLite format.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding backups - local, cloud, encrypted and unencrypted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apple offers its users the choice of three different backup methods, allowing
    to be created, plain and password-protected local backups via iTunes, or making
    over-the-air iCloud backups. The following table plots major differences between
    the three types of backups:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **iTunes, plain (unencrypted)** | **iTunes password-protected (encrypted)**
    | **iCloud** |'
  prefs: []
  type: TYPE_TB
- en: '| Keychain encrypted with | **securityd** (*) | Password (same as the rest
    of the backup); some keychain items with a higher protection class are still protected
    with hardware-backed securityd key | securityd (*) |'
  prefs: []
  type: TYPE_TB
- en: '| Amount of data | Full (but keychain data may remain inaccessible unless securityd
    is extracted out of the physical device) | Limited (some keychain data unavailable)
    | Limited (for example, no IMEI and other hardware-specific data) |'
  prefs: []
  type: TYPE_TB
- en: '| Type of recovery | Most information available instantly | Must recover original
    password | Must know Apple ID/password, or must have non-expired authentication
    token |'
  prefs: []
  type: TYPE_TB
- en: '| Keychain recovery possible? | Keychain recovery unavailable (unless securityd
    is available) | Keychain decrypted with other data (if password recovered). Only
    some keychain data can be recovered. | Keychain recovery unavailable (unless securityd
    is available) ** |'
  prefs: []
  type: TYPE_TB
- en: '* iCloud backups as well as iTunes offline backups saved without a password
    do not expose keychain information in plain text. Instead, keychain data is encrypted
    by using a hardware-specific key called securityd.'
  prefs: []
  type: TYPE_NORMAL
- en: '** In addition to the regular keychain, the iCloud account also contains a
    so-called *iCloud Keychain*. iCloud Keychain is maintained independently of backup
    keychains, and is synchronized automatically between all devices that are configured
    accordingly, even including Mac desktop PCs and even if cloud backups are disabled.
    The purpose of iCloud Keychain is keeping and synchronizing online form data,
    such as logins and passwords to websites between devices. Information contained
    in iCloud Keychain is maintained independently of regular keychains maintained
    in cloud backups; however, iCloud Keychain contains a subset of data available
    in regular keychains. Extracting iCloud Keychain is significantly more difficult
    compared to extracting the iCloud backup due to forced two-factor authentication
    involving the use of a trusted device, a special access code that may or may not
    match the device password, or a recovery key. iCloud Keychain recovery is currently
    not available with any commercial tools. ElcomSoft made a proof-of-concept tool
    for internal testing purposes. There will be more on iCloud Keychain in the next
    chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: The great thing about the securityd key is that it remains constant for the
    lifetime of the device. This key is what allows iOS users to access all of their
    past, current, and future iOS keychains restored from the unencrypted backups.
    Unfortunately, extracting securityd is only possible via physical acquisition.
    As a result, if all you have is an unencrypted backup, and you don't have access
    to a physical device matching the compatibility matrix for physical acquisition,
    you will be unable to access keychain data. If, however, you have extracted the
    securityd key from the device, you will be able to use it to decrypt all current,
    as well as all future, backups made with that device.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about securityd in the following article:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved iOS Keychain Explorer**: [http://blog.crackpassword.com/2012/04/new-features-in-eppb/](http://blog.crackpassword.com/2012/04/new-features-in-eppb/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypted versus unencrypted iTunes backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If all you have is an iTunes backup, understanding your options is essential
    for a successful investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When configuring a backup policy, iOS users have a choice between creating
    non-encrypted and password-protected backups. Here''s what Apple has to say:'
  prefs: []
  type: TYPE_NORMAL
- en: In the iTunes **Summary** screen, select **Encrypt iPhone backup** if you want
    to encrypt the information stored on your computer when iTunes makes a backup.
    Encrypted backups are indicated by a padlock icon (as visible below in the **Deleting
    a Backup** section), and a password is required to restore the information to
    iPhone. You may want to write down the password for your backup and store it in
    a safe place. If you use a Mac, when you set a password you can select to store
    the password in the keychain. With iOS 4 and later, you can transfer most of your
    keychain items to a new device if you encrypt the backup.
  prefs: []
  type: TYPE_NORMAL
- en: '![Encrypted versus unencrypted iTunes backups](img/0099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**'
  prefs: []
  type: TYPE_NORMAL
- en: If you encrypt an iPhone backup in iTunes and then forget your password, you
    will not be able to restore from the backup and your data will be unrecoverable.
    If you forget the password, you can continue to do backups and use the device;
    however, you will not be able to restore the encrypted backup to any device without
    the password. You do not need to enter the password for your backup each time
    you back up or sync.
  prefs: []
  type: TYPE_NORMAL
- en: If you cannot remember the password and want to start again, you will have to
    do a full software restore and when prompted by iTunes to select the backup to
    restore from, choose **Set up as a new device**.
  prefs: []
  type: TYPE_NORMAL
- en: If you read the earlier paragraphs, you may get a sense that password-protected
    backups allow extracting more information compared to their non-encrypted counterparts.
    This is true. In a password-protected backup, the keychain (containing a lot of
    sensitive information such as mail, passwords, account data, and so on) is encrypted
    with the same password as the rest of the data. In non-encrypted backups, the
    keychain is encrypted with a hardware-specific key that cannot be broken from
    the outside.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consequentially, users who protect their backups with a password can have them
    restored to any Apple device complete with all secured items stored in the keychain.
    Users who opted for non-protected backups can still restore a backup on any Apple
    device, but will be unable to restore/access any data stored in the keychain.
    Apple confirms this impression with the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"If you encrypt the backup with iOS 4 and later, the keychain information
    is transferred to the new device. With an unencrypted backup, the keychain can
    only be restored to the same iPhone or iPod touch. If you are restoring to a new
    device with an unencrypted backup, you will need to enter these passwords again."*'
  prefs: []
  type: TYPE_NORMAL
- en: With Apple pushing more and more stuff into the keychain, protecting backups
    with a password becomes more convenient for the user than ever, while allowing
    investigators to access secured information stored in the keychain... if they
    can break the password.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking backup passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you encounter a password-protected backup, you'll need to recover (or break)
    the original password in order to decrypt its content. There is no way around
    the password. Apple's backup encryption is pretty strong by today's standards,
    which makes it easier to attack the original password rather than attacking the
    binary encryption key. The password can only be recovered via the usual means
    (brute force and dictionary or hybrid attacks).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to break the password, we''ll use in-house Elcomsoft Phone Breaker
    (formerly Phone Password Breaker). This tool was originally designed to do exactly
    that: breaking iOS backup passwords. Elcomsoft Phone Breaker will attempt to *guess*
    the password by performing several kinds of attacks. How much time it will need
    to recover the password, and whether or not it''ll be able to recover the password
    at all, depends on how strong the original password was. Short, simple passwords
    (for example, 4-digit PIN) can be broken extremely fast, while long, complex alphanumeric
    passwords can take forever to recover. Unlike the passcode, Apple backup passwords
    are used infrequently; therefore, users tend to select longer passwords containing
    letters, numbers, and special characters.'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the password - how long will it take?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How fast exactly can you break the password? Unfortunately, unlike physical
    acquisition, there is **no fixed timeframe** and **no guarantee** for breaking
    backup passwords. The following factors affect password recovery speeds:'
  prefs: []
  type: TYPE_NORMAL
- en: The speed of your computer's CPU and its graphics card (the latter is way more
    important than the former)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The length and complexity of the password (which is a big unknown)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any information you know about the password (for example, user's other passwords
    and any patterns derived from their password-related habits)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A fast CPU and a faster video card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The urge to have a fast CPU is self-explanatory, but why do we need a fast graphics
    card? And why do we state that having a fast video card is way more important
    than having a fast CPU?
  prefs: []
  type: TYPE_NORMAL
- en: The reason for that is GPU acceleration. Today's video cards are extremely fast.
    Just consider how much computational power is needed to support modern 3D games
    in high resolutions and 60 frames-per-second, and you'll realize it takes a lot
    of processing power.
  prefs: []
  type: TYPE_NORMAL
- en: Using that power to break passwords can give a significant boost to the speed
    of recovery. By offloading computation-intensive parts of the process to the massively
    parallel array of graphical processing units (GPUs) of a typical gaming board
    costing no more than $200-300, one can increase the speed of recovering iTunes
    passwords 10 to 20 fold. By using an even faster video card, or by utilizing two
    or more cards, one can boost speeds 30 to 50 fold compared to using a high-end
    quad-core CPU. Interestingly, ElcomSoft Phone Breaker can utilize all video cards
    installed in the system even if no SLI/Cross Fire mode is configured.
  prefs: []
  type: TYPE_NORMAL
- en: There is no limit to how many video cards can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '![A fast CPU and a faster video card](img/0100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Elcomsoft Phone Breaker includes a smart solution to lengthy attacks. The tool
    can dramatically increase the speed of attacks by utilizing the sheer computational
    power of consumer or gaming video cards. The tool uses a patented GPU acceleration
    algorithm to greatly reduce the time required to recover iPhone/iPad/iPod and
    BlackBerry backup passwords. The latest generation of ElcomSoft GPU acceleration
    technology supports unlimited numbers of AMD or NVIDIA boards such as NVIDIA GeForce
    400, 500, 600, 700, 800, and 900-series and AMD Radeon HD 5000, 6000, 7000, R7,
    and R9 series. ElcomSoft GPU acceleration provides true supercomputer performance
    at consumer prices.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking complex passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is obvious that long and complex passwords take more time to break. The password
    breaking tool will have to try more possible combinations to discover a long alphanumeric
    password compared to breaking a simple 4-digit PIN.
  prefs: []
  type: TYPE_NORMAL
- en: If a password only contains numbers, the use of each additional character makes
    the password 10 times stronger, which means that breaking the password takes 10
    times longer with every additional number. A password that consists entirely of
    small Latin characters gets 26 times stronger with each extra letter. If the password
    contains numbers and both small and capital letters, it gets 62 times stronger
    with every additional character.
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly, the total number of combinations to try is calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: (number of different characters the password may contain) in a power of (password
    length)
  prefs: []
  type: TYPE_NORMAL
- en: For example, a rather simple password that consists of only six characters and
    contains numbers, small and capital Latin letters has 62⁶ = 56,800,235,584 (56+
    billion) possible combinations. If you don't have any information about the password
    and just know the length and the fact that it is alphanumeric, the password recovery
    tool will try them all until it finds the one that matches (unless a more advanced
    attack such as a wordlist or dictionary attack is successful).
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the user helps breaking the password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some passwords are protected stronger than others. In fact, in our daily life
    we routinely use passwords that are weakly protected or not protected at all.
    Instant messenger passwords? Stored in Windows Registry or configuration files
    in plain text or barely scrambled. Website passwords? Depending on the Web browser,
    these are extracted instantly or in a matter of seconds. E-mail passwords in popular
    applications such as Outlook Express, Windows Mail, Windows Live! Mail, or Thunderbird?
    Displayed instantly with a simple free tool. Older Office documents, third-party
    office applications, and many other sources may contain passwords that are more
    easily accessible compared to passwords protecting Apple backups.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to spend some time extracting the easily recoverable passwords
    stored elsewhere. Add those passwords to the top of the wordlist file used for
    a dictionary attack, and in some cases, you won't have to deal with lengthy attacks
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: Even if none of the other passwords work on an iTunes backup, you didn't spend
    time for nothing. Look at those passwords. Do you see a common pattern? If passwords
    chosen by the user are not completely random, more often than not they'll all
    follow a common pattern. Maybe one or more commonly used words, a phone number,
    pet name, football team, or just *god*, *sex*, or *topsecret*. Maybe they all
    start with one capital letter and end with a number. Maybe they have something
    else in common that you can use to create a common pattern and use that pattern
    in Elcomsoft Phone Breaker to reduce the number of possible password combinations
    and speed up the recovery significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Elcomsoft Phone Breaker also includes a so-called *wordlist* with the most commonly
    used passwords used by users speaking English, German, and Russian. There are
    plenty of other lists with commonly used passwords available on the Internet.
    It's definitely worth downloading some of those lists, as many users are likely
    to have one of the passwords that are already there. Finally, special options
    in the product, which allow you to check variations of the words from the wordlist;
    we call them *smart mutations*.
  prefs: []
  type: TYPE_NORMAL
- en: What if the user selects a completely random password for every purpose? Complex
    random passwords, sometimes generated with special software, are not the best
    security choice. While it is possible for an ordinary person to memorize one or
    two passwords like that, it is unlikely that such passwords are ever changed.
    If more than a handful of random passwords are encountered, there is a good chance
    they are all written down somewhere. Maybe it's a small sheet of paper, and maybe
    it's a password manager (password keeper) application, either online or installed
    on the computer. Breaking a master password to that application reveals all of
    the other passwords, no matter how long or complex they might be.
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial - logical acquisition with Elcomsoft Phone Breaker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enough theory! Let's go ahead and do the acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: 'First and foremost: Elcomsoft Phone Breaker should be used offline, on your
    own computer, and never on the suspect''s PC. The tool allows decrypting an encrypted
    backup that is accessible from the computer where you have Elcomsoft Phone Breaker
    installed. You can mount a disk image or use a network disk; there will be no
    performance penalty when breaking the password.'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before accessing information stored in the backup, you'll need to decrypt the
    data. In order to decrypt the data, you'll require the original plain-text password.
    If you don't know the password, Elcomsoft Phone Breaker will perform an attack
    in order to recover it.
  prefs: []
  type: TYPE_NORMAL
- en: In order to recover the password, you will not need to have the complete backup
    sitting on your computer. In fact, a single tiny file named `Manifest.plist` is
    all that you need to start breaking the password (if you are working with a BlackBerry
    backup, please refer to online documentation for more information).
  prefs: []
  type: TYPE_NORMAL
- en: Elcomsoft Phone Breaker recovers the password by *attacking* the backup. You
    can specify one or more different attacks, for example, wordlist (known password
    attack), dictionary, brute force, and so on. A combination of attacks makes up
    a recovery pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recover the password in Elcomsoft Phone Breaker, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Password Recovery Wizard** page.![Breaking the password](img/0101.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the backup file by either selecting the file with the **Choose source**
    command or by dragging and dropping the `Manifest.plist` onto the **Password Recovery
    Wizard** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, the tool will list all locally available backups. If you are recovering
    a backup located on the suspect's hard drive, external device, or mounted forensic
    disk image, you will need to manually specify the location of iTunes backups.
    For the purpose of breaking the password, the tool will only need a single file
    named `manifest.plist` (the full set of backup files will be required for the
    decryption).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are specifying the location manually, here are the default paths used
    by iTunes on the different operating systems:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows XP**: `\Documents and Settings\(username)\Application Data\Apple
    Computer\MobileSync\Backup\`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Vista, 7 and 8**: `\Users\username\AppData\Roaming\Apple Computer\MobileSync\Backup\`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS X (all versions)**: `~/Library/Application Support/MobileSync/Backup/`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After specifying the backup file, you will need to define the attacks that will
    be used to break the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus **+** sign to add various attacks for breaking the password.
    By default, **Dictionary** and **Brute-Force** attacks are added automatically.
    For more information about attacks and their settings, see the password recovery
    attacks topic in the online manual.![Breaking the password](img/0102.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can optionally configure both the **Dictionary attack** and **Brute-Force**
    by clicking on the gear icon to the right of each method.![Breaking the password](img/0103.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the default dictionary of English words (supplied with Elcomsoft
    Phone Breaker) or choose any number of custom dictionaries in plain text format
    (each word or phrase must be on a separate line). A high-quality custom dictionary
    is essential for breaking the password. If at all possible, try building a custom
    dictionary containing the user's other passwords.![Breaking the password](img/0104.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Start recovery**. Elcomsoft Phone Breaker will begin attacking the password.
    The estimated time left as well as the currently processed word will be displayed.
    You can click More Info next to the name of the attack to see additional information,
    such as the number of attempted passwords and the average attack speed.![Breaking
    the password](img/0105.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the attack is successful, the discovered password will be displayed in the
    **Recovery results** window.![Breaking the password](img/0106.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it, we have successfully recovered a password. This password can now
    be used to decrypt the backup. In addition, you can view information stored in
    the keychain by using **Keychain explorer**.
  prefs: []
  type: TYPE_NORMAL
- en: Decrypting the backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can only decrypt the backup if you already know or have already recovered
    the original plain-text password. If you don't have the password, please recover
    the password first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Elcomsoft Phone Breaker. Assuming that you do know the password, do
    the following to decrypt a backup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After loading the backup file, you''ll be able to see the information in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Manifest.plist` file belonging to the backup being decrypted by
    either dragging it onto the **Decrypt backup** window, or by clicking **Choose
    backup** to navigate to the backup file manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Decrypt backup**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Tools** menu, select the **Apple** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serial number
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Product type
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can select a different backup by clicking **Change backup** next to the
    backup name.![Decrypting the backup](img/0107.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define backup decryption options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save decrypted to**: Select the location for saving the decrypted backup.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup password**: Enter the password for the backup. Toggle the **View**
    (![Decrypting the backup](img/0108.jpeg)) button to display the password as characters
    or in asterisks (*). Click **Restore password** if you have not recovered the
    password to the backup yet.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restore original file names**: Renames files to match the way they appear
    on the device. If you uncheck this option, the files will still be available after
    decryption; however, their names will remain unmodified.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using a third-party mobile forensic tool to analyze the backup, *do
    not* restore original filenames as this will confuse the analysis tool. Only choose
    this option if you are viewing files manually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Decrypt**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The decryption process starts. You can view the number of processed files and
    the number of errors received during decryption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When decryption is finished, you can view the backup in the location on the
    local computer to which it was saved by clicking the **View** (![Decrypting the
    backup](img/0109.jpeg)) button.![Decrypting the backup](img/0110.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view a detailed report about decrypted files and errors that occurred during
    decryption, click **Details**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Finish** to close the **Decrypt backup** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The backup is now available on your computer for further analysis. You can use
    Elcomsoft Phone Viewer to browse and view the content of the backup.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with long and complex passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'However simple we made it sound; attacking Apple backup passwords is a slow
    and technically complex process. The recovery speed will depend on available hardware
    (your computer''s CPU and video card), the type of attack, and any information
    you know about the password. To learn how to speed up the recovery, please read
    all of the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General password recovery walkthrough**: [http://www.elcomsoft.com/help/en/eppb/recovering_passwords.html](http://www.elcomsoft.com/help/en/eppb/recovering_passwords.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decrypting the backup**: [http://www.elcomsoft.com/help/en/eppb/decrypting_iphone_backup.html](http://www.elcomsoft.com/help/en/eppb/decrypting_iphone_backup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Types of attacks available in Phone Password Breaker**: [http://www.elcomsoft.com/help/en/eppb/password_recovery_attacks.html](http://www.elcomsoft.com/help/en/eppb/password_recovery_attacks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options for breaking the password**: [http://www.elcomsoft.com/help/en/eppb/password_breaking_options.html](http://www.elcomsoft.com/help/en/eppb/password_breaking_options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options for brute force attack**: [http://www.elcomsoft.com/help/en/eppb/brute-force_attack_options.html](http://www.elcomsoft.com/help/en/eppb/brute-force_attack_options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifically, the two last links explain how to specify information you know
    about the password in order to speed up the recovery.
  prefs: []
  type: TYPE_NORMAL
- en: But what if the password is long and complex, or what if you don't know much
    about the password, and the recovery takes ages of fruitless attacks? If this
    is the case, you may explore other acquisition options. Particularly, information
    can be downloaded from the cloud without attacking the password.
  prefs: []
  type: TYPE_NORMAL
- en: Elcomsoft Phone Breaker on a Mac, inside a virtual PC, or via RDP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many customers are using computers running macOS X. Elcomsoft Phone Breaker
    is native Windows software. For this reason, some users run Elcomsoft Phone Breaker
    in a virtual machine (Windows box) on their Mac. However, there are certain limitations
    in this setup. One major disadvantage of running Elcomsoft Phone Breaker in a
    Windows box in a virtual machine is lack of speed. At the time of writing there
    are no drivers allowing for proper implementation of GPU acceleration in any virtual
    machine. As a result, attempting to brute-force passwords in a virtual machine
    will inevitably lead to a severe drop in performance. If your computer is equipped
    with a mid-range video card, by running password recovery in a virtual box you'll
    be making the recovery 20 to 50 times slower compared to running the same tool
    on a physical computer.
  prefs: []
  type: TYPE_NORMAL
- en: A workaround exists. You can set up a Windows computer on your network, and
    connect to that computer remotely from your Mac. Note, however, that using the
    RDP protocol will cause the same slowdown as using a virtual machine. In order
    to unleash the full potential of GPU acceleration, we recommend connecting via
    an alternative interface such as TeamViewer.
  prefs: []
  type: TYPE_NORMAL
- en: iOS Cloud forensics - over-the-air acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, accessing information stored in the user's iPhone is possible remotely,
    even without accessing the original device. Such access is made possible by the
    fact that iCloud had more than 250 million users last year; this number is steadily
    growing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Meet iCloud forensics: acquiring user data with no lengthy attacks and no physical
    access to an iPhone device. With recent developments, you don''t even need the
    user''s Apple ID and password to access their cloud data. Sounds too good to be
    true? Let''s see what the catch is.'
  prefs: []
  type: TYPE_NORMAL
- en: About Apple iCloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple iCloud is a popular service providing Apple users with 5 GB of free online
    storage space. This storage can be used to back up the content of Apple devices,
    and to store additional information such as documents, pictures, and music. Last
    year, more than 300 million Apple customers were actively using iCloud. The numbers
    are constantly growing.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud offers great convenience to its users. If, for example, one loses their
    iPhone during an overseas trip, one can simply buy a replacement device from a
    local Apple Store, enter their iCloud credentials and have all of their data restored
    to the new device completely automatically. The same goes for switching or upgrading
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'iCloud backups are completely automatic. However, they only occur if certain
    conditions are met:'
  prefs: []
  type: TYPE_NORMAL
- en: The user has enabled iCloud backups in their device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device is docked or connected to a charger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Wi-Fi connection is present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While iCloud backups are incremental and only sync whatever has changed in the
    device, restoring a backup takes just one go when initializing a new Apple device.
    However, with larger amounts of data to be transferred, an expert may want a faster
    acquisition. With Elcomsoft Phone Breaker, one can selectively download certain
    types of data in order to be able to begin the investigation sooner.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about Apple iCloud is available from Apple:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iCloud**: *Store and back up your content in iCloud*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating an iCloud account**: *Frequently Asked Questions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iCloud**: *Backup and restore overview*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with iCloud Keychain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting with an intermediary release of iOS 7 (version 7.0.3), iCloud also
    contains keychain data. iCloud Keychain was added as a feature allowing Apple
    users to sync their account names and passwords across Apple devices. Data stored
    in iCloud Keychain syncs automatically between all authorized iOS 7 devices and
    OS X Mavericks sharing the same Apple ID.
  prefs: []
  type: TYPE_NORMAL
- en: While iCloud Keychain is not automatically enabled, Apple makes it easy to set
    it up. When initializing a new iOS 7 (or later) device, or immediately after upgrading
    iOS to the latest version, users are prompted to enable iCloud Keychain. If they
    decline the choice, it can still be enabled later at **Settings** | **iCloud**
    | **iCloud Keychain**.
  prefs: []
  type: TYPE_NORMAL
- en: As an additional security measure, Apple wants users to set up an iCloud Security
    Code to protect their most sensitive keychain data. This code can be a 4-digit
    PIN or a more complex passcode. iCloud Security Code is used to authorize any
    additional devices to access iCloud Keychain. In addition, this passcode is used
    when recovering iCloud Keychain if the user upgrades or loses a device.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud Keychain is protected with mandatory two-factor authentication. At this
    time, there are no commercially available third-party tools allowing the decryption
    of iCloud Keychain. Technically, iCloud Keychain can be accessed with a third-party
    product if one has access to a recovery key or a trusted device. ElcomSoft has
    a proof-of-concept utility allowing us to do just that; however, it has not made
    it into a commercial product as of yet.
  prefs: []
  type: TYPE_NORMAL
- en: Another way of accessing data stored in the iCloud Keychain is enabling iCloud
    Keychain on the Apple device, synchronizing the device, extracting the data from
    the local keychain, and decrypting it with Elcomsoft Keychain Explorer. This method
    requires having an unlocked, trusted iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the iCloud Keychain (as well as the local keychain of a recently
    synced device) contains a backup password as well as an Apple ID and password,
    which may come in handy if one was accessing iCloud by using the authentication
    token. A password protecting the backup is stored in the regular keychain, and
    has the strongest protection class. As a result, this password can only be decrypted
    via physical acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: 'More on iCloud Keychain:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General information**: [https://www.apple.com/support/icloud/keychain/](https://www.apple.com/support/icloud/keychain/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iCloud Keychain FAQ**: [http://support.apple.com/kb/HT5813](http://support.apple.com/kb/HT5813)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with iCloud Drive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iOS 8 introduced the ability to save information other than device backups into
    the cloud. Apple named the new service the iCloud Drive. In addition to backups,
    applications were allowed to store data in the cloud; one notable example of such
    an application is WhatsApp, which maintains its backups separately from iCloud
    backups. iCloud Drive is aimed to compete with established cloud storage providers
    such as Box, Dropbox, Google Drive, and Microsoft OneDrive. Users can store just
    about any type of file in iCloud Drive, while accessing the data from any Apple
    device as well as from Windows PCs.
  prefs: []
  type: TYPE_NORMAL
- en: In order to enable iCloud Drive, Apple users must explicitly upgrade their accounts.
    While Apple users can upgrade their iCloud account to use iCloud Drive at any
    time, iOS 8 or later is required to access iCloud Drive from iPhones and iPads.
    iOS 9 makes a much wider use of iCloud Drive, storing cloud backups in the new
    system and migrating away from the classic iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: By February 2016, 76% of Apple users had already upgraded to iOS 9, and have
    their cloud backups stored in iCloud Drive by default. 17% of devices were still
    running iOS 8 by the time, meaning that cloud backups were stored in the "normal"
    iCloud, while app-specific backups and other files could also be kept in iCloud
    Drive. The rest (7%) did not have access to iCloud Drive by February 2016.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new iCloud Drive may be used to store all types of user data, including
    but not limited to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: iWork documents (if configured to be stored in the cloud) such as Pages, Numbers,
    Keynote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party app data (for example, WhatsApp backups, 1Password password databases,
    and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain system files that are synced across devices (for example, user dictionaries
    that may contain words and phrases entered by users that are not part of a common
    dictionary)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iCloud Drive uses a different protocol compared to Apple iCloud. As a result,
    all cloud forensic tools require explicit support for iCloud Drive in order to
    be able to access information stored in the cloud service. At this time, Elcomsoft
    Phone Breaker remains the only tool fully supporting both iCloud and iCloud Drive.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding iCloud forensics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'iCloud forensics offers experts yet another way of obtaining important evidence.
    The pros of cloud forensics are obvious: no access to physical device is required,
    and there is no need (nor possibility) for lengthy password attacks. Potential
    issues include: you must either know the user''s Apple ID and password, or have
    a recent (non-expired) authentication token obtained from the user''s PC.'
  prefs: []
  type: TYPE_NORMAL
- en: With cloud forensics, you only have two options. First, you could use a new
    (or factory-reset) Apple device to restore the data to, then make a backup of
    that data. This is a long and complicated process. Alternatively, you can use
    Elcomsoft Phone Breaker, which is the only cloud forensic tool currently available
    as Apple does not provide means for downloading iCloud information to a PC. If
    a user owns more than one device, and those devices are registered with the same
    Apple ID, their online backups can be seamlessly recovered from iCloud with no
    extra effort.
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial - cloud acquisition with Elcomsoft Phone Breaker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, there is only one tool on the market that can perform
    the complete over-the-air acquisition of iOS devices, including accounts upgraded
    to iCloud Drive. Elcomsoft Phone Breaker (previously Elcomsoft Phone Password
    Breaker) was the first and remains the only third-party forensic tool that can
    retrieve and decrypt backups stored in iCloud and download files stored in the
    subject's iCloud Drive with or without the original Apple ID and password. Notably,
    Apple does not provide means for downloading iCloud information to a PC, so Elcomsoft
    Phone Breaker remains the only tool available for that purpose.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to access the backup, you will need to supply a valid authentication
    credential to the Apple iCloud server. Until recently, the only way to authenticate
    when downloading from the cloud was via login (the user's Apple ID) and password.
    However, it was recently discovered that under certain conditions, a binary authentication
    token is created and stored on the user's computer, allowing forensic experts
    to access information from the cloud without knowing the original login and password.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on whether you know the original Apple ID and password, if you have
    access to the actual physical device or information obtained from the user's computer,
    you may choose one of the several acquisition paths.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading iCloud backups - using Apple ID and password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you know the person's Apple ID and password, you may use Elcomsoft Phone
    Breaker to download information from their iCloud account. The tool will download
    the backup from iCloud, decrypt data, and convert it into an iTunes backup so
    that you can use pretty much any mobile forensic tool to analyze its content.
    Note, however, that we do not recommend restoring the device using the converted
    copy of the backup.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download an iCloud backup, launch Elcomsoft Phone Breaker and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Tools** menu, select the **Apple** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Download backup from iCloud**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Download backup from iCloud** page, define the authentication type
    as **Password**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Password**: To use your Apple credentials (Apple ID and password).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token**: To use the Authentication token extracted from iCloud using Elcomsoft
    Apple Token Extractor. For more information about extracting the token, see the
    *Extracting authentication* token topic.![Downloading iCloud backups - using Apple
    ID and password](img/0111.jpeg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the **Apple ID** and Password into the corresponding fields, and click
    **Sign in** to enter iCloud.![Downloading iCloud backups - using Apple ID and
    password](img/0112.jpeg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once Elcomsoft Phone Breaker successfully signs into iCloud (assuming no additional
    authentication steps), it will display the list of devices associated with that
    specific Apple ID. Note that you will see all devices registered with that Apple
    ID, including those that are not part of the investigation. The iCloud backup
    storage opens:![Downloading iCloud backups - using Apple ID and password](img/0113.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can view a username, user ID, and Apple ID of the iCloud user, as well as
    a list of backups belonging to that user. By default, three latest backups are
    displayed. Hover the mouse over the green (**i**) icon to view storage capacity
    and occupied size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To select backups saved by another iCloud user, click **Change user**. *If a
    certain device is busy saving a new backup, and the backup is still in progress,
    that device will not be listed as available for downloading.*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For every device, the following information is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Device name**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serial number**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unique device ID**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date and time when the latest backup was made**: The time is displayed in
    the time zone that is local for the acquiring PC; this is essential if the device
    being analyzed belongs to a different time zone'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size of backup**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the device(s) whose backups you would like to download by selecting the
    checkboxes on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the options for downloading backups. Click **Info** to view hints for
    each option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Restore original file names**: If selected, this allows saving all backup
    files with the same filenames as in the iOS operating system, including the full
    path. For example, messages (SMS and iMessage) are saved as `\HomeDomain\Library\SMS\sms.db`
    (SQLite format). If this option is not selected, the backup will be saved in the
    iTunes format (the same format is used for local backups).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using a third-party mobile forensic product, make sure to disable
    the **Restore original file names** option. If you disable this option, the backup
    will be saved in the iTunes format supported by virtually all mobile forensic
    tools on the market.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The option for restoring original filenames is automatically enabled for **Download
    only specific data** mode, as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Downloading iCloud backups - using Apple ID and password](img/0114.jpeg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**Download only specific data**: By specifying this option, you can speed up
    the investigation by quickly downloading the most important data first. Please
    note that this option is not a replacement for full iCloud backup analysis. Instead,
    it is more of a *quick peek* of the most essential data.![Downloading iCloud backups
    - using Apple ID and password](img/0115.jpeg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After defining all the options, click **Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location on your local computer where the downloaded files will
    be stored by using **Select Folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The download begins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Attempts to download partial (in-progress) backups will fail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The tool puts a check mark next to the downloaded backup once the download is
    complete. Click **Finish** to exit the downloading wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The downloaded backup is now available on your computer for further analysis.
    You can use [http://www.elcomsoft.com/epv.html](http://www.elcomsoft.com/epv.html)
    to browse and view the content of the backup.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading iCloud/iCloud Drive backups - using authentication tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is natural to expect that one needs the original login credentials (Apple
    ID and password) to access information stored in the cloud. What happens if you
    don't know the user's Apple ID and password, but have access to their computer
    that was used to sync with iCloud (or iCloud Drive)? If this is the case, you
    may attempt connecting to iCloud using a binary authentication token extracted
    from the user's computer.
  prefs: []
  type: TYPE_NORMAL
- en: The use of a binary authentication token provides the ability to bypass the
    login and password authentication of Apple iCloud. As an added benefit, using
    an authentication token bypasses any two-factor authentication specified by the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading iCloud/iCloud Drive backups - using authentication tokens](img/0116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Technically speaking, authentication tokens are small binary files created by
    iCloud Control Panel to spare the user from entering their login and password
    every time they sync with the cloud. The token can be extracted from the user's
    computer if iCloud Control Panel (or iCloud for Windows) is installed and if the
    user was logged into the Panel on that computer at the time of token acquisition.
    If the user logs out of iCloud Control Panel, the token is deleted and invalidated,
    meaning it can no longer be used to access iCloud data even if carved from the
    hard disk.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Authentication tokens do not contain a password to the user's Apple account.
    They don't contain a hash of the password either. You cannot use an authentication
    token to brute-force the original plain-text password.
  prefs: []
  type: TYPE_NORMAL
- en: The iCloud Control Panel is an integral part of macOS systems. Windows systems
    can use iCloud for Windows. For convenience, users stay logged in to their iCloud
    Control Panel for seamlessly syncing contacts, passwords (iCloud Keychain), photos,
    and other types of data. This means it is highly likely to be able to obtain authentication
    tokens from computers where iCloud Control Panel (iCloud for Windows) is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Downloading an iCloud backup using an authentication token works similarly
    to using an Apple ID and password, except that you will need to supply an authentication
    token instead of the user''s Apple ID and password on the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading iCloud/iCloud Drive backups - using authentication tokens](img/0117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note that you will need to copy the complete authentication token string
    from the text file extracted with the appropriate command-line tool. In the following
    screenshot, the entire second line of the text file represents the authentication
    token:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading iCloud/iCloud Drive backups - using authentication tokens](img/0118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Extracting authentication tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A valid authentication token can only be extracted from a system if all of
    the following are true (in this case, we''re discussing a Windows PC):'
  prefs: []
  type: TYPE_NORMAL
- en: The user has iCloud for Windows installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user logged in to iCloud for Windows and did not sign out by the time of
    acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user did not change their Apple ID password by the time of acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connection to a physical iOS device is not required at any stage.
  prefs: []
  type: TYPE_NORMAL
- en: Elcomsoft Phone Breaker offers two different methods for extracting tokens.
    When extracting a binary authentication token from the currently logged in user
    on a live system, investigators can use the supplied command-line tool (`atex.exe`).
    In all other cases, Elcomsoft Phone Breaker offers a convenient user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The authentication token must be extracted from the user's computer, hard drive,
    or forensic disk image before it can be used. Elcomsoft Phone Breaker comes with
    tools allowing locating, extracting, and decrypting of binary authentication tokens.
    The tools can extract authentication tokens for all users of that computer including
    domain users (providing that their system login passwords are known). In addition,
    authentication tokens can be extracted offline from the user's hard drive or forensic
    disk image. Command-line tools are available for both Windows and macOS X.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how extracting authentication tokens works in Windows. For instructions
    on how to extract authentication tokens in macOS X, visit [http://www.elcomsoft.com/help/en/eppb/extracting_authentication_mac.html](http://www.elcomsoft.com/help/en/eppb/extracting_authentication_mac.html).
  prefs: []
  type: TYPE_NORMAL
- en: The authentication token can be extracted for the current iCloud Control Panel
    user as well as for all other users in the system providing that the correct account
    password (or the administrative password) is known. In addition, one can extract
    authentication tokens from binary files `m`, stored on virtual disks or forensic
    disk images. For the sake of simplicity, let's extract an authentication token
    for the current user of iCloud Control Panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'To extract the authentication token for the current iCloud for Windows user
    on a Windows PC, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch `atex.exe`. A file named `icloud_token_<timestamp>.txt</timestamp>` will
    be created in the same folder where you launch the tool from (or in the `C:\Users\<user
    name="">\AppData\Local\Temp</user>` folder, if you don't have enough permissions
    for writing files to the folder where `atex.exe` was launched from).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The full path to the extracted file will be displayed in the console window:![Extracting
    authentication tokens](img/0119.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting file with a `.txt` extension contains the Apple ID of the current
    iCloud Control Panel user and its authentication token.![Extracting authentication
    tokens](img/0120.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to extract authentication tokens for other Windows users, or if
    you are working with a forensic disk image, you can use the token extraction wizard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Launch Elcomsoft Phone Breaker and select **Extract authentication token**.![Extracting
    authentication tokens](img/0121.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the path to the token file (usually `%appdata%\Apple Computer\Preferences\`).![Extracting
    authentication tokens](img/0122.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the path to the master key (required to decrypt the token) and click
    **Extract**. This key is used to decrypt the authentication token.![Extracting
    authentication tokens](img/0123.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Elcomsoft Phone Breaker will extract, decrypt, and display the token. You will
    be able to export the token into a file. You can now use this token to log into
    iCloud and download backup from iCloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once again, if you are using a macOS X computer, read the following document
    for step-by-step instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.elcomsoft.com/help/en/eppb/extracting_authentication_mac.html](http://www.elcomsoft.com/help/en/eppb/extracting_authentication_mac.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Up to date information on extracting authentication tokens is available at [https://www.elcomsoft.com/help/en/eppb/index.html?extracting_token_on_non-live_w.html](https://www.elcomsoft.com/help/en/eppb/index.html?extracting_token_on_non-live_w.html).
  prefs: []
  type: TYPE_NORMAL
- en: iCloud authentication tokens (iOS 6 through 9) - limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So are these binary authentication tokens (ATEX) a silver bullet of iOS forensics?
    We thought so for a few months after discovering this acquisition method. However,
    Apple has implemented some changes, making iCloud acquisition via binary authentication
    tokens a somewhat less attractive proposition.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on iOS version, ATEX tokens extracted from iCloud Control Panel may
    have limited usability. While one can still use the token to log in to iCloud
    and view the list of devices and their corresponding backups, on some rare occasions
    the token may be only valid for one hour for the purpose of downloading iCloud
    backups. This applies to iOS 8.x.
  prefs: []
  type: TYPE_NORMAL
- en: The validity period of iCloud authentication tokens was severely reduced by
    Apple in response to the celebrity photos hack. However, as new authentication
    methods became available (which includes two-step verification, later superseded
    by two-factor authentication), Apple relaxed the rules again.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The quick token expiration does *not* apply to the new Apple iCloud Drive. While
    "classic" iCloud tokens apparently expire after one hour, these same tokens when
    used to authenticate into iCloud Drive (which is used to extract data including
    cloud backups from devices running iOS 9 and newer) do not appear to have such
    a short lifespan. We couldn't determine exactly how long the tokens are valid
    for this purpose, but the lifespan is certainly much longer than that of the *classic*
    iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table explains what ATEX tokens for the *classic* Apple iCloud
    (iOS 6 through 8) are good for:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Within one hour of iCloud Control Panel login** | **After one hour and
    until expiry** |'
  prefs: []
  type: TYPE_TB
- en: '| List of devices | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| List of iCloud backups | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Downloading iCloud backups | Yes |'
  prefs: []
  type: TYPE_TB
- en: No (iOS 8.x)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yes (iOS 9.x)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Downloading files stored in iCloud Drive | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: iCloud Drive authentication tokens (iOS 9 and newer) - a different beast altogether
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since iOS 9, Apple keeps cloud backups in iCloud Drive instead of the *classic*
    iCloud. iCloud Drive tokens are governed by different rules, and do not appear
    to have such a short lifespan as iCloud tokens.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, we were unable to determine the exact validity period of iCloud
    Drive tokens. It's definitely much longer than that of the "classic" iCloud ATEX
    tokens, and it's definitely longer than a few days. As a result, cloud extraction
    of iOS 9 and newer devices has more chances to succeed compared to iOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: Quick start - selective downloading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple iCloud is not exactly the fastest cloud on the planet. In fact, it can
    be pretty slow at times. Much slower than the speed the average broadband connections.
    In reality, this means that downloading of full iCloud backup may take several
    hours, or even overnight in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: However, you may not even need the full dataset of iOS devices. The user's call
    history, messages, browsing data, notes, contacts, social communications, and
    some other types of data are extremely important for an investigation, yet they
    take very little space in the phone. Considering the speed of Apple iCloud, you
    may choose to spend a few minutes downloading some selected types of data before
    obtaining the full backup.
  prefs: []
  type: TYPE_NORMAL
- en: If you need some data right away to start your investigation, you may use the
    **Download only specific data** option available in Elcomsoft Phone Breaker.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quick start - selective downloading](img/0124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, you'll need to click Customize to specify the types of data to download.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quick start - selective downloading](img/0125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Do realize that this option is not a proper substitute for full iCloud backup
    analysis. Its intended purpose is to provide a *quick peek* at the most essential
    data, allowing you to start your investigation while the full backup is still
    being downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: More information on the types of data available for selective download is available
    at [http://www.elcomsoft.com/help/en/eppb/downloading_specific_data.html](http://www.elcomsoft.com/help/en/eppb/downloading_specific_data.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Two-factor authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The world of IT security is constantly changing. Recent security outbreaks made
    Apple implement additional security measures. These increased security measures
    include the expansion of two-factor authentication and the delivery of notifications
    to users when information stored in their cloud account is being accessed from
    a new device. Two-factor authentication is now available (yet still remains optional)
    for cloud backups.
  prefs: []
  type: TYPE_NORMAL
- en: Apple has also announced an additional two-factor authentication method. In
    addition to existing authentication methods that include a verification code on
    the trusted device and recovery key, the app-specific password method has been
    added. However, app-specific passwords have little to do with forensic acquisition
    as they are not related to either backups or files stored in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The pressure for extra security was so strong that Apple was forced to tighten
    iCloud security ahead of the iOS 8 release. This put an end to using many third-party
    tools for accessing the cloud if two-factor authentication was enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two-factor authentication (as well as the older two-step verification) is still
    optional. If enabled, experts can only access cloud data if any of the following
    is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security code sent to a trusted device** must have access to the trusted
    device or SIM card with a trusted phone number. A trusted device must be unlocked
    in order to see the security code. A SIM card can be used to receive a verification
    text message in any device; there is no need to use the original iPhone for that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recovery key** created during the time the two-step verification is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Binary authentication token** obtained from one of the trusted devices or
    extracted from a computer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-factor authentication covers iCloud backups as well as other information
    stored in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Two-factor authentication is optional
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of today (May 2016), Apple does not enforce two-factor authentication on
    its customers. Enforcing the extra authentication takes its toll on the ease of
    use and convenience Apple users are accustomed to. The extra authentication step
    could lead some users to abandon the idea of cloud backups. As a result, Apple
    still tries to find a balance by trial and error.
  prefs: []
  type: TYPE_NORMAL
- en: Apple does not disclose the number of users who have two-factor authentication
    enabled. Two-factor authentication and two-step authentication are still not completely
    transparent. In the real world, we don't see many Apple users enabling two-factor
    authentication. We expect the two-factor authentication acceptance rate to grow
    slowly but steadily in the foreseeable future.
  prefs: []
  type: TYPE_NORMAL
- en: Two-factor authentication versus two-step verification - understanding the differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two-step verification and two-factor authentication are two distinctly different
    yet confusingly similar processes aiming to secure access to Apple ID and associated
    services. Both methods add a secondary authentication factor in addition to the
    already used Apple ID and password, verifying *something you have* in addition
    to *something you know*.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike other companies (for example, Google), Apple does not use a single two-factor
    authentication solution. Instead, the company had to use two different processes
    with similar user experience, slightly different names, and completely different
    technical implementation. What was the reason behind using two different processes?
    The reality is, **two-step verification** was a rushed afterthought. Apple had
    to act quickly during the scandal with the celebrity photos leak, implementing
    tighter security to users of existing (and legacy) versions of iOS. On the other
    hand, **two-factor authentication** (aren't you already confused?) appeared in
    iOS 9 and macOS El Capitan, and is available exclusively to users of the latest
    iOS versions. So what are the differences between the two verification processes,
    and what is their effect on mobile forensics? Let's try to find out.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple official documentation about the two verification methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-step verification**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-step verification (2SV)**: [https://support.apple.com/en-us/HT204152](https://support.apple.com/en-us/HT204152)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App-specific passwords**: [https://support.apple.com/en-us/HT204397](https://support.apple.com/en-us/HT204397)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two-factor authentication**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-factor authentication (2FA)**: [https://support.apple.com/en-us/HT204915](https://support.apple.com/en-us/HT204915)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Getting verification codes with 2FA**: [https://support.apple.com/en-us/HT204974](https://support.apple.com/en-us/HT204974)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-step verification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Two-step verification** (**2SV**) was introduced in 2013 as a rushed response
    to the iCloud celebrity hack. It was released ahead of iOS 8 to protect access
    to certain activities with users'' Apple ID. 2SV adds an extra verification step
    when logging in to Apple ID services. The secondary verification step is mandatory
    when signing into Apple ID or iCloud or making a purchase from a new device (please
    refer to the earlier Apple links for more information).'
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of digital forensics, the important part is how Apple delivers
    codes that serve as the secondary authentication factor.
  prefs: []
  type: TYPE_NORMAL
- en: There are four different methods in which users can receive codes for two-step
    verification.
  prefs: []
  type: TYPE_NORMAL
- en: '**Delivering secondary verification codes**:'
  prefs: []
  type: TYPE_NORMAL
- en: Push notification to a trusted device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text message or phone call to a trusted phone number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovery key (offline)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App-specific password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling two-step verification**:'
  prefs: []
  type: TYPE_NORMAL
- en: From an Apple device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online via My Apple ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-factor authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike two-step verification,which was a rushed afterthought, two-factor authentication
    (first released in 2015 with iOS 9) is a real technological improvement over the
    previous scheme. The new and improved security method requires built-in OS support,
    and only works in iOS 9 and later or OS X El Capitan and later. Importantly, two-factor
    authentication (2FA) cannot be used with devices running older versions of iOS.
    Availability of two-factor authentication is currently limited to some regions.
    2FA will roll out slowly to all regions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Two-factor authentication](img/0126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Two-factor authentication lost offline recovery keys and app-specific passwords.
  prefs: []
  type: TYPE_NORMAL
- en: '**Delivering secondary authentication codes**:'
  prefs: []
  type: TYPE_NORMAL
- en: Push notification to a trusted device (interactive prompt appears on all trusted
    devices; device must be unlocked to allow access and to see the code).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text message or phone call to a registered number (using the **Did not get a
    verification code?** link).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New**: No application-specific passwords. Appending a 6-digit authentication
    code to the original password can be used to authenticate apps not supporting
    two-factor authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New**: Offline authentication via a time-dependent code generated from the
    settings of a trusted device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling two-factor authentication**:'
  prefs: []
  type: TYPE_NORMAL
- en: One can only enable two-factor authentication from a compatible Apple device
    (iOS 9, El Capitan). No Web-based online activation possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2FA replaces the older 2SV. If 2SV is already enabled, it must be disabled before
    enabling two-factor authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Two-factor authentication](img/0127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A major advance in two-factor authentication is the ability to generate (and
    use) authentication codes offline by requesting them from a trusted device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Two-factor authentication](img/0128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These new offline authentication codes work similar to Google's and Microsoft's
    implementations. A new code is generated every 30 seconds. There is a difference
    to Google's and Microsoft's authenticator apps though. Apple uses a unique seed
    for each trusted device, meaning that each trusted device generates a unique authentication
    code, while Google and Microsoft only allow maintaining a single seed for all
    authenticator apps. This means that Apple users can revoke 2FA authorization from
    each individual device, while Google and Microsoft users revoking 2FA authentication
    would immediately invalidate all authenticator apps installed on all trusted devices.
  prefs: []
  type: TYPE_NORMAL
- en: No app-specific passwords in two-factor authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are no more app-specific passwords available to support apps that don''t
    recognize Apple''s two-factor authentication scheme. Also gone are Recovery Keys.
    When accessing a device or service protected with two-factor authentication, users
    who have at least one device without support for 2FA (such as an iPhone with iOS
    8 or older) will see the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Some of your devices are not ready for two-factor authentication**. If you
    continue you will have to add a six-digit verification code to the end of your
    password any time you enter password on an old device'
  prefs: []
  type: TYPE_NORMAL
- en: Apple seems to have made steps making this not as inconvenient as it could be.
    The first time one attempts making an App Store purchase from an iOS 8.3 device
    (no 2FA support), one is prompted to enter the password with a 6-digit code appended
    at the end. A trusted device displays the prompt and the code. Interestingly,
    in a test we've carried out the next day, the regular Apple ID password worked.
    To reiterate, we did not have to attach the 6-digit code when we used the same
    device the next day. However, our trusted device (running iOS 9) still displayed
    the prompt and the code—yet we didn't have to use it. This is rather confusing.
  prefs: []
  type: TYPE_NORMAL
- en: What if you don't have access to the secondary authentication factor? No trusted
    device and no access to a registered phone number.
  prefs: []
  type: TYPE_NORMAL
- en: '![No app-specific passwords in two-factor authentication](img/0129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the official path is submitting a request to Apple to regain access
    to Apple ID with two-factor authentication account recovery [https://support.apple.com/en-us/HT204921](https://support.apple.com/en-us/HT204921).
  prefs: []
  type: TYPE_NORMAL
- en: Cloud acquisition with two-step verification and two-factor authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're using Elcomsoft Phone Breaker for cloud acquisition, and if an Apple
    ID is protected with either 2SV or 2FA, you will need that secondary authentication
    factor in order to be able to authenticate and access the backups. If two-step
    verification is enabled on the Apple ID, Elcomsoft Phone Breaker will automatically
    prompt to enter the secondary authentication code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: App-specific passwords cannot be used to download iCloud backups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the device runs iOS 8.x or earlier, it can only use two-step verification
    (and not two-factor authentication). However, if the user has at least one device
    supporting 2FA, they may still have enabled 2FA for their Apple ID regardless.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One option to proceed if two-factor authentication is enabled for a given Apple
    ID is generating (or receiving) a 6-digit authentication code. *When authenticating
    Elcomsoft Phone Breaker, you can append that six-digit code to the end of the
    password*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're acquiring a backup from an Apple account that uses two-factor authentication
    (iOS 9 and newer) and you are using an offline 2FA code generated from the trusted
    device's settings, note that such codes are short-lived. You can only authenticate
    using these codes during the first 30 minutes after they've been generated, after
    which they will expire.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't have access to the secondary authentication factor, you may try
    using a binary authentication token. Such tokens can be acquired from a computer
    with iCloud Control Panel (iCloud for Windows) installed. These tokens don't seem
    to expire for iOS 9 backups that are stored in iCloud Drive, but are known to
    expire quickly for iOS 8.x and earlier backups located in the *classic* iCloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acquiring information from an iOS device is one of the first steps. The next
    step is viewing the data, then discovering and analyzing evidence. There are many
    excellent forensic tools available for analyzing information extracted from all
    types of mobile devices. These tools range from extremely simple to large all-in-one
    packages allowing you to cross-analyze multiple data sources at once.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have experience with any of these tools, you may want to start
    with something light and simple—like, for example, Elcomsoft Phone Viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Elcomsoft Phone Viewer is a small, lightweight tool one can use to view information
    extracted from mobile backups. The tool can display contacts, messages, call logs,
    notes, calendar data, as well as many other types of data. It is also possible
    to view deleted SMS and iMessages stored in iOS backups.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ve covered the two most commonly used iOS acquisition
    methods: logical acquisition and cloud extraction. We discussed backup encryption
    and password protection and learned about cloud backups and iCloud authentication.
    We covered the differences between Apple''s two-step verification and two-factor
    authentication, and provided comprehensive step-by-step tutorials covering logical
    acquisition and cloud extraction. In the next chapter, we''ll move from Apple''s
    platform to Microsoft''s, and discuss available acquisition options for Windows
    Phone 8/8.1 and Windows 10 Mobile.'
  prefs: []
  type: TYPE_NORMAL
