- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Malware Analysis for Incident Response
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件响应中的恶意软件分析
- en: Malicious software continues to be an ever-evolving scourge on enterprise and
    consumer systems. As soon as defenses are created, malware coders create a new
    strain that has the power to corrupt or destroy a system. Malware is even being
    utilized as a weapon against nation states and global organizations. The majority
    of data breach incidents involve the use of malware to achieve some goal. Organizations
    in every sector of the economy have faced the threat of malware. With the addition
    of ransomware attacks such as Conti and Ryuk, organizations have had to spring
    into action to address these attacks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件继续成为企业和消费者系统不断演变的灾难。每当防御措施被创建，恶意软件编程人员就会创造出新的变种，能够腐蚀或摧毁系统。恶意软件甚至被用作针对国家和全球组织的武器。大多数数据泄露事件都涉及使用恶意软件来实现某种目标。各行各业的组织都面临着恶意软件的威胁。随着勒索软件攻击（如Conti和Ryuk）的出现，组织不得不迅速行动，解决这些攻击。
- en: With malware an ever-present risk, it is critical that incident response analysts
    have some knowledge of the methods and tools utilized in the analysis of malicious
    code. It would be impossible to address the complexities of malware analysis in
    a single chapter. Therefore, this chapter will focus on the foundational elements
    of malware analysis, while examining some of the tools that are utilized. This
    will give any analyst a solid understanding of these methods, which will allow
    them to see the results of such an analysis in the context of an incident.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于恶意软件始终存在风险，事件响应分析人员必须了解一些用于恶意代码分析的方法和工具。在一章内容中无法全面解决恶意软件分析的复杂性。因此，本章将重点介绍恶意软件分析的基础要素，并探讨一些常用的工具。这将为任何分析人员提供扎实的理解，使他们能够在事件的背景下理解分析结果。
- en: 'In this discussion of malware analysis, the following topics will be addressed:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章关于恶意软件分析的讨论中，将涉及以下主题：
- en: Malware analysis overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件分析概述
- en: Setting up a malware sandbox
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置恶意软件沙箱
- en: Static analysis
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态分析
- en: Dynamic analysis
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态分析
- en: ClamAV
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ClamAV
- en: YARA
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YARA
- en: Malware analysis overview
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恶意软件分析概述
- en: 'Malware analysis, or malware reverse engineering, is a highly technical and
    specialized field in forensics. Antivirus and threat intelligence utilizes a highly
    trained cadre of programmers and forensic personnel who acquire malware from the
    wild, and then rip it open to determine what it does, how it does it, and who
    may be responsible for it. This is done utilizing two types of analysis: static
    and dynamic. Like much of digital forensics, each type of analysis affords some
    advantages, and incident response analysts should be familiar with both.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析，或称恶意软件逆向工程，是数字取证领域中的一个高度技术化和专业化的领域。病毒防护和威胁情报依赖于一支训练有素的程序员和取证人员团队，他们从外部获取恶意软件，并对其进行解剖，以确定其功能、运行方式以及可能的责任方。这是通过两种类型的分析方法进行的：静态分析和动态分析。与大多数数字取证工作一样，每种分析方法都有其优势，事件响应分析人员应该熟悉这两种方法。
- en: Malware analysis
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析
- en: This chapter just scratches the surface of a highly specialized facet of cyber
    security. The intent is to give a few examples of how an analyst can extract actionable
    IOCs from malware associated with an incident. For a more detailed treatment of
    the subject, check out *Monnappa K A’s Learning Malware Analysis*, available at
    [https://www.packtpub.com/product/learning-malware-analysis/9781788392501](https://www.packtpub.com/product/learning-malware-analysis/9781788392501).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅仅触及了网络安全领域中一个高度专业化的方面。目的是给出一些例子，说明分析人员如何从与事件相关的恶意软件中提取可操作的IOC（指标）。如果需要更详细的内容，请查阅*Monnappa
    K A的《学习恶意软件分析》*，可在[https://www.packtpub.com/product/learning-malware-analysis/9781788392501](https://www.packtpub.com/product/learning-malware-analysis/9781788392501)找到。
- en: 'An excellent malware analysis methodology was created by Lenny Zeltser, a malware
    analysis professional who has an excellent array of resources on his website at
    [https://Zeltser.com](https://Zeltser.com). This methodology comprises the following
    seven steps that aid analysts in their process:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一位名叫Lenny Zeltser的恶意软件分析专家创建了一种优秀的恶意软件分析方法学，他的网站上有丰富的资源，地址是[https://Zeltser.com](https://Zeltser.com)。该方法学包括以下七个步骤，帮助分析人员进行分析：
- en: Create a controlled laboratory environment where examinations can be conducted.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个受控的实验室环境，以便进行分析。
- en: Examine the behavior of the suspected malware as it interacts with the **operating
    system** (**OS**) environment.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查可疑恶意软件与**操作系统**（**OS**）环境的交互行为。
- en: Examine the suspicious application’s code, to gain a sense of the inner workings.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查可疑应用程序的代码，以了解其内部工作原理。
- en: Perform dynamic analysis to determine what actions to take that could not be
    identified in static analysis.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行动态分析，确定在静态分析中无法识别的操作。
- en: Determine if the malware is packed and unpack it as necessary.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定恶意软件是否被打包，并在必要时解包。
- en: Continue the process until the analysis objectives have been completed.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续进行分析，直到分析目标完成。
- en: Prepare a supplement to the forensics reporting and return the laboratory to
    its state before the analysis.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一份补充报告，归还实验室到分析前的状态。
- en: 'Generally, malware analysis can be divided into four separate categories, as
    shown in *Figure 16**.1*, based on a similar diagram created by SANS instructor
    Allissa Torres. These four categories differ in terms of their tools, techniques,
    and difficulty. The first and easiest technique to execute is *Fully Automated
    Analysis*. In this instance, a copy of the malware is executed in a malware sandbox,
    an environment created to execute malware so that an understanding of its behavior
    can be ascertained within a relatively short period. This provides a good picture
    of the malware’s behavior and IOCs. What this method does not provide is a detailed
    analysis of the code, which may uncover other specifics, such as potential vulnerabilities
    leveraged or specific software it may be targeting:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，恶意软件分析可以分为四个独立的类别，如*图 16.1*所示，这是基于SANS讲师Allissa Torres创建的类似图表。这四个类别在工具、技术和难度上有所不同。执行的第一个且最简单的技术是*完全自动化分析*。在这种情况下，恶意软件的副本在恶意软件沙箱中执行，沙箱是为执行恶意软件而创建的环境，可以在相对较短的时间内了解其行为。这可以很好地展示恶意软件的行为和IOC（指示器）。然而，这种方法没有提供详细的代码分析，代码分析可能会揭示其他细节，例如潜在的被利用的漏洞或它可能瞄准的特定软件：
- en: '![Figure 16.1 – Malware analysis categories ](img/B18571_16_001.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1 – 恶意软件分析类别](img/B18571_16_001.jpg)'
- en: Figure 16.1 – Malware analysis categories
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – 恶意软件分析类别
- en: The next technique is *static property analysis*. In this technique, tools are
    used to determine the file hash, header, strings, file properties, and other metadata
    associated with the malicious code. This technique is also very fast but does
    require some knowledge of malware to analyze and interpret the results. Usually,
    if the file is run through an automated sandbox along with the static properties
    analyzed, it is sufficient to gain insight into the behaviors of the malware and
    extract pertinent IOCs related to an incident.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个技术是*静态属性分析*。在这种技术中，使用工具来确定文件哈希、头部、字符串、文件属性和与恶意代码相关的其他元数据。这种技术也非常快速，但需要一定的恶意软件知识来分析和解释结果。通常，如果文件通过自动化沙箱运行并同时分析静态属性，就足以深入了解恶意软件的行为并提取与事件相关的IOC。
- en: The next two analysis stages involve a little more expertise, tooling, and time.
    The third stage, *interactive behavior analysis*, involves using a combination
    of automated tools and static property analysis to examine specific elements of
    the malware. For example, a sample might be executed in a sandbox and specific
    network behaviors are controlled to determine if the malware attempts to reach
    out to an external host to download a secondary payload. This stage affords the
    analysts much more control over the sandbox environment as they can change parameters
    based on their observations. In this case, the analyst can control the sandbox’s
    network connection and determine what the specific traffic looks like.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个分析阶段需要更多的专业知识、工具和时间。第三阶段是*互动行为分析*，它涉及使用自动化工具和静态属性分析相结合的方式，检查恶意软件的特定元素。例如，样本可能在沙箱中执行，并控制特定的网络行为，以确定恶意软件是否尝试与外部主机连接以下载二级有效负载。这个阶段给予分析人员更多的沙箱环境控制，他们可以根据观察情况更改参数。在这种情况下，分析人员可以控制沙箱的网络连接，并确定特定流量的样子。
- en: The final stage is *manual code reversing*. As you might expect given the time
    and difficulty in this stage, this is a highly specialized skill set. In this
    stage, the malware sample goes through a reverse engineering process. While this
    does take time and skill, this insight is critical to fully understanding the
    code. For example, the Stuxnet malware went through extensive reverse engineering
    where the analysts were able to determine what specific **Programmable Logic Controllers**
    (**PLCs**) were targeted. Without this insight, the true intent of the malware
    may not have been discovered.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最终阶段是*手动代码逆向*。正如你所预料的，这一阶段因其时间和难度，要求具备高度专业的技能。在这一阶段，恶意软件样本将经过逆向工程处理。尽管这需要时间和技能，但这一见解对于全面理解代码至关重要。例如，Stuxnet恶意软件经过了广泛的逆向工程，分析师能够确定了被攻击的**可编程逻辑控制器**（**PLC**）。没有这一洞察，恶意软件的真正意图可能就无法被发现。
- en: Stuxnet malware analysis
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Stuxnet恶意软件分析
- en: 'Stuxnet is still widely discussed in cyber security and cyber warfare circles,
    even a decade after it was first discovered. It is worth exploring Kim Zetter’s
    research in her book *Countdown to Zero Day: Stuxnet and the Launch of the World’s
    First Digital Weapon* and the 2016 documentary *Zero Days*. Both provide a deep
    look at how malware reverse engineering played a significant role in uncovering
    Stuxnet. A copy of Symantec’s analysis of the Stuxnet virus is included with this
    book in the supplemental material. It is a good idea to review it as it provides
    real insight into the expertise and time necessary to conduct a full analysis.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 即使Stuxnet病毒被发现已有十年，它仍然在网络安全和网络战争领域广泛讨论。值得深入研究金·泽特尔（Kim Zetter）在其著作《倒计时至零日：Stuxnet与全球首个数字武器的发布》中的研究，以及2016年纪录片《零日》。这两者都深入探讨了恶意软件逆向工程在揭示Stuxnet中的重要作用。赛门铁克对Stuxnet病毒的分析副本已作为补充材料随书提供。值得查看，因为它真实地展示了进行全面分析所需的专业知识和时间。
- en: The best approach to extracting the maximum amount of data from a sample of
    malicious code is to conduct a full examination of the file using static and dynamic
    analysis techniques. A full spectrum approach that leverages these techniques
    provides the surest way to gain the best picture of how a sample of malware operates
    and what the capabilities and potential targets of the malware are. A good example
    of this is examining the analysis that was conducted on the Stuxnet virus, which
    was used against the Natanz Uranium enrichment facility in Iran. Exhaustive analysis
    by researchers at Kaspersky and Symantec provided the cyber and national security
    community with extensive analysis that showed the sophisticated malware’s capability
    and target.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从恶意代码样本中提取最大数据量的最佳方法是使用静态和动态分析技术对文件进行全面检查。利用这些技术的全方位方法提供了获得恶意软件如何运行、其功能和潜在目标的最佳方式。一个很好的例子是对Stuxnet病毒的分析，该病毒曾被用来攻击伊朗的纳坦兹铀浓缩设施。卡巴斯基和赛门铁克的研究人员进行了彻底的分析，为网络安全和国家安全界提供了广泛的分析，揭示了这一复杂恶意软件的能力和目标。
- en: There are a few challenges with malware reverse engineering when examining the
    practice of extracting indicators. First, the tools and techniques for reverse
    engineering take significant time to acquire. Reverse engineering is a specialized
    field and given the amount of malware around, it may be difficult to immediately
    engage someone to conduct full reverse engineering. Second, the process itself
    is time-consuming. A detailed static analysis where the code is analyzed using
    binary analysis tools can take time. If other teams such as Incident Response
    or the Security Operations Center need indicators to block or pivot into investigating,
    waiting for complete reverse engineering is not advised.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析提取指示器的过程中，恶意软件逆向工程面临一些挑战。首先，逆向工程的工具和技术需要大量时间来掌握。逆向工程是一个专业领域，考虑到恶意软件的数量，可能很难立即找到人来进行完整的逆向工程。其次，整个过程本身非常耗时。使用二进制分析工具进行代码的详细静态分析可能需要较长时间。如果其他团队如事件响应团队或安全运营中心需要指示器来进行阻止或调查，等待完整的逆向工程结果并不可取。
- en: With these challenges in mind, some tools and techniques can be leveraged by
    threat intelligence and incident response analysts to extract pertinent indicators
    and TTPs while they wait for the more detailed results of a complete reverse engineering
    examination. We will examine those tools and techniques later in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在面对这些挑战时，威胁情报和事件响应分析人员可以利用一些工具和技术来提取相关的指标和 TTP（技术、战术和程序），同时等待进行完整反向工程检查的更详细结果。我们将在本章后面讨论这些工具和技术。
- en: Malware classification
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恶意软件分类
- en: Malicious software, or malware, is an all-encompassing term for any software
    that has been created to damage, disable, or produce an unwanted condition within
    a computer system. This definition, while functional, is also very broad in its
    categorization of malware. There is malware that is coded specifically to steal
    credit card numbers from payment systems, while other malware is utilized to take
    control of a system, allowing an attacker to remotely control that system. Analysts
    who observe these specific behaviors – such as how a compromised system sends
    communications out to the internet after infection, or what actions are taken
    on an infected system – may be able to determine the type of malware, and what
    the end goal of the attacker may be.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件或 malware 是一个总称，指任何旨在损坏、禁用或在计算机系统内产生不良条件的软件。这个定义虽然功能上可行，但在对恶意软件分类时也非常宽泛。有些恶意软件专门编写用于从支付系统中窃取信用卡号码，而其他恶意软件用于接管系统，允许攻击者远程控制该系统。观察这些具体行为的分析人员——例如感染后受损系统如何向互联网发送通信，或者在受感染系统上采取了什么行动——可能能够确定恶意软件的类型以及攻击者的最终目标。
- en: 'In general, when discussing malware, the following are some of the more specific
    categories:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，在讨论恶意软件时，以下是一些更具体的类别：
- en: '**Virus**: For a time, the term virus was used for any malicious code that
    had a detrimental impact on a computer system. As the types of malware increased,
    the term virus was relegated to mean any code that has an intentionally malicious
    impact on a system.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**病毒**：在某个时期，病毒一词用于指对计算机系统有害的任何恶意代码。随着恶意软件类型的增加，病毒一词被归类为对系统有故意恶意影响的任何代码。'
- en: '**Worm**: Often part of a virus, a worm can not only have an impact on a system
    but is also able to self-replicate and impact other systems connected to it. One
    of the most famous worms was the Morris worm, which spread worldwide, causing
    **denial-of-service** (**DoS**) attacks across the internet in 1988.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蠕虫**：通常是病毒的一部分，蠕虫不仅能对系统产生影响，还能自我复制并影响连接到它的其他系统。最著名的蠕虫之一是 Morris 蠕虫，于 1988
    年在全球范围内传播，导致互联网上的拒绝服务（**DoS**）攻击。'
- en: '**Trojan**: The Trojan horse of mythology is the inspiration for this class
    of malware. Trojan malware is often hidden within a legitimate application or
    file. When an unsuspecting user opens the file, the malware infects the system.
    This type of malware often leverages a social engineering attack to infect a system.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特洛伊木马**：源自神话中的特洛伊木马，这类恶意软件通常隐藏在合法应用程序或文件中。当不知情的用户打开文件时，恶意软件会感染系统。此类恶意软件通常利用社会工程学攻击感染系统。'
- en: '**Keylogger**: This specific malware hides in the background of a running system
    and captures the keystrokes of the user. It then takes this information and sends
    it to a controller for review. Coders who write keyloggers are often interested
    in obtaining credentials.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘记录器**：此特定恶意软件隐藏在运行系统的背景中，捕获用户的按键输入。然后，将此信息发送给控制器进行审查。编写键盘记录器的程序员通常有兴趣获取凭据。'
- en: '**Rootkit**: Rootkits are utilized to conceal other malicious code such as
    a **Remote Access Trojan** (**RAT**), which allows an attacker to take remote
    command of an infected system.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rootkit**：Rootkit 用于隐藏其他恶意代码，如**远程访问特洛伊木马**（**RAT**），允许攻击者远程控制被感染的系统。'
- en: '**Information-stealing malware**: Often coded for a single purpose, this type
    of malware is used to capture information such as credit card numbers or banking
    credentials, such as the Shylock malware, which was created specifically to capture
    banking logins.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息窃取恶意软件**：通常为单一目的编写，此类恶意软件用于捕获诸如信用卡号码或银行凭据等信息，例如 Shylock 恶意软件，专门用于捕获银行登录信息。'
- en: '**Backdoor**: Another variation of remote access, this type of malware infects
    a system, and then allows the attacker to take control of the infected system.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后门**：作为远程访问的另一种变体，这类恶意软件感染系统后，允许攻击者接管被感染的系统。'
- en: '**Downloader**: As defenses have become more sophisticated, so have the malware
    writers. A downloader is part of a multi-stage malware program. The downloader
    often infects a system, and then reaches out to a remote server for the rest of
    the code. This method is often utilized to bypass security controls and is useful
    for enabling malware coders to utilize larger and more sophisticated malware.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载器**：随着防御变得越来越复杂，恶意软件编写者也变得越来越高级。下载器是一个多阶段恶意软件程序的一部分。下载器通常会感染一个系统，然后连接到远程服务器获取其余的代码。这种方法常用于绕过安全控制，并且对于恶意软件编写者来说，可以利用更大、更复杂的恶意软件。'
- en: '**Botnet**: A botnet is a series of computers, all controlled through a central
    system on the internet called a botnet controller. First, the botnet malware infects
    a system. As the number of infected systems grows, the malware writers can then
    utilize this botnet to conduct **distributed denial-of-service** (**DDoS**) attacks
    against a single target.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**僵尸网络**：僵尸网络是一系列计算机，所有计算机都通过一个名为僵尸网络控制器的中央系统在互联网上进行控制。首先，僵尸网络恶意软件感染一个系统。当感染的系统数量增加时，恶意软件编写者可以利用这个僵尸网络对单一目标发起**分布式拒绝服务**（**DDoS**）攻击。'
- en: '**Ransomware**: A relatively new type of malware, ransomware encrypts a victim’s
    files. The malware then solicits a payment, often in the form of a cryptocurrency
    such as Bitcoin, from the victim for the decryption key.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**勒索软件**：勒索软件是一种相对较新的恶意软件，它会加密受害者的文件。然后，恶意软件会向受害者索要支付，通常是以比特币等加密货币的形式，以换取解密密钥。'
- en: '**File wipers**: A file wiper either destroys the files or can infect the **Master
    Boot Record** (**MBR**) and modify records so that files are no longer accessible
    to the system.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件清除工具**：文件清除工具会销毁文件，或者可能会感染**主引导记录**（**MBR**），并修改记录，使文件无法再被系统访问。'
- en: Many of these variants are used together in a chain. For example, a malware
    coder may conduct an initial infection of a system, with a RAT disguised as a
    legitimate application. When an unsuspecting user opens the application, the code
    executes itself. It then downloads a second payload and further infects the system,
    allowing the coder remote access. Finally, with remote access, the attack continues,
    with the attacker identifying a payment system. From there, they load the second
    piece of malware onto the payment system and capture cleartext credit card numbers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变种中的许多会一起使用，形成一个链。例如，恶意软件编写者可能会首先感染一个系统，利用伪装成合法应用程序的远程访问木马（RAT）。当一个毫无防备的用户打开应用程序时，代码会自动执行。然后，它会下载第二个有效载荷并进一步感染系统，允许编写者进行远程访问。最后，凭借远程访问，攻击会继续进行，攻击者会寻找支付系统。在那里，他们将第二个恶意软件加载到支付系统中并捕获明文信用卡号码。
- en: Another key aspect of malware is how it has evolved. There has been an explosion
    in how many variants of malware there are and the sheer amount of malicious code
    there is currently in the wild. Malware is evolving every day, with new techniques
    of encoding and delivery – as well as execution – changing rapidly. Analysts would
    be well advised to make a point of keeping abreast of these changes as they are
    happening so that they are prepared for the latest, and more damaging, code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件的另一个关键方面是它的演变。恶意软件的变种数量激增，当前在野外存在的恶意代码数量也非常庞大。恶意软件每天都在进化，新的编码、交付和执行技术快速变化。分析人员应当始终关注这些变化，以便随时为最新的、更具破坏性的代码做好准备。
- en: Before getting into static and dynamic analysis, we will look at configuring
    a malware sandbox.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行静态和动态分析之前，我们将先了解如何配置恶意软件沙箱。
- en: Setting up a malware sandbox
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置恶意软件沙箱
- en: One consideration when analyzing malware is how to handle malware in a safe
    environment without accidentally infecting your system. The malware sandbox is
    a controlled environment where analysts can perform both static and dynamic analysis
    of malware without the risk of infecting a production system. In this case, we
    will look at two types of sandboxes; the local sandbox allows analysts to configure
    a system that is entirely under their control, while the cloud-based option allows
    analysts to leverage dynamic analysis.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 分析恶意软件时，一个重要的考虑因素是如何在一个安全的环境中处理恶意软件，而不会不小心感染你的系统。恶意软件沙箱是一个受控环境，分析人员可以在其中进行恶意软件的静态和动态分析，而不会有感染生产系统的风险。在这种情况下，我们将讨论两种类型的沙箱；本地沙箱允许分析人员配置一个完全由他们控制的系统，而基于云的选项则允许分析人员利用动态分析。
- en: Local sandbox
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地沙箱
- en: 'A local sandbox is a system that has been configured with settings and tools
    in which an analyst can examine malware in a controlled environment. One technique
    to configure a local sandbox is the use of a virtualization hypervisor such as
    Virtual Box or VMWare and configuring an operating system on top. There are key
    advantages to using virtualization for the sandbox. We have already addressed
    the first: if the analyst infects the system, it will not impact the production
    system. Second is the snapshot feature. An analyst can configure the sandbox to
    their preference and then snapshot it. Once the analysis is complete, they can
    roll back to the snapshot and have a fresh installation.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本地沙盒是一个已经配置了设置和工具的系统，在这个系统中分析员可以在受控环境中检查恶意软件。配置本地沙盒的一种技术是使用虚拟化超级监视器，例如Virtual
    Box或VMWare，并在其上配置操作系统。使用虚拟化进行沙盒有关键优势。我们已经解决了第一个问题：如果分析员感染了系统，它不会影响生产系统。第二个优势是快照功能。分析员可以根据自己的喜好配置沙盒，然后进行快照。分析完成后，他们可以回滚到快照状态，获得一个全新的安装。
- en: The first step in the process is selecting the hypervisor. From here, Microsoft
    makes copies of the most popular Windows OSs, including servers, available. For
    example, a Windows 10 virtual machine that has already been configured can be
    downloaded from [https://developer.microsoft.com/en-us/windows/downloads/virtual-machines](https://developer.microsoft.com/en-us/windows/downloads/virtual-machines),
    or the Windows 10 ISO can be downloaded from [https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 过程的第一步是选择超级监视器。从这里开始，微软制作了包括服务器在内的最流行的Windows操作系统的副本。例如，已经配置好的Windows 10虚拟机可以从[https://developer.microsoft.com/en-us/windows/downloads/virtual-machines](https://developer.microsoft.com/en-us/windows/downloads/virtual-machines)下载，或者可以从[https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise)下载Windows
    10 ISO。
- en: Once installed, the analyst can download any tools or scripts to the virtual
    machine. This can be time-consuming, depending on the number of tools an analyst
    wants to include. Another option is to leverage preconfigured toolkits such as
    REToolKit, which is available at [https://github.com/mentebinaria/retoolkit](https://github.com/mentebinaria/retoolkit).
    This installer downloads a variety of tools for static and dynamic malware analysis.
    Another option is to use the **Mandiant FLARE v 2.0**. FLARE utilizes a PowerShell
    script to download and configure a local sandbox on a variety of Windows platforms.
    The installation and usage instructions for FLARE are available at [https://github.com/mandiant/flare-vm.](https://github.com/mandiant/flare-vm.
    )
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，分析员可以将任何工具或脚本下载到虚拟机中。这可能会耗费时间，这取决于分析员希望包含的工具数量。另一个选择是利用预配置的工具包，如REToolKit，可以从[https://github.com/mentebinaria/retoolkit](https://github.com/mentebinaria/retoolkit)获取。此安装程序下载各种用于静态和动态恶意软件分析的工具。另一个选择是使用**Mandiant
    FLARE v 2.0**。FLARE利用PowerShell脚本在各种Windows平台上下载和配置本地沙盒。FLARE的安装和使用说明可在[https://github.com/mandiant/flare-vm.](https://github.com/mandiant/flare-vm.
    )找到。
- en: Immediately after completing the sandbox setup, the analyst should take a snapshot
    of the fresh install. This will allow the analyst to use a fresh install with
    every analysis, ensuring that there is no cross-contamination. It also means that
    if the analyst accidentally executes malware, they can simply revert to a fresh
    installation and try again.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成沙盒设置后，分析员应立即对全新安装进行快照。这样可以确保每次分析都使用全新安装，避免交叉污染。这还意味着，如果分析员意外执行了恶意软件，他们可以简单地回滚到全新安装状态，重新尝试。
- en: There are a few considerations concerning configuring a local malware sandbox.
    First, ensure that you remove any network connections. Depending on the hypervisor
    and how networking is configured, there is a possibility of malware propagating
    across the network if the virtual machine is sharing network connectivity with
    other systems. Additionally, there are strains of malware that can escape a virtual
    machine. You should limit your sandboxes to hosts that you can wipe if necessary.
    A third consideration is that some variants of malware can identify if they are
    being executed in a virtual machine. If the analyst is attempting to execute the
    malware in a sandbox, it may not execute properly if it is one of these “sandbox-aware”
    variants. This can often cause frustration with analysts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 配置本地恶意软件沙箱时有几个注意事项。首先，确保移除任何网络连接。根据虚拟机管理程序和网络配置的不同，如果虚拟机与其他系统共享网络连接，恶意软件有可能通过网络传播。此外，有些恶意软件可以逃脱虚拟机。你应将沙箱限制为那些必要时可以清除的主机。第三个考虑因素是，一些恶意软件变种可以识别它们是否在虚拟机中执行。如果分析人员试图在沙箱中执行这些恶意软件，并且它们是这些“沙箱感知型”变种之一，那么它们可能无法正常执行，这常常让分析人员感到沮丧。
- en: Cloud sandbox
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云沙箱
- en: An option available to analysts that should supplement their local sandboxes
    is cloud-based versions. These are usually commercial or community resources hosted
    in the cloud. The analyst can often upload a file or file hash and select the
    type of operating system; the sandbox does the rest.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 分析人员可以使用的一个选项是基于云的沙箱版本，它们通常是商业或社区资源，托管在云端。分析人员通常可以上传文件或文件哈希，并选择操作系统类型，沙箱会自动完成其余的工作。
- en: The key advantages of using this solution are time and resourcing. The analyst
    does not have to maintain a sandbox or go through the stress of trying to get
    the malware to run. Further, this solution often provides results in minutes,
    including detailed reporting on IOCs and malware behavior.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该解决方案的主要优势是节省时间和资源。分析人员无需维护沙箱或经历让恶意软件运行的压力。此外，这个解决方案通常能在几分钟内提供结果，包括关于 IOC
    和恶意软件行为的详细报告。
- en: The one key drawback to these types of solutions is that the analyst sometimes
    has no control over the data that the solution is collecting. For example, open
    source solutions such as VirusTotal make their results available to anyone. It
    is not uncommon for threat actors to monitor such sites for any signs that a target
    has uploaded a sample. If you are using a cloud sandbox, it is advisable to use
    one that does not publish the results to the larger security community.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这类解决方案的一个主要缺点是，分析人员有时无法控制解决方案收集的数据。例如，像 VirusTotal 这样的开源解决方案会将结果公开给任何人。威胁行为者监控这些网站，以便发现目标是否上传了样本，这种情况并不罕见。如果你使用的是云沙箱，建议使用不会将结果发布给更大安全社区的沙箱。
- en: With a sandbox in place, let’s go ahead and look at static malware analysis.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有了沙箱环境，接下来我们来看看静态恶意软件分析。
- en: Static analysis
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态分析
- en: Static analysis involves examining the actual malware code without executing
    it on a system. For malware researchers, the code may be obtained from systems
    that are left out to be deliberately infected, or from production systems that
    have been impacted by the malware.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析涉及检查实际的恶意软件代码，而无需在系统上执行它。对于恶意软件研究人员来说，代码可能来自故意感染的系统，或者来自受到恶意软件影响的生产系统。
- en: 'In this case, incident response analysts can obtain the code or executable
    through a combination of memory analysis and acquiring the actual executable while
    analyzing the hard drive. Static analysis often comprises several different techniques,
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，事件响应分析人员可以通过内存分析和获取硬盘分析时的实际可执行文件，结合两者来获得代码或可执行文件。静态分析通常包括几种不同的技术，具体如下：
- en: '**Fingerprinting**: One of the most basic techniques is obtaining a cryptographical
    hash of the code. These hashes can then be compared to other known hashes to determine
    if the code has been seen before.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指纹识别**：最基本的技术之一是获取代码的加密哈希值。这些哈希值可以与其他已知哈希值进行比较，以判断代码是否曾经出现过。'
- en: '**Antivirus scanning**: Antivirus vendors often do not catch every virus. For
    example, some vendors may have analyzed the code and deployed a signature for
    their product. Other vendors may not have had access to the code or deployed a
    signature. A good step is to use multiple different antivirus vendors to scan
    a file.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**杀毒扫描**：杀毒软件供应商通常无法捕捉到所有病毒。例如，有些供应商可能已经分析了代码并为其产品部署了签名，其他供应商可能没有接触到这些代码或没有部署签名。一个好的步骤是使用多个不同的杀毒软件供应商来扫描一个文件。'
- en: '**String extraction**: Malware coders will often include IP addresses, error
    messages, or other data encoded within the malware in cleartext. Finding these
    strings may allow the analysts to identify a **Command and Control** (**C2**)
    server or other data that may indicate the purpose of the malware.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串提取**：恶意软件编程者通常会在恶意软件中以明文形式包含IP地址、错误信息或其他数据。找到这些字符串可能帮助分析员识别**指挥与控制**（**C2**）服务器或其他可能表明恶意软件目的的数据。'
- en: '**File format**: With any executable, legitimate or not, there is metadata
    associated with it. Malware analysts can view the compilation time, functions,
    strings, menus, and icons of portable executable format applications.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件格式**：无论是合法的还是非法的可执行文件，都会有相关的元数据。恶意软件分析员可以查看便携式可执行文件格式应用程序的编译时间、函数、字符串、菜单和图标。'
- en: '**Packer analysis**: To bypass antivirus programs, malware coders make use
    of packers. These packers use compression or encryption so that they do not leave
    a telltale file hash. There are some tools available but, often, conducting a
    static analysis against packed malware is difficult.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包器分析**：为了绕过杀毒程序，恶意软件编程者利用打包器。这些打包器通过压缩或加密，使得它们不会留下明显的文件哈希。有一些工具可用，但通常，针对打包的恶意软件进行静态分析是困难的。'
- en: '**Disassembly**: Reversing the code by using specialized software allows malware
    analysts to view the assembly code. From here, the analyst may be able to determine
    which actions the malware is attempting to perform.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反汇编**：通过使用专门的软件反向工程代码，可以让恶意软件分析员查看汇编代码。从这里，分析员可能能够确定恶意软件试图执行的操作。'
- en: Compared to dynamic analysis, static analysis may seem a bit more laborious.
    While a lot of searching and analysis is done by hand, there are some advantages.
    First, it is safer to examine the code without having to execute it. This is especially
    true in organizations where a comprehensive sandbox solution is not in place.
    Also, it provides a more comprehensive analysis and a better understanding of
    what the malware coder’s intentions might be.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与动态分析相比，静态分析可能显得有些繁琐。尽管很多搜索和分析是手动完成的，但也有一些优势。首先，在不执行代码的情况下进行检查更加安全。尤其是在没有全面沙盒解决方案的组织中，这一点尤为重要。此外，静态分析提供了更全面的分析，并能更好地理解恶意软件编程者的意图。
- en: There are several disadvantages to static analysis as well. This technique requires
    the malware code in its entirety for the best results. Another key disadvantage
    is the time necessary to conduct the analysis. With malware becoming increasingly
    more complex, the time required for a static analysis may be longer than an organization
    can afford.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析也有一些缺点。这种技术要求恶意软件代码的完整性，以达到最佳效果。另一个关键缺点是进行分析所需的时间。随着恶意软件越来越复杂，进行静态分析所需的时间可能超过了组织能够承受的范围。
- en: This is even more of an issue during an incident where the incident response
    team may be better off with an analysis that covers most of their issues now,
    rather than having to wait for the most comprehensive analysis.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生事件时，这个问题尤为突出，事件响应团队可能更希望得到一种可以解决大部分问题的分析，而不是等最全面的分析结果。
- en: Static properties analysis
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态属性分析
- en: We will start by examining the static properties of a suspect file. In this
    case, we will be using a single tool that provides an overview of the file attributes,
    along with potential indicators. This is a straightforward way to examine using
    an open source tool. In this example, we will analyze a malware sample from the
    Malware Bazaar maintained by Abuse.ch. This sample can be found at [https://bazaar.abuse.ch/sample/6b69de892df50de9a94577fed5a2cbb099820f7ca618771a93cca4de6196d242/](https://bazaar.abuse.ch/sample/6b69de892df50de9a94577fed5a2cbb099820f7ca618771a93cca4de6196d242/).
    Once you have downloaded the sample, you will need to uncompress the file using
    the `infected` password.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Safe malware handling
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: The standard practice when handling malware samples is to compress the file
    with a utility such as 7-Zip and use the password that’s been infected. This accomplishes
    two things. First, it reduces the chance that an analyst will accidentally detonate
    the malware in a production environment when moving or copying the malware. Second,
    if the analyst has not disabled their malware protections on the sandbox, this
    technique keeps the malware from being quarantined or removed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a sample of live malware, let’s go ahead and look at the specific
    properties we can find using PEStudio.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: PEStudio
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we are going to use the free tool PEStudio (available at [https://www.winitor.com/download](https://www.winitor.com/download)).
    This tool quickly extracts artifacts from files for analysis. Once downloaded,
    the tool opens the following window. Suspected malware files can be either simply
    dragged and dropped onto the window, as seen in *Figure 16**.2*, or you can add
    them using the folder icon at the top left of the window:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – PEStudio’s malware loading window ](img/B18571_16_002.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Figure 16.2 – PEStudio’s malware loading window
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and uncompress the suspect file and drop it into the window. Immediately,
    the results of the analysis will start to populate, as shown in *Figure 16**.3*.
    In this case, we can see the file hash, along with other metadata that indicates
    the file is an executable, as seen in the **first-byte-text** entry – that is,
    **MZ**:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – PEStudio metadata view ](img/B18571_16_003.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Figure 16.3 – PEStudio metadata view
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **indicators** section, there are 46 separate file indicators.
    Of these, there are several that are highly suspect. The **The file references
    a URL pattern** entry, as seen in *Figure 16**.4*, is especially useful as it
    indicates the malware coder inserted a malicious URL, [http://nsis.sf.net/NSIS_Error](http://nsis.sf.net/NSIS_Error),
    that either establishes Command and Control or downloads a second stage:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4 – PEStudio indicators view ](img/B18571_16_004.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: Figure 16.4 – PEStudio indicators view
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'PEStudio can also extract strings from the malware. This is useful for reconstructing
    some of the malware’s behavior. For example, in *Figure 16**.5*, we can see that
    the string at file offset **0x00007066** has a value of **RegCloseKey**, which
    indicates that the malware most likely makes changes to the system registry settings.
    In addition, the strings are one of the best places to look for specific IOCs.
    In this case, we can see the C2 domain – that is, [http://nsis.sf.net/](http://nsis.sf.net/):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – PEStudio strings ](img/B18571_16_005.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Figure 16.5 – PEStudio strings
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: PEStudio allows incident responders to get a 10,000-foot overview of suspected
    malware. Additionally, they may be able to determine if there are specific IOCs
    that can be extracted. As we saw, we were able to identify at least the domain
    that this malware used, along with specific behaviors such as the registry modifications.
    The major disadvantage of relying solely on this approach is that there is still
    a great deal about this malware that we do not know. Specifics on techniques such
    as obfuscation and persistence, along with additional actions, are still unknown.
    To get a sense of those, we will need to perform a much more comprehensive analysis.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic analysis
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In static analysis, the focus is on examining the potential malware in a controlled
    environment. The focus is on examining the actual code or looking for specific
    file attributes that could be compared to other sources. In dynamic analysis,
    the focus is on allowing the potential malware to execute within a controlled
    environment, and observing the behaviors that the program exhibits.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: There are several advantages that dynamic analysis affords malware researchers
    and incident responders. First, allowing the code to execute fully will remove
    barriers such as encryption, or other obfuscation techniques that are utilized
    by malware coders. Second, several automated tools can be leveraged for dynamic
    analysis. This removes the manual process, which can be very labor-intensive as
    malware continues to increase in complexity. Finally, dynamic analysis is often
    much faster, as a researcher can monitor how a piece of potential malware works
    on a system in real time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two broad categories of dynamic malware analysis that can be utilized,
    as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '**Defined point analysis**: In this method, a test OS such as Windows 7 is
    configured in a live production state. Analysts make a recording of various registry
    key settings, processes, and network connections. Once these are recorded, the
    suspected malware is executed on the system. Once the analysts are confident that
    the malware has been executed completely, they will then compare two points of
    the system, such as comparing the running processes or identifying changes. This
    type of analysis can make use of some of the forensic techniques addressed in
    previous chapters. For example, analysts can take a freshly installed OS and perform
    a memory capture. This memory capture, and a subsequent one that is taken from
    the infected machine, gives the analysts a point of comparison to identify specific
    behaviors of the malware.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime behavior analysis**: In this method, analysts utilize tools such
    as Process Explorer and other utilities to observe the behavior of the suspected
    malware while it is executing. Some tools automate a good deal of this process,
    to give analysts a good understanding of how the malware is executing.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process Explorer
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the key tools that allows a detailed examination of malware as it is
    executing is Process Explorer. This tool is made as part of the Windows Sysinternals
    suite of tools and provides a no-cost platform for analysts to gain a sense of
    what each process is running and their parent process, as well as examine CPU
    usage. Simply download the application from the following site: [https://technet.microsoft.com/en-us/sysinternals/process-explorer](https://technet.microsoft.com/en-us/sysinternals/process-explorer).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the contents, and then double-click the version of Process Explorer
    (32-bit or 64-bit version) that is applicable. The following window will appear:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – Process Explorer ](img/B18571_16_006.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Figure 16.6 – Process Explorer
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen, there are several key pieces of information available to the
    analyst. The major advantage of this tool is its visual representation. As opposed
    to attempting to utilize either native Windows tools or other memory analysis
    tools after capture, analysts can quickly see if any processes look suspicious.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Analysts can send a process and its associated data to [https://www.virustotal.com/gui/home/upload](https://www.virustotal.com/gui/home/upload).
    If a suspicious process is identified, Process Explorer will send the information
    off to the site for analysis and comparison. If a process is identified, click
    on it in the window. Navigate to **Process**, and then check VirusTotal. The results
    will be indicated by a number out of 72, as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – PCHealthCheck.exe VirusTotal check ](img/B18571_16_007.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Figure 16.7 – PCHealthCheck.exe VirusTotal check
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Another key feature that Process Explorer can provide is the ability to dump
    the process contents in much the same way that Volatility can. The major difference
    is that the analyst can conduct the dump without having to acquire a memory image.
    To dump the memory, click on the process, navigate to **Process**, and then click
    **Create Dump**. The analyst has the option to choose from a minidump or a full
    dump. As a standard practice, it is advisable to capture a full dump. This dump
    can then be saved to a directory of choice.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Process Spawn Control
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One technique that can be leveraged in examining malware is to create a virtual
    machine with the appropriate Windows OS. It is best to start with a bare-bones
    OS, with the Microsoft Office suite installed. Other third-party programs can
    be installed later if it appears that the malicious code leverages a vulnerability
    in those applications. A tool that is useful in this type of examination is Process
    Spawn Control. This PowerShell script, available at [https://github.com/felixweyne/ProcessSpawnControl](https://github.com/felixweyne/ProcessSpawnControl),
    allows responders to control the execution of malware and observe what actions
    are taken in Process Explorer. To conduct this type of analysis, take the following
    steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Start Process Explorer and let it run for a few seconds.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the PowerShell terminal, execute the `ProcessSpawnControl.ps1` script. Select
    **Run Once**, if prompted.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Process Spawn Control will pause all executables, not just potential malware.
    Once it is running, open the Windows `notepad.exe` executable. The following window
    should appear:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.8 – Process Spawn Control notepad.exe suspension ](img/B18571_16_008.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Figure 16.8 – Process Spawn Control notepad.exe suspension
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Process Explorer window, the `notepad.exe` process will appear to be
    suspended, as shown in the following screenshot:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.9 – Process Explorer notepad.exe suspended ](img/B18571_16_009.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Figure 16.9 – Process Explorer notepad.exe suspended
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `notepad.exe` process will execute, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.10 – Process Explorer notepad.exe running ](img/B18571_16_010.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: Figure 16.10 – Process Explorer notepad.exe running
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Using these tools in combination allows the responder to understand how a potential
    malware executable functions, and what execution path it may take. This data,
    combined with other artifacts obtained through memory or log file analysis, can
    provide additional context to how malware has compromised a system.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: While there are distinct advantages to dynamic analysis, incident responders
    should understand some of the concerns that need to be addressed before detonating
    suspected malware on a system. First, a controlled environment must be configured.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Suspected malware should never be executed in a production environment. Researchers
    and incident responders should ensure that any test or analysis environment is
    completely separated from the production environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Another concern is the number of resources that are required to create a proper
    environment for dynamic analysis. Malware researchers and incident responders
    make use of a sandbox environment to analyze malware. A sandbox is simply a controlled
    environment where suspect malware is executed, and the associated analysis can
    take place. For organizations that research malware, this sandbox can become quite
    large, as copies of the various OSs and their patch levels should be maintained.
    For example, for an organization to test a malware sample that impacts the Windows
    OS, they will often have to have instances of Windows XP, Windows 7, Windows 8,
    and – finally – Windows 10, along with the various patch levels. This allows them
    to zero in on the specific OSs that are impacted by the malware. In addition to
    the OSs, analysts will also need to have images of the memory.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Automated analysis
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a wide range of providers for automated sandboxes. The one caveat to
    remember when using these services, especially those that fall under **Community**
    access, is that samples that are uploaded for analysis may be made public. Adversaries
    have been known to monitor various automated sandbox platforms to see when their
    code is examined. If malware has been extracted from a system under an incident
    response engagement and then uploaded, you very well may have tipped your hand
    to the adversary. In cases where **Operational Security** (**OPSEC**) is important,
    there are commercial solutions that do not share samples.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Intezer sandbox
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To demonstrate a few of the key features of online sandboxing, we will go ahead
    and look at the Intezer Analyze sandbox located at [https://analyze.intezer.com/](https://analyze.intezer.com/),
    as shown in *Figure 16**.11*. The Community version of the service allows you
    to search file hashes, similar to what we did when looking at sites such as VirusTotal
    and Hybrid Analysis. One step that should be conducted before you begin a full
    analysis is to search the file hash that’s been extracted through a tool such
    as PEStudio to determine if a sample has already been run in the sandbox. This
    step saves time. In this case, we will work through running a sample to highlight
    the features we obtain through a full sandbox analysis:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.11 – Intezer Analyze file upload ](img/B18571_16_011.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: Figure 16.11 – Intezer Analyze file upload
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will use the same sample that we examined with PEStudio. The
    sample can be placed into the sandbox via the web browser either by dragging and
    dropping the file or browsing the host filesystem. As shown in *Figure 16**.12*,
    once the sample is dropped into the web browser, the metadata will be populated:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.12 – Intezer metadata ](img/B18571_16_012.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: Figure 16.12 – Intezer metadata
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot shows the metadata, including the hash value of the
    file. Another key piece of data that we see almost immediately with the execution
    of the file in the sandbox is that the suspect file shares strings and other attributes
    with the NSIS installer, which makes use of the Nullsoft Scriptable Install System.
    NSIS is an open source tool used for constructing Windows executables. NSIS malware
    variants use an obfuscation technique that attempts to appear as a legitimate
    installer by using non-malicious plugins, such as a bitmap image that serves as
    a background image and the non-malicious `uninst.exe` uninstaller. This type of
    Trojan malware has seen increased use as part of ransomware attacks. This is one
    of the key advantages of using a service such as this as we gain additional context
    about the file that we would not have if we had stopped at static analysis:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.13 – Intezer – Generic Summary ](img/B18571_16_013.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: Figure 16.13 – Intezer – Generic Summary
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the malware, we will see that, as shown in the following screenshot,
    the Intezer analysis returns the overall results, indicating that this file is
    associated with the Loki family of Trojan malware:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.14 – Intezer malware conviction ](img/B18571_16_014.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: Figure 16.14 – Intezer malware conviction
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the analysis in *Figure 16**.15* shows additional samples that
    have been analyzed by Intezer that utilized the NSIS installer. Reused genes shows
    the relationship between our analyzed samples and others that have been analyzed
    in the past. This is common to see with a variety of families of malware:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.15 – Reused genes ](img/B18571_16_015.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: Figure 16.15 – Reused genes
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Malware such as Loki is often sold as “commodity malware.” This allows threat
    actors to purchase the code and modify it as necessary. This means that simply
    tying back a particular piece of code to a threat actor does not mean that it
    is simply that threat actor that has access. Threat actors across the globe and
    with varying degrees of skill will use and reuse code, making attributing malware
    to a specific group.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'The code section shown in *Figure 16**.16* shows the various code instructions
    contained within the malware. These may not have immediate value in terms of threat
    intelligence but often provide a starting point for more detailed static analysis,
    which, as we indicated earlier, is a time-consuming process:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.16 – Code analysis ](img/B18571_16_016.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Figure 16.16 – Code analysis
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'The next tab shows the strings that were extracted during the analysis. *Figure
    16**.17* shows the same URL ([http://nsis.sf.net/NSIS_Error](http://nsis.sf.net/NSIS_Error))
    that we first observed when analyzing the code with PEStudio:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.17 – Strings ](img/B18571_16_017.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: Figure 16.17 – Strings
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the **Capabilities** tab, the analysis provides a full breakdown of the
    MITRE ATT&CK Tactics and Techniques that the malware utilizes. As we can see in
    the **Defense Evasion** tactic column, the malware obfuscates files or information.
    This matches what we know about the NSIS installer package that was identified
    in the metadata:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.18 – MITRE ATT&CK techniques ](img/B18571_16_018.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: Figure 16.18 – MITRE ATT&CK techniques
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the analysis provides the network and file IOCs that we can see in
    *Figure 16**.19*:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.19 – Malware IOCs ](img/B18571_16_019.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: Figure 16.19 – Malware IOCs
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to automated sandboxing, there is a wide range of providers. Other
    potential options include **Joe Sandbox**, **Hybrid Analysis**, and **App.any**.
    Antivirus providers will often include a sandboxing feature that provides similar
    functionality that we explored here. Again, ensure you are fully aware of whether
    the sandboxing solution makes your uploaded samples available for general use.
    One technique that is an option where OPSEC is critical is to take the hash value
    of the file and search the sandbox solution to determine if a file with the same
    hash value has been uploaded. This will produce the same results without tipping
    your hand. In the case where there are no other organizations or individuals who
    have uploaded the same file, it is best to use a solution that does not share
    the analysis. Often, this is through commercial products that stipulate that your
    information is not shared.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: ClamAV
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in conducting a static analysis is to determine if the potential
    malware under analysis has been previously identified. A single sample’s hash
    can be uploaded to sites such as VirusTotal, but if a responder has acquired several
    files through their analysis, they will need to be able to determine if there
    are any that warrant further examination.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: One technique is to use a commercial antivirus scanner to scan the directory.
    In this case, a free, open source tool that can be leveraged is ClamAV. ClamAV
    is a command-line utility that allows responders to scan a directory with a variety
    of suspicious file formats. From here, suspicious files that are identified can
    be further analyzed by the responder.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: To set up ClamAV, download the package at [https://www.clamav.net/downloads](https://www.clamav.net/downloads).
    In this example, we will use the Windows MSI file to install ClamAV.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'The efficacy of ClamAV is largely dependent on the signatures that are included
    as part of the scanning package. Some malware variants may not have a corresponding
    signature available and, as a result, will go undetected. Understanding that,
    ClamAV is a useful way to examine a large number of potential malware files, and
    to identify those that are already known. The following installation instructions
    are for the Windows OS:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the ClamAV downloads page at [https://www.clamav.net/downloads#otherversions](https://www.clamav.net/downloads#otherversions)
    and download the Windows MSI file.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer. The default settings will place the ClamAV files in the `C:\Program`
    `Files\ClamAV` directory.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the `ClamAV` directory and run the following two commands. These
    commands will move the configuration files to the appropriate ClamAV directory:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After moving the configuration files, open each of the files with WordPad and
    delete the line that says `Example` for both configuration files:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.20 – Configuration file entry ](img/B18571_16_020.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: Figure 16.20 – Configuration file entry
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'After removing the line from both configuration files, the malware signature
    base needs to be updated. Navigate to the `ClamAV` folder and run the following
    in the command line:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will produce the following output:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.21 – FreshClam signature update ](img/B18571_16_021.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: Figure 16.21 – FreshClam signature update
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'ClamAV can function as a traditional antivirus program but in this case, we
    will look at using it to scan a directory of suspected files. In this example,
    files from [Malware-traffic-Analysis.net](http://Malware-traffic-Analysis.net)
    were used. You can download the samples from [https://www.malware-traffic-analysis.net/2021/10/13/2021-10-13-Dridex-malware-and-artifacts.zip](https://www.malware-traffic-analysis.net/2021/10/13/2021-10-13-Dridex-malware-and-artifacts.zip).
    Download and uncompress the files. Simply point `clamscan.exe` at the directory
    that contains suspect malware and run `clamscan.exe`. For example, the following
    command runs Clamscan against a directory called `Suspected Malware`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will load the signature files and then compare the files and produce
    the following results:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.22 – Clamscan output ](img/B18571_16_022.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 16.22 – Clamscan output
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: In this case, there was a file that matches the signature, `Xls.Downloader.SquirrelWaffle1021-9903731-0`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: The efficacy of ClamAV is largely dependent on the signatures that are included
    as part of the scanning package. Some malware variants may not have a corresponding
    signature available and, as a result, will go undetected. Understanding that,
    ClamAV is a useful way to examine many potential malware files, and to identify
    those that are already known. A good technique to combat the issue of missing
    signatures is to leverage several different malware prevention vendors against
    the same sample. This increases the probability that any suspect files have been
    identified.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: YARA
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One tool that has made its way from the malware analysis community into threat
    intelligence is YARA. This open source tool is often compared to the Linux `GREP`
    command for its ability to parse through large amounts of data and indicate if
    there are matching strings or data patterns. What the acronym YARA stands for
    is the subject of friendly debate with some going with **YARA: Another Recursive
    Acronym** or the author’s preferred **Yet Another Ridiculous Acronym**. Nomenclature
    aside, the YARA tool’s ability to act as a Swiss Army knife for incident responders
    and malware research also has functionality that analysts can leverage.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: The YARA tool is maintained by VirusTotal and comes in two components. The first
    of these is a scanning tool. This tool, written in Python, is the engine that
    scans files such as memory dumps, disk images, or suspected malicious executables
    for matching indicators. Due to the tool being open source, along with its capabilities,
    third-party tools make use of the YARA rule structure. Florian Roth’s Nextron
    Systems’ Loki scanning tool incorporates YARA into its scanning software. The
    digital forensics memory analysis tool Volatility is also able to leverage YARA
    rules when analyzing memory captures.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: YARA documentation
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Complete documentation on YARA is available at [https://yara.readthedocs.io/en/stable/index.html](https://yara.readthedocs.io/en/stable/index.html).
    This resource contains directions on installing the YARA scanning engine on Linux,
    Windows, and macOS, along with detailed directions on the entire toolset.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'The second component of YARA is rules. These rules are similar to other pattern-matching
    schemas such as the SNORT Intrusion Detection System rules. The scanning engine
    compares the analysis of the file against a set of rules that contain the IOCs.
    Given the utilities of YARA, malware analysis providers will often include YARA
    rules as part of their published analysis such as the following YARA rule, which
    was taken from the Cyber Security and Infrastructure Security Agency available
    at [https://www.cisa.gov/uscert/ncas/analysis-reports/ar22-115b](https://www.cisa.gov/uscert/ncas/analysis-reports/ar22-115b).
    It is related to the `ISAACWIPER` malware variant:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There are four components to the preceding YARA rule. Let’s go ahead and look
    at each portion in detail. The first component is the `rule CISA_10376640_01 :
    trojan` `wiper ISAACWIPER`.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: This identifies the YARA rule and should be meaningful to the author. A good
    rule to follow is to use the name of the malware variant, just like the preceding
    rule does.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: The second component is the rule’s metadata. In the case of the preceding rule,
    this is identified with the `meta:` line. The metadata can include fields that
    are descriptive of the rule. As in the preceding rule, this includes the author,
    the incident number, the date, and the various hash values associated with the
    malware. YARA rules allow for a great degree of flexibility in the metadata portion.
    Any information that may be helpful can be included.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the meat of the YARA rule and that is its **strings**. Strings are
    often obtained through analysis such as the use of PEStudio, as we saw in the
    previous example. These strings can be hexadecimal, text strings, or regular expressions.
    The text strings can be used with the following modifiers:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '`nocase`: This indicates that the strings should not be case-sensitive. This
    provides the rule author with a bit more leeway when it comes to the text strings
    found within the malware. For example, if the author wanted to include all variations
    of the word “malware,” the line within the YARA rule would look similar to `$string1
    = "``malware" nocase`.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wide`: Malware binaries often use strings encoded with two bytes per character.
    The wide modifier searches for strings encoded in this way. Pivoting from the
    previous example, the modifier can be added to the string: `$string1 = "malware"`
    `nocase wide`.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fullword`: The `fullword` modifier should be used if the author only wishes
    to match a string that is delimited by non-alphanumeric characters – for example,
    in the previous example, if the rule author wanted to match on strings such as
    *malware* only and not *antimalware* or *malwared*.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xor`: This modifier looks for strings that have been encrypted with an XOR
    function. This is handy to keep in mind when looking through code associated with
    known Command and Control frameworks such as Cobalt Strike. In [*Chapter 16*](B18571_16.xhtml#_idTextAnchor284),
    we will look at common ransomware attacks that use tools that make use of XOR
    functions to bypass detection controls.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base64**: Another common tactic among threat actors is to utilize scripts
    encoded with Base64 encoding. This modifier identifies encoded strings within
    the malware file.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the sample YARA rule, the strings are made up of several hexadecimal strings,
    such as `$s1 = { 6C 00 6F 00 67 00 69 00 63 00 61 00` `6C }`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: The final part of the YARA rule is its **conditions**. These set the parameters
    to identify if the sample matches the YARA rule. These are Boolean expressions
    that computer programmers are already familiar with. YARA can understand both
    the typical Boolean operators as well as the relational, arithmetic, and bitwise
    operators as well.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: YARA is a flexible tool that can be used to identify the presence of malware
    or exploits in a variety of file locations. Additionally, YARA is an open source
    project with a wide range of contributors from commercial antivirus coders to
    independent researchers that make rules available to the community. In the next
    chapter, we will look at how these rules can be applied to an incident investigation.
    Before we conclude, though, we will look at a simple tool that can aid an analyst
    in crafting their own rules.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: YarGen
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Incident response and malware analysts will often have to create rules for a
    large number of malware samples. Depending on the complexity of the malware and
    the quantity of malware, this can often be a time-consuming process. To help with
    the creation of YARA rules, Florian Roth has developed a Python-based tool called
    **YarGen** that automates the creation of YARA rules.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'YarGen can be downloaded from GitHub at [https://github.com/Neo23x0/yarGen](https://github.com/Neo23x0/yarGen)
    and installed on any system that can execute Python scripts. Once installed, the
    script can be run against a directory of malware samples. In this case, we will
    run the script against the malware sample we examined previously. In this case,
    the following command will run the script against the sample:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Figure 16**.23* indicates the script is being run:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.23 – YarGen YARA rule generator ](img/B18571_16_023.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Figure 16.23 – YarGen YARA rule generator
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'The command products the following YARA rule. It is important to note that
    the rules should be reviewed and modified as needed as the tool does not perfectly
    match the strings and other data. Therefore, analysts should put the outputted
    rule through some cleanup and post-processing to ensure that the rule does not
    contain any unnecessary strings or conditions that increase the rate of false
    positives:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In looking over the rule, we can see a few key strings that stand out. First
    is that the NSIS loader is identified in `$x2 = "<assemblyIdentity version=\"1.0.0.0\"
    processorArchitecture=\"X86\" name=\"Nullsoft.NSIS.exehead\" type=\"win32\"/><description>"
    ascii`. We also can see various ASCII strings that have been extracted in `$s10-$s20`.
    This rule also makes use of the file size condition. This condition ensures that
    the file size matches, reducing false positives. The one key string that is missing
    is the URL that was identified earlier in our examination of the file with PEStudio.
    This can easily be incorporated as an additional string as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With just a short amount of post-processing, this rule can be applied to other
    systems, disk or memory images, or other files to determine if the malware is
    present. YARA has become an often leveraged tool with regards to identifying the
    presence of malware or exploits on a system and should be included in an analyst’s
    toolset when they’re working with malware.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter addressed the various elements of malware analysis for an incident
    responder. First, having an understanding of malware, in general, is necessary,
    as it is by far the most prevalent threat available to adversaries. Second, the
    techniques of malware analysis – static and dynamic – provide responders with
    tools and techniques to extract key data points. Finally, the use of sandboxing
    systems allows responders to gain insight into malware behavior and attributes
    quickly, and in a controlled manner.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: In many ways, this chapter has merely scratched the surface concerning malware
    analysis. It should become apparent that, even with tools for static and dynamic
    analysis, incident response analysts still have a great deal of skill-building
    ahead of them if they want to master this highly specialized subset of digital
    forensics. Although it may be difficult, it is important to have at least a functional
    knowledge of this type of analysis as cybercriminals and nation states continue
    to utilize more sophisticated malware. This chapter delved into malware analysis
    by examining the types of malware currently being seen. An overview of the two
    primary methods of analysis – static and dynamic – gave some context regarding
    the tools available. The tools we discussed allow an analyst to identify behaviors
    in malware that can be used to identify them. Finally, executing malware can provide
    further details.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will tie the use of threat intelligence into malware analysis,
    to allow analysts to tie their observations to what is happening to other organizations.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is not a type of malware?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trojan
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Keylogger
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rootkit
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Webshell
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Responders should create a controlled environment in which to conduct malware
    analysis.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is a type of static analysis?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Runtime behavior
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: String extraction
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory addressing
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Malware coding
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is a type of dynamic analysis?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disassembly
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Defined point
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Packer analysis
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Artifact extraction
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following for more information about the topics covered in this
    chapter:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'A source for `.pcap` files and malware samples: [https://www.malware-traffic-analysis.net/index.html](https://www.malware-traffic-analysis.net/index.html)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Malware Unicorn: [https://malwareunicorn.org/#/](https://malwareunicorn.org/#/)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MalwareJake: [http://malwarejake.blogspot.com/](http://malwarejake.blogspot.com/)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Florian Roth’s GitHub account: [https://github.com/Neo23x0/](https://github.com/Neo23x0/)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
