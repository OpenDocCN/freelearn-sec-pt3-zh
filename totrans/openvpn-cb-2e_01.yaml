- en: Chapter 1.  Point-to-Point Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The shortest setup possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVPN secret keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple secret keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plaintext tunnel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files versus the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP-less configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete site-to-site setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three-way routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IPv6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter will provide an introduction to configuring OpenVPN.
    They are based on a point-to-point type of network, meaning that only a single
    client can connect at a given time.
  prefs: []
  type: TYPE_NORMAL
- en: A point-to-point network is very useful when connecting to a small number of
    sites or clients. It is easier to set up, as no certificates or **public key infrastructure**
    (**PKI**) is required. Also, routing is slightly easier to configure as no client-specific
    configuration files containing `--iroute` statements are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The drawbacks of a point-to-point network are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The lack of having perfect forward secrecy-a key compromise may result in a
    total disclosure of previous sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The secret key must exist in plaintext form on each VPN peer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shortest setup possible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will explain the shortest setup possible when using OpenVPN. For
    this setup, you require two computers that are connected over a network (LAN or
    Internet). We will use both a TUN-style network and a TAP-style network and will
    focus on the differences between them. A TUN device is used mostly for VPN tunnels
    where only IP traffic is used. A TAP device allows all the Ethernet frames to
    be passed over the OpenVPN tunnel, hence providing support for non-IP based protocols,
    such as IPX and AppleTalk.
  prefs: []
  type: TYPE_NORMAL
- en: While this may seem useless at first glance, it can be very useful to quickly
    test whether OpenVPN can connect to a remote system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Windows 7 Pro 64bit and OpenVPN
    2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps that you need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the server-side (listening) OpenVPN process for the TUN-style network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding command should be entered as a single line. The character `\`
    is used to denote the fact that the command continues on the next line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, launch the client-side OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows how a connection is established:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00329.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As soon as the connection is established, we can ping the other end of the tunnel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, stop the tunnel by pressing the ***F4*** function key in the command window
    and restart both ends of the tunnel using the TAP device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the server-side (listening) OpenVPN process for the TAP-style network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then launch the client-side OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The connection will now be established and we can again ping the other end of
    the tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server listens on UDP port `1194`, which is the OpenVPN default port for
    incoming connections. The client connects to the server on this port. After the
    initial handshake, the server configures the first available TUN device with the
    IP address `10.200.0.1` and it expects the remote end (the Peer address) to be `10.200.0.2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The client does the opposite: after the initial handshake, the first TUN or
    TAP-Win32 device is configured with the IP address `10.200.0.2`. It expects the
    remote end (the Peer address) to be `10.200.0.1`. After this, the VPN is established.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice the warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '********* WARNING *******: all encryption and authentication features disabled
    -- all data will be tunnelled as cleartext**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the data is not secure: all of the data that is sent over the VPN tunnel
    can be read!'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at a couple of different scenarios and check whether they would modify
    the process.
  prefs: []
  type: TYPE_NORMAL
- en: Using the TCP protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous example, we chose the UDP protocol. It would not have made
    any difference if we had chosen the TCP protocol, provided that we had done that
    on the server side (the side without `--remote`) as well as the client side. The
    following is the code for doing this on the server side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the code for the client side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Forwarding non-IP traffic over the tunnel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the TAP-style interface, it is possible to run non-IP traffic over the
    tunnel. For example, if AppleTalk is configured correctly on both sides, we can
    query a remote host using the `aecho` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A `tcpdump -nnel -i tap0` command shows that the type of traffic is indeed non-IP-based
    AppleTalk.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN secret keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses OpenVPN secret keys to secure the VPN tunnel. It is very similar
    to the previous recipe, but this time, we will use a shared secret key to encrypt
    the traffic between the client and the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Windows 7 64 bit and OpenVPN
    2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, generate a secret key on the server (listener):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transfer this key to the client side over a secure channel (for example, using `scp`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, launch the server-side (listening) OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, launch the client-side OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The connection is now established, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This example works exactly as the first one: the server listens to the incoming
    connections on UDP port `1194`. The client connects to the server on this port.
    After the initial handshake, the server configures the first available TUN device
    with the IP address `10.200.0.1` and it expects the remote end (Peer address)
    to be `10.200.0.2`. The client does the opposite.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, OpenVPN uses two symmetric keys when setting up a point-to-point
    connection:'
  prefs: []
  type: TYPE_NORMAL
- en: A cipher key to encrypt the contents of the packets being exchanged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HMAC key to sign packets. When packets arrive that are not signed using the
    appropriate HMAC key, they are dropped immediately. This is the first line of
    defense against a "denial-of-service" attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same set of keys are used on both ends and both keys are derived from the
    file specified using the `--secret` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An OpenVPN secret key file is formatted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: From the random bytes, the OpenVPN Cipher and HMAC keys are derived. Note that
    these keys are the same for each session.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe, *Multiple secret keys*, will explain the format of secret keys
    in detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple secret keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As stated in the previous recipe, OpenVPN uses two symmetric keys when setting
    up a point-to-point connection. However, it is also possible to use shared yet
    asymmetric keys in point-to-point mode. OpenVPN will use four keys in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: A cipher key on the client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HMAC key on the client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cipher key on the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HMAC key on the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same keying material is shared by both sides of the point-to-point connection,
    but the keys that are derived for encrypting and signing the data are different
    for each side. This recipe explains how to set up OpenVPN in this manner and how
    the keys can be made visible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we use the `secret.key` file from the previous recipe. Install
    OpenVPN 2.3.9 or higher on two computers. Make sure the computers are connected
    over a network. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.9 and the client was running Windows 7 64 bit and OpenVPN 2.3.10\.
    We'll use the `secret.key` file from the *OpenVPN secret keys* recipe here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Launch the server-side (listening) OpenVPN process with an extra option to
    the `--secret` parameter and with more verbose logging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then launch the client-side OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The connection will be established with a lot of debugging messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look through the server-side messages (searching for `crypt`), we can
    find the negotiated keys on the server side. Note that the output has been reformatted
    for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, we will find the same keys but the "Encrypt" and "Decrypt"
    keys would have been reversed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the keys carefully, you will see that each one of them is mirrored
    on the client and the server side.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenVPN derives all the keys from the `static.key` file, provided there is
    enough entropy (randomness) in the file to reliably generate four keys. All the
    keys generated using the following will have enough entropy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: An OpenVPN static key file is 2,048 bits in size. The cipher keys are each 128
    bits, whereas the HMAC keys are 160 bits each, for a total of 776 bits. This allows
    OpenVPN to easily generate four random keys from the static key file, even if
    a cipher is chosen that requires a larger initialization key.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same secret key files are used in a client/server setup when the `tls-auth
    ta.key` parameter is used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up the public and private keys* recipe from [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*,
    in which the `tls-auth` key is generated in a very similar manner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plaintext tunnel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the very first recipe, we created a tunnel in which the data traffic was
    not encrypted. To create a completely plain text tunnel, we also disable the HMAC
    authentication. This can be useful when debugging a bad connection, as all traffic
    over the tunnel can now easily be monitored. In this recipe, we will look at how
    to do this. This type of tunnel is also useful when doing performance measurements,
    as it is the least CPU-intensive tunnel that can be established.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 22 Linux and OpenVPN
    2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: As we are not using any encryption, no secret keys are needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Launch the server-side (listening) OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then launch the client-side OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The connection will be established with the following two warning messages
    as the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this setup, absolutely no encryption is performed. All of the traffic that
    is sent over the tunnel is encapsulated in an OpenVPN packet and then sent as
    is.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To actually view the traffic, we can use `tcpdump`; follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the connection as outlined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start `tcpdump` and listen on the network interface, not the tunnel interface
    itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, send some text across the tunnel, using something like `nc` (Netcat).
    First, launch `nc` on the server side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the client side, launch the `nc` command in client mode and type `hello`
    and `goodbye`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `tcpdump` window, you should now see the following:![There's more...](img/image00331.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *C* to terminate `tcpdump` as well as `nc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The point-to-point type of networks are great if you want to connect two networks
    together over a static, encrypted tunnel. If you only have a small number of endpoints
    (fewer than four), then routing is far easier than using a client/server setup
    as described in [Chapter 2](part0025.xhtml#aid-NQU21 "Chapter 2.  Client-server
    IP-only Networks"), *Client-server IP-only Networks*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Windows 7 64 bit and OpenVPN
    2.3.10\. We'll use the `secret.key` file from the *OpenVPN secret keys* recipe
    here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, establish the connection, but also make sure OpenVPN has daemonized
    itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, launch the client-side OpenVPN process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The connection is established:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we add routing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, we add a static route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the client side, we need to do two things:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that you have the IP traffic forwarding enabled. On Linux, this can
    be achieved using the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this setting does not survive a reboot of the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the Windows client on the client-side LAN, make sure there is a route back
    to the OpenVPN server:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, `192.168.4.5` is the LAN IP address of the OpenVPN client.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'From the server, we can now ping machines on the client LAN. First, ping the
    LAN IP of the OpenVPN client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, ping the LAN IP of a machine on the OpenVPN client LAN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our network setup, the LAN we want to reach is behind the OpenVPN client,
    so we have to add a route to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, we need to do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the routing is enabled. If you want routing to remain enabled
    after a reboot, edit the `/etc/sysctl.cnf` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to make sure that there is a route back to the OpenVPN server
    on the client LAN. This can be done by adding a route to the LAN gateway or by
    adding a static route to each of the machines on the client LAN. In this recipe,
    we added a route to a Windows client that is in the same LAN as the OpenVPN client:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `192.168.4.5` is the LAN IP address of the OpenVPN client.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's discuss a bit about routing issues and how to automate the setup.
  prefs: []
  type: TYPE_NORMAL
- en: Routing issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the OpenVPN users mailing list, a large number of the problems that are reported
    have something to do with routing issues. Most of them have little to do with
    OpenVPN itself, but more with understanding the routing and the flow of packets
    over the network. [Chapter 7](part0082.xhtml#aid-2E6E41 "Chapter 7. Troubleshooting
    OpenVPN - Routing"), *Troubleshooting OpenVPN - Routing*, provides some recipes
    to diagnose and fix the most common routing problems.
  prefs: []
  type: TYPE_NORMAL
- en: Automating the setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is also possible to add the appropriate routes when the tunnel first comes
    up. This can be done using the `--route` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note that on the client LAN, the route back to the server still has to be set
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Three-way routing* recipe, later on in this chapter, where a more complicated
    setup using three remote sites is explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](part0082.xhtml#aid-2E6E41 "Chapter 7. Troubleshooting OpenVPN -
    Routing"), *Troubleshooting OpenVPN - Routing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files versus the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most recipes in this book can be carried out without using configuration files.
    However, in most real-life cases, a configuration file is much easier to use than
    a lengthy command line. It is important to know that OpenVPN actually treats configuration
    file entries and command-line parameters identically. The only difference is that
    all command-line parameters start with a double dash (`--`) whereas the configuration
    file entries do not. This makes it very easy to overrule the configuration file
    entries using an extra command-line parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Windows 7 64 bit and OpenVPN
    2.3.10\. In this recipe, we'll use the `secret.key` file from the *OpenVPN secret
    keys* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a configuration file based on an earlier recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this file as `example1-6-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the server-side (listening) OpenVPN process on a non-standard port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then launch the client-side OpenVPN process and add an extra command-line parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The connection is established:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command line and the configuration file are read and parsed from left to
    right and top to bottom. This means that most options that are specified before
    the configuration file can be overruled by the entries in that file. Similarly,
    the options specified after the following directive overrule the entries in that
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence, the following option overruled the line "`port 1194`" from the configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: However, some options can be specified multiple times, in which case, the first
    occurrence "wins." In such a case, it is also possible to specify the option before
    specifying the `--config` directive.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is another example that shows the importance of the ordering of the command-line
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the exact same connection log as shown before. The `verb 3` command
    from the `client.conf` configuration file overruled `--verb 0`, as specified on
    the command line. However, refer to the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Using this command line, the connection log will remain entirely empty, yet
    the VPN connection will be in functioning mode.
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions to the rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the newer features of OpenVPN deviate slightly from this principle,
    most notably the `<connection>` blocks and the inline certificates. Some people
    prefer to write the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'They prefer this instead of the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The downside of this notation is that this is translated as a connection block
    by OpenVPN. For connection blocks, it is not possible to overrule the port using
    `--port 11000`.
  prefs: []
  type: TYPE_NORMAL
- en: Complete site-to-site setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we set up a complete site-to-site network, using most of the
    built-in security features that OpenVPN offers. It is intended as a "one-stop-shop"
    example of how to set up a point-to-point network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 22 Linux and OpenVPN
    2.3.10\. We'll use the `secret.key` file from the *OpenVPN secret keys* recipe
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure routing (IP forwarding) is configured on both the server and client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example1-7-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the client side, create the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example1-7-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then start the tunnel on both ends. The following is for the server end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s the code for the client end:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now our site-to-site tunnel is established.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the log files on both the client and server to verify that the connection
    has been established.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the connection comes up, the machines on the LANs behind both the end
    points can be reached over the OpenVPN tunnel. For example, when we ping a machine
    on the client-side LAN from the server, we will see the following:![How to do
    it...](img/image00334.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The client and server configuration files are very similar:'
  prefs: []
  type: TYPE_NORMAL
- en: The server listens only on one interface and one UDP port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server accepts connections only from a single IP address and port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client has these options mirrored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the set of configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'These options are used to make the connection more robust and secure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVPN process runs as user `nobody` and group `nobody` after the initial
    connection is established. Even if somebody is able to take control of the OpenVPN
    process itself, he or she would still only be `nobody` and not `root`. Note that
    on some Linux distributions, `nogroup` is used instead.
  prefs: []
  type: TYPE_NORMAL
- en: The `persist-tun` and `persist-key` options are used to ensure that the connection
    comes back automatically if the underlying network is disrupted. These options
    are necessary when using `user nobody` and `group nobody` (or `group nogroup`).
  prefs: []
  type: TYPE_NORMAL
- en: The `keepalive` and `ping-timer-rem` options cause OpenVPN to send a periodic
    "ping" message over the tunnel to ensure that both ends of the tunnel remain up
    and running.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This point-to-point setup can also be used to evade restrictive firewalls. The
    data stream between the two endpoints is not recognizable and very hard to decipher.
    When OpenVPN is run in client/server (see [Chapter 2](part0025.xhtml#aid-NQU21
    "Chapter 2.  Client-server IP-only Networks"), *Client-server IP-only Networks*),
    the traffic is recognizable as OpenVPN traffic due to the initial TLS handshake.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last recipe in this chapter, *Using IPv6*, which builds upon this recipe
    by adding support for IPv6 traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](part0082.xhtml#aid-2E6E41 "Chapter 7. Troubleshooting OpenVPN -
    Routing"), *Troubleshooting OpenVPN - Routing*, in which the most common routing
    issues are explained'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three-way routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a small number (less than four) of fixed endpoints, a point-to-point setup
    is very flexible. In this recipe, we set up three OpenVPN tunnels between three
    sites, including routing between the endpoints. By setting up three tunnels, we
    create redundant routing so that all the sites are connected even if one of the
    tunnels is disrupted.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 22 Linux and OpenVPN
    2.3.10.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00335.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure that the routing (IP forwarding) is configured on all the OpenVPN
    endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We generate three static keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Transfer these keys to all the endpoints over a secure channel (for example,
    using `scp`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the server (listener) configuration file named `example1-8-serverBtoA.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create an `example1-8-serverCtoA.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, create an `example1-8-serverBtoC.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the client (connector) configuration files, `example1-8-clientAtoB.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, create an `example1-8-clientAtoC.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, create `example1-8-clientCtoB.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, we start all the listener tunnels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'These are followed by the connector tunnels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: And with that, our three-way site-to-site network is established.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be clearly seen that the number of configuration files gets out of hand
    too quickly. In principle, two tunnels would have been sufficient to connect three
    remote sites, but then there would have been no redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the third tunnel and with the configuration options, there are always
    two routes available for each remote network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, site A has two routes to site B (LAN `192.168.5.0`/`24`), as seen
    from the following routing table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the two routes to site A:'
  prefs: []
  type: TYPE_NORMAL
- en: Via the "direct" tunnel to site B; this route has the lowest metric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Via an indirect tunnel: first to site C and then to site B; this route has
    a higher metric and is not chosen until the first route is down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This setup has the advantage that if one tunnel fails, then after 60 seconds,
    the connection and its corresponding routes are dropped and restarted. The backup
    route to the other network then automatically takes over and all three sites can
    reach each other again.
  prefs: []
  type: TYPE_NORMAL
- en: When the direct tunnel is restored, the direct routes are also restored and
    the network traffic will automatically choose the best path to the remote site.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's discuss a bit about scalability and routing protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we connect three remote sites. This results in six different
    configuration files that provide the limitations of the point-to-point setup.
    In general, to connect *n* number of possible sites with full redundancy, you
    will have *n * ( n - 1 )* configuration files. This is manageable for up to four
    sites, but after that, a server/multiple-client setup, as described in the next
    chapters, is much easier.
  prefs: []
  type: TYPE_NORMAL
- en: Routing protocols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To increase the availability of the networks, it is better to run a routing
    protocol, such as RIPv2 or OSPF. Using a routing protocol, the failing routes
    are discovered much faster, resulting in less network downtime.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 7](part0082.xhtml#aid-2E6E41 "Chapter 7. Troubleshooting OpenVPN -
    Routing"), *Troubleshooting OpenVPN - Routing*, in which the most common routing
    issues are explained'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IPv6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we extend the complete site-to-site network recipe to include
    support for IPv6.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 22 Linux and OpenVPN
    2.3.10\. We'll use the `secret.key` file from the *OpenVPN secret keys* recipe
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following network layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the server configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example1-9-server.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the client side, create the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `example1-9-client.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then start the tunnel on both ends The following is for the server end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the code for the client end:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now our site-to-site tunnel is established.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the connection comes up, the machines on the LANs behind both end points
    can be reached over the OpenVPN tunnel. Notice that the client OpenVPN session
    is running in the foreground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, ping the IPv6 address of the server endpoint to verify that IPv6 traffic
    over the tunnel is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, abort the client-side session by pressing *Ctrl* + *C*. The following
    screenshot lists the full client-side log:![How to do it...](img/image00337.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both client and server configuration files are very similar to the ones from
    the *Complete site-to-site setup* recipe, with the addition of the following two
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This enables IPv6 support, next to the default IPv4 support.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in the client configuration, the options `daemon` and `log-append` are
    not present, hence all of the OpenVPN output is sent to the screen and the process
    continues running in the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's talk a bit about log file errors and the IPv6-only tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Log file errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we take a closer look at the client-side connection output, we will see
    a few error messages after pressing ***Ctrl*** +  ***C*** , most notably the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a side-effect when you use the `user nobody` option to protect an OpenVPN
    setup, and it often confuses new users. What happens is this:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN starts as `root`, opens the appropriate `tun` device, and sets the right
    IPv4 and IPv6 addresses on this `tun` interface.
  prefs: []
  type: TYPE_NORMAL
- en: For extra security, OpenVPN then switches to `nobody`, dropping all the privileges
    associated with `root`.
  prefs: []
  type: TYPE_NORMAL
- en: When OpenVPN terminates (in our case, by pressing  ***Ctrl*** +  ***C*** ),
    it closes the access to the `tun` device and tries to remove the IPv4 and IPv6
    addresses assigned to that device. At this point, the error messages appear, as `nobody`
    is not allowed to perform these operations.
  prefs: []
  type: TYPE_NORMAL
- en: Upon termination of the OpenVPN process, the Linux kernel closes the `tun` device
    and all the configuration settings are removed.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, these error messages are harmless, but in general, one should
    pay close attention to the warning and error messages that are printed by OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6-only tunnel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With OpenVPN 2.3, the IPv6-only tunnel is required to always enable IPv4 support.
    From OpenVPN 2.4 on, it is possible to set up an IPv6-only connection.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Complete site-to-site setup*, earlier in this chapter, in which
    an IPv4-only site-to-site setup is explained in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe of [Chapter 6](part0071.xhtml#aid-23MNU1 "Chapter 6. Troubleshooting
    OpenVPN - Configurations"), *Troubleshooting OpenVPN - Configurations*, which
    explains how to interpret the OpenVPN log files in detail.
  prefs: []
  type: TYPE_NORMAL
