["```\n<syscheck>\n  <disabled>no</disabled>\n  <frequency>720</frequency>\n  <scan_on_start>yes</scan_on_start>\n  <directories check_all=\"yes\" report_changes=\"yes\" real_time=\"yes\">/etc,/bin,/sbin</directories>\n  <directories check_all=\"yes\" report_changes=\"yes\" real_time=\"yes\">/lib,/lib64,/usr/lib,/usr/lib64</directories>\n  <directories check_all=\"yes\" report_changes=\"yes\" real_time=\"yes\">/var/www,/var/log,/var/named</directories>\n  <ignore>/etc/mtab</ignore>\n  <ignore>/etc/hosts.deny</ignore>\n  <ignore>/etc/mail/statistics</ignore>\n  <ignore>/etc/random-seed</ignore>\n  <ignore>/etc/adjtime</ignore>\n  <ignore>/etc/httpd/logs</ignore>\n  <ignore>/etc/utmpx</ignore>\n  <ignore>/etc/wtmpx</ignore>\n  <ignore>/etc/cups/certs</ignore>\n  <ignore>/etc/dumpdates</ignore>\n  <ignore>/etc/svc/volatile</ignore>\n  <ignore>/sys/kernel/security</ignore>\n  <ignore>/sys/kernel/debug</ignore>\n  <ignore>/sys</ignore>\n  <ignore>/dev</ignore>\n  <ignore>/tmp</ignore>\n  <ignore>/proc</ignore>\n  <ignore>/var/run</ignore>\n  <ignore>/var/lock</ignore>\n  <ignore>/var/run/utmp</ignore>\n</syscheck>\n```", "```\nsudo systemctl restart wazuh-agent\n```", "```\n<group name=\"linux, webshell, windows,\">\n  <!-- This rule detects file creation. -->\n  <rule id=\"100500\" level=\"12\">\n    <if_sid>554,550</if_sid>\n    <field name=\"file\" type=\"pcre2\">(?i).php$|.phtml$|.php3$|.php4$|.php5$|.phps$|.phar$|.asp$|.aspx$|.jsp$|.cshtml$|.vbhtml$</field>\n    <description>[File creation]: Possible web shell scripting file ($(file)) created</description>\n  </rule>\n</group>\n```", "```\n    key:value pair where key will be the actual malware hash and value will be the name or keyword. Now, there are several sources from where we can download and use the malware hashes for the CDB list. One of the popular sources is a list published by Nextron Systems. You can view and download the list from the official GitHub page (https://github.com/Neo23x0/signature-base/blob/master/iocs/hash-iocs.txt). For testing purposes, we will use a few popular malware hashes such as Mirai and Fanny.Open the file using the `Nano` editor:\n\n    ```", "```\n\n    Then enter the malware hash in the format shown in the following:\n    ```", "```\n    <ruleset>\n     <!-- Default ruleset -->\n    <list>etc/lists/malware-hashes</list>\n     <ruleset>\n    ```", "```\n    <group name=\"malware,\">\n      <rule id=\"110002\" level=\"13\">\n        <if_sid>554, 550</if_sid>\n        <list field=\"md5\" lookup=\"match_key\">etc/lists/malware-hashes</list>\n        <description>Known Malware File Hash is detected: $(file)</description>\n        <mitre>\n          <id>T1204.002</id>\n        </mitre>\n      </rule>\n    </group>\n    ```", "```\n    systemctl restart wazuh-manager\n    ```", "```\n<ossec_config>\n <syscheck>\n<disabled>no</disabled>\n<syscheck> <disabled>no</disabled>\n<directories check_all=\"yes\" realtime=\"yes\">/PATH/TO/MONITORED/DIRECTORY</directories>\n </syscheck>\n</ossec_config>\n```", "```\nsystemctl restart wazuh-agent\n```", "```\nInvoke-WebRequest -Uri https://wazuh-demo.s3-us-west-1.amazonaws.com/mirai -OutFile C:/Users/Administrator/Downloads/mirai\n```", "```\n<ossec_config>\n  <integration>\n    <name>virustotal</name>\n    <api_key><YOUR_VIRUS_TOTAL_API_KEY></api_key> <!-- Replace with your VirusTotal API key -->\n    <rule_id>100200,100201</rule_id>\n    <alert_format>json</alert_format>\n  </integration>\n</ossec_config>\n```", "```\n<group name=\"syscheck,pci_dss_11.5,nist_800_53_SI.7,\">\n    <!-- Rules for Linux systems -->\n    <rule id=\"100200\" level=\"7\">\n        <if_sid>550</if_sid>\n        <field name=\"file\">/root</field>\n        <description>File modified in /root directory.</description>\n    </rule>\n    <rule id=\"100201\" level=\"7\">\n        <if_sid>554</if_sid>\n        <field name=\"file\">/root</field>\n        <description>File added to /root directory.</description>\n    </rule>\n</group>\n```", "```\n    sudo systemctl restart wazuh-agent\n    ```", "```\n<localfile>\n<location> Microsoft-Windows-Windows Defender/Operational</location> <log_format>eventchannel</log_format>\n</localfile>\n```", "```\nsudo systemctl restart wazuh-agent\n```", "```\n    -accepteula: It represents the end user license agreement (EULA) for Sysmon. By including this flag, you are acknowledging and agreeing to the terms of use.\n    ```", "```\n<localfile>\n<location>Microsoft-Windows-Sysmon/Operational</location>\n<log_format>eventchannel</log_format>\n</localfile>\n```", "```\n<!-- Log Sysmon Alerts -->\n<group name=\"sysmon\">\n<rule id=\"101100\" level=\"5\">\n<if_sid>61650</if_sid>\n<description>Sysmon - Event 22: DNS Query.</description>\n<options>no_full_log</options>\n</rule>\n<rule id=\"101101\" level=\"5\">\n<if_sid>61603</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 1: Process creation.</description>\n</rule>\n<rule id=\"101102\" level=\"5\">\n<if_sid>61604</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 2: A process changed a file creation time.</description>\n</rule>\n<rule id=\"101103\" level=\"5\">\n<if_sid>61605</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 3: Network connection.</description>\n</rule>\n<rule id=\"101104\" level=\"5\">\n<if_sid>61606</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 4: Sysmon service state changed.</description>\n</rule>\n<rule id=\"101105\" level=\"5\">\n<if_sid>61607</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 5: Process terminated.</description>\n</rule>\n<rule id=\"101106\" level=\"5\">\n<if_sid>61608</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 6: Driver loaded.</description>\n</rule>\n<rule id=\"101107\" level=\"5\">\n<if_sid>61609</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 7: Image loaded.</description>\n</rule>\n<rule id=\"101108\" level=\"5\">\n<if_sid>61610</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 8: CreateRemoteThread.</description>\n</rule>\n<rule id=\"101109\" level=\"5\">\n<if_sid>61611</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 9: RawAccessRead.</description>\n</rule>\n<rule id=\"101110\" level=\"5\">\n<if_sid>61612</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 10: ProcessAccess.</description>\n</rule>\n<rule id=\"101111\" level=\"5\">\n<if_sid>61613</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 11: FileCreate.</description>\n</rule>\n<rule id=\"101112\" level=\"5\">\n<if_sid>61614</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 12: RegistryEvent (Object create and delete).</description>\n</rule>\n<rule id=\"101113\" level=\"5\">\n<if_sid>61615</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 13: RegistryEvent (Value Set).</description>\n</rule>\n<rule id=\"101114\" level=\"5\">\n<if_sid>61616</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 14: RegistryEvent (Key and Value Rename).</description>\n</rule>\n<rule id=\"101115\" level=\"5\">\n<if_sid>61617</if_sid>\n      <options>no_full_log</options>\n<description>Sysmon - Event 15: FileCreateStreamHash.</description>\n</rule>\n</group>\n```", "```\nsystemctl restart wazuh-manager\n```"]