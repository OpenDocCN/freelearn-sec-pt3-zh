- en: 'Chapter 4: Designing and Protecting Network Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all honesty, the end of the previous chapter and the beginning of this chapter
    is an illusion. It's definitely the case that we are building on top of the knowledge
    we gained from the previous chapter, and we're going to lean on that chapter heavily
    in this one. The reason for this is that because we had covered so much already
    in the previous chapter, my publishers and I decided it was necessary to create
    an imaginary boundary that signaled the end of one topic and the beginning of
    another. I'm going to do my best to not repeat myself, unless the point is worth
    repeating.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've got the "ambiguous and invisible chapter boundary" problem out
    of the way, I can get into the housekeeping for this chapter. In this chapter,
    the goal is to learn how we can combine our knowledge of threats, vulnerabilities,
    and mitigations from the previous chapter, along with our knowledge of risk management
    and governance, to create secure-by-design network architectures (or at least
    something that is as close to secure-by-design as possible, while balancing usability).
  prefs: []
  type: TYPE_NORMAL
- en: We'll talk about securing the various network components with design choices
    and mitigations to bolster your organization's network security. I also aim to
    discuss how we might ensure we secure various network components when those components
    aren't under our control anymore. As we all continue our combined migration to
    the cloud, like a digital Oregon Trail – no, not the video game – we will venture
    into new challenges and reduced control. The main difference between the current
    cloud migration and the Americans heading west in the 1830s is that in the move
    to the cloud, fewer people will die of dysentery. Well, at least I hope that's
    the case.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we're going to look at implementing secure communications between
    any combination of assets and users, including any combination of cloud and on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing secure network architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategies for protecting network security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Designing secure network architectures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your InfoSec learning path has been anything like mine, a load of your time
    has been spent learning about networking. Do **Chief Information Security Officers**
    (**CISOs**) talk about networking very often in the day to day? Well, yes… networking
    is mentioned in the LinkedIn/evening drinks/corporate "networking" type of way,
    but they're very rarely talking about **TCP/IP**.
  prefs: []
  type: TYPE_NORMAL
- en: Does that suggest that you shouldn't know about networking? Or that you should
    forget all that you've learned? Of course not. By knowing about these topics,
    and understanding the likelihood of a threat exploiting a vulnerability in network
    devices or protocols, along with the impact of that event, will enable you to
    make more informed decisions for mitigations, rooted in the principles of risk
    management.
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, it's worth learning a bit of everything in InfoSec, regardless
    of the path you currently have your sights set on following. Learn about something
    that is happening in the world of InfoSec at the moment, or something that is
    going on in your organization. When you start to feel a level of diminishing returns
    on the time you're putting into it, reassess whether the topic is something you
    enjoy learning about or something you need to know, or if you can focus on something
    else for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the concept of network security is much more than just protocols,
    bits, bytes, and the systems that are associated with data in motion, but let's
    quickly cover some of the concepts and definitions we must be aware of, and ensure
    we're on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: Internet Protocol suite and the OSI model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two major models that I'd like to reference in this chapter to help
    you conceptualize how users and applications interface with nodes and network
    devices, in order to communicate with other nodes and networks, including over
    the internet. They are known as the **Internet Protocol suite** and the **OSI
    model**.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding both, and how they overlap, we can get a better idea of how
    to categorize, and therefore protect and govern, the various devices in our estate.
  prefs: []
  type: TYPE_NORMAL
- en: TCP/IP suite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **TCP/IP suite** or the **Internet Protocol suite** is a group of communications
    protocols and a model that is used on computer networks and the internet, and
    its importance to this topic cannot be understated. Development funding for this
    protocol stack came from **DARPA**, the **Defense Advanced Research Projects Agency**
    in the *United States Department of Defense*. This is a bit of fun trivia, if
    your idea of "fun trivia" includes questions such as "Which military agency developed
    the Internet Protocol suite?"
  prefs: []
  type: TYPE_NORMAL
- en: It's referred to as **TCP/IP** because of the **Transmission Control Protocol**
    and **Internet Protocol** – **TCP** and **IP**, respectively – both of which are
    two of the foundational protocols used in the model, and therefore two of the
    foundational protocols used on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'TCP/IP gives us end-to-end communication, from being turned into packets, to
    being addressed, to being transmitted, routed, and ultimately received. In the
    TCP/IP model, there are four "layers" that split various protocols into classifications
    related to their scope:'
  prefs: []
  type: TYPE_NORMAL
- en: Communication methods for data remaining inside a single network segment is
    done in the **link layer** or **network access layer**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication methods for data that traverses between independent networks is
    done in the **internet layer**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between hosts is done in the **transport layer** or **host-to-host
    layer**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between processes is done in the **application layer**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TCP/IP Protocol Suite abides by standards that have been set out and maintained
    by the Internet Engineering Task Force.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to make a diagram using the Internet Protocol suite layers, showing
    an application on a host sending data to another host''s application over two
    routers, it could look something like this, where **Host A** has the communication
    travel down the TCP/IP data flow layers, and then up and down the link and internet
    layers of two routers, before traveling all the way back up to the application
    layer of **Host B**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Diagram of a TCP/IP data flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Diagram of a TCP/IP data flow
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've reviewed the TCP/IP protocol suite, it's definitely worth delving
    into a different way of looking at the same concept, in what is known as *the
    OSI model*.
  prefs: []
  type: TYPE_NORMAL
- en: OSI model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another model for standardizing communications in a computing system is the
    **Open Systems Interconnection** model, or **OSI** model. It is a standardization
    of communications functions, regardless of any internal structure or technology.
    The OSI model has seven layers, as opposed to TCP/IP''s four:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Layer 1 – Physical**: Handles converting digital bits into radio, electrical,
    or optical signals, with voltage levels, timing, maximum distance, modulation,
    physical connectors, layouts of pins, and cable specs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 2 – Data Link**: Handles the connection between two nodes communicating
    directly with one another. It can correct errors from the physical layer and is
    able to control the connection status, such as establishing or terminating a connection,
    along with controlling the flow of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 – Network**: Handles the connection between two nodes in separate
    networks, potentially using routing via other nodes. It can also handle larger
    messages between two local nodes than the data link layer can, by splitting the
    messages into fragments and delivering those separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 4 – Transport**: Gives us the ability to transfer messages from two
    nodes in the form of variable-length data sequences. It has controls in place
    for error handling and data flow, and can keep track of messages that succeed
    and fail, allowing the failed segments to be resent. It is usually agreed that
    the TCP and UDP protocols sit in Layer 4\.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 5 – Session**: Creates, maintains, and terminates the connections between
    local and remote applications from Layer 7\. Usually, Layer 5 is implemented in
    applications that use **remote procedure calls**, or **RPCs**, thus treating programs
    that are on another node or network as though they were local applications. It
    handles requests from Layer 6 before passing them to Layer 4\.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 6 – Presentation**: Translates between network and application formats,
    transforming the data from the previously mentioned layers into a suitable format
    that is acceptable based on the destination application. For this reason, it''s
    commonly referred to as the *Syntax* layer. It can also compress data, and can
    map the transfer between applications directly, preventing the ability to "pass
    down the protocol stack" to the previously mentioned layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 7 – Application**: Handles communication with the software application
    that a user also interacts with. It is responsible for showing the user the relevant
    data that has been transmitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To help conceptualize what type of data is handled by which layer in the OSI
    model, I''ve included the following diagram:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Diagram of the OSI model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Diagram of the OSI model
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to look at the OSI model and see how it might interact between applications
    over the internet in a similar way to how we looked at the Internet Protocol suite,
    we could make a diagram that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Flow for the OSI model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Flow for the OSI model
  prefs: []
  type: TYPE_NORMAL
- en: So, if we were to compare the two, meaning the Internet Protocol suite and the
    OSI model, what would we find? Let's get into it!
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the Internet Protocol suite and the OSI model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When comparing the two different models, we can see a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: The OSI model separates the activities in the TCP/IP application layer into
    the application, the presentation, and (partially) the session layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The host-to-host/transport layer in TCP/IP is handled with the remainder of
    the session layer, and the transport layer in the OSI model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TCP/IP internet layer is only a part of the OSI's network layer, while the
    remainder of the network layer, along with the entire data link and physical layers
    from OSI, fall into TCP/IP's network access layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we wanted to make a diagram to compare the two models, you might come up
    with something that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – OSI versus TCP/IP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – OSI versus TCP/IP
  prefs: []
  type: TYPE_NORMAL
- en: Various concepts Internet Protocol suite and components surrounding networks
    exist that we haven't covered yet, such as how TCP works, or UDP, or what ports
    are. Let's dip our toe into that now.
  prefs: []
  type: TYPE_NORMAL
- en: Network components and protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`HTTP/1.1` and `HTTP/2` application layer protocols for the web. Recently,
    it was decided that their successor, `HTTP/3`, would instead utilize the *QUIC
    protocol*, which has **UDP** at its heart.'
  prefs: []
  type: TYPE_NORMAL
- en: 'TCP is known for its three-way handshake, which is used in establishing a connection.
    Imagine that a client wants to connect to a server that has a passively open port
    for connections. This is what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: The client sends a message to the server, setting a sequence number and creating
    an "Active Open" connection, otherwise known as a **SYN**, *or Synchronize*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server responds to the client's **SYN** message with an acknowledgment,
    incrementing the client's sequence number by 1, and setting its own sequence number,
    otherwise known as a **SYN-ACK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client then replies to the server, with both the incremented sequence number
    sent by the server, along with its own sequence number incremented by 1, acknowledging
    that the connection has been made. This is known as the **ACK**, *or Acknowledge*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you definitely know this, you''re ready for a TCP/IP joke:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Elon Musk tells a joke'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Elon Musk tells a joke
  prefs: []
  type: TYPE_NORMAL
- en: 'To terminate a connection on TCP, a *four-way handshake* must occur, with each
    side able to initiate the termination. For an example, if a client wants to terminate
    a connection to a server, this is what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: The client sends a **FIN** packet, which is an indication to gracefully terminate
    the connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server responds with an **ACK** packet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server sends its own **FIN** packet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client responds with an **ACK** packet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client stops accepting new connections, waits for a timeout, and then finally
    closes the connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux operating systems handle things a bit differently, sending an **RST**
    packet instead of a **FIN**, which is an immediate termination, rather than gracefully
    terminating the **FIN** packet.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, *steps 2* and *3* can sometimes be combined into a **FIN & ACK**
    packet being sent at once.
  prefs: []
  type: TYPE_NORMAL
- en: The **User Datagram Protocol** (**UDP**) is a member of the Internet Protocol
    suite, even if it doesn't make an appearance in the name of the protocol the way
    TCP does. UDP lacks a handshake to confirm a connection, and is used under the
    assumption that any errors or corrections aren't necessary, which removes any
    processing requirement from the network interface. Packets can be received in
    an order that isn't congruent with the way they were sent and packets can be dropped,
    and for that reason it is seen as less reliable, but valuable for speed. This
    means that UDP is faster and more lightweight than TCP, and that it is popular
    in online games and video chats.
  prefs: []
  type: TYPE_NORMAL
- en: The`.org`, `.com`, `.net`, `.dk`, `.wtf`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Common free DNS resolver services include Cloudflare (`1.1.1.1` and `1.0.0.1`),
    Google (`8.8.8.8` and `8.8.4.4`), Quad9 (`9.9.9.9` and `149.112.112.112`), and
    OpenDNS (`208.67.222.220` and `208.67.222.220`), among others. These serve to
    route the requests that are sent to specific domain names to their IP address
    counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: '`32` bits, with four sets of numbers between the range of `0` and `255` (otherwise
    known as octets, or `8` bits); for example, from `0.0.0.0` to `255.255.255.255`,
    and everything in-between, such as `255.0.0.0`, `0.255.0.0`, or `108.177.8.63`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Internal IPv4 "blocks" are also determined: `10.0.0.0` to `10.255.255.255`
    contains 16,777,216 addresses that have been reserved for private networks. The
    same goes for `172.16.0.0` to `172.31.255.255` and everybody''s favorite, `192.168.0.0`
    to `192.168.255.255`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**IPv6** is a wild idea that hasn''t really taken off. In 2074, when it''s
    actually used, I''m sure there will be an author who is interested in going into
    the details of it. Until then, a casual understanding is fine, as long as it''s
    not part of your everyday work. It''s similar to IPv4 but has a larger number
    of possible addresses, and also has some features that help optimize routing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subnets** or subnetworks are subdivisions of an IP network. If you split
    your network into multiple networks, you''re subnetting. You can do this by grouping
    computers that belong to the same network into the same IP address group, thus
    improving your organization by partitioning a network address space into logical
    groups.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have a network number for the first two octets, a subnet
    identifier for the third octet, and a host identifier for the final octet. You
    assign one subnet the routing prefix of `192.168.100.0/24` and another the routing
    prefix of `192.168.200.0/24`. This defines the first `24` bits (3 octets) as the
    network prefix and the final octet as the host address space. There are 256 addresses
    for each of the subnetworks, thus creating a more organized structure for your
    network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a visual breakdown of this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Subnets visualized'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Subnets visualized
  prefs: []
  type: TYPE_NORMAL
- en: In large organizations, or various other scenarios, 256 addresses might not
    be enough for a subnet, so I have only used this as a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: Network ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Communication endpoints in networks are called **ports**. Operating systems
    use logical "ports" to identify network service processes. Both TCP and UDP use
    port numbers to reach the logical endpoint. Some common port numbers that have
    been assigned by the **Internet Assigned Numbers Authority** (**IANA**) that are
    worth remembering off the top of your head are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port 20**: FTP data transfer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 21**: FTP command-and-control'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 22**: SSH, a secure shell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 23**: Telnet, a remote login service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 25**: SMTP, mail routing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 53**: DNS, which is usually open'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 80**: HTTP, used for pages without TLS/SSL/HTTPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 110**: POP3, for mail clients'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 123**: NTP, for network time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 143**: IMAP, for mail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 161**: SNMP, for device management on networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port 443**: HTTPS, for HTTP traffic with TLS/SSL/HTTPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This isn't to say that these port numbers are always associated with that type
    of protocol traffic, though. The thing is, you could have internal HTTP traffic
    on `8080`, `8081`, or `3000` (or pretty much any other port), depending on the
    web app framework you're using. It's important to note that the ports are always
    associated with a host IP address and the type of protocol it's using. If you
    wanted to reach a page on an internal Vue.JS web app that is being presented from
    a server with an IP address of `192.168.1.25` on port `8080`, you could navigate
    to it through your browser via `192.168.1.25:8080`, and it would open the web
    app's home page for you from that port, instead of via port `80` or `443`, which
    are the defaults for the browser.
  prefs: []
  type: TYPE_NORMAL
- en: What I'm getting at is that these are common port number designations, but they're
    not rules.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that it is possible to remotely access devices through protocols such
    as SSH is a risk that may need to be mitigated by your organization. The reason
    you might want to do this is because there are automated tools that are constantly
    trying to log into any public-facing IP address, and then trying to SSH on port
    `22`. In the name of time, they will generally try port `22`, and then move on
    to another low-hanging fruit if it doesn't work.
  prefs: []
  type: TYPE_NORMAL
- en: In order to obfuscate the most common automated attacks on port `22`, you might
    decide to change your default port for SSH on your servers from `22` to a different
    port, for example. That way, if an automated tool is attempting to SSH into one
    of your servers, it has to figure out which port SSH is on. That being said, that's
    not enough to protect against SSH attacks, and it's definitely *security-through-obscurity*
    rather than a true mitigation, but it's the first step that can be taken for a
    *defense-in-depth* approach.
  prefs: []
  type: TYPE_NORMAL
- en: One more thing to note about network ports is that you can have multiple services
    on one server. You can SSH into the server, but also access a web page and handle
    emails, DNS, SMTP, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look at the various hardware devices and applications we can use
    for networking.
  prefs: []
  type: TYPE_NORMAL
- en: Network devices and applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Networks have a wealth of various hardware and application-based peripherals,
    and it's worth looking into a few of the security-related ones here, to ensure
    we're on the same page. This will also help preface the next section, where we
    will be dealing with common attacks and tactics for defense and detection.
  prefs: []
  type: TYPE_NORMAL
- en: Network switches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **network switch** is a piece of hardware that sits in-between your devices,
    through Ethernet connections typically, and forwards traffic to the appropriate
    device. It operates on *Layer 2 of the OSI model*, and uses the device's *MAC
    address* to forward data to the device. If the switch also has routing functionality,
    it could also operate on *Layer 3 of the OSI model*. These switches are usually
    called *Layer 3 switches*.
  prefs: []
  type: TYPE_NORMAL
- en: A key takeaway about switches is that they only send data to the appropriate
    address, rather than to every address connected to it, the way hubs do.
  prefs: []
  type: TYPE_NORMAL
- en: Routers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Thankfully, since we''ve already learned about ports, IP addresses, layers,
    and so on, we can quickly discuss how the internet works. Routers are devices
    that forward data between networks. In order words, routers direct internet traffic.
    Routers communicate with one another by forwarding data packets from their network
    to another network. Here, the network''s router receives the packet, reads the
    destination node address, and by using its routing table, either forwards it to
    another network or to the destination node that sits in its own network. Enterprise
    routers connect businesses to the core routers, optical fiber, and undersea cables.
    These are known as **the internet backbone**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Undersea cables and data centers, also known as "the internet
    backbone"'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Undersea cables and data centers, also known as "the internet backbone"
  prefs: []
  type: TYPE_NORMAL
- en: Isn't it funny that the internet's core infrastructure is cables lying at the
    bottom of oceans? As payments, electricity, and supply chains become more reliant
    on the internet, wouldn't you agree that it's crucial to ensure we reduce the
    risk of any **Single Point of Failures (SPFs)**? What are some of the vulnerabilities
    of this current setup?
  prefs: []
  type: TYPE_NORMAL
- en: Load balancers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A service that can delegate processing over an array of servers is known as
    a **load balancer**. This service helps improve efficiency and prevents you from
    over-utilizing one server, while underutilizing another that performs the same
    task. It helps to improve stability and increases speed.
  prefs: []
  type: TYPE_NORMAL
- en: Proxies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Proxies** are server applications or hardware that help the client make requests
    to the server rather than letting the client make requests directly to the server,
    and then pass back the response. Proxy server processing can include load balancing
    services or security processes that simplify the request and make it fit for the
    server to handle, or perform error handling to get the proxied information response.'
  prefs: []
  type: TYPE_NORMAL
- en: Firewalls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another system that controls network traffic, this time based on security rules,
    is called a **firewall**. This includes both ingress and egress traffic, and protects
    your trusted network from sending and receiving traffic to ones you may not want
    to trust… such as the internet.
  prefs: []
  type: TYPE_NORMAL
- en: There are software firewalls, hardware appliance firewalls, and virtual appliance
    firewalls. Software (or host-based) firewalls are installed on the endpoint as
    a service or agent to control traffic and network resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a classic diagram of a firewall, visualized as a brick wall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Classic firewall diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Classic firewall diagram
  prefs: []
  type: TYPE_NORMAL
- en: Having shown that, I'd also like to go into how firewalls work, from type to
    type, and how they go about allowing traffic in, not like a brick wall, but more
    like a bouncer at that nightclub you were never allowed into.
  prefs: []
  type: TYPE_NORMAL
- en: Packet filter firewalls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Firewalls that act as proxies and inspect the data that is transmitted between
    endpoints are called **packet filter firewalls**. They refer to an access control
    list that determines the packets that are inspected, and what should be done to
    each. A few examples of the actions that can be taken could be to discard, forward,
    or send a *TCP RST* response to the sender and close the connection. You might
    think of these actions as firewall rules, which can filtered by source and destination
    IP addresses or ports, or by protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the benefits of this: you''re able to control which protocols communicate
    on which ports to which devices. That''s a brilliant step in the right direction
    for your information security posture. Your existing list of assets can include
    information that will allow you to fully understand what communication is required,
    and what communication isn''t required. This is powerful because often, a "flat
    network" increases your exposure to ransomware, network traversal, and privilege
    escalation. Imagine that you have created a rule in your firewall that blocks
    all communications between subnets, except port `3306` (which is *MySQL*) from
    `192.168.100.25` (which we can imagine is an application server address) to `192.168.200.50`
    (which we can assume is the MySQL server).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, if a command is attempted from a different application, deleting all the
    data in the SQL database isn't effective because that command has been filtered
    by the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You should definitely also consider authentication, authorization, and preventing
    such actions that are out of the ordinary. This is a form of defense-in-depth.
  prefs: []
  type: TYPE_NORMAL
- en: The *Deny-All, and then Whitelist approved traffic* technique is highly effective
    at preventing worms from spreading in your network, as well as lateral movement.
    However, in my experience, it is difficult to implement in organizations with
    complex networks that have components and applications communicating between devices
    that aren't recorded. Blocking that traffic could lead to an outage and cost the
    organization money, so some serious preparation is needed to fully understand
    what *stateful firewalls* are doing at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: Connection tracking firewalls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Connection tracking firewalls**, or *stateful firewalls* (or *second-generation
    firewalls*) are similar to first-generation proxy/packet filter firewalls, but
    they retain information about communication between endpoints by keeping the IP
    addresses and port numbers from Layer 4\. This allows for an overall better understanding
    of how the nodes are interacting. Instead of inspecting each packet, it utilizes
    the data it has from the context of previously open connections. As a result,
    they have a performance advantage over the packet filtering firewalls as the bouncer
    is allowing the regulars straight into the bar, while asking the people he doesn''t
    know for ID.'
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of stateful firewalls is that they protect against port scanning
    by only opening ports when they are required by specific incoming packets.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, with this power comes the ability to trick the firewall into
    thinking you're a trusted party by, for example, having some JavaScript on a website
    request information from the malicious actor's endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Application firewalls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Application firewalls** (or, **Layer 7 Firewalls**) can control system calls
    to a service or app on a system, according to a policy that has been configured.
    It''s called a *Layer 7 Firewall* because it is able to control all the way up
    the OSI model to Layer 7, which is the application layer. They can be either host-based
    or network-based, and are able to protect against unwanted applications that are
    using a port that isn''t the standard IANA designation.'
  prefs: []
  type: TYPE_NORMAL
- en: A **next-generation firewall** performs deep-packet inspection at the application
    layer in order to enable **intrusion prevention system** (**IPS**) functionality,
    *sandboxing*, *user identity management*, *web filtering*, and *web application
    firewall* tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Web application firewalls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Web application firewalls** can protect your web apps from malicious users.
    The web app firewall handles HTTP traffic as a reverse proxy before it reaches
    the server, inspects the traffic, and uses policies to filter activity. This activity
    could include common web app exploitation techniques often used by malicious actors,
    such as CSRF, XSS, and SQL injection attacks, and enabling *rate limiting* helps
    prevent DoS and DDoS attacks from being effective.'
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint firewalls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Endpoint firewalls** are application firewalls that protect against unauthorized
    connections. They will generally scan a process ID for the data packet and compare
    that against a built-in set of rules. They exist at the application layer, but
    filter connections between Layer 7 and the layers below. They might also be known
    as *socket filters* since they filter connections via socket calls on the host.'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of firewall configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As I mentioned earlier in this chapter, misconfiguring a firewall can cause
    serious issues in an organization, and getting it right is a highly important
    task. Understanding the way traffic moves in your networks, as well as designing
    a way in which it *should* move, is an imperative step in ensuring proper mitigation
    against risks in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Tools are available to help inspect existing traffic and help you better understand
    exactly what the traffic might be used for. These tools are often also used by
    malicious actors once they're inside your network, as they are highly effective
    when used properly.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tools available for inspecting network traffic, in order to better understand
    the nature of the communication, are considered **packet sniffers** or **packet
    capture** tools. A very well-known and highly utilized example of these tools
    would be **Wireshark**, a network protocol analyzer that can be used to understand
    networking issues or detect intrusions but can also be used to spy on network
    users, collect sensitive information, and exploit your network. Other examples
    include **tcpdump**, which runs on the command line, and **Ettercap**, a security
    tool that poisons the ARP table on the target machines, acting as a **Man-in-the-Middle**.
    We will discuss these terms and how to protect against these threats later in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Network Intrusion Detection and Prevention
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Intrusion Detection Systems** (**IDS**) are either software suites or devices
    that monitor a network for policy violations. **Network Intrusion Detection Systems**
    (**NIDS**) monitor network traffic, while **Host-based Intrusion Detection Systems**
    (**HIDS**) monitor operating system activity.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, these tools will utilize reputation-based algorithms to detect known
    malicious sources and destinations, or even machine learning models, to flexibly
    correlate based on a large dataset.
  prefs: []
  type: TYPE_NORMAL
- en: A **Security Information and Events Monitoring** (**SIEM**) system would be
    collecting all of the events in your network from these IDSs and IPSs, and combining
    all of the metrics in order to correlate activities and determine if these are
    actually malicious or false alarms.
  prefs: []
  type: TYPE_NORMAL
- en: '**Intrusion Prevention Systems** (**IPS**) are devices that respond to detected
    threats and prevent the actor from performing the attempted action, either by
    reconfiguring the firewall rules or by modifying the content of the request to
    prevent exploitation.'
  prefs: []
  type: TYPE_NORMAL
- en: VPNs and their uses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Virtual** create a virtual boundary to allow users in a public network to
    create, read, update, and delete data in the same way they would be able to if
    they were in a private network. Imagine a tunnel from a user''s home to a corporate
    office. If the user sends a request through the tunnel, the response comes back
    through the tunnel. Generally speaking, that communication is protected from any
    sniffing via encryption.'
  prefs: []
  type: TYPE_NORMAL
- en: VPNs are commonly used by businesses to allow distributed teams to work in a
    shared environment, but other uses have appeared. For example, if a government
    prevents their citizen's internet connections from being able to access Facebook
    IP addresses, a user could, alternatively, send a request through a VPN connection
    to a PC in another country, which isn't owned by Facebook, which then requests
    and passes on the information from the Facebook servers to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Content delivery networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Content delivery networks** (**CDNs**), are designed to provide low-latency,
    high-availability access to your servers'' data by geographically distributing
    various proxy servers around the world. If you have a user in Australia, for example,
    they''ll reach out to their nearest server in Sydney, which both holds a cache
    for much of the content on your host server and performs a request to your server
    for the content it doesn''t have.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the web traffic that you request daily is actually served by a CDN cache,
    with the latest (locally unseen) content being the only thing served from the
    source host. Oftentimes, CDN providers supplement their service with security
    tools for protecting against web application exploitation tactics and denial of
    service attacks.
  prefs: []
  type: TYPE_NORMAL
- en: On that note, let's look into methods for attacking systems and how we, as information
    security professionals, may defend against those attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Attacks, defense, and detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, if you put your hacker hoodie on and seriously think about it, you might
    be able to dream up a couple ways to exploit these systems. How would you go about
    doing that? When we're looking at methods malicious actors may use to compromise
    the security of your organization's assets, there are new techniques being utilized
    continually, but most of the classic techniques still work. I'm going to use this
    section to go over a few of the most common attack techniques and their mitigations.
  prefs: []
  type: TYPE_NORMAL
- en: Man-in-the-Middle attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Man-In-The-Middle** (**MITM**) attacks are where the malicious actor secretly
    sits "in the middle" of your communications, passing information on after potentially
    reading or altering the message. If the malicious actor in the middle is reading
    the messages, it''s also known as *eavesdropping.*'
  prefs: []
  type: TYPE_NORMAL
- en: MITM defense and detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When looking at mitigating against MITM attacks, we need to look at cryptography.
    Cryptography can offer authentication, proving mathematically that the source
    of the message was legitimate, as well as proof of integrity, which can mathematically
    prove that the message hasn't been altered.
  prefs: []
  type: TYPE_NORMAL
- en: In order for this to work, you'll need a way to exchange keys or certificates,
    for example, a public key infrastructure, as we see in TLS traffic. If it can't
    be proven that the identity of the source or destination is valid, the session
    is ended, and communication stops. The weakness in this solution is that security
    is lost in the event that the Certificate Authority, which issues the cryptographic
    certificates, is compromised.
  prefs: []
  type: TYPE_NORMAL
- en: If you are capturing and analyzing your organization's network traffic, you
    would be able to gather information about each server your network interacts with,
    such as the source IP address, DNS name, X.509 certificate, Certificate Authority,
    and whether other clients have the same certificate.
  prefs: []
  type: TYPE_NORMAL
- en: DNS hijacking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**DNS hijacking** is the act of performing DNS resolution with a **rogue DNS
    server**. If you, as the attacker, can get a computer, a server, or a router to
    perform a DNS lookup to a DNS server that has been poisoned or is under your control,
    rather than one of the authentic public ones we''ve mentioned previously, we can
    make it believe they''re interacting with the legitimate service. Sometimes, this
    is called **pharming**, but the term didn''t really catch on the way **phishing**
    did.'
  prefs: []
  type: TYPE_NORMAL
- en: DNS hijacking defense
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using the previously mentioned DNS servers, such as those from Cloudflare, Google,
    and OpenDNS, with `53`, unencrypted, so it's not end-to-end encrypted, and since
    TLS may not implement the entire route properly, it doesn't guarantee privacy.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, webmasters can create certain entries for their website's **DNS
    records**, which protect against hijacking on their domain, but that's not a very
    scalable approach and relies on the providers being proactive.
  prefs: []
  type: TYPE_NORMAL
- en: ARP spoofing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With **ARP spoofing**, a mapping between a **MAC address** and an **IP address**
    in the **ARP table** is changed, but the table continues to act as a validator
    and as a facilitator for connecting a source to a destination. **ARP spoofing**
    is either done to perform a *DoS* attack by directing all traffic requested from
    several IPs to one device MAC address, or a *MITM* attack, such as modifying traffic,
    stealing session IDs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, ARP spoofing is done for redundancy purposes, to ensure that when
    a server goes down, another is able to step in. Another legitimate use case for
    this technique is being able to debug and analyze traffic between two hosts while
    using a switch, as switch traffic is not transparent/replicated across all the
    endpoints on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a user is monitoring **Host C**. If they want to watch traffic
    go from **Host A** to **Host B**, they can set **A's** ARP to consider **B's**
    MAC address as **C's** actual MAC, and then set **B** to consider **A's** MAC
    address as **C's** actual MAC, and allow for **C** to forward the packets. At
    this point, they have a MITM situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is really hard to imagine through my description, I concede. Here''s a
    diagram that should help you out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – A diagram of an ARP spoof'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.09_B16611.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – A diagram of an ARP spoof
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, tricking computers to believe one device is another one is a
    pretty simple way to eavesdrop and requires adequate protection.
  prefs: []
  type: TYPE_NORMAL
- en: ARP spoofing defense
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can set up your ARP cache for critical servers and endpoints so that they're
    *static* and *read-only*, which means they don't allow updates to be made. This
    is extremely simple, but adds to the overhead for IT. It's also very difficult
    to scale because each machine must be mapped accordingly, meaning you're looking
    at *n^2-n* ARP entries, where *n* is the number of endpoints on the network. If
    you have 1,000 endpoints, you have 999,000 ARP entries.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use a software solution that provides a certification
    for ARP responses and can be built into the DHCP server to ensure all IP addresses,
    either static or dynamic, are handled properly. Alternatively, you can just send
    a notification to an admin in the event that an ARP entry changes, but that's
    not really a preventative control.
  prefs: []
  type: TYPE_NORMAL
- en: You can also configure your hosts operating systems so that they gracefully
    handle unsolicited changes to the ARP cache.
  prefs: []
  type: TYPE_NORMAL
- en: DNS spoofing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**DNS spoofing/DNS cache poisoning** is similar to an **ARP spoofing attack**,
    and is where a trusted source of information is poisoned with malicious data.
    With **DNS spoofing**, the victim is requesting a response from what looks like
    a legitimate source (which they always take for granted) in their network''s DNS
    cache. In reality, the DNS server''s cache data has been poisoned by the malicious
    actor and the request is being sent to a separate destination, instead of the
    legitimate service. These types of attacks fall under the **spoofing** category.'
  prefs: []
  type: TYPE_NORMAL
- en: DNS spoofing defense
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In order to avoid *DNS spoofing attacks*, you need to reconsider your organization's
    trust. You want to authenticate, you want to verify, and you want to make it as
    streamlined as possible. Cryptography protocols such as TLS/HTTPS and SSH help
    with preventing this activity by verifying the source, and source port randomization
    reduces the likelihood of a DNS spoof attempt via a race condition flaw being
    successful.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, DNSSEC or secure DNS is a method of using cryptographically signed
    certificates to prove the authenticity of DNS data. All of the original top-level
    domains (and many country-code TLDs) support DNSSEC.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sniffing attacks**, as we discussed in the *Sniffing tools* section of this
    chapter, is when network traffic is captured by utilizing a sniffer such as *Wireshark*
    or *Ettercap*. Wireshark is a commonly used tool in IT, with excellent features
    for diagnosing connectivity or web application issues. However, when a malicious
    actor utilizes a sniffer (providing the traffic is unencrypted), network traffic
    can easily be read, which could lead to credentials being captured and network
    exploitation.'
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing defense and detection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Typically, when we're looking at sniffing attacks or network monitoring, the
    mitigation is centered around utilizing the appropriate protocols that are protected
    with encryption. Rather than use HTTP, use HTTP over TLS. Rather than use FTP,
    use SFTP. Instead of Telnet, use SSH.
  prefs: []
  type: TYPE_NORMAL
- en: If you're forced to use the old/insecure protocols, you could potentially route
    them over a VPN and wrap them in an encrypted tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, to prevent malicious actors from being able to utilize these tools
    on your network, you may want to set up a prevention/notification for any time
    a known network monitor is installed or executed on a system. Furthermore, utilizing
    switches instead of hubs can prevent traffic from being sprayed all over your
    network, and mitigate against a non-admin user device becoming compromised.
  prefs: []
  type: TYPE_NORMAL
- en: DoS attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have we covered these? I'm even starting to lose track here! A **DoS** attack
    is a way to overwhelm a system or network by creating more requests than it can
    process. It's achieved either through a flood of traffic, or though very clever
    timeout attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think back to what we learned about the three-way TCP connection handshake
    and how that works, while using Elon''s joke:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So, after your initial `SYN`, what would happen if you never confirmed the server's
    `SYN-ACK` response with an `ACK`, but instead you opened another connection with
    the first SYN request again? And again, and again, and again? Well, the server
    waits for a response for a set amount of time before closing the connection, and
    eventually, you would make the server fill up their potential connections. This
    is called a **SYN flood**, or a **half-open attack**.
  prefs: []
  type: TYPE_NORMAL
- en: There are DoS attacks for the application layer, along with DoS attacks for
    the network, but generally, a DoS attack is successful when it causes a system
    that is serving legitimate users to stop doing so.
  prefs: []
  type: TYPE_NORMAL
- en: You might be targeted by a DoS attack for political purposes, chaotic reasons,
    blackmail, revenge, hacktivism, or because a group thinks it's funny, also known
    as *"for the lulz"*.
  prefs: []
  type: TYPE_NORMAL
- en: DDoS attacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Distributed Denial-of-Service (DDoS)** attacks are DoS attacks that come
    from various sources, making it very difficult to understand which traffic is
    legitimate and which traffic is part of the botnet.'
  prefs: []
  type: TYPE_NORMAL
- en: The number of nodes that constitute a DDoS rather than a DoS isn't as important
    as whether you are able to discern between the nodes that are legitimate users,
    and those that are contributing to the malicious traffic taking your network or
    systems down.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, GitHub has been subject to a 1.35 terabit-per-second DDoS attack,
    which was achieved through *amplification* by "bouncing" traffic from a separate
    service (memcache, running on multiple servers in this instance) to the GitHub
    destination, creating up to 51,000 packets per source request. In order to get
    to 1.35 terabits-per-second, you're looking at around 130 million packets per
    second.
  prefs: []
  type: TYPE_NORMAL
- en: DoS defense
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When we''re looking at a DoS, we''re generally looking at a single source of
    requests, so we could potentially do some of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Filter traffic from unwanted sources, such as those trying to DoS your systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the number of requests your servers can put into their backlog instead
    of handling them in real time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the timeout duration, for which your server waits for the final ACK
    response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the server isn't able to handle many more requests before becoming overwhelmed,
    you can configure it to recycle the oldest request that hasn't been confirmed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can increase the cache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can utilize firewalls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DDoS defense and detection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similarly, when defending against a DoS, you want to prevent illicit DDoS traffic
    from reaching your server to begin with. In my previous example, the memcache
    DDoS at GitHub could be blocked by simply blocking port `11211` on an `11211`
    is the memcache source port, making for a simple mitigation.
  prefs: []
  type: TYPE_NORMAL
- en: However, how can your system discern legitimate traffic from illegitimate traffic
    when it's distributed, and not based on a pattern or from a port that can easily
    be blocked?
  prefs: []
  type: TYPE_NORMAL
- en: You want a system that can detect, classify, and respond to traffic requests
    that are seen as illegitimate, either through hardware or software solutions.
    For example, an application frontend hardware solution can be used along with
    routers and switches to analyze data packets and handle the traffic based on insights.
    This could include updating the ACL or rate limiting certain sources. Your IPS/IDS
    are also able to provide valuable insight into your network traffic, in order
    to identify real and illegitimate traffic and react with firewall rules in a reactive
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Web application firewalls can identify legitimate traffic to your web app based
    on insights and intelligence from the vendors' other customers, and how often
    the request has been seen previously as a malicious source, not completing requests.
  prefs: []
  type: TYPE_NORMAL
- en: Something you would like to avoid is your cloud service, with elastic load balancing,
    from being vulnerable to a massive surge of traffic, thus leading to your wallet
    being heavily impacted by the upcoming cloud service provider bill. This is also
    known as a **Denial-of-Wallet** attack. There are various solutions for this that
    are generally offered by the cloud service providers themselves, and they can
    be part of your defense in depth strategy. It could be worth having a discussion
    with them, or reading their documentation on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there are DDoS protection providers, such as Cloudflare and Imperva,
    that provide CDN and threat intelligence solutions to help your organization withstand
    increased levels of traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Typosquatting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`www.arifrance.com` (note the misspelling of "air").'
  prefs: []
  type: TYPE_NORMAL
- en: Typosquatting defense
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unfortunately, there are a limited number of defenses against typosquatting.
    You can preemptively purchase similar domains to your business in order to reduce
    the likelihood that a malicious actor can buy one, which is tricky enough to fool
    your user base. You can also file a case with the **World Intellectual Property
    Organization** (**WIPO**), to complain that your registered domain name is confusingly
    similar to the malicious actors' registered domain, and that the malicious actor
    has no legitimate interest in that domain. It's not ideal, but that's the situation.
  prefs: []
  type: TYPE_NORMAL
- en: Strategies for protecting network security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have gone through the TCP/IP suite and OSI model, network components
    and protocols, network devices and applications, some of the attacks, and how
    to defend against and detect those attacks, I would like to discuss some strategies
    you can use to actually protect your network and prevent malicious actors from
    having a field day in your estate.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we will want to do, in terms of a best practice, is define our strategy
    as a network security policy. This is a document that describes the rules that
    your organization will need to abide by in the realm of how the organization's
    environment is designed, maintained, protected, revised, and deprovisioned.
  prefs: []
  type: TYPE_NORMAL
- en: This document doesn't need to be complex, but can be as detailed as required
    to ensure the organization's network is effectively protected. How passwords or
    email attachments are handled in-transit can be included in this policy, or preferred
    encryption methods for various communications, if that's important to mitigating
    the risks inherent to your organization. Most importantly, you should highlight
    the change control process for your organization's network. If a change needs
    to be made, those responsible will need to abide by this policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to draft this policy, you will need a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: Top management buy-in. There's no way you're going to successfully change the
    actions of individuals in your organization, and control their access to services
    online, without the blessing from top management. If you don't have this, handling
    any pushback will be impossible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding your organization's requirements from a regulatory and compliance
    perspective, in order to effectively avoid compliance risks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding your organization's network, information, and services. Without
    this, how can you create an effective and relevant policy?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding your users and their access requirements in their daily work.
    Yet again, you need this document to reflect your reality; otherwise, it's just
    a sheet of paper with nonsense written on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will want to keep this document up to date, and update it any time any
    of the following occur:'
  prefs: []
  type: TYPE_NORMAL
- en: Technological changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to regulatory requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to terminology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to your asset impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the threat landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once these processes and policies have been established, you can execute your
    plan for implementing the appropriate controls to protect your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Keep it simple
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don't want undue complexity in your network, and you don't want to make
    the security complex either. You might have a hybrid environment, where your on-premises
    and cloud assets are communicating with each other, or a network where the scope
    is unimaginable to our human brains… this is all absolutely fine, as long as you
    keep it as simple as possible.
  prefs: []
  type: TYPE_NORMAL
- en: What you need is visibility into your assets, clarity in your architecture and
    design, and a fantastic understanding of your organization's activities. You need
    an idea of what the core function of each asset is, and (for example) how new
    firewall rules may affect each asset. This should be documented, and optimizations
    should be continually designed, planned, implemented, and tested.
  prefs: []
  type: TYPE_NORMAL
- en: Business continuity and disaster recovery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we've previously discussed, it's highly valuable to have a plan for when
    things go wrong. Regardless of the level of risk your organization faces, I'm
    willing to bet that it's important that you are able to restore business operations
    quickly and effectively in the event of a disruption. Disruption can often happen
    at the network level, so having the appropriate **Business Continuity Plan** (**BCP**)
    and **Disaster Recovery Plan** (**DRP**) in place that takes this into consideration
    is paramount to your organization's success.
  prefs: []
  type: TYPE_NORMAL
- en: Backup and restore procedures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve mentioned this one before as well, but it''s highly important for keeping
    your network alive: you need to have a plan and procedure for backing up, testing,
    and recovering the systems that perform your critical business functions, while
    focusing on risk mitigation and improving recovery times.'
  prefs: []
  type: TYPE_NORMAL
- en: Insider threat mitigations/third-party threats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An insider threat has access to your network assets and can escalate their privileges
    more easily than an external threat can. In order to mitigate against these threats,
    either from intentional or accidental sources, we should consider employing methods
    from the Zero Trust approach.
  prefs: []
  type: TYPE_NORMAL
- en: Zero Trust
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can't expect that just because you have a firewall, a segregated network,
    and mitigations against sniffing, spoofing, or DNS hijacking that your network
    is safe and secure from threats that have gained access to (or naturally have
    access to) your internal estate.
  prefs: []
  type: TYPE_NORMAL
- en: If internal users always have elevated privileges, regardless of context, a
    compromised account in the wrong hands is going to cause major issues. As a result,
    we could move to a *least privilege* model, where we only allow a user, device,
    or account to access what it needs in order to complete the task specified. Unfortunately,
    that still doesn't fully mitigate against a compromised admin account.
  prefs: []
  type: TYPE_NORMAL
- en: What we'd be more interested in is a **Zero Trust** model, granting privilege
    based on context, such as the requester's identity, device, and location, along
    with least privilege access, and just-in-time access to mitigate the harm that
    can be done. Any request for elevated privileges can be accompanied with *Two-Factor
    Authentication (2FA)*, abiding by the "*Never trust, always verify*" mantra.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we will want to recognize and report suspicious behavior and act
    on it automatically to reduce the impact of a compromise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than the classic "*castle-and-moat*" style network perimeter, where
    anybody inside the network is considered to be a trusted user, a major concentration
    point here is that we consider devices, both internal and external to the network
    perimeter, in the same way: with *Zero Trust*. We need proof, not faith. It''s
    an ideology rather than a technology stack, and it can be achieved with some very
    basic rules.'
  prefs: []
  type: TYPE_NORMAL
- en: Another ideology of Zero Trust networks is to microsegment your estate into
    several different secure "zones" for specific groups. If a user doesn't need to
    access certain data, then they don't have access to that zone. It requires an
    understanding of your organization's data, as well as a technological solution
    for preventing access. Data loss prevention tools can work together with labels
    to protect various types of sensitive and confidential information access by the
    wrong users, utilizing encryption and parsing the data of the file itself to detect
    known patterns that may indicate a file contains such information.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more catchphrase from the Zero Trust school is to "*assume breach*". Essentially,
    you must assume that your network is compromised. This is how we mitigate against
    insider threats with Zero Trust: by reducing the ability for a compromised account
    to perform overarching actions across the entire estate. Utilizing segmentation
    of user privileges, along with the **two-man principle**, where you need more
    than one person''s approval to be able to perform an action, and **segregation
    of duties** where a single action isn''t completed by a single person from end-to-end,
    you are able to reduce the likelihood of a sole actor being able to silently make
    changes to your network.'
  prefs: []
  type: TYPE_NORMAL
- en: The fantastic thing about this ideology is that it allows for a distributed
    team, with a less-defined network boundary, which is very relevant in the modern
    era where organizations are dealing with multi-cloud and on-premises hybrid environments,
    combined with users who are working from home and using their own devices.
  prefs: []
  type: TYPE_NORMAL
- en: Software and firmware updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Patching your systems with security updates will have an enormous impact on
    the overall health of your estate, and will bolster your information security.
    Additionally, up-to-date systems are more agile and better at processing information.
    Yet, with all of these advantages, most organizations that I've worked with have
    major issues with their legacy systems; they're outdated, past the manufacturer's
    *end of life*, unable to be renewed due to incompatible software, or have an unknown
    level of risk in the event of an update.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, it's highly important to define an **asset life cycle**, including
    the provisioning, updating, maintenance, and disposal processes. In addition to
    this, **vulnerability management** should be considered and defined, with a clear
    plan for identifying, classifying, remediating, and mitigating against known vulnerabilities
    in your estate. This is to ensure that, in 10 years, you don't end up with *legacy
    servers* running the equivalent of Windows XP or Windows Server 2003 today, which
    is extremely vulnerable to ransomware, highly incompatible, slow, and brittle.
    More information on how we can handle updates and vulnerabilities can be found
    in [*Chapter 7*](B16611_07_Final_JM_ePub.xhtml#_idTextAnchor123)*, Owning Security
    Operations*.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring secure communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The communication that occurs to and from your estate and inside your networks
    is vulnerable to being eavesdropped on and tampered with. Data encryption is a
    key part of ensuring your network is secure and protecting your organizational
    assets. *Data at rest* can be encrypted, as previously discussed, but encrypting
    *data in transit* should also be a key focus for security professionals looking
    to mitigate against eavesdropping and tampering threats.
  prefs: []
  type: TYPE_NORMAL
- en: '*Encryption* is not only able to help protect the data by making it unreadable
    to unauthorized entities, but it can also confirm the *integrity* of the information,
    and also confirm the *identity* of the sender and recipient of a message.'
  prefs: []
  type: TYPE_NORMAL
- en: The downside to this is that you need to trust that the entities managing the
    keys in the encryption process, such as the Certificate Authority, are secure.
    Performing **due diligence** and having a good **vendor assessment program** in
    place can help you understand the risk of this happening, and potentially cause
    you to reconsider the vendor you are currently using, in favor of one with a better
    security posture.
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect of secure communication is that communications can occur outside
    of the realm of your estate. Your users may communicate with third parties by
    using a cloud service or text messages on their mobile device, and it's difficult
    to keep on top of this activity. Proper education in your organization about your
    policies regarding these practices can reduce the likelihood of an accidental
    breach. When it comes to malicious actors, you might want to think about a **Cloud
    Application Security Broker** (**CASB**) for your network, which blocks certain
    actions being performed on cloud web apps. It could, for example, prevent a file
    with a certain type of label from being uploaded to *Dropbox* or *Twitter*.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud network security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What I am seeing more and more of is the transition toward the public cloud,
    which leads to relinquishing responsibility when it comes to the physical (and
    sometimes architectural) aspects of network security. Does the fact that you've
    outsourced your network security mean that you're not responsible for it anymore?
    Who is responsible?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to that question is always that *top management is ultimately responsible
    for security*. As we've said previously, they have hired you to help them reduce
    their risk, and part of that undertaking is understanding the level of risk that
    exists, comparing that risk level against your organization's risk appetite, and
    mitigating it until the risk is below that line.
  prefs: []
  type: TYPE_NORMAL
- en: So, outsourcing physical and architectural aspects of network security to a
    **cloud service provider**, or **CSP**, has risks and opportunities, and it's
    your responsibility to understand those.
  prefs: []
  type: TYPE_NORMAL
- en: Often, using due diligence and performing vendor security assessments will help
    you understand how your suppliers are handling these aspects of security for your
    outsourced datacenters. In addition to understanding the security controls that
    the service provider has put into place, you can get a better understanding of
    the products that the providers offer, such as data encryption, monitoring and
    logs, access control, key vaults, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to understand what falls under your organization's responsibility,
    rather than the CSP, in the cloud's **shared responsibilities model**.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to quickly make changes to your infrastructure in the cloud means
    that change control processes may not be considered, leading to misconfiguration.
    It's pivotal to include the cloud in the wider scope of your network security
    policy's *Change Management* section. Changes that can be made very quickly have
    the potential to bring your network to its knees. Additionally, changes that have
    been made without oversight could include misconfigurations, leading to easy breaches
    from malicious actors.
  prefs: []
  type: TYPE_NORMAL
- en: Along with the change management policies comes proper testing and implementation
    of security controls for new or changed infrastructure before it goes live into
    production. Additionally, a deprovisioning procedure should be included to complete
    an instance's life cycle. It's important to keep an eye on this and control it,
    both in terms of policy and automation rules, otherwise your estate will continue
    to grow with more and more insecure instances, with old instances not being deprovisioned
    properly, giving easy access to confidential information.
  prefs: []
  type: TYPE_NORMAL
- en: Education and awareness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might determine that educating your organization's users and administrators
    about how information is handled is necessary for success and risk mitigation.
    To do so, you can create an information security awareness policy, which will
    dictate the organization's requirements on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: The requirements aren't set in stone, so you may want to ensure that all employees
    that access organization data must complete training courses provided by your
    organization on how to securely handle such data.
  prefs: []
  type: TYPE_NORMAL
- en: You might be able to educate users on phishing, and what constitutes **Personally
    Identifiable Information** (**PII**) or **Protected Health information** (**PHI**).
    You might also be able to create security champions, as we've mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: Security Operations Center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we have a **Security Operations Center** (**SOC**), which is a team
    of security analysts, engineers, and managers that monitor the network for anomalies
    and issues and react accordingly, in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Oftentimes, in order to do this, they must utilize SIEM systems and aggregate
    signals from all of the network hardware and software they can in order to detect
    outages or intrusions. This includes what we've talked about earlier in this chapter
    (and in the previous one) regarding IDS, IPS, firewalls, CDNs, antivirus, and
    vulnerability management systems all sending data to the centralized *single-pane-of-glass*
    observation solution.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading on security monitoring best practices can be found in [*Chapter
    7*](B16611_07_Final_JM_ePub.xhtml#_idTextAnchor123)*, Owning Security Operations.*
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: What an absolute behemoth of a chapter! Are you okay? Do you need a second?
    I think I may…
  prefs: []
  type: TYPE_NORMAL
- en: It's so great to be finished with this chapter, having covered as much as we
    have. At the start of this chapter, we talked about the Internet Protocol suite
    and OSI model, before moving on to the various devices and applications we can
    use to set up a network, such as switches, routers, firewalls, and CDNs.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we looked at some common network attacks, as well as how to defend
    against and detect them. After that, we talked about typosquatting, DNS hijacking,
    and MITM attacks, which helped us think in the way a malicious actor might.
  prefs: []
  type: TYPE_NORMAL
- en: From there, we looked at the strategies for protecting network security, including
    making policies, reducing complexity, business continuity, mitigating against
    insider threats and Zero Trust, updates, and cloud security, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will move on to a topic that I''m sure will float your boat: controlling
    access and managing identity. Let''s get started!'
  prefs: []
  type: TYPE_NORMAL
