["```\npip install colorama==0.4.1  \n```", "```\npip install pyfiglet==0.8.post0\n```", "```\n>>> from pyfiglet import Figlet \n>>> f = Figlet(font='banner') \n>>> print(f.renderText('Forensics')) \n#######                                                     \n#        ####  #####  ###### #    #  ####  #  ####   ####   \n#       #    # #    # #      ##   # #      # #    # #       \n#####   #    # #    # #####  # #  #  ####  # #       ####   \n#       #    # #####  #      #  # #      # # #           #  \n#       #    # #   #  #      #   ## #    # # #    # #    #  \n#        ####  #    # ###### #    #  ####  #  ####   ####  \n```", "```\n  |-- framework.py \n  |-- requirements.txt \n  |-- plugins \n      |-- __init__.py \n      |-- exif.py \n      |-- id3.py \n      |-- office.py \n      |-- pst_indexer.py \n      |-- setupapi.py \n      |-- userassist.py \n      |-- wal_crawler.py \n      |-- helper \n          |-- __init__.py \n          |-- utility.py \n          |-- usb_lookup.py \n  |-- writers \n      |-- __init__.py \n      |-- csv_writer.py \n      |-- xlsx_writer.py \n      |-- kml_writer.py \n```", "```\npip install -r requirements.txt \n```", "```\n002 from __future__ import print_function\n003 import os\n004 import sys\n005 import logging\n006 import argparse\n007 import plugins\n008 import writers\n009 import colorama\n010 from datetime import datetime\n011 from pyfiglet import Figlet\n012 \n013 colorama.init()\n```", "```\n049 class Framework(object): \n... \n051     def __init__(): \n... \n061     def run(): \n... \n074     def _list_files(): \n... \n115     def _run_plugins(): \n```", "```\n207     class Plugin(object): \n... \n209         def __init__(): \n... \n215         def run(): \n... \n236         def write(): \n```", "```\n258     class Writer(object): \n... \n260         def __init__(): \n... \n271         def run(): \n```", "```\n279 if __name__ == '__main__':\n280 \n281     parser = argparse.ArgumentParser(description=__description__,\n282                                 epilog='Developed by ' +\n283                                 __author__ + ' on ' +\n284                                 __date__)\n285     parser.add_argument('INPUT_DIR',\n286         help='Base directory to process.')\n287     parser.add_argument('OUTPUT_DIR', help='Output directory.')\n288     parser.add_argument('-x', help='Excel output (Default CSV)',\n289         action='store_true')\n290     parser.add_argument('-l',\n291         help='File path and name of log file.')\n292     args = parser.parse_args()\n```", "```\n294     if(os.path.isfile(args.INPUT_DIR) or\n295             os.path.isfile(args.OUTPUT_DIR)):\n296         msg = 'Input and Output arguments must be directories.'\n297         print(colorama.Fore.RED + '[-]', msg)\n298         sys.exit(1)\n```", "```\n300     if args.l:\n301         if not os.path.exists(args.l):\n302             os.makedirs(args.l) # create log directory path\n303         log_path = os.path.join(args.l, 'framework.log')\n304     else:\n305         log_path = 'framework.log'\n```", "```\n307     framework = Framework(args.INPUT_DIR, args.OUTPUT_DIR,\n308     log_path, excel=args.x)\n309     framework.run()\n```", "```\n049 class Framework(object): \n```", "```\n051     def __init__(self, input_directory, output_directory, log,\n052     **kwargs):\n053         self.input = input_directory\n054         self.output = output_directory\n055         logging.basicConfig(filename=log, level=logging.DEBUG,\n056                         format=('%(asctime)s | %(levelname)s | '\n057                         '%(message)s'), filemode='a')\n058         self.log = logging.getLogger(log)\n059         self.kwargs = kwargs\n```", "```\n061     def run(self):\n062         msg = 'Initializing framework'\n063         print('[+]', msg)\n064         self.log.info(msg)\n065         f = Figlet(font='doom')\n066         print(f.renderText('Framework'))\n067         self.log.debug('System ' + sys.platform)\n068         self.log.debug('Version ' + sys.version) \n```", "```\n069         if not os.path.exists(self.output):\n070             os.makedirs(self.output)\n071         self._list_files()\n072         self._run_plugins() \n```", "```\n074     def _list_files(self):\n075         msg = 'Indexing {}'.format(self.input)\n076         print('[+]', msg)\n077         logging.info(msg)\n078 \n079         self.wal_files = []\n080         self.setupapi_files = []\n081         self.userassist_files = []\n082         self.exif_metadata = []\n083         self.office_metadata = []\n084         self.id3_metadata = []\n085         self.pst_files = []\n```", "```\n087         for root, subdir, files in os.walk(self.input,\n088         topdown=True):\n089             for file_name in files:\n090                 current_file = os.path.join(root, file_name)\n091                 if not os.path.isfile(current_file):\n092                     logging.warning((u'Could not parse file {}...'\n093                     ' Skipping...').format((current_file)))\n094                     continue\n095                 ext = os.path.splitext(current_file)[1].lower()\n```", "```\n096                 if current_file.lower().endswith('ntuser.dat'):\n097                     self.userassist_files.append(current_file)\n098                 elif 'setupapi.dev.log' in current_file.lower():\n099                     self.setupapi_files.append(current_file)\n100                 elif ext == '.jpeg' or ext == '.jpg':\n101                     self.exif_metadata.append(current_file)\n102                 elif(ext == '.docx' or\n103                         ext == '.pptx' or\n104                         ext == '.xlsx'):\n105                     self.office_metadata.append(current_file)\n106                 elif ext == '.mp3':\n107                     self.id3_metadata.append(current_file)\n108                 elif ext == '.pst' or ext == '.ost':\n109                     self.pst_files.append(current_file)\n110                 elif ext.endswith('-wal'):\n111                     self.wal_files.append(current_file)\n112                 else:\n113                     continue\n```", "```\n115     def _run_plugins(self):\n116         # Run Wal Crawler\n117         if len(self.wal_files) > 0:\n118             wal_plugin = Framework.Plugin('wal_crawler',\n119             self.wal_files, self.log)\n120             wal_output = os.path.join(self.output, 'wal')\n121             wal_plugin.run(plugins.wal_crawler.main)\n122             if self.kwargs['excel'] is True:\n123                 wal_plugin.write(wal_output, recursion=1, excel=1)\n124             else:\n125                 wal_plugin.write(wal_output, recursion=1)\n```", "```\n182         # Run ID3 metadata parser\n183         if len(self.id3_metadata) > 0:\n184             id3_metadata_plugin = Framework.Plugin('id3_metadata',\n185             self.id3_metadata, self.log)\n186             id3_metadata_output = os.path.join(self.output,\n187                 'metadata')\n188             id3_metadata_plugin.run(plugins.id3.main)\n189             if self.kwargs['excel'] is True:\n190                 id3_metadata_plugin.write(id3_metadata_output,\n191                     excel=1)\n192             else:\n193                 id3_metadata_plugin.write(id3_metadata_output)\n```", "```\n207     class Plugin(object): \n```", "```\n209         def __init__(self, plugin, files, log):\n210             self.plugin = plugin\n211             self.files = files\n212             self.log = log\n213             self.results = {'data': [], 'headers': None} \n```", "```\n215         def run(self, function):\n216             msg = 'Executing {} plugin'.format(self.plugin)\n217             print(colorama.Fore.RESET + '[+]', msg)\n218             self.log.info(msg)\n```", "```\n220             for f in self.files:\n221                 try:\n222                     data, headers = function(f)\n223                     self.results['data'].append(data)\n224                     self.results['headers'] = headers\n225 \n226                 except TypeError:\n227                     self.log.error(('Issue processing {}. '\n228                         'Skipping...').format(f))\n229                     continue\n```", "```\n231             msg = 'Plugin {} completed at {}'.format(self.plugin,\n232             datetime.now().strftime('%m/%d/%Y %H:%M:%S'))\n233             print(colorama.Fore.GREEN + '[*]', msg)\n234             self.log.info(msg)\n```", "```\n236         def write(self, output, **kwargs):\n237             msg = 'Writing results of {} plugin'.format(\n238             self.plugin)\n239             print(colorama.Fore.RESET + '[+]', msg)\n240             self.log.info(msg)\n241             if not os.path.exists(output):\n242                 os.makedirs(output)\n```", "```\n243             if 'excel' in kwargs.keys():\n244                 Framework.Writer(writers.xlsx_writer.writer,\n245                     output, self.plugin + '.xlsx',\n246                     self.results['headers'],\n247                     self.results['data'], **kwargs)\n248             else:\n249                 Framework.Writer(writers.csv_writer.writer,\n250                     output, self.plugin + '.csv',\n251                     self.results['headers'],\n252                     self.results['data'], **kwargs)\n253             if self.plugin == 'exif_metadata':\n254                 Framework.Writer(writers.kml_writer.writer,\n255                     output, '', self.plugin + '.kml',\n256                     self.results['data'])\n```", "```\n258     class Writer(object): \n```", "```\n260         def __init__(self, writer, output, name, header, data,\n261         **kwargs):\n262             self.writer = writer\n263             self.output = os.path.join(output, name)\n264             self.header = header\n265             self.data = data\n266             self.recursion = None\n267             if 'recursion' in kwargs.keys():\n268                 self.recursion = kwargs['recursion']\n269             self.run()\n```", "```\n271         def run(self):\n272             if self.recursion:\n273                 self.writer(self.output, self.header, self.data,\n274                     recursion=self.recursion)\n275             else:\n276                 self.writer(self.output, self.header, self.data)\n```", "```\n001 from __future__ import print_function\n002 import sys\n003 import os\n004 if sys.version_info[0] == 2:\n005     import unicodecsv as csv\n006 elif sys.version_info[0] == 3:\n007     import csv \n```", "```\n038 def writer(output, headers, output_data, **kwargs):\n039     \"\"\"\n040     The writer function uses the csv.DictWriter module to write\n041     list(s) of dictionaries. The DictWriter can take a fieldnames\n042     argument, as a list, which represents the desired order of\n043     columns.\n044     :param output: The name of the output CSV.\n045     :param headers: A list of keys in the dictionary that\n046     represent the desired order of columns in the output.\n047     :param output_data: The list of dictionaries containing\n048     embedded metadata.\n049     :return: None\n050     \"\"\"\n051 \n052     if sys.version_info[0] == 2:\n053         csvfile = open(output, \"wb\")\n054     elif sys.version_info[0] == 3:\n055         csvfile = open(output, \"w\", newline='',\n056             encoding='utf-8')\n057 \n058     with csvfile:\n059         # We use DictWriter instead of writer to write\n060         # dictionaries to CSV.\n061         w = csv.DictWriter(csvfile, fieldnames=headers,\n062             extrasaction='ignore')\n```", "```\n064         # Writerheader writes the header based on the supplied\n065         # headers object\n066         try:\n067             w.writeheader()\n068         except TypeError:\n069             print(('[-] Received empty headers...\\n'\n070                 '[-] Skipping writing output.'))\n071             return\n```", "```\n073         if 'recursion' in kwargs.keys():\n074             for l in output_data:\n075                 for data in l:\n076                     if data:\n077                         w.writerow(data)\n078         else:\n079             for data in output_data:\n080                 if data:\n081                     w.writerow(data)\n```", "```\n001 from __future__ import print_function\n002 import xlsxwriter\n...\n032 ALPHABET = [chr(i) for i in range(ord('A'), ord('Z') + 1)]\n```", "```\n035 def writer(output, headers, output_data, **kwargs):\n036     \"\"\"\n037     The writer function writes excel output for the framework\n038     :param output: the output filename for the excel spreadsheet\n039     :param headers: the name of the spreadsheet columns\n040     :param output_data: the data to be written to the excel\n041     spreadsheet\n042     :return: Nothing\n043     \"\"\"\n044     wb = xlsxwriter.Workbook(output)\n045 \n046     if headers is None:\n047         print('[-] Received empty headers... \\n'\n048             '[-] Skipping writing output.')\n049         return\n050 \n051     if len(headers) <= 26:\n052         title_length = ALPHABET[len(headers) - 1]\n053     else:\n054         title_length = 'Z'\n```", "```\n056     ws = add_worksheet(wb, title_length)\n057 \n058     if 'recursion' in kwargs.keys():\n059         for i, data in enumerate(output_data):\n060             if i > 0:\n061                 ws = add_worksheet(wb, title_length)\n062             cell_length = len(data)\n063             tmp = []\n064             for dictionary in data:\n065                 tmp.append(\n066                 [str(dictionary[x]) if x in dictionary.keys() else '' for x in headers]\n067                 )\n```", "```\n069             ws.add_table(\n070                 'A3:' + title_length + str(3 + cell_length),\n071                 {'data': tmp,\n072                 'columns': [{'header': x} for x in headers]})\n```", "```\n074     else:\n075         cell_length = len(output_data)\n076         tmp = []\n077         for data in output_data:\n078             tmp.append([str(data[x]) if x in data.keys() else '' for x in headers])\n079         ws.add_table(\n080             'A3:' + title_length + str(3 + cell_length),\n081             {'data': tmp,\n082             'columns': [{'header': x} for x in headers]})\n083 \n084     wb.close()\n```", "```\n087 def add_worksheet(wb, length, name=None):\n088     \"\"\"\n089     The add_worksheet function creates a new formatted worksheet\n090     in the workbook\n091     :param wb: The workbook object\n092     :param length: The range of rows to merge\n093     :param name: The name of the worksheet\n094     :return: ws, the worksheet\n095     \"\"\"\n096     title_format = wb.add_format({'bold': True,\n097     'font_color': 'black', 'bg_color': 'white', 'font_size': 30,\n098     'font_name': 'Arial', 'align': 'center'})\n099     ws = wb.add_worksheet(name)\n100 \n101     ws.merge_range('A1:' + length + '1', 'XYZ Corp',\n102         title_format)\n103     ws.merge_range('A2:' + length + '2', 'Case ####',\n104         title_format)\n105     return ws \n```", "```\npython framework.py /mnt/evidence ~/Desktop/framework_output \npython framework.py /mnt/evidence ~/Desktop/framework_output -l ~/Desktop/logs -x \n```"]