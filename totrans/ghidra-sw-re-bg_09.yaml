- en: '*Chapter 7*: Using Ghidra Headless Analyzer'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the non-GUI capabilities of Ghidra, which
    are very useful when analyzing multiple binaries, automating tasks, or integrating
    Ghidra with other tools.
  prefs: []
  type: TYPE_NORMAL
- en: You've probably seen some films with hackers using black terminals with green
    font. There is some truth behind this stereotype. GUI applications are beautiful,
    user-friendly, and intuitive but they are also slow. After analyzing Ghidra headless
    mode, you will learn why shell applications and command line-based tools are the
    most efficient solution in a lot of cases.
  prefs: []
  type: TYPE_NORMAL
- en: Headless Analyzer is a powerful command line-based (non-GUI) version of Ghidra,
    which will be introduced in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to learn why a command line-based tool is very
    useful in a lot of cases. We will learn how to use headless mode to populate projects
    and how to perform an analysis of existing binaries. We will also learn how to
    run non-GUI scripts (and GUI scripts that don't make use of GUI functionalities)
    in a project using Ghidra Headless Analyzer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why use headless mode?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and populating projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing analysis on imported or existing binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running non-GUI scripts in a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter07](https://github.com/PacktPublishing/Ghidra-Software-Reverse-Engineering-for-Beginners/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video: [https://bit.ly/3oAM6Uy](https://bit.ly/3oAM6Uy)'
  prefs: []
  type: TYPE_NORMAL
- en: Why use headless mode?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously said, non-GUI applications allow you to work faster because, generally
    speaking, it is faster to write a command than to perform a GUI operation such
    as clicking a menu option, and then filling in some form, and finally submitting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, non-GUI applications can be easily integrated with scripts,
    allowing you to apply a process to multiple binaries, integrate the application
    with other tools, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you are analyzing some malware using Ghidra and then you identify an
    encrypted string containing the **Command and Control** (**C&C**) URL pointing
    to the server that controls the malware. Then, you are required to retrieve the
    C&C URLs of thousands of malware samples in order to sinkhole the domains, in
    other words, in order to deactivate thousands of malware samples.
  prefs: []
  type: TYPE_NORMAL
- en: Given this situation, to load every malware sample into Ghidra and look for
    the C&C URL is not an option, even if you have developed a script to decrypt the
    C&C URL, because it will consume more time than necessary. It is in these cases
    where you will need to use Ghidra headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ghidra headless mode can be launched using the `analyzeHeadless.bat` and `analyzeHeadless`
    scripts (for Microsoft Windows and Linux/macOS operating systems, respectively)
    located in Ghidra''s `support` directory. The command syntax is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, Ghidra headless mode can deal with both individual projects
    and shared projects, which must be specified as a `server` repository URL using
    the `ghidra://` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Ghidra headless documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about the details and parameters of Ghidra headless
    mode, please check out the offline documentation included in the Ghidra program
    distribution: [https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html](https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the Ghidra headless mode parameters will be discussed in this chapter
    but more exhaustive information is available in the Ghidra headless mode documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and populating projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest operation that you can perform using Ghidra headless mode is to
    create a project containing a binary file.
  prefs: []
  type: TYPE_NORMAL
- en: As we did in *Section 1*, *Getting Started with Ghidra*, let's create a new
    empty project (I will name it `MyFirstProject` and it will be located in the `C:\Users\virusito\projects`
    directory) containing a *hello world* binary file named `hello_world.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `C:\Users\virusito\projects` directory must exist as it will
    not be created for you. On the other hand, `MyFirstProject` will be created by
    Ghidra, so you don't need to create it.
  prefs: []
  type: TYPE_NORMAL
- en: Notice also that if the optional `[/<folder_path>]` folder path is included
    in the command, the import(s) will be rooted under this project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please execute the following lines to create the `MyFirstProject` Ghidra project
    located in the `C:\Users\virusito\projects` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Using Ghidra headless mode to create a Ghidra project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_07_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Using Ghidra headless mode to create a Ghidra project
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the `INFO` section of the output, some analysis was performed on
    the `hello_world.exe` file. You can omit the analysis by appending the `–noanalysis`
    flag to the previous command. The result of this Ghidra headless mode command
    is the following project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Ghidra project created using Ghidra headless mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Ghidra project created using Ghidra headless mode
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also add multiple binaries at once by using wildcard characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*` to match a sequence of characters used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`?` to match a single character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[a-z]` to match a range of characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[!a-z]` to match when a range of characters does not appear'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For instance, we can create a project named `MyFirstProject` containing all
    the executable files that exist in the `hello_world` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to specify some interesting flags:'
  prefs: []
  type: TYPE_NORMAL
- en: Include the `-recursive` flag to analyze subfolders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `-overwrite` flag to overwrite existing files in the project when
    a conflict happens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `-readOnly` flag to not save imported files into the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `-deleteProject` flag to delete the project after scripts and/or
    analysis have been completed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `-max-cpu <max cpu cores to use>` flag to limit the number of CPUs
    used during headless processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Include the `-okToDelete` flag to allow the program disposition when it is
    in `-process` mode to delete binaries of a project. The following options allow
    you to control program disposition:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- Use `HeadlessContinuationOption.ABORT` to abort scripts or analysis whose
    execution is to take place after this script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Use `HeadlessContinuationOption.ABORT_AND_DELETE` to act as `HeadlessContinuationOption.ABORT`
    but also delete the current (existing) program.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Use `HeadlessContinuationOption.CONTINUE_THEN_DELETE` to delete the (existing)
    program after processing it.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Use `HeadlessContinuationOption.CONTINUE` with analysis and/or scripts.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Include `-loader <desired loader name>` to force the file to be imported using
    a specific loader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include `-processor <languageID>` and/or `-cspec <compilerSpecID>` to indicate
    the processor information and/or compiler specifications, respectively. Available
    languages and compiler specifications are both available in the `ghidra_x.x\Ghidra\Processors\proc_name\data\languages\*.ldefs`
    directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include `-log <path to log file>` to change the analysis and non-script logging
    information from the user's `application.log` directory file to a given log file
    path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you learned how to create a project and how to populate it
    with binaries using headless mode. In the next section, you will learn how to
    perform analysis on the binaries of a Ghidra project.
  prefs: []
  type: TYPE_NORMAL
- en: Performing analysis on imported or existing binaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous section, analysis is performed by default when
    creating a project. On the other hand, you can also run pre-/post-scripts (these
    kinds of scripts will be discussed later in this section) and/or analyze a given
    project using the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, you can perform an analysis of the `hello_world.exe` file located
    in `MyFirstProject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you can also use wildcards and/or the `-recursive` flag when executing
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When importing files, make sure that the specified project is not already open
    in the Ghidra GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Also take into account that when importing in bulk, files starting with `.`
    are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from analyzing a single file or a set of files, you can also run scripts
    targeting these files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, the kinds of scripts you are running are named according to the analysis
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pre-scripts**: These kinds of scripts will be executed before the analysis.
    The syntax is the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Post-scripts**: These kinds of scripts will be executed after the analysis.
    The syntax is the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When executing a pre-/post-script, as you can see in the syntax, you only need
    to provide the name of the script instead of a full path. This is because the
    script will be searched for in `$USER_HOME/ghidra_scripts`. You can modify this
    behavior by configuring a list of paths separated by a `;` character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Also notice that for Linux systems, you need to escape the backslash character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Paths must start with `$GHIDRA_SCRIPT` (corresponding to the Ghidra installation
    directory) or `$GHIDRA_HOME` (corresponding to the user's home directory).
  prefs: []
  type: TYPE_NORMAL
- en: Setting an analysis timeout
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set an analysis timeout to interrupt the analysis if it is taking too
    long. To do that, use the following syntax: `-analysisTimeoutPerFile <timeout
    in seconds>`.'
  prefs: []
  type: TYPE_NORMAL
- en: When the timeout is reached, the analysis is interrupted and the post-scripts
    are executed as scheduled. Post-scripts can check whether the analysis was interrupted
    via the `getHeadlessAnalysisTimeoutStatus()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to specify some interesting options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the path where `*.properties` files used by scripts or secondary subscripts
    exist. Note that paths must start with `$GHIDRA_SCRIPT`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the path where the script logging information will be written:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you know what kinds of scripts exist in Ghidra, next, we will go over
    how to implement and run them in a Ghidra project.
  prefs: []
  type: TYPE_NORMAL
- en: Running non-GUI scripts in a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned before, you can use Ghidra headless mode to run scripts before
    and after the analysis of a file (pre-scripts and post-scripts, respectively).
  prefs: []
  type: TYPE_NORMAL
- en: As you know, non-GUI scripts run without human interaction, so it is recommended
    to write a headless script extending from the `HeadlessScript` class that, at
    the same time, extends from the already-known `GhidraScript` class.
  prefs: []
  type: TYPE_NORMAL
- en: But extending from `HeadlessScript` is not a must. You can write a headed script
    extending from the `GhidraScript` class directly and it will also work when running
    in headless mode, but if some GUI-specific method is called, then `ImproperUseException`
    will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: A similar thing happens in reverse. When a script extending from `HeadlessScript`
    is running on Ghidra headed mode, if a `HeadlessScript`-only method is called,
    an exception will also be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s adapt an existing Ghidra script currently extending from `GhidraScript`
    in order to extend from `HeadlessScript` and see how it works and how it can be
    useful in practice (the `Apache License, Version 2.0` header was omitted for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We can perform the following optional modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace `import ghidra.app.script.GhidraScript` with `ghidra.app.util.headless.HeadlessScript`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend from `HeadlessScript` instead of `GhidraScript`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rename the `FindTextScript` class to `HeadlessFindTextScript`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to perform the following mandatory modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To pass a parameter to an `askXxx()` method such as `askString()`, you will
    need to create an `*.properties` file. So, let''s create a `HeadlessFindTextScript.properties`
    file containing the required string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the string value, not just its address:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the result after the mentioned modifications were applied to the original
    script (the `Apache License, Version 2.0` header was omitted for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can try this post-script over a set of random malware samples. **Please
    ensure you fully understand the risks of analyzing malware before you continue
    reading.**
  prefs: []
  type: TYPE_NORMAL
- en: The risks of analyzing malware
  prefs: []
  type: TYPE_NORMAL
- en: When analyzing malware, your computer and network are at risk (you cannot reduce
    the risk to zero but can try to get it to almost zero). To avoid this risk, we
    covered how to set up a reasonably safe malware analysis environment in [*Chapter
    5*](B16207_05_Final_SK_ePub.xhtml#_idTextAnchor082), *Reversing Malware Using
    Ghidra*, for the purposes of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since, in this case, you will need an internet connection to download samples,
    I recommend you learn how to set up an isolated malware lab using the following
    resources: https://archive.org/details/Day1Part10DynamicMalwareAnalysis and [https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/](https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, start by executing the script that downloads all malware samples
    listed in this malware sample database, [https://das-malwerk.herokuapp.com/](https://das-malwerk.herokuapp.com/),
    generating two directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`compressed_malware_samples`, where malware samples are downloaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decompressed_malware_samples`, where malware samples are uncompressed and
    decrypted by a 7Z decompressor using the password `infected`. Malware samples
    are, by convention, encrypted using the mentioned password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script to download all malware samples is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the output looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Downloading malware samples'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Downloading malware samples
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to execute the script over this set of malware samples, we can use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'The `http://` string, as specified in `HeadlessFindTextScript.properties`,
    is matched once at `0x004c96d8`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Finding the http:// string occurrences in malware samples'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_07_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Finding the http:// string occurrences in malware samples
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check whether this finding is correct using Ghidra headed mode. To do
    this, open the `C:\Users\virusito\projects\MalwareSampleSetProject.gpr` project
    and then open the malware sample file where the `http://` string was found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Openning the malware sample with Ghidra''s CodeBrowser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_07_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Openning the malware sample with Ghidra's CodeBrowser
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the matched address using the *G* hotkey:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Going to the 0x004c96d8 address using Ghidra headed mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16207_07_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Going to the 0x004c96d8 address using Ghidra headed mode
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the string pointed to by this memory address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16207_07_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Showing the http:// string occurrence in the 0x004c96d8 address
    using Ghidra headed mode
  prefs: []
  type: TYPE_NORMAL
- en: Since the string shown in headed mode matches the result of the script, we have
    confirmed that it is working as expected. As you can see, it is very easy to automate
    the analysis of multiple binaries using Ghidra headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use Ghidra headless mode to analyze multiple
    binaries and automate tasks. We started by reviewing the most relevant parameters
    of Ghidra headless mode and then started to apply this knowledge with practical
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to create a project, populate it with binaries, analyze it, and
    run pre-/post-scripts over these binaries. We also learned that is possible to
    execute a GUI script in headless mode and a non-GUI script in headed mode, as
    well as the exceptions that can occur and why.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter of this book, we will cover binary audits using Ghidra.
    We will take this opportunity to review the different kinds of memory corruption
    vulnerabilities, how to hunt them, and how to exploit them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since it is possible to execute headed scripts in headless mode, why do you
    need to program headless mode scripts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When is it appropriate to use Ghidra in headless mode and when should you use
    Ghidra in headed mode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between looking for strings in a binary file using Ghidra
    and looking for them using a command tool such as `grep` or `strings`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following links for more information on the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Headless Analyzer documentation: [https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html](https://ghidra.re/ghidra_docs/analyzeHeadlessREADME.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Headless Analyzer course: [https://ghidra.re/courses/GhidraClass/Intermediate/HeadlessAnalyzer.html](https://ghidra.re/courses/GhidraClass/Intermediate/HeadlessAnalyzer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server exposing Ghidra analysis via Ghidra headless mode: [https://github.com/Cisco-Talos/Ghidraaas](https://github.com/Cisco-Talos/Ghidraaas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
