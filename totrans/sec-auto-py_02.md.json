["```\nbash\npip install -r requirements.txt\n```", "```\n    cmd\n    pip install package_name\n    ```", "```\n    bash\n    pip install package_name\n    ```", "```\n    bash\n    pip3 install package_name\n    ```", "```\npip install virtualenvwrapper\n```", "```\nexport WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n```", "```\npip install virtualenvwrapper-win\n```", "```\n        npm install -g newman\n        ```", "```\n    project_name/\n    ├── docs/            # Documentation\n    ├── project_name/    # Main package\n    │   ├── __init__.py\n    │   ├── module1.py\n    │   ├── module2.py\n    ├── tests/           # Test suite\n    │   ├── __init__.py\n    │   ├── test_module1.py\n    │   ├── test_module2.py\n    ├── .gitignore       # Git ignore file\n    ├── requirements.txt # Dependencies\n    ├── setup.py         # Installation script\n    └── README.md        # Project description\n    ```", "```\n        __pycache__/\n        *.py[cod]\n        *.egg-info/\n        .env\n        ```", "```\n        python -m venv venv\n        ```", "```\n        pip install -r requirements.txt\n        ```", "```\n        pip install pip-tools\n        ```", "```\n        pip-compile\n        ```", "```\n        pip-sync\n        ```", "```\n    project_name/\n    ├── docs/            # Documentation\n    ├── project_name/    # Main package\n    │   ├── __init__.py\n    │   ├── module1.py\n    │   ├── module2.py\n    ├── tests/           # Test suite\n    │   ├── __init__.py\n    │   ├── test_module1.py\n    │   ├── test_module2.py\n    ├── .gitignore       # Git ignore file\n    ├── requirements.txt # Dependencies\n    ├── setup.py         # Installation script\n    └── README.md        # Project description\n    ```", "```\n    __pycache__/\n    *.py[cod]\n    *.egg-info/\n    .env\n    ```", "```\n        python -m venv venv\n        ```", "```\n        pip install -r requirements.txt\n        ```", "```\n        pip install pip-tools\n        ```", "```\n        pip-compile\n        ```", "```\n        pip-sync\n        ```", "```\n        pip install flake8\n        flake8 your_project/\n        ```", "```\n        pip install black\n        black your_project/\n        ```", "```\n    def greet(name: str) -> str:\n        return f\"Hello, {name}\n    ```", "```\n    pip install mypy\n    mypy your_project/\n    ```", "```\n        python\n        import unittest\n        class TestMath(unittest.TestCase):\n            def test_add(self):\n                self.assertEqual(1 + 1, 2)\n        if __name__ == '__main__':\n            unittest.main()\n        ```", "```\n        bash\n        pip install pytest\n        ```", "```\n        python\n        def test_add():\n            assert 1 + 1 == 2\n        ```", "```\n    yaml\n    # .github/workflows/python-app.yml for GitHub Actions\n    name: Python application\n    on: [push]\n    jobs:\n      build:\n        runs-on: ubuntu-latest\n        steps:\n        - uses: actions/checkout@v2\n        - name: Set up Python\n          uses: actions/setup-python@v2\n          with:\n            python-version: '3.x'\n        - name: Install dependencies\n          run: |\n            python -m pip install --upgrade pip\n            pip install flake8 pytest\n        - name: Lint with flake8\n          run: |\n            flake8 your_project/\n        - name: Test with pytest\n          run: |\n            pytest\n    ```", "```\n        bash\n        git init\n        ```", "```\n        git add .\n        git commit -m \"Initial commit\"\n        ```", "```\n        git checkout -b feature_branch\n        ```", "```\n    python\n    def add(a: int, b: int) -> int:\n        \"\"\"\n        Add two integers.\n        Args:\n            a (int): First integer.\n            b (int): Second integer.\n        Returns:\n            int: Sum of a and b.\n        \"\"\"\n        return a + b\n    ```", "```\n        bash\n        pip install sphinx\n        ```", "```\n        sphinx-quickstart\n        ```", "```\n        make html\n        ```", "```\n    python\n    import logging\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n    logger.info('This is an info message')\n    ```", "```\n        import os\n        from dotenv import load_dotenv\n        load_dotenv()\n        api_key = os.getenv('API_KEY')\n        ```", "```\n            bash\n            pip install safety\n            safety check\n            ```", "```\n    python -m cProfile -o profile.out your_script.py\n    ```", "```\n    makefile\n    # Makefile\n    install:\n        pip install -r requirements.txt\n    test:\n        pytest\n    lint:\n        flake8\n    ```", "```\n        yaml\n        # .pre-commit-config.yaml\n        repos:\n        - repo: https://github.com/pre-commit/pre-commit-hooks\n          rev: v3.4.0\n          hooks:\n          - id: trailing-whitespace\n          - id: end-of-file-fixer\n        - repo: https://github.com/psf/black\n          rev: 21.6b0\n          hooks:\n          - id: black\n        ```"]