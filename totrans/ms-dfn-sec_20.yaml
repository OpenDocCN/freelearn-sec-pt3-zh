- en: '*Chapter 17*: Achieving Automation of Security Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Most of the time people don''t realize the benefits of Automation for being
    afraid of the myth, "Automation will replace the human," but what really Automation
    represents is the highest level of maturity and excellence."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Desilda Toska, Dottore Magistrale and Automation leader*'
  prefs: []
  type: TYPE_NORMAL
- en: Most attackers leverage automation tools and techniques to enhance the reach
    of their attacks. Therefore, you must understand the importance of automation
    so that you can also take advantage of it to better secure your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you must understand the different types of automated attacks that
    compose the threat landscape so that you can plan your defenses against them.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, I am sure that you are familiar with several automated attacks such
    as *spam* and **distributed denial-of-service** (**DDoS**) attacks, but here,
    we will review the top 21 automated attacks to better understand this threat,
    which includes very interesting attacks such as credential stuffing, scalping,
    sniping, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the main topics to be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why bother with automation?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of automated attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation of cybersecurity tools using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cybersecurity automation with Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why bother with automation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"In computing, the most efficient job is the one that doesn''t need to be
    performed."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Ignacio Trejos-Zelaya*'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, cybercriminals leverage automation as their main tool to
    increase the reach of their attacks, so if you want to play on the same terms,
    then you should be using also leveraging automation as a key factor in your defensive
    security strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s review some of the benefits that you can leverage by implementing automation
    as part of your defensive security strategy. They are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimization of resources (you can do more with less)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relocation of resources to more advanced tasks (by automating time-consuming
    non-value-added tasks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost reduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster detection of threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster application of countermeasures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction of impact in the case of attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support of compliance and compliance-related tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, on the other hand, let's review the risks of not applying automation.
  prefs: []
  type: TYPE_NORMAL
- en: The risks of ignoring automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some companies may not be willing to invest in automation; however, here are
    some of the risks associated with that:'
  prefs: []
  type: TYPE_NORMAL
- en: Waste of resources (by working on tasks that can be automated)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased probability of human error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slower time to react (human speed versus computer speed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased possibility of becoming vulnerable to automated attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fewer resources available for innovation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fewer resources available for research
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lower capability to discover threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's review the different types of automated attacks that we may face.
  prefs: []
  type: TYPE_NORMAL
- en: Types of automated attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most attacks are automated, aimed to target a broader audience to increase the
    chances of success; therefore, it is important that you understand the types of
    automated attacks that you may face, and to do that, we will do a review of the
    classification of automated attacks based on the **Open Web Application Security
    Project** (**OWASP**).
  prefs: []
  type: TYPE_NORMAL
- en: Account aggregation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is aimed at identifying and aggregating accounts based on a common
    factor—for example, gathering all credentials from a given system, gathering credentials
    from a single user (from a plurality of systems), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Account creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is aimed at creating bulk accounts.
  prefs: []
  type: TYPE_NORMAL
- en: The objectives of attackers are varied, including using new accounts for spam,
    account misuse, **Denial of Service (DoS)**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Ad fraud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This automated attack is aimed at providing false clicks to commit fraud with
    advertisements, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.1 – Ad fraud example'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.1 – Ad fraud example
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated in the preceding screenshot, cybercriminals may increase their
    earnings exponentially by using this type of automated attack to commit fraud.
  prefs: []
  type: TYPE_NORMAL
- en: CAPTCHA defeat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Completely Automated Public Turing Test to tell Computers and Humans Apart**
    (**CAPTCHA)** is a very basic way to prevent some types of automated attacks by
    creating a test that can be solved by humans and not by robots (scripts). However,
    with the current advances in image recognition technologies and **optical character
    recognition** (**OCR**), CAPTCHAs became harder for users and easier for computers.
    You can see a couple of examples of impossible CAPTCHAs in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.2 – Examples of impossible CAPTCHAs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.2 – Examples of impossible CAPTCHAs
  prefs: []
  type: TYPE_NORMAL
- en: In fact, as illustrated in the preceding screenshot, some CAPTCHAs are impossible
    to decipher by humans.
  prefs: []
  type: TYPE_NORMAL
- en: Card cracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This kind of attack is aimed at identifying missing credit card data (such as
    security codes and expiration dates) by brute-forcing them on credit card processing
    sites.
  prefs: []
  type: TYPE_NORMAL
- en: Carding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is used to validate a bulk of stolen or fraudulent credit card numbers.
    This is normally achieved by testing a bulk of cards on a credit card processing
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Cashing out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Purchasing goods or services using stolen or fraudulent payment information.
    This attack is automated in order to enable purchases on several sites or in a
    short period of time (before the card is blocked).
  prefs: []
  type: TYPE_NORMAL
- en: Credential cracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, the attacker tries to validate username and password combinations by using
    brute-force or dictionary-based attacks for both values.
  prefs: []
  type: TYPE_NORMAL
- en: Credential stuffing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is aimed at validating a plurality of username and password combinations
    (normally obtained on the black market or from a previous data breach) against
    a given site.
  prefs: []
  type: TYPE_NORMAL
- en: Denial of inventory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A very interesting attack aimed at reducing the inventory of a product for
    a period of time by putting it on the cart, but without paying for it. This attack
    may have a very negative impact on the sales of an e-commerce page, but it can
    also be triggered to negatively impact the release of a given product or to promote
    a product. You can see an example of such an attack in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.3 – Denial of inventory attack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.3 – Denial of inventory attack
  prefs: []
  type: TYPE_NORMAL
- en: It is important to highlight that this attack can also be carried out against
    services such as hotel room reservations, car rentals, and other services and
    products offered through e-commerce sites.
  prefs: []
  type: TYPE_NORMAL
- en: DoS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is probably the most common type of automated attack, which consists of
    exceeding the capacity of a web server to stay online by flooding the site with
    an overwhelming amount of requests, directly affecting the availability of the
    site and the services provided.
  prefs: []
  type: TYPE_NORMAL
- en: Expediting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This attack is aimed at bypassing a series of steps of a process to reach the
    final steps of the process faster, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.4 – Example of expediting an account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.4 – Example of expediting an account
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, expediting could save an attacker time
    by reaching the last part of a given web process faster—for example, clicking
    **Next** on a web training form until the attacker reaches the final question.
  prefs: []
  type: TYPE_NORMAL
- en: Fingerprinting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This automated attack is about gathering publicly available information about
    a given website to have a better understanding of the site. Most of the time,
    it gathers data such as **HyperText Transfer Protocol** (**HTTP**) headers, error
    messages, **Uniform Resource Locator** (**URL**) paths, and so on. This attack
    can be performed without accessing the site by leveraging information indexed
    on search engines and other techniques, such as leveraging Google dorks.
  prefs: []
  type: TYPE_NORMAL
- en: Footprinting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack can be considered a more intrusive type of fingerprinting. In this
    scenario, the attack is aimed at the application, and it tries to collect a plurality
    of data such as application parameters, values, process sequences, folder structure,
    and more. This can also be considered as a type of **application programming interface**
    (**API**) scanning, but it is important to highlight that this is only about discovery
    and not about exploiting the information discovered.
  prefs: []
  type: TYPE_NORMAL
- en: Scalping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This automated attack is about monitoring the availability of a given product
    or service offered online and then automatically performing a purchase when a
    given condition is met (for example, buy all tickets to Lida's concert when availability
    = 10).
  prefs: []
  type: TYPE_NORMAL
- en: Sniping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is similar to scalping, with the difference being that this type
    of attack is triggered by time (last minute)—for example, place the last bet when
    time = (deadline -1).
  prefs: []
  type: TYPE_NORMAL
- en: Scraping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This automated attack is about gathering information from web pages and APIs
    either by accessing these as an authenticated user (using a compromised credential)
    or even doing this without posing as an authenticated user.
  prefs: []
  type: TYPE_NORMAL
- en: Skewing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The objective of this attack is to manipulate site metrics (such as click count,
    visitors, and so on), polls, reviews, and likes in order to manipulate the real
    results and gain benefit from this (reputation, fame, followers, and more). You
    can see an example of skewing in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.5 – Example of skewing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.5 – Example of skewing
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated in the preceding screenshot, with this attack, the reputation
    of a given article could be manipulated.
  prefs: []
  type: TYPE_NORMAL
- en: Spamming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a well-known attack consisting of the massive submission of emails,
    either for marketing or to distribute malware.
  prefs: []
  type: TYPE_NORMAL
- en: Token cracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is aimed at discovering tokens such as coupon codes, discounts,
    and offers that are active on a given site and that can be used by the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already talked in depth about this automated attack, which consists of the
    identification of known vulnerabilities on a given website, API, or any other
    web resource.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discover how to apply automation in cybersecurity using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Automation of cybersecurity tools using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter by showing all the benefits of automation. Now, it's
    time to see how we can leverage Python to achieve automation.
  prefs: []
  type: TYPE_NORMAL
- en: Python is a super-intuitive language that is widely used for scripting and automation,
    and we can also leverage it to automate some cybersecurity-related tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you can automate almost everything you want with Python, including
    automating well-known cybersecurity tools such as **Nessus**, **Nexpose**, **Shodan**,
    **Nmap**, **Metasploit**, **Sqlmap**, and more.
  prefs: []
  type: TYPE_NORMAL
- en: However, in this section, we are going to discover other ways to automate cybersecurity
    tasks with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Local file search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are cases where you need to search for a given file or folder on a given
    workstation—for example, to achieve compliance, as part of an audit, or as part
    of a forensics investigation.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you are an auditor, it would be great to have a script to look for those
    files and folders, and that can be easily achieved with Python. Let's discover
    how.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python is loaded by default in Kali Linux, so to run it, you only need to execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as you can see in the following screenshot, `>>>` indicates that the Python
    interpreter is ready for your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.6 – Python interpreter on Kali Linux'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.6 – Python interpreter on Kali Linux
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's use a function called `os.walk` that basically collects the filenames
    and directories by doing a top-down (or even bottom-up) walk of the directory
    tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, let''s imagine we have a file structure like the one in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.7 – File structure of the proposed example'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.7 – File structure of the proposed example
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how easily we can automate the search of files and directories
    using `os.walk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by going back to the Python session that we left open and put
    the following code there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The Python interpreter uses indentation, so make sure your code includes the
    same indentation as shown in the preceding code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'As illustrated in the following screenshot, the code outputs all the files
    (top-down) located under our current directory tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.8 – Output of code with the os.walk function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.8 – Output of code with the os.walk function
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we only printed the filename, but you can also print other
    parameters such as `root` (directories) and `dirs` (subdirectories).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have experience with Python, then you may find this example extremely
    basic, and indeed that was the idea: to illustrate the concept with a very basic
    example for readers who are not experienced with Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can expand on that example by using other functions such as
    `os.path` to show the path of a file, or you could even add a couple of programing
    lines to only show you a given file type. Here, your imagination is the only limit!
  prefs: []
  type: TYPE_NORMAL
- en: Basic forensics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also automate the gathering of metadata from files with simple Python
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve that task, we will use the `os` library. In this example, we will
    use `os.stat` because it provides a lot of useful metadata available to the OS,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The last time the file was modified (`st_mtime`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last time the file was accessed (`st_atime`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The creation time or the last time metadata was changed (`st_ctime`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user `st_uid`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The group ID of the owner (`st_gid`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file size (`st_size`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to Python and write the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should give you all the information just described (creation date,
    file owner, and so on), as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.9 – Metadata obtained from file with os.stat'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.9 – Metadata obtained from file with os.stat
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to discover more about this library, visit the following web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/stat.html](https://docs.python.org/3/library/stat.html
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Is the format of the dates not familiar to you? Don't worry—you can use some
    libraries such as `time` or `datetime` to convert the string from Unix time to
    a human-readable time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Many other cool libraries can be used to harvest information from files, as
    discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Pillow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Pillow` is an additional Python library that allows image manipulation. In
    our case, we can use it to gather metadata from the image, such as the **Global
    Positioning System** (**GPS**) coordinates of the location where the picture was
    taken.'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering metadata from PDF and Word files with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case of `PDFDocument`, `PDFParser`, `PyPDF2`, and `PdfFileReader`.
  prefs: []
  type: TYPE_NORMAL
- en: For Word documents, the most famous library is `Python-Docx`, which allows you
    to harvest more than 14 attributes from a Word document.
  prefs: []
  type: TYPE_NORMAL
- en: Web scraping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another common way to use Python for automation is through web scraping. So,
    let's do an overview of the most common libraries, packages, and modules used
    to automate web scraping with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Using pip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are going to play around with Python, then is highly recommended that
    you install `pip`. `pip` is the package manager for Python, and it can be installed
    to be used on the command line to download and install Python packages and their
    requisite dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation on Kali Linux is very simple, and it can be achieved with the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to verify the version installed, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the following screenshot, we successfully installed `pip3` on Kali
    Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.10 – Displaying pip3 version on Kali Linux'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.10 – Displaying pip3 version on Kali Linux
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the environment set up, let's continue with our overview of
    some of the most used and famous libraries and modules that you can use for Python
    automation.
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful Soup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to cybersecurity, `BeautifulSoup` is a must-have Python library
    to parse **HyperText Markup Language** (**HTML**) and **Extensible Markup Language**
    (**XML**) files. In fact, you will see that this library is used in almost all
    Python code in terms of web scraping.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of `BeautifulSoup` lies in all the options it gives you to extract
    only the data you need in an easy and clean way. Let me explain to you how this
    works.
  prefs: []
  type: TYPE_NORMAL
- en: '*First, let''s be clear on one thing*—*an HTML file is not only a file but
    a juicy source of information and with Beautiful Soup, you can extract all that
    juice.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts information that can be parsed using Beautiful
    Soup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.11 – Information that can be parsed with Beautiful Soup'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.11 – Information that can be parsed with Beautiful Soup
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, there is a lot of information that can
    be parsed out of an HTML file, and `BeautifulSoup` makes this easier for us.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how you can also leverage Python to automate some network security
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Network security automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find countless Python scripts to automate some network security tasks,
    and they vary depending on the tools and systems that you have in place.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can also create your own, so let's have an overview of a very famous
    tool that you can leverage to automate some tasks regarding the capture and analysis
    of network traffic—the famous **Scapy**.
  prefs: []
  type: TYPE_NORMAL
- en: Scapy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a great tool that you can leverage on your Python code (interactively
    or as a library) to manage packets gathered from network-sniffing software such
    as Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, you can leverage the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can confirm `scapy` is installed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If the installation was successful, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.12 – Scapy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.12 – Scapy
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of cool things you can do with Scapy, such as sending modified
    **Internet Control Message Protocol** (**ICMP**) packets, port scanning, reading
    **packet capture (PCAP)** files, or even capturing packets (just like you do with
    Wireshark).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A lot of people get confused between `scapy` and `scrapy`, as both are used
    for security on Python. However, while `scapy` is mostly used for packet manipulation,
    `scrapy` is used for web scraping for Python. Similar, but not the same!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discover how we can leverage the powerful **Raspberry Pi** to automate
    cybersecurity tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Cybersecurity automation with the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 10*](B16290_10_Final_JC_ePub.xhtml#_idTextAnchor231), *Applying
    IoT Security*, we covered a lot of cool cybersecurity projects that you can do
    with the Raspberry Pi, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Detection of a rogue access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an **Intrusion Detection System** (**ISD**) and a firewall with the
    Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a machine to safely copy information from a **Universal Serial Bus**
    (**USB**) device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a honeypot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a network monitoring device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ad blocker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And even creating a system to detect a rogue Raspberry Pi in your network and
    how to disable it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, in this section, we will do an overview of Raspberry Pi projects that will
    help you to automate some cybersecurity tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Automating threat intelligence gathering with a Fail2ban honeypot on a Raspberry
    Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of tools and techniques to blacklist **Internet Protocol** (**IP**)
    addresses. In fact, you can even build your own using a Raspberry Pi by installing
    Pi-hole (as mentioned in [*Chapter 10*](B16290_10_Final_JC_ePub.xhtml#_idTextAnchor231),
    *Applying IoT Security*), but we are not going to talk about those systems here
    but rather about how you can leverage an unexpensive Raspberry Pi to gather data
    about attackers and use that data to better protect your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: These solutions based on low-cost hardware are not designed to replace robust
    enterprise-grade devices. Instead, they are designed as a great tool to create
    prototypes and **proof of concepts** (**PoCs**), which are an essential step in
    doing research, which in the end is a must-have skill for a master in cybersecurity.
  prefs: []
  type: TYPE_NORMAL
- en: For this task, we will leverage a free open source software called **Fail2ban**.
  prefs: []
  type: TYPE_NORMAL
- en: Fail2ban works by analyzing the system log files (such as `/var/log/apache/error_log`)
    to look for malicious login attempts, brute-force attacks, and other exploits
    against our system.
  prefs: []
  type: TYPE_NORMAL
- en: However, Fail2ban was designed to run on a single system, so what we will do
    is to leverage the power and low cost of the Raspberry Pi, set it up as an exposed
    honeypot system to gather threat intelligence about attackers, and then use that
    information to enhance the blacklists used on our defensive security systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the proposed architecture to leverage
    Fail2ban on the Raspberry Pi to automate intelligence gathering:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.13 – Proposed solution architecture with Fail2ban on the Raspberry
    Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.13 – Proposed solution architecture with Fail2ban on the Raspberry
    Pi
  prefs: []
  type: TYPE_NORMAL
- en: You can follow a tutorial created by [pimylifeup.com](http://pimylifeup.com)
    about how to install Fail2ban on the Raspberry Pi at [https://pimylifeup.com/raspberry-pi-fail2ban/](https://pimylifeup.com/raspberry-pi-fail2ban/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set up Fail2ban directly on a Unix server by following this guide:
    [https://www.redhat.com/sysadmin/protect-systems-fail2ban](https://www.redhat.com/sysadmin/protect-systems-fail2ban).'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can visit their official site at [https://www.fail2ban.org](https://www.fail2ban.org).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Another cool feature of Fail2ban is that you can configure it to notify you
    as soon as an attack is detected so that you can grab the attacker's data and
    input it into your systems in no time.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at another cool project to automate internet monitoring with
    our little friend, the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Automated internet monitoring system with the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you have a remote location with Wi-Fi for your clients, and there are
    a lot of things that may impact that internet connection, from being slow to offering
    no internet connection at all.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's review a couple of projects in which you can use the Raspberry Pi
    to automate the detection of those issues and inform you so that you can take
    action before your clients get impacted.
  prefs: []
  type: TYPE_NORMAL
- en: Automated internet monitor with a Raspberry Pi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a simple solution in which you use a Raspberry Pi with simple code
    to ping one of the devices on an external location to determine if they have an
    active internet connection. Then, you can leverage the Raspberry Pi''s capabilities
    to alert you using a **light-emitting diode** (**LED**), a sound, or a more subtle
    alternative such as alerting you through a dashboard, email, or even a message
    to your social media account, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.14 – Architecture of an automated internet monitoring system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_17.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 17.14 – Architecture of an automated internet monitoring system
  prefs: []
  type: TYPE_NORMAL
- en: If you want to implement this internet monitoring solution, then you can follow
    a very detailed step-by-step installation published by the maker called *talk2bruce*
    at [https://www.instructables.com/Raspberry-Pi-Internet-Monitor/](https://www.instructables.com/Raspberry-Pi-Internet-Monitor/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's review another automation aimed to control not just the connection
    but the speed of the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Automated internet speed monitor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, there may be cases in which the internet may be working but is
    slow due to **internet service provider** (**ISP**) problems, issues with the
    router, issues with cables, and more. Regardless of the source of the problem,
    you need to be informed about those issues so that you can take action to resolve
    them (remember—availability issues are also your responsibility).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the Raspberry Pi also allows you to record a history of your internet
    connectivity in your database so that you can use all that data for further analysis
    (for example, find patterns to discover the root cause of an issue).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a tutorial about how you can leverage a third-party API from Ookla
    ([https://www.speedtest.net/apps/cli](https://www.speedtest.net/apps/cli)) to
    monitor the internet speed on the Raspberry Pi: [https://pimylifeup.com/raspberry-pi-internet-speed-monitor/](https://pimylifeup.com/raspberry-pi-internet-speed-monitor/).'
  prefs: []
  type: TYPE_NORMAL
- en: Those are some examples of automation with the Raspberry Pi, but here, the sky
    is the limit.
  prefs: []
  type: TYPE_NORMAL
- en: And remember—if you are an expert on the Raspberry Pi, send me a link to your
    projects for review and we can even include them in upcoming versions of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We did a comprehensive overview of the top 21 types of automated attacks that
    are currently being used by attackers so that you can do an assessment of your
    organization to determine which of those attacks are a possible threat to your
    infrastructure and organization.
  prefs: []
  type: TYPE_NORMAL
- en: But we also learned that we can take advantage of automation, so we reviewed
    some Python libraries that you can leverage to perform automation in tasks related
    to forensics, web scraping, and network security.
  prefs: []
  type: TYPE_NORMAL
- en: And before closing the chapter, we learned how to take advantage of the famous
    Raspberry Pi to create some very cool cybersecurity gadgets that enable us to
    automate some tasks such as gathering malicious addresses to include in our blacklist
    and two different methods to test the speed and stability of an internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this last part inspires you to do some extra testing and research to
    develop your own cybersecurity gadgets and prototypes like a master!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to know more about the Raspberry Pi, then you can visit the manufacturer's
    website, which is a great source of resources including tutorials, projects, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can find information there about all the different versions of the
    Raspberry Pi available, to determine which one is more suitable for your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the link to the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.raspberrypi.org/](https://www.raspberrypi.org/)'
  prefs: []
  type: TYPE_NORMAL
