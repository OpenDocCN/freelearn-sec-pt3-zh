- en: Main Windows Operating System Artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Recycle bin content analysis with EnCase Forensic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recycle bin content analysis with Rifiuti2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recycle bin content analysis with Magnet AXIOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event log analysis with FullEventLogView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event log analysis with Magnet AXIOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event log recovery with EVTXtract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LNK file analysis with EnCase Forensic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LNK file analysis with LECmd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LNK file analysis with Link Parser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefetch file analysis with Magnet AXIOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefetch file parsing with PECmd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefetch file recovery with Windows Prefetch Carver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some features of Windows operating systems produce a great number of valuable
    artifacts that can be further used as pieces of digital evidence. The most common
    sources of such artifacts are the Recycle Bin, Windows Event Logs, LNK files,
    and Prefetch files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Recycle Bin contains files and folders that have been deleted by the user
    via the right-click menu. In fact, these files are not deleted from the file system,
    but only moved from their original location into the Recycle Bin. There are two
    formats of the Recycle Bin: the Recycler format (Windows 2000, XP) - files are
    stored under `C:\Recycler\%SID%\` and their metadata is stored in the `INFO2`
    file; and the `$Recycle.Bin` format - files are stored under `C:\$Recycle.Bin\%SID%\`
    in `$R` file, and their metadata is stored in $I files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can guess from the name, Windows Event Logs collect information about
    different system events. Windows 2000, XP, and 2003 (except for server versions)
    store these logs in three files: Application, System, and Security. These files
    can be found under `C:\Windows\system32\config`. With Windows Vista, the Event
    Logs format has been changed to XML. These EVTX files can be found under `C:\Windows\System32\Winevt\Logs`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'LNK files or Windows Shortcut files refer to other files: applications, documents,
    and so on. These can be found system-wide, and can help a digital forensic examiner
    to uncover some of the suspect''s activities, including recently used files, applications,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: And, finally, Prefetch files. You can find these files in `C:\Windows\Prefetch`,
    and they contain lots of valuable information about used applications, including
    their run count, last run date and time, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to analyze all of these sources of digital
    evidence with both commercial and free digital forensics tools.
  prefs: []
  type: TYPE_NORMAL
- en: Recycle Bin content analysis with EnCase Forensic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EnCase is a well-known and court-accepted commercial digital forensics tool
    developed by Guidance Software. It is used by examiners from all over the world,
    both in law enforcement agencies and in the private sector. It supports the whole
    investigation life cycle, from collecting to reporting. What's more, it has a
    built-in scripting language - EnScript - so users can write their own scripts
    to solve digital forensic problems. A lot of useful EnScripts are available for
    free at EnCase App Central. In this recipe, we will show you how to use this powerful
    tool to examine Windows Recycle Bin contents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unfortunately, Guidance Software doesn''t provide trial versions of EnCase
    Forensic, so to follow this recipe, you must have a valid licence. If you have
    one, make sure you are using the latest version of the tool: EnCase Forensic 8.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for Recycle bin Content Analysis in Encase Forensic are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new case. To do this, click on the New Case link
    on the left. The Case Options window will pop up, as you see in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/59d7a560-88fc-49f3-bf5e-8e512f36aac8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1\. Case Options
  prefs: []
  type: TYPE_NORMAL
- en: 'We have chosen #2 Forensic template, and there is a lot of information to fill
    in. Let''s start with Case information. Here, we have 6 fields to fill in: Case
    Number, Case Data, Examiner Name, Examiner I.D., Agency, and Description. All
    fields are self-explanatory, so just fill them in.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's go to Name and location. Type your case's name or number in the first
    field, and choose the Base case folder (case files will be stored here). The Full
    case path field will be filled in automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Evidence cache locations. You can use the same folder to store cache (to
    do this, tick Use base case folder for primary evidence cache), or choose one
    or two folders to store it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, if you want your case to be backed up, tick the Backup every option
    and choose its value. Don't forget about choosing the backup folder and the maximum
    size of the backup. Once everything is filled in, just click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you see a window with your case information, and you are ready to add a
    forensic image. To do this, click the Add Evidence File link on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/015a15ce-9ca2-40f9-afec-da17e8035809.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2\. Adding evidence
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding screenshot, there are 6 evidence source options:
    you can Add Local Device (don''t forget to use a writeblocker), a remote evidence
    source, E01 or RAW image, and so on. You already have both, an E01 and a RAW image,
    so you can use one of them. We are going to use an E01 image. If you too, plan
    to use an E01 image, click the Add Evidence File link; if you are using a RAW
    image, click Add Raw Image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you see your evidence file. Click on its name to see the contents. It may
    take some time for EnCase to parse the data. Once data parsing is finished, go
    to the $Recycle bin folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9c98df4-7f5c-466f-a3d2-6c13aefeaf34.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3\. $Recycle.Bin folder contents
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding figure, there is a list of the user''s security
    identifiers (SID). This can help an examiner to determine which user placed files
    into the recycle bin. There are folders too; let''s open one of them. In our case,
    we open the folder `S-1-5-21-811620217-3902942730-3453695107-1000`. Look at the
    next figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4274844c-62a2-4c48-b892-87646c0368d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4\. S-1-5-21-811620217-3902942730-3453695107-1000 folder contents
  prefs: []
  type: TYPE_NORMAL
- en: 'EnCase has parsed the Recycle Bin contents for you automatically. Also, it
    has gathered a lot of valuable information: the original file name, its original
    path, deletion date and time, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the Windows version, EnCase extracts information about the Recycle
    Bin contents from an `INFO2` file (Windows XP) or `$I` and `$R` files (Windows
    Vista and above), so a forensic examiner can preview them and see their original
    names, path, deletion dates, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What''s New in EnCase Forensic 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.guidancesoftware.com/document/product-brief/what''s-new-in-encase-forensic-8](https://www.guidancesoftware.com/document/product-brief/what''s-new-in-encase-forensic-8)'
  prefs: []
  type: TYPE_NORMAL
- en: Recycle bin content analysis with Rifiuti2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rifiuti2 is an open source tool which enables a computer forensic examiner
    to analyze Windows recycle bin content. The tool will show you important information
    such as the recycled file''s deletion date and time, its original path, and so
    on. Rifiuti2 supports both old (starting from Windows 95) and modern (up to Windows
    10) recycle bin formats. What''s more, language is no problem: the tool supports
    all localized versions of Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Rifiuti2's download page and download the ZIP archive with the latest
    Windows version. In our case, the latest version is 0.6.1, so the archive we downloaded,
    is called Rifiuti2-0.6.1-win.zip. Unpack it and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You already know that each user has their own folder in the recycle bin. Remember,
    the screenshot from the previous recipe about EnCase —there were a number of folders.
    To use Rifiuti2, you should first export one of those folders. There are a lot
    of tools capable of doing this, and you already know some of them, for example
    Autopsy, FTK Imager, and Magnet AXIOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have exported the folder, you are ready to start the Windows Command
    Prompt and use the tool. If you are using a 32-bit system, go to the x32 folder;
    if you have a 64-bit system, go to the x64 folder. In both folders, you will find
    two Windows executables: `rifiuti.exe` and `rifiuti-vista.exe`. If you exported
    your folder from a Windows system up to (and including) XP, use `rifiuti.exe`,
    otherwise (starting from Vista) use `rifiuti-vista.exe`. In our case, the folder
    was exported from a Windows 10 image, so we used `rifiuti-vista.exe`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we redirected the output to a `TXT` file. Look at its contents
    in the following figure :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26bb0c4a-b52c-4adf-b5e1-f856653161f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5\. Rifiuti2 output
  prefs: []
  type: TYPE_NORMAL
- en: Everything is parsed correctly. We have original paths, names, sizes, and deletion
    timestamps. Have you noticed the Cyrillic symbols? As we mentioned before, all
    localized versions of Windows are supported!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a folder from a Windows system prior to Vista, you can use `rifiuti.exe`,
    which parses `INFO2` file contents and extracts information about the particular
    user's recycle bin contents.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a folder from a Windows Vista system or later, you use `rifiuti-vista.exe`,
    which parses the so-called index files ($I) to extract information about recycled
    files, their original paths, names, sizes, and deletion dates and times.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rifiuti2 GitHub page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/abelcheung/rifiuti2](https://github.com/abelcheung/rifiuti2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rifiuti2, ver. 0.6.1, download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/abelcheung/rifiuti2/releases/tag/0.6.1](https://github.com/abelcheung/rifiuti2/releases/tag/0.6.1)'
  prefs: []
  type: TYPE_NORMAL
- en: Recycle bin content analysis with Magnet AXIOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnet AXIOM supports all common Windows operating system artifacts including,
    of course, the Recycle Bin. In this recipe, we will show you how to use it to
    analyze files which our suspect has tried to delete, putting them into the Recycle
    Bin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven't downloaded and installed the trial version of Magnet AXIOM yet,
    use the link from the *See more* section to do so. Once the tool is installed
    on your workstation, open it, create a new case, add a forensic image, and process
    it with default options. If you don't know how to do this, refer back to the recipes
    in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for Recycle bin content analysis with magnet AXIOM are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your forensic image is processed, go to AXIOM Examine''s artifact types
    pane, and scroll down to OPERATING SYSTEM, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/351c3fd6-895b-4e11-8dfb-3d95dbe6aac3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6\. Operating system artifacts list
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are quite a lot of different operating system artifacts
    listed, including the Recycle Bin. In our case, there is only one file there.
    You can see it in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29fa6251-5b2b-44cf-8cb0-9c68baa242c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7\. Recycle Bin contents
  prefs: []
  type: TYPE_NORMAL
- en: So, we have a link file for the TeamViewer app in our suspect's Recycle Bin.
    This app is used for remote access. Suspicious, isn't it? You can also find information
    about the date and time the file was deleted, the security identifier of the user
    who deleted it, and the original file path - everything you may need for your
    investigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you process the evidence source with the default options itself, or choose
    the Recycle Bin in your custom artifact list, Magnet AXIOM parses all available
    information from the `INFO2` file (up to Windows XP) or $I and $R files (starting
    from Windows Vista).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnet AXIOM trial request page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.magnetforensics.com/try-magnet-axiom-free-30-days/](https://www.magnetforensics.com/try-magnet-axiom-free-30-days/)'
  prefs: []
  type: TYPE_NORMAL
- en: Event log analysis with FullEventLogView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FullEventLogView is another useful free tool from NirSoft, capable of parsing
    Windows 10, 8, 7, and Vista event logs. A computer forensic examiner can use it
    to view both event logs from a local computer and EVTX files, which can be found
    at `%SystemRoot%\Windows\System32\winevt\Logs`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the FullEventLogView download page on NirSoft's website (the link is presented
    in the See Also section), and get the 32-bit or 64-bit version of the tool, according
    to your system. Unpack the archive you downloaded and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for event log analysis with FullEventLogView are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you should do after starting the tool is choose the data source.
    To do this, go to File - Choose Data Source, or just press *F7*. As you can see
    in the following figure, there are three options available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading logs from the computer you are running the tool on
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading logs from a remote computer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading logs from a folder you previously exported (from a forensic image, for
    example)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7fe893e5-0dd0-4f57-9431-4c92164c5f59.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8\. Choosing data source in FullEventLogView
  prefs: []
  type: TYPE_NORMAL
- en: By default, FullEventLogView shows events only from the last 7 days. If you
    need a longer period, go to Options - Advanced Options (or press *F9*), and choose
    Show events from all times. You can also choose a time period to show, both in
    local time and GMT, and filter event logs by level, event ID, provider, and channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f081a2a8-2f08-4c73-9087-003772a2a857.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9\. FullEventLogView Advanced Options
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have applied all the filters you need and chosen the data source,
    you will see all the available event logs in the main window of FullEventLogView.
    This is shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9ff5951-396d-4974-b307-c4a1da2953a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10\. Viewing event logs from a folder exported from an image
  prefs: []
  type: TYPE_NORMAL
- en: 'An examiner can sort the logs by any column available. Also, you can search
    through the logs: go to Edit - Find, or just press *Ctrl*+*F*.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the data source, FullEventLogView displays event logs from the
    local computer, a remote computer, or a folder and enables digital forensic examiners
    to sort them and search through them using keywords.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Event Logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://technet.microsoft.com/en-us/library/cc722404(v=ws.11).aspx](https://technet.microsoft.com/en-us/library/cc722404(v=ws.11).aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: 'FullEventLogView download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.nirsoft.net/utils/full_event_log_view.html](http://www.nirsoft.net/utils/full_event_log_view.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Event log analysis with Magnet AXIOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's keep using Magnet AXIOM to explore some of the most common Windows OS
    forensic artifacts. In this recipe, we will show you how to examine Windows Event
    Logs using this tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already used this tool recently to collect the Recycle Bin data from
    a forensic image. This time, we are interested in Event Logs examination, but
    you can use the same case as for the Recycle Bin if you processed the whole image
    with default options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for Event log analysis using Magnet AXIOM are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the case you used for the Recycle Bin forensic analysis and go to the
    OPERATING SYSTEM artifacts list again, but now choose Windows Event Logs, as in
    the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/882aacf4-6a75-4761-8514-21cc9f25a1a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11\. Operating system artifacts list
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding figure, we have a huge number of event logs.
    To make your analysis easier, you can sort them. For example, we used the Created
    Date/Time column to sort our event logs. You can see partial results in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ee96c31-f413-4183-abc6-d5618ec495b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12\. Sorted Event Logs records
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can use other columns to sort your logs, for example Event ID
    or Event Description Summary—it depends on the specific requirements of your case.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnet AXIOM automatically finds available Windows Event Logs on a forensic
    image during the processing stage. As a result, the examiner has a list of all
    the logs with the ability to sort them according to different criteria.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnet AXIOM for computers: [https://www.magnetforensics.com/magnet-axiom/computers/](https://www.magnetforensics.com/magnet-axiom/computers/)'
  prefs: []
  type: TYPE_NORMAL
- en: Event log recovery with EVTXtract
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You already know how to export, sort and search through Windows event logs.
    Now it''s time to learn how to recover deleted or corrupted event log artifacts.
    Thankfully, there is an open source tool by Willi Ballenthin that is capable of
    solving this problem: EVTXtract. The tool can recover EVTX fragments not only
    from RAW images, but also from unallocated space and memory dumps.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, since EVTXtract is written in Python, make sure you have this
    installed on your workstation. If not, go to the official Python website, download
    and install it. Also, you will need **python-evtx,** which you can find in Willi''s
    GitHub. Python-evtx is an EVTX parser, which is a dependence for EVTXtract. To
    install it, download and unpack the archive from GitHub, open Windows Command
    Prompt, choose the directory to which you unpacked the archive, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it; now you have python-evtx installed, and you are ready to install
    EVTXtract. The process is almost the same: download and unpack the archive from
    GitHub (but now use the EVTXtract download page), open the Windows Command Prompt,
    choose the directory to which you unpacked the archive, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We are done. Now you have `evtxtract.exe` in your Python 2 scripts folder -
    in our case it's `*C:\Python27\Scripts*` - and you are ready to use it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, you must decide what you are going to use as the source. You
    have three options: a disk image in RAW format, a memory dump, or an unallocated
    space. You have already created RAW disk images and memory images (dumps) in previous
    recipes, but what about unallocated space? You have already used **Autopsy**,
    and even recovered some data from an NTFS partition. But you can also use this
    tool to extract unallocated space to a separate file. To do this, go to Data Sources,
    right-click the partition you want to extract unallocated space from, and choose
    Extract Unallocated Space to Single File**.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/167338e9-9894-41d7-9dfc-549006ffc35f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13\. Extracting unallocated space to single file with Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: 'Once unallocated space is extracted, you can use this file as the source for
    EVTXtract. To start the recovery process, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to change `image.raw` to the file of your choice. Once the process
    is finished, you can analyze and search through the output file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EVTXtract walks through a disk image (only RAW format is supported), a memory
    dump, or a file with extracted unallocated space (depending on the examiner's
    choice) and recovers EVTX fragments, saving them to an XML file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python-evtx download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/williballenthin/python-evtx](https://github.com/williballenthin/python-evtx)
    EVTXtract download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/williballenthin/EVTXtract](https://github.com/williballenthin/EVTXtract)'
  prefs: []
  type: TYPE_NORMAL
- en: LNK file analysis with EnCase forensic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous recipes, you have already learnt how to create a new case, add
    evidence files, and examine Windows recycle bin contents with EnCase Forensic.
    Now it's time to go even further, and meet the EnCase Evidence Processor, and
    especially the Windows Artifact Parser. This module enables a digital forensic
    examiner to parse different Windows forensic artifacts, including LNK files, automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the EnCase Evidence Processor, you should create a case and add an evidence
    item. You already created a case to examine the recycle bin, so you can use that
    case here. If it's not available, create a new one and add an image to it. Once
    done, you are ready to use the EnCase Evidence Processor and the Windows Artifact
    Parser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for LNK files analysis are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created a new case and added an evidence item, go to **Process
    Evidence - Process...** You will see the EnCase Processor Options window, as you
    can see in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35ecca25-a879-41d5-94f6-25ef5bdb7c12.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14\. EnCase Processor Options
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have quite a lot of options here: you can Recover Folders,
    Find email, Find Internet artifacts, and so on. But, for now, let''s go to the
    Modules folder. You can see its contents in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6336dfaf-a841-40d3-8b71-8a598394c6cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15\. Modules folder contents
  prefs: []
  type: TYPE_NORMAL
- en: 'As it is already been said, this time we are interested in the Windows Artifact
    Parser. If you click on its name, you see the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31871bac-901f-4bd1-9a3e-5a23dcbd9c24.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16\. Windows Artifact Parser options
  prefs: []
  type: TYPE_NORMAL
- en: This module is able to provide an examiner with information about Link Files,
    Recycle Bin Files (if you want them in the report, make sure you use this option),
    MFT Transactions, and ShellBags, including those extracted from an image's unallocated
    space (if you tick the Search Unallocated option).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This time, we are interested in parsing LNK files, so let's choose the **Link
    Files** option (don't forget to tick Search Unallocated, we don't want to miss
    anything!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the processing is finished, go to **EnScript - Case Analyzer**. Here,
    you can find all the available LNK files with lots of metadata extracted by the
    Windows Artifact Parser. Take a look at the following figure for more details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/808abaa8-bb6e-449a-8c1b-e7dc9b6e52c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17\. Parsed LNK files
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Artifact Parser walks through the image added to the case and extracts
    information from the LNK files it finds, including those from unallocated space
    if this option has been chosen by the examiner. Once the process is finished,
    the examiner can then analyze, bookmark, and add this information to their report.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows Shortcut File format specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/libyal/liblnk/blob/master/documentation/Windows%20Shortcut%20File%20(LNK)%20format.asciidoc](https://github.com/libyal/liblnk/blob/master/documentation/Windows%20Shortcut%20File%20(LNK)%20format.asciidoc)'
  prefs: []
  type: TYPE_NORMAL
- en: LNK file analysis with LECmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LECmd is another great free and open source Windows forensic tool by Eric Zimmerman.
    It processes files really fast, and can be used for parsing both single LNK files
    and the folders that contain them. Also, it has quite a wide range of export options,
    including CSV and XML.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the LECmd download page to get the archive with the tool. Unpack the archive
    you have downloaded, run the Windows Command Prompt, change the directory to the
    one you have just unpacked, and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for LNK files analysis with LECmd:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have already said, LECmd can process both single files and folders. If
    you want to extract information from a single file, use **-f** switch; if your
    target is a directory, use -d switch. If you are interested only in LNK files
    pointing to removable drives, you can use **-r** switch. The other available options
    can be seen in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/979fb92e-9fb9-47c7-8d1d-9d4d577b887e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18\. LECmd options
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to run LECmd against a file or folder on a forensic image, first
    you should mount it. Thankfully, you already know how to do this. In our case,
    the main partition is mounted under `N:\`. Let''s use LECmd against the `Roaming`
    folder and save the output formatted in xhtml. To do this, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see part of the xhtml formatted output in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7b5feaa-cbe4-462d-bd03-2690dcdd18b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19\. A part of LECmd xhtml formatted output
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding figure, LECmd extracts lots of information from
    LNK files. For example, we have MAC (modified, accessed, created) times both for
    the LNK file and the target file (in our case, LacyMilletCL.doc), as well as the
    target file's size, absolute path, and even computer ID and MAC address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LECmd walks through a folder or a single file, extracts information from available
    LNK files, and saves the output to the format chosen by the examiner.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LECmd download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://ericzimmerman.github.io/](https://ericzimmerman.github.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Introducing LECmd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://binaryforay.blogspot.ru/2016/02/introducing-lecmd.html](https://binaryforay.blogspot.ru/2016/02/introducing-lecmd.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Shell Link (.LNK) Binary File Format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://msdn.microsoft.com/en-us/library/dd871305.aspx](https://msdn.microsoft.com/en-us/library/dd871305.aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: LNK file analysis with Link Parser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Link Parser is another free tool that can be used by digital forensic examiners
    for Microsoft Shell Link files. It is developed by 4Discovery, and is capable
    of parsing a single LNK file, multiple selected files, or recursively over a folder
    or mounted forensic image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the Link Parser page on 4Discovery's website (you can find the link in
    the See Also section), and download an archive with the tool - at the time of
    writing the most recent version is 1.3\. Unpack the archive, and you are ready
    to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start `LinkParser.exe`, click on the folder icon, and choose a folder with
    the LNK files you want the tool to parse. In our case, it''s `C:\Users\{username}\AppData\Roaming\Microsoft\Windows\Recent`
    - this folder contains recently used items; we exported it from a forensic image
    using FTK Imager. Link Parser has extracted data from 204 LNK files, as seen in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb69babe-bc40-47fb-851d-fd23c76a9c9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20\. Link Parser output
  prefs: []
  type: TYPE_NORMAL
- en: Link Parser extracts a huge amount of data from LNK files - more than 30 attributes,
    including Volume Serial Number, Volume Label, Volume ID, and more.
  prefs: []
  type: TYPE_NORMAL
- en: All parsed attributes can be easily exported to `CSV`. To do this, click the
    floppy disk icon, choose Export file name, and select a location. After this,
    you can easily import exported data into your favorite spreadsheet application.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Link Parser walks through a folder or single LNK file chosen by the examiner
    and extracts more than 30 attributes from available LNK files. Parsed data can
    be exported to a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Link Parser download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.4discovery.com/our-tools/](http://www.4discovery.com/our-tools/)'
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch file analysis with Magnet AXIOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have been following the recipes in this book, you already know what
    Magnet AXIOM is, and have even used it for forensic analysis of some Windows artifacts.
    AXIOM is a really good tool, so we are going to continue to show you how to use
    it for parsing and analysis of different useful operating system artifacts: this
    time, prefetch files.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you have already used AXIOM, there is no need to install it - it''s already
    on your workstation. If, for some reason, it''s not, refer to the See Also section
    to learn how to get a trial version of the tool. Also, you will need an evidence
    source: a forensic image or a folder with prefetch files (this is located in `C:\Windows\Prefetch`).
    As soon as you have located one of the options, you are ready to go.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for Prefetch file analysis with Magnet AXIOM:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new case and go to Load evidence. You have five options here: CONNECTED
    DRIVE, FILES & FOLDERS, COMPUTER IMAGE, VOLUME SHADOW COPY, and MOBILE DEVICES,
    as you can see in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc9f2bcf-d24e-4adf-b776-8ad2bd8d8ee3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21\. Load evidence options
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, you can use a forensic image or a previously exported folder
    with prefetch files. If you prefer the first option, choose COMPUTER IMAGE; if
    the second, choose FILES & FOLDERS. In our case, it's a folder, which has been
    chosen with the help of the AXIOM folder browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s go to the artifact details. As we are interested in prefetches,
    let''s choose only these artifacts from the list. Click the CUSTOMIZE COMPUTER
    ARTIFACTS button, then CLEAR ALL, go to OPERATING SYSTEM, and tick the Windows
    Prefetch Files option. You can see how this works in the figure below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4af7ad11-8a33-4a5a-ac45-4878a82a32a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22\. Selecting artifacts to include in case
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now, we are ready to start analyzing the evidence. We have chosen only
    a folder with prefetch files, so very soon we can view parsing results in AXIOM
    Examine. Once the processing phase is finished, you are ready to view and analyze
    the results, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b028c5a9-8362-4b38-9882-f9284bd94ae8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23\. Prefetch files parsing results
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we can get the number of runs for each program, and also the
    timestamps of up to eight recent runs. A very valuable piece of information, especially
    for malware forensics!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnet AXIOM searches for prefetch files and extracts information about the
    run count and the timestamps of up to eight recent runs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Try Magnet AXIOM Free for 30 Days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.magnetforensics.com/try-magnet-axiom-free-30-days/](https://www.magnetforensics.com/try-magnet-axiom-free-30-days/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows Prefetch File (PF) format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/libyal/libscca/blob/master/documentation/Windows%20Prefetch%20File%20(PF)%20format.asciidoc](https://github.com/libyal/libscca/blob/master/documentation/Windows%20Prefetch%20File%20(PF)%20format.asciidoc)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Forensic Analysis of Prefetch files in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.magnetforensics.com/computer-forensics/forensic-analysis-of-prefetch-files-in-windows/](https://www.magnetforensics.com/computer-forensics/forensic-analysis-of-prefetch-files-in-windows/)'
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch file parsing with PECmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have found some suspicious prefetch files and want to perform in-depth
    analysis, there is another tool by Eric Zimmerman that can help you - PECmd. This
    is a free and fast command-line tool capable of parsing Windows Prefetch files,
    both in old and new formats. In this recipe, we will show you how to extract valuable
    data from prefetches with the help of this tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the PECmd download page, get the archive with the tool - at the time of
    writing, the most recent version is 0.9.0.0 - and unpack it. Also, you will need
    a prefetch file to work with, or a folder with such a file. As you already know,
    it can be exported from a forensic image with a tool of your choice. As soon as
    you get it, open the Windows Command Prompt, and you are ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for prefetch file parsing with PECmd are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Windows Command Prompt, change the directory to the one where you
    unpacked the archive, and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the output very shortly, as in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b734e5b-ef9e-4384-bafc-9ccf323aa9c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24\. PECmd output
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding figure, we can get the executable name, its
    run count, timestamps of the last eight runs, and even lists of directories and
    files references. Not bad, right?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also parse all files in a directory recursively. To do this, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The tool is tiny, but really powerful, and is highly recommended for use in
    Windows Prefetch analysis in your forensic examinations.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PECmd extracts available information from a prefetch file, or multiple prefetch
    files, in a folder specified by the user. The information includes the total number
    of runs, timestamps for recent runs, directories and files references, and more.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PECmd download page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://ericzimmerman.github.io/](https://ericzimmerman.github.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Introducing PECmd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://binaryforay.blogspot.ru/2016/01/introducing-pecmd.html](https://binaryforay.blogspot.ru/2016/01/introducing-pecmd.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Prefetch file recovery with Windows Prefetch Carver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to try to carve Windows Prefetch files from arbitrary binary data,
    there is a tool for you - Windows Prefetch Carver by Adam Witt. It can be used
    for prefetch carving from a drive's unallocated space or a memory image, for example.
    In this recipe we will show you how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the Windows Prefetch Carver GitHub page (presented in the See Also section),
    and download the archive using the green Clone or Download button. Unpack the
    archive, start the Windows Command Prompt, and change the directory to the folder
    you unpacked it into. You are ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for prefetch file recovery with Windows Prefetch Carver are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this recipe, we used a memory image from a Windows 7 system. The image
    is called `joshua1.vmem` - you can find the download link for this memory image
    in the *See Also* section. Now let''s use the tool. Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As the result, you''ll get an output file with carved data, as in the figure
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e31f6425-9bc8-42fd-be7f-055948957ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25\. Windows Prefetch Carver output
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the tool carved 13 records: timestamps, file names, and run
    counts are presented. There are a few output formats supported, including CSV
    and mactime. Run the script without arguments to learn how to save carved data
    in different formats.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Prefetch Carver scans a piece of arbitrary binary data of the examiner's
    choice, and extracts Windows Prefetch file artifacts, including timestamps, file
    names, and run counts.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows Prefetch Carver GitHub page: [https://github.com/PoorBillionaire/Windows-Prefetch-Carver](https://github.com/PoorBillionaire/Windows-Prefetch-Carver)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows 7 memory image download page: [http://jessekornblum.livejournal.com/293291.html](http://jessekornblum.livejournal.com/293291.html)'
  prefs: []
  type: TYPE_NORMAL
