- en: '*Chapter 13*: Vulnerability Assessment Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"In the midst of a disruptive and exponential rollout of the IV Industrial
    Revolution, more and more processes are being digitalized and robotized, and there
    is an explosion of data increasingly managed by artificial intelligence. In tandem
    with this rollout of new and enhanced IT capabilities, there are increased risks
    posed by cybercrime. Increased cybersecurity capabilities thus become one of the
    challenges to allow society to reap the benefits from the IV Industrial Revolution."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– Ennio Rodriguez, Ph.D. in Economics and President of the Association of
    Economists of Costa Rica*'
  prefs: []
  type: TYPE_NORMAL
- en: We have talked a lot about vulnerabilities throughout this book; however, this
    chapter was created as a single-point reference to this topic so that you can
    reach all the information you need about vulnerabilities in a single place.
  prefs: []
  type: TYPE_NORMAL
- en: While [*Chapter 2*](B16290_02_Final_JC_ePub.xhtml#_idTextAnchor035), *Managing
    Threats, Vulnerabilities, and Risks*, described what vulnerabilities are and how
    to classify them, this chapter is more about how to identify those vulnerabilities
    once they are categorized.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we can say that while [*Chapter 2*](B16290_02_Final_JC_ePub.xhtml#_idTextAnchor035),
    *Managing Threats, Vulnerabilities, and Risks*, was the theoretical part of vulnerability
    management, this chapter is more about the practical/technical side, including
    a deep dive into the tools used to find those vulnerabilities in our systems and
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve those goals, we will cover the following topics through this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to deal with vulnerabilities like a **chief information security officer**
    (**CISO**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of vulnerability testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the most recognized vulnerability assessment scanner
    (**Open Vulnerability Assessment System**, also known as **OpenVAS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of **Nexpose** and other vulnerability scanners available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To fully leverage the content of this chapter, it is recommended to have installed
    a **virtual machine** (**VM**) with **Kali Linux** to properly follow the labs.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [*Chapter 2*](B16290_02_Final_JC_ePub.xhtml#_idTextAnchor035),
    *Managing Threats, Vulnerabilities, and Risks*, there is a process to manage vulnerabilities
    at the company level that includes *identification*, *analysis*, *assessment*,
    and *remediation*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, that process is what we called the *management* side of the story. Now,
    it's time to understand how that is achieved from the *operational* (day-to-day)
    point of view.
  prefs: []
  type: TYPE_NORMAL
- en: Who should be looking for vulnerabilities?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a large enough budget, you must assign this task to either internal
    or external (third-party) **Red Teams** (as explained in [*Chapter 1*](B16290_01_Final_JC_ePub.xhtml#_idTextAnchor014),
    *A Refresher to Defensive Security Concepts*).
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if your budget is limited, you can encourage people within
    your company to report any vulnerability on your infrastructure. To make this
    effective, you must *establish* and *communicate* a *process* for that purpose
    and, when possible, provide incentives to the people that find and report those
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Bug bounty programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Bug bounty** is a clever idea to encourage others to tell you about your
    vulnerabilities instead of exploiting them against you.'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this program is to *offer economic incentives* to external people
    who find unknown vulnerabilities in your web resources (apps, pages, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Bug bounty programs are more suitable for companies with high security standards
    and softwares that have already been tested and hardened by internal Red and Blue
    teams. Therefore, publishing a bug bounty of a recently created site that has
    not been properly hardened is a waste of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, bug bounty programs are normally offered by strong companies
    who invested a lot of resources on their platforms, so if you have very good pentesting
    skills, I highly encourage you to check these sites and learn more about these
    programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://hackerone.com/bug-bounty-programs](https://hackerone.com/bug-bounty-programs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://hackenproof.com/bug-bounty-solutions](https://hackenproof.com/bug-bounty-solutions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://bugcrowd.com/programs](https://bugcrowd.com/programs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.facebook.com/BugBounty/](https://www.facebook.com/BugBounty/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.microsoft.com/en-us/msrc/bounty](https://www.microsoft.com/en-us/msrc/bounty)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://bounty.github.com/](https://bounty.github.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://internetbugbounty.org/](https://internetbugbounty.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payment of bug bounty programs is normally classified based on the impact of
    the vulnerability found, which is tied to payment categories, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Bug bounty payment example'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.1_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – Bug bounty payment example
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this may raise the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Should I only check for vulnerabilities on external (internet-facing) systems
    and services?*'
  prefs: []
  type: TYPE_NORMAL
- en: Internal vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While external-facing systems are more vulnerable to attacks, you are still
    in charge of the *overall security of your company data*, which means you also
    need to take care of the *availability* and the *integrity* of that data, and
    those two factors are especially vulnerable to insider attacks (either malicious
    or unintentional).
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, Red Teams should also perform testing on internal systems to ensure
    that the **confidentiality**, **integrity**, and **availability** of the data
    are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Internal versus external testing programs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Internal versus external testing programs
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, vulnerability testing programs can be supplemented
    to enhance the security of your systems by leveraging even external sources.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability testing tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a huge number of tools that can be used to perform vulnerability
    testing, and we can classify them into two main groups: *manual vulnerability
    assessment* and *automated vulnerability scanners*.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual vulnerability testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can leverage many of the tools we have reviewed in the previous chapters
    to manually look for vulnerabilities—for example, **Burp Suite**, **Nmap**, **Wireshark**,
    **Shodan**, and **Web Scrappers**.
  prefs: []
  type: TYPE_NORMAL
- en: These types of testing require more technical skills and are normally done by
    cybersecurity experts or Red/Purple Teams.
  prefs: []
  type: TYPE_NORMAL
- en: Automated vulnerability scanners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These scanners are created with the objective of making our lives easier by
    allowing us to scan a given web resource or system against one or more vulnerabilities
    with just a few steps—in fact, for most of them, with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: This allows an organization to scan their systems for complex vulnerabilities
    without the need of a pentester to perform the vulnerability assessment, making
    these scanners a more suitable option for companies with little budget to hire
    pentesters.
  prefs: []
  type: TYPE_NORMAL
- en: Most of them contain a database of known vulnerabilities (**Common Vulnerabilities
    and Exposures**, or **CVE**), plus an associated script to test each of them.
    In some cases, they even group those vulnerabilities to allow users to determine
    whether the systems are compliant with a given compliance requirement such as
    the **Payment Card Industry Data Security Standard** (**PCI DSS**) or the **Health
    Insurance Portability and Accountability Act** (**HIPAA**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **graphical user interface** (**GUI**) of
    the Nessus vulnerability scanner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – GUI of the Nessus vulnerability scanner'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.3_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – GUI of the Nessus vulnerability scanner
  prefs: []
  type: TYPE_NORMAL
- en: 'OK—now, let''s do a deep dive into two of the more famous vulnerability scanner
    tools: **OpenVAS** and **Nexpose**.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a vulnerability assessment scanner (OpenVAS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OpenVAS** is the most famous open source vulnerability scanner available.'
  prefs: []
  type: TYPE_NORMAL
- en: The software is mainly maintained as an open source project by *Greenbone networks*
    ([www.greenbone.net](http://www.greenbone.net)) as part of their commercial suite
    of a vulnerability management solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'This software is capable of testing an entire network to discover devices and
    then execute a plurality of actions to determine the **Operating System (OS)**,
    ports, configurations, and software installed on the systems, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – OpenVAS network scan structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.4_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – OpenVAS network scan structure
  prefs: []
  type: TYPE_NORMAL
- en: After that, OpenVAS can execute several checks to identify vulnerabilities on
    each of the identified components.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticated tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Part of the powerful options of OpenVAS is the capability to perform two types
    of tests: unauthenticated and authenticated testing.'
  prefs: []
  type: TYPE_NORMAL
- en: An *unauthenticated test* is less invasive because it just tests general vulnerabilities
    based on the software, configuration, and ports found.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, an *authenticated test* is more powerful because it allows
    you to add another factor to the test—that is, the *user's session, authentication,
    and authorization*.
  prefs: []
  type: TYPE_NORMAL
- en: Here, OpenVAS will use valid credentials (provided by the tester) to run **local
    security checks** (**LSCs**) to gather more details about the vulnerabilities
    on the target systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of the credentials that can be used in an authenticated test are given
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server Message Block (SMB)**: To check the patch level and locally installed
    software on Windows systems such as Adobe Acrobat Reader or the Java suite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure Shell (SSH)**: To check the patch level on Unix and Linux systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESX integrated (ESXi)**: To test the VMware ESXi servers locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple Network Management Protocol (SNMP)**: To test network components such
    as routers and switches'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's see how we can install this tool on our Kali Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenVAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OK—the first step will be to download and install OpenVAS with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the software is installed, it''s time to execute the configuration script
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Did you get an error?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following screenshot, there is a common error related to **postgresql**,
    but we will see how to fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – postgresql error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.5_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.5 – postgresql error
  prefs: []
  type: TYPE_NORMAL
- en: The error is caused because there are two versions of **postgresql** running
    at the same time and **postgresql** uses **Transmission Control Protocol** (**TCP**),
    and as you may know, it cannot use the same port for both versions.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to fix this issue, we just need to make sure that version 13 is running
    on TCP `port 5432`, and then we can assign any other available port to version
    12\. Here is how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by opening the configuration file for `postgresql 13`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you need to navigate to the port and change the current value to `5432`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Changing port on postgresql 13'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.6_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.6 – Changing port on postgresql 13
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, save the file with *Ctrl* + *O* and exit with *Ctrl* + *X*, as seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Saving the postgresql configuration file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.7_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.7 – Saving the postgresql configuration file
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to modify the port in `postgresql` `12` and set the port to
    `5433`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, as we did before, we need to change the port, this time from `5432` to
    `5433`, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Changing the port on postgresql 12'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.8_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – Changing the port on postgresql 12
  prefs: []
  type: TYPE_NORMAL
- en: Then, save the file with *Ctrl* + *O* and exit with *Ctrl* + *X*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we just need to restart **postgresql** with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This should then fix the issue!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can go back and run the OpenVAS configuration script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after a few minutes, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – OpenVAS configuration and password'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.9_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.9 – OpenVAS configuration and password
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you copy the password and save it in a safe location as you will need
    it to access OpenVAS.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are ready to start OpenVAS!
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenVAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute OpenVAS, just type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that you can also start OpenVAS using the GUI of Kali Linux and browsing
    through the apps under **02 - Vulnerability Analysis**, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Opening OpenVAS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.10_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.10 – Opening OpenVAS
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, OpenVAS may not be able to open the default browser and will
    display the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – OpenVAS configuration and password'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.11_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.11 – OpenVAS configuration and password
  prefs: []
  type: TYPE_NORMAL
- en: 'But don''t worry—in this case, you just need to copy the OpenVAS **Uniform
    Resource Locator** (**URL**) from the command line (as seen in the following screenshot)
    and paste it into your favorite web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – OpenVAS URL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.12_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.12 – OpenVAS URL
  prefs: []
  type: TYPE_NORMAL
- en: 'But wait—some browsers may flag this page as dangerous, as seen in the next
    screenshot. However, you can dismiss the warning and continue to OpenVAS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Generic warning when opening OpenVAS in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.13_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.13 – Generic warning when opening OpenVAS in the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations!! Now, you should be able to see the OpenVAS login page, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.14 – OpenVAS login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.14_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.14 – OpenVAS login page
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can use the username `admin` and the password we just copied before
    to log in to OpenVAS.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your feeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenVAS uses several feeds as inputs to check for vulnerabilities, so it is
    super important to keep them up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the version, you can go to **Administration** | **Feed Status**, as
    highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – OpenVAS Feed Status page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.15_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.15 – OpenVAS Feed Status page
  prefs: []
  type: TYPE_NORMAL
- en: In case you need to update the feeds, use the commands shown next.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update **NVT Feed**, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To update **SCAP Feed**, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To update **CERT Feed**, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To update **GVMD DATA Feed**, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Perfect! You now have an instance of OpenVAS fully configured, updated, and
    ready to execute scans.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, you can perform scans of a specific **Internet Protocol**
    (**IP**) address or even a group of IPs.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are ready to get familiar with this tool and start testing your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Nexpose Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Nexpose** is another vulnerability scanner that is very similar to OpenVAS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nexpose Community is supported by **Rapid7** and you can download it here:
    [https://www.rapid7.com/info/nexpose-community/](https://www.rapid7.com/info/nexpose-community/).'
  prefs: []
  type: TYPE_NORMAL
- en: We have to highlight the fact that the functionality has been limited; however,
    in case you want the full version, they also offer the full version of Nexpose
    for a 30-day trial.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation steps are well documented at the following link: [https://docs.rapid7.com/nexpose/download](https://docs.rapid7.com/nexpose/download).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a scan, you just need to follow this simple flow, as highlighted in
    *Figure 13.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**INFO & SECURITY**: Here, you just need to add a name and description of the
    testing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ASSETS**: Select the *assets* or system to be scanned.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**AUTHENTICATION**: Here, you can add the credentials for authenticated tests.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TEMPLATES**: Here, you can choose the type of scan to be performed—for example,
    a **Sarbanes-Oxley** (**SOX**) scan or PCI DSS.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ENGINES**: Here, you select the sources from where the system will gather
    the vulnerabilities.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**SCHEDULE**: This is a very cool option that enables you to schedule future
    or recurrent tests.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see an overview of this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Nexpose Community GUI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.16_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.16 – Nexpose Community GUI
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Rapid7 released a new offering called **InsightVM** (see *Figure
    13.17*), advertised as an enhanced version of Nexpose and including dashboards,
    remediation projects, **continuous monitoring** (**CM**), and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can find a detailed comparison between Nexpose and the new **InsightVM**:
    [https://www.rapid7.com/products/nexpose/insightvm-comparison/](https://www.rapid7.com/products/nexpose/insightvm-comparison/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the default dashboard on InsightVM in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.17 – InsightVM'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.17_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.17 – InsightVM
  prefs: []
  type: TYPE_NORMAL
- en: There are many more vulnerability testing systems, either to run locally from
    your computer or even cloud-based, that you can execute from any part of the world
    with a simple click.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, there are many other tools, such as **legion**, **nikto**, **nmap**,
    and **Unix-privesc-checker**, that you can also use to find vulnerabilities in
    your system and, as seen in the following screenshot, all of them are available
    for free on Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Vulnerability analysis tools on Kali Linux'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.18_B16290.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.18 – Vulnerability analysis tools on Kali Linux
  prefs: []
  type: TYPE_NORMAL
- en: '*Which one is better?*'
  prefs: []
  type: TYPE_NORMAL
- en: That will depend on your company, your budget, and even the regulations that
    you must be in compliance with. But also, it is very important to consider which
    of all of these tools you feel more comfortable managing and using.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability management is a key area in defensive security; therefore, in
    this chapter, we focused on the tools used to perform vulnerability assessments.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you also learned about the types of tools available, plus some strategies
    that, as a cybersecurity leader, you can use to enhance your vulnerability scanning
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we installed OpenVAS, which is considered by many as the best
    free vulnerability scanner, which is surely a must-have tool in your cybersecurity
    arsenal.
  prefs: []
  type: TYPE_NORMAL
- en: And we closed the chapter with an overview of other tools (free and paid) that
    you can also leverage to test your infrastructure against known vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's prepare for the next chapter, in which you will learn all that you
    need to know about **malware analysis**.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to know more about bug bounty, then refer to this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/product/bug-bounty-hunting-essentials/9781788626897](https://www.packtpub.com/product/bug-bounty-hunting-essentials/9781788626897)'
  prefs: []
  type: TYPE_NORMAL
