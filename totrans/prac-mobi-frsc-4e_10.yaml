- en: Android Forensic Setup and Pre-Data Extraction Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the fundamentals of the Android architecture,
    security features, filesystems, and other capabilities. Having an established
    forensic environment before the start of an examination is important, as it ensures
    that the data is protected while you, as the examiner, maintain control of the
    workstation. This chapter will explain the process of—and what to consider when—setting
    up a digital forensic examination environment. It is paramount that you maintain
    control of the forensic environment at all times; this prevents the introduction
    of contaminants that could affect the forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a forensic environment for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting an Android device to a workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen lock bypassing techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining root access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a forensic environment for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a forensic examiner, you may encounter a wide range of mobiles over the
    course of your investigation. Therefore, it is necessary to have a basic environment
    set up on top of which you can build based on requirements. It is also very important
    that you maintain complete control over the environment at all times to avoid
    any unexpected situations. Setting up a proper lab environment is an essential
    part of the forensic process. The Android forensic setup usually involves the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a fresh or forensically sterile computer environment. This means
    that other data is either not present on the system or is contained in a manner
    that prevents it from contaminating the present investigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the basic software necessary to connect to the device. Android forensic
    tools and methodologies will work on the Windows, Linux, and macOS platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain access to the device. You must be able to enable settings or bypass them
    in order to allow the data to be extracted from the Android device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Issue commands to the device using the methods defined in this chapter and in
    [Chapter 9](bf232566-3a17-4914-992b-80674dd379de.xhtml), *Android Data Extraction
    Techniques*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following sections provide guidance on setting up a basic Android forensic
    workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android **Software Development Kit** (**SDK**) helps the development world
    to build, test, and debug applications to run on Android. The Android SDK comes
    with Android Studio, the official **integrated development environment** (**IDE**)
    for developing Android apps. Android Studio provides valuable documentation and
    other tools that can be of great help during the investigation of an Android device.
    Alternatively, you can download just the platform tools, which are components
    of the Android SDK and include tools that can interact with the Android platform,
    such as the ADB, fast boot, and so on; these will be described in more detail
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: A good understanding of the Android SDK will help you to get to grips with the
    particulars of a device and its data on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio consists of software libraries, APIs, tools, emulators, and other
    reference material. It can be downloaded for free from [https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html).
    The platform tools can be downloaded from [https://developer.android.com/studio/releases/platform-tools](https://developer.android.com/studio/releases/platform-tools).
  prefs: []
  type: TYPE_NORMAL
- en: During a forensic investigation, having these tools helps you connect to and
    access data on Android devices. The Android SDK is updated very frequently, so
    it's important to verify that your workstation also remains up to date. The Android
    SDK can run on Windows, Linux, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Android platform tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A working installation of the Android SDK or Android platform tools is a must
    during the investigation of a forensic device. The Windows version of Android
    Studio is around 718 MB, and rather heavy compared to the software for the platform
    tools, which is just 20 MB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the step-by-step procedure to install the Android platform
    tools on a Windows 10 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Before you install Android Studio or the platform tools, make sure that your
    system has **Java Development Kit** (JDK) installed, because the Android SDK relies
    on Java SE Development Kit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JDK can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of the platform tools from [https://developer.android.com/studio/releases/platform-tools](https://developer.android.com/studio/releases/platform-tools).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and extract the ZIP files to a folder. The installation location
    is your choice and must be remembered for future access. In this example, we will
    extract it to the `C:\ folder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the directory (`C:\platform-tools`) and note that the following tools
    are listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54c05c40-3681-41ec-a4a0-e1cccabeda46.png)'
  prefs: []
  type: TYPE_IMG
- en: Android platform tools
  prefs: []
  type: TYPE_NORMAL
- en: This completes the basic Android tool installation. If you're installing the
    full-blown Android Studio version, you should still see the platform tools folder
    under the newly installed Android directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Android virtual device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Android Studio you can create an **Android virtual device** (**AVD**),
    also called an emulator, which is often used by developers when creating new applications;
    however, an emulator has significance from a forensic perspective, too. Emulators
    are useful when trying to understand how applications behave and execute on a
    device. This could be helpful in confirming certain findings that are unearthed
    during a forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, while working on a device that is running on an older platform, you can
    design an emulator for the same platform. Furthermore, before installing a forensic
    tool on a real device, the emulator can be used to find out how a forensic tool
    works and changes the content on an Android device. To create a new AVD (on the
    Windows workstation), go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Android Studio and navigate to Tools | AVD Manager. The Android Virtual
    Device Manager window is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4257f6b5-0d95-4100-aed7-5d37f6e47317.png)'
  prefs: []
  type: TYPE_IMG
- en: Android Virtual Device Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Create Virtual Device to create a new virtual device. In the screens
    that follow, select the appropriate hardware, system image, API level, AVD name,
    and so on, and proceed further. For example, the following screenshot shows Android
    Pie being selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1949229-9e65-4b11-b025-4a31e41aafb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Virtual device configuration
  prefs: []
  type: TYPE_NORMAL
- en: A confirmation message is shown once the device is successfully created. Now,
    select the AVD and click on the Play button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should launch the emulator. Note that this could take a few minutes, or
    even longer, depending on the workstation''s CPU and RAM. The emulator does consume
    a significant amount of resources on the system. After a successful launch, the
    AVD will run, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd474902-3666-403e-8416-48c3af41e24c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Android emulator
  prefs: []
  type: TYPE_NORMAL
- en: From a forensic perspective, analysts and security researchers can leverage
    the functionality of an emulator to understand the file system, data storage,
    and so on. The data created when working on an emulator is stored in your home
    directory in a folder named `android`. For instance, in our example, the details
    about the Pixel_XL_API_28 emulator that we created earlier are stored under `C:\Users\Rohit\.android\avd\Pixel_XL_API_28.avd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the various files present under this directory, the following are those
    that are of interest to a forensic analyst:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cache.img`: This is the disk image of the `/cache` partition (remember that
    we discussed the `/cache` partition of an Android device in [*Chapter 7*](eb3f20e0-270d-4e7d-bb69-3bfd1e707f38.xhtml),
    *Understanding Android*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdcard.img`: This is the disk image of the SD card partition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Userdata-qemu.img`: This is the disk image of the `/data` partition. The `/data`
    partition contains valuable information about the device user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have understood the steps to set up the environment, let's connect
    the Android device to a forensic workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting an Android device to a workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forensic acquisition of an Android device using open source tools requires you
    to connect the device to a forensic workstation. Forensic acquisition of any device
    should be conducted on a forensically sterile workstation. This means that the
    workstation is strictly used for forensics and not for personal use.
  prefs: []
  type: TYPE_NORMAL
- en: Note that any time a device is plugged into a computer, changes can be made
    to the device; you must have full control of all interactions with the Android
    device at all times.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps should be performed by you in order to successfully connect
    the device to a workstation. Note that write protection may prevent the successful
    acquisition of the device, since commands may need to be pushed to the device
    in order to pull information. All the following steps should be validated on a
    test device prior to attempting them on real evidence.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the device cable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The physical USB interface of an Android device allows it to connect to a computer
    to share data, such as songs, videos, and photos. This USB interface might change
    from manufacturer to manufacturer and also from device to device. For example,
    some devices use mini-USB while some others use micro-USB and USB Type C. Apart
    from this, some manufacturers use their own proprietary formats, such as EXT-USB,
    EXT micro-USB, and so on. The first step in acquiring an Android device is to
    determine what kind of device cable is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different types, such as mini-USB, micro-USB, and other proprietary
    formats. The following is a brief description of the most widely used connector
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Connector type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Mini - A USB | It is approximately 7 x 3 mm in size, with two of the corners
    on one long side lifted out. |'
  prefs: []
  type: TYPE_TB
- en: '| Micro - B USB | It is approximately 6 x 1.5 mm in size, with two corners
    cut off to form a trapezoid. |'
  prefs: []
  type: TYPE_TB
- en: '| Co-axial | It has a circular hole with a pin sticking up in the middle. There
    are different sizes in this category, varying from 2 to 5 mm in diameter. Widely
    used with Nokia models. |'
  prefs: []
  type: TYPE_TB
- en: '| D Sub-miniature | It has the shape of a rectangle with two rounded corners.
    The length of the rectangle varies, but the height is always 1.5 to 2 mm. Used
    mostly by Samsung and LG devices. |'
  prefs: []
  type: TYPE_TB
- en: Next, let's have a quick look at how to install device drivers.
  prefs: []
  type: TYPE_NORMAL
- en: Installing device drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to identify the device properly, the computer may need certain drivers
    to be installed. Without the necessary drivers, the computer may not identify
    and work with the connected device. The issue is that, since Android is allowed
    to be modified and customized by manufacturers, there is no single generic driver
    that works for all Android devices. Each manufacturer writes its own proprietary
    drivers and distributes them over the internet, so it's important to identify
    the specific device drivers that need to be installed. Of course, some Android
    forensic toolkits (which we will discuss in the following chapters) do come with
    some generic drivers or a set of the most widely used drivers; they may not work
    with all models of the Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: Some Windows operating systems are able to autodetect and install drivers once
    the device is plugged in, but more often than not they fail. The device drivers
    for all manufacturers can be found on their respective websites.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the connected device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you haven''t done so already, connect the unlocked Android device to the
    computer directly using the USB cable. The Android device will appear as a new
    drive and you will be able to access the files on the external storage. If the
    device is locked, then at this point, you will not be able to access any files
    and may need to use the Turn on USB storage option, which can be enabled on the
    phone, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32c7722a-6859-4e09-8d09-922b25024de5.png)'
  prefs: []
  type: TYPE_IMG
- en: USB mass storage in Android 4.1 version
  prefs: []
  type: TYPE_NORMAL
- en: 'With some Android phones (especially with HTC), the device may expose more
    than one functionality when connected with a USB cable. For instance, as shown
    in the following screenshot, when an HTC device is connected it presents a menu
    with four options. The default selection is Charge only. When the Disk drive option
    is selected, it is mounted as a disk drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec34f18c-7553-44e3-a6db-d8f1d6205684.png)'
  prefs: []
  type: TYPE_IMG
- en: HTC mobile USB options
  prefs: []
  type: TYPE_NORMAL
- en: When the device is mounted as a disk drive, you will be able to access the SD
    card present on the device. From a forensic point of view, the SD card has significant
    value as it may contain files that are important to an investigation; however,
    the core application data stored under `/data/data` will remain on the device
    and cannot be accessed with these methods.
  prefs: []
  type: TYPE_NORMAL
- en: The Android debug bridge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considered to be one of the most crucial components in Android forensics, the
    **Android debug bridge** (**ADB**) is a command-line tool that allows you to communicate
    with the Android device and control it. We will learn about the ADB in detail
    in upcoming chapters; for now, we will focus on a basic introduction to the ADB.
    You can access the ADB tool under `/platform-tools/`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we discuss anything about the ADB, we need to have an understanding of
    the **USB debugging** option.
  prefs: []
  type: TYPE_NORMAL
- en: USB debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary function of this option is to enable communication between the
    Android device and the workstation on which the Android SDK is installed. On a
    Samsung phone, you can access this under Settings | Developer Options, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73540294-59bb-4c6c-8649-a885589841b8.png)'
  prefs: []
  type: TYPE_IMG
- en: The USB debugging option in a Samsung S8 device
  prefs: []
  type: TYPE_NORMAL
- en: Other Android phones may have different environments and configuration features.
    You may have to force the Developer Options option by accessing build mode.
  prefs: []
  type: TYPE_NORMAL
- en: However, starting from Android 4.2, the Developer Options menu is hidden to
    make sure that users do not enable it by accident. To enable it, go to Settings
    | About Phone and then tap the Build Number field seven times. After this, Developer
    Options will be available in the Settings menu. Prior to Android 4.2.2, enabling
    this option was the only requirement for communicating with the device over ADB;
    however, starting from Android 4.2.2, Google has introduced the secure USB debugging
    option. This feature only allows hosts that are explicitly authorized by the user
    to connect to the device using ADB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, when you connect the device to a new workstation via USB in order to
    access ADB, you need to first unlock the device and authorize access by pressing
    OK in the confirmation window, as shown in the following screenshot. If Always
    allow from this computer is checked, the device will not prompt for authorization
    in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4df919bd-ed19-45c7-8caa-4800946a8835.png)'
  prefs: []
  type: TYPE_IMG
- en: Secure USB debugging
  prefs: []
  type: TYPE_NORMAL
- en: When the USB debugging option is selected, the device will run the **adb daemon**
    (`adbd`) in the background and will continuously look for a USB connection. The
    daemon will usually run under a nonprivileged shell user account and thus will
    not provide access to the complete data; however, on rooted phones, `adbd` will
    run under the root account and therefore provide access to all the data. It is
    not recommended that you root a device to gain full access unless all other forensic
    methods fail. Should you elect to root an Android device, the methods must be
    well-documented and tested prior to attempting it on real evidence. Rooting will
    be discussed at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: On the workstation where the Android SDK is installed, `adbd` will run as a
    background process. Also, on the same workstation, a client program, which can
    be invoked from a shell by issuing the `adb` command, will run. When the `adb`
    client is started, it first checks whether an `adb` daemon is already running.
    If the response is negative, it initiates a new process to start the `adb` daemon.
    The `adb` client program communicates with local `adbd` over port `5037`.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the device using adb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the environment setup is complete and the Android device is in USB debugging
    mode, connect the Android device to the forensic workstation with a USB cable
    and start using `adb`.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting connected devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following `adb` command provides a list of all the devices connected to
    the forensic workstation. This will also list the emulator if it is running at
    the time of issuing the command. Also remember that, if the necessary drivers
    are not installed, then the following command will show a blank message. If you
    encounter this situation, download the necessary drivers from the manufacturer
    and install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b952415-ff44-418b-9067-88e9374f0c87.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have a list of devices connected to the workstation. Next, we will see
    how to kill the local ADB server.
  prefs: []
  type: TYPE_NORMAL
- en: Killing the local ADB server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following command kills the local `adb` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After killing the local `adb` service, issue the `adb` devices command. You
    will see that the server is started, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2236193-c3b2-47d0-8782-3c6d0ff11c66.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now access the ADB shell on the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the adb shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ADB shell command allows you to access the shell on an Android device and
    interact with the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the command to access the `adb` shell and execute a basic
    `ls` command to see the contents of the current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Android emulator can be used by you to execute and understand `adb` commands
    before using them on the device. In [Chapter 9](bf232566-3a17-4914-992b-80674dd379de.xhtml),
    *Android Data Extraction Techniques*, we will explain more about leveraging adb
    to install applications, copy files and folders from the device, view device logs,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Linux commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now take a quick look at some commonly used Linux commands and their
    usage with respect to an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ls`: The `ls` command (with no option) lists the files and directories present
    in the current directory. With the `-l` option, this command shows files and directories
    and also their size, modified date and time, the owner of the file and its permission,
    and so on, as shown in the following command-line output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the following are a few options that can be used along with the `ls`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | Lists hidden files |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Displays files by timestamp |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Displays only directories |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | Displays the long-format listing, with GID and UID numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `R` | Displays subdirectories as well |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | Displays files based on timestamp |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Displays the file access time |'
  prefs: []
  type: TYPE_TB
- en: 'Depending on the requirements, one or more of the following options can be
    used by the investigator to view the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cat`: The `cat` command reads one or more files and prints them to standard
    output, as shown in the following command lines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To combine multiple files into one, we can use the `>` operator. To append to
    an existing file, we can use the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '`cd`: The `cd` command is used to change from one directory to another. This
    is more frequently used while navigating from one folder to another. The following
    example shows the commands used to change to the `system` folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`cp`: The `cp` command can be used to copy a file from one location to another.
    The syntax for this command is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`chmod`: The `chmod` command is used to change the access permissions to filesystem
    objects (files and directories). It may also alter special mode flags. The syntax
    for this command is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For example, `chmod 777` on a file gives read, write, and execute permissions
    to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: '`dd`: The `dd` command is used to copy a file, converting and formatting it
    according to the operands. With Android, the `dd` command can be used to create
    a bit-by-bit image of the Android device. More details of imaging are covered
    in [*Chapter 4*](f082adcc-6892-4e66-80cc-49b9752cb56a.xhtml), *Data Acquisition
    from iOS Backups*. The following is the syntax that needs to be used with this
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`rm`: The `rm` command can be used to delete files or directories. The following
    is the syntax for this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`grep`: The `grep` command is used to search files or output for a particular
    pattern. The syntax for this command is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`pwd`: The `pwd` command displays the current working directory. For example,
    the following command-line output shows that the current working directory is
    `/system`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`mkdir`: The `mkdir` command is used to create a new directory. The following
    is the syntax for this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`exit`: The `exit` command can be used to exit the shell you are in. Just type
    `exit` in the shell to exit from it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will see how to handle an Android device efficiently before the investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Handling an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Handling an Android device in a proper manner prior to the forensic investigation
    is a very important task. Care should be taken to make sure that our unintentional
    actions don't result in data modification or any other unwanted happenings. The
    following sections throw light on certain issues that need to be considered while
    handling the device in the initial stages of a forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: With improvements in technology, the concept of *device locking* has effectively
    changed over the last few years. Most users now have a passcode locking mechanism
    enabled on their device because of the increase in general security awareness.
    Before we look at some of the techniques used to bypass locked Android devices,
    it is important for us not to miss an opportunity to disable the passcode when
    there is a chance.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an Android device that is to be analyzed is first accessed, check whether
    the device is still active (unlocked). If so, change the settings of the device
    to enable greater access to the device. When the device is still active, consider
    performing the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enabling USB debugging**: Once the USB debugging option is enabled, it gives
    greater access to the device through the `adb` connection. This is of great significance
    when it comes to extracting data from the device. The location of the option to
    enable USB debugging might change from device to device, but it''s usually under
    Developer Options in Settings. Most methods for physically acquiring Android devices
    require USB debugging to be enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling the Stay awake setting**: If the Stay awake option is selected and
    the device is connected for charging, then the device never locks. Again, if the
    device locks, the acquisition can be halted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increasing screen timeout**: This is the time for which the device will be
    effectively active once it is unlocked. The location to access this setting varies
    depending upon the model of the device. On a Samsung Galaxy S3 phone, you can
    access this setting by navigating to Settings | Display | ScreenTimeout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from these, as mentioned in [*Chapter 1*](3bd35df5-095f-4aac-a214-31a25983715b.xhtml),
    *Introduction to Mobile Forensics*, the device needs to be isolated from the network
    to make sure that remote wipe options do not work on the device. The Android Device
    Manager allows the phone to be remotely wiped or locked. This can be done by signing
    in to the Google account, which is configured on the mobile. More details about
    this are supplied in the following section. If the Android device is not set up
    to allow remote wiping, the device can only be locked using the Android Device
    Manager. There are also several **mobile device management** (**MDM**) software
    products available on the market, which allow users to remotely lock or wipe the
    Android device. Some of these may not require specific settings to be enabled
    on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Using the available remote wipe software, it is possible to delete all the data,
    including emails, applications, photos, contacts, and other files, as well as
    those found on the SD card. To isolate the device from the network, you can put
    the device in airplane mode and disable Wi-Fi as an extra precaution. Enabling
    airplane mode and disabling Wi-Fi works well, as the device will not be able to
    communicate over a cellular network and cannot be accessed via Wi-Fi. Removing
    the SIM card from the phone is also an option, but that does not effectively stop
    the device from communicating over Wi-Fi or other cellular networks. To place
    the device in airplane mode, press and hold the Power Off button and select Airplane
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: All these steps can be done when the Android device is not locked; however,
    during the investigation, we commonly encounter devices that are locked. Therefore,
    it's important to understand how to bypass the lock code if it is enabled on an
    Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Screen lock bypassing techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of the increase in user awareness and the ease of functionality, there
    has been an exponential increase in the usage of passcode options to lock Android
    devices. This means that bypassing the device's screen lock during a forensic
    investigation becomes increasingly important. The applicability of the screen
    lock bypass techniques discussed so far is based on the situation. Note that some
    of these methods may result in us making changes to the device. Make sure that
    you test and validate all the steps listed on non-evidentiary Android devices.
    You must have authorization to make the required changes to the device, document
    all steps taken, and be able to describe the steps taken if courtroom testimony
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, there are three types of screen lock mechanisms offered by Android.
    Although there are some devices that have voice-lock, face-lock, and fingerprint-lock
    options, we will limit our discussion to the following three options, since these
    are the most widely used on all Android devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pattern lock**: The user sets a pattern or design on the phone and the same
    pattern must be drawn to unlock the device. Android was the first smartphone to
    introduce a pattern lock.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PIN code**: This is the most common lock option and is found on many mobile
    phones. The PIN code is a four-digit number that needs to be entered to unlock
    the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passcode**: This is an alphanumeric passcode. Unlike the PIN, which takes
    four digits, the alphanumeric passcode includes letters as well as digits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following section details some techniques you can use to bypass these Android
    lock mechanisms. Depending on the situation, these techniques might help an investigator
    to bypass the screen lock.
  prefs: []
  type: TYPE_NORMAL
- en: Using ADB to bypass the screen lock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If USB debugging appears to be enabled on the Android device, it is wise to
    take advantage of it by connecting with `adb` using a USB connection, as discussed
    in the earlier sections of this chapter. You should connect the device to the
    forensic workstation and issue the `adb` devices command. If the device shows
    up, it implies that USB debugging is enabled. If the Android device is locked,
    you must attempt to bypass the screen lock. The following two methods may allow
    you to bypass the screen lock when USB debugging is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the gesture.key file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deleting the `gesture.key` file will remove the pattern lock on the device;
    however, it''s important to note that this will permanently change the device,
    as the pattern lock is gone. This should be considered if you are conducting covert
    operations. The following shows how the process is done:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device to the forensic workstation (a Windows machine, in our example)
    using a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the command prompt and execute the following instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Reboot the device. If the pattern lock still appears, just draw any random design
    and the device should unlock without any trouble.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method works when the device is rooted. This method may not be successful
    on unrooted devices. Rooting an Android device should not be performed without
    proper authorization, as the device is altered.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the settings.db file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To update the `settings.db` file, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device to the forensic workstation using a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the command prompt and execute the following: `/data/data/com.android.providers.settings/databases
    sqlite3 settings.db`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/856dc999-8d82-45b4-9d57-11c9c6f1abe4.png)'
  prefs: []
  type: TYPE_IMG
- en: Exit and reboot the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Android device should be unlocked. If it is not, attempt to remove the `gesture.key`
    as explained earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will have a look at the recovery mode and ADB connection in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for the modified recovery mode and ADB connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, recovery refers to the dedicated partition where the recovery console
    is present. The two main functions of recovery are deleting all user data and
    installing updates. For instance, when you factory-reset your phone, recovery
    boots up and deletes all the data. Similarly, when updates are to be installed
    on the phone, it is done in recovery mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many enthusiastic Android users who install custom ROM through a
    modified recovery module. This modified recovery module is mainly used to make
    the process of installing custom ROM easy. Recovery mode can be accessed in different
    ways, depending on the manufacturer of the device; information on which method
    is right for which manufacturer''s devices is easily available on the internet.
    Usually, this is done by holding different keys together, such as the Volume button
    and Power button. Once in recovery mode, connect the device to the workstation
    and try to access the `adb` connection. If the device has a recovery mode that
    is not modified, you may not be able to access the `adb` connection. Modified
    recovery versions of the device present the user with different options as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b241b78f-fe58-44e5-b75a-fd1984664839.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will see how to flash the recovery partition.
  prefs: []
  type: TYPE_NORMAL
- en: Flashing a new recovery partition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are mechanisms available to flash the recovery partition of an Android
    device with a modified image. The fastboot utility facilitates this process. Fastboot
    is a diagnostic protocol that comes with the SDK package and is used primarily
    to modify the flash filesystem through a USB connection from a host computer.
    For this, you need to start the device in boot loader mode, in which only the
    most basic hardware initialization is performed.
  prefs: []
  type: TYPE_NORMAL
- en: Once the protocol is enabled on the device, it will accept a specific set of
    commands that are sent to it via the USB cable using a command line. Flashing
    or rewriting a partition with a binary image stored on the computer is one such
    command that is allowed. Once the recovery is flashed, boot the device in recovery
    mode, mount the `/data` and `/system` partitions, and use `adb` to remove the
    `gesture.key` file. Reboot the phone and you should be able to bypass the screen
    lock; however, this works only if the device bootloader is unlocked. Also, flashing
    permanently alters the device. Instead of flashing, you could use the fastboot
    `boot` command to boot to a recovery image temporarily to delete the key file
    without permanently changing the recovery partition.
  prefs: []
  type: TYPE_NORMAL
- en: Using automated tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several automated solutions available on the market for unlocking
    Android devices. Commercial tools, such as Cellebrite and XRY, are capable of
    bypassing the screen locks, but most of them require USB debugging to be enabled.
    We will now examine how to unlock an Android device using the UFED user lock code
    recovery tool. This tool only works on those devices that support USB OTG. This
    process also requires a UFED camera, Cable No. 500-Bypass lock, and Cable No.
    501-Bypass lock. Once the tool is installed on the workstation, go through the
    following steps to unlock the Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tool on the workstation and press `1`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d451d87c-63de-4905-a9cb-34ee27dae914.png)'
  prefs: []
  type: TYPE_IMG
- en: UFED user lock code recovery tool
  prefs: []
  type: TYPE_NORMAL
- en: Now, connect side A of Cable No. 500-Bypasslock to a USB port of the workstation.
    Also, connect side B of Cable No. 500-Bypasslock to Cable No. 501- OTG and then
    connect the other end to the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once connected, the tool prompts you to select the recovery profile. Select
    `[1] Manually select the recovery profile.`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the lock type used on the device and the recovery profile, and proceed
    by following the instructions on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, make sure that the keypad appears on the device screen and that
    it's ready to accept the PIN code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close any message windows that may appear. Press `1` and hit *Enter*. Now, make
    five incorrect login attempts by entering random input, and click on Forgot pattern
    at the bottom of the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions on the screen, wait for the camera window to open, and
    then click on the camera window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the cursor to select any nonempty area on the device's screen by placing
    the green square over it—for example, select any number on the screen. This is
    used by the tool to detect whether the device is unlocked. Press *Enter* to start
    the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tool will try a number of combinations to unlock the device. Once unlocked,
    it will prompt you to end the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now learn about the Android Device Manager and how to unlock a device
    using it.
  prefs: []
  type: TYPE_NORMAL
- en: Using Android Device Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the latest Android phones come with a service called Android Device
    Manager, which helps the owner of a device to locate their lost phone. This service
    can also be used to unlock a device; however, this is possible only when you know
    the Google account credentials that are configured on the device. If you have
    access to the account credentials, then follow these steps to unlock the device:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://google.com/android/devicemanager](http://google.com/android/devicemanager)
    on your workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the Google account that is configured on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the device you need to unlock and click on Lock, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96e9d1fa-43c6-4269-8d04-a531816e05b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Android Device Manager
  prefs: []
  type: TYPE_NORMAL
- en: Enter a temporary password and click on Lock again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's successful, enter the temporary password on the device to unlock it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This can be done without knowing the credentials of the computer that the login
    is saved on (that is, the suspect's PC).
  prefs: []
  type: TYPE_NORMAL
- en: Bypass using Find My Mobile (for Samsung phones only)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Find My Mobile is a technique that's worth attempting if you're handling
    a Samsung device; however, it only works if the device owner is already logged
    into the Samsung account on the device and you know the Samsung credentials that
    are configured on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the process, access the Find My Mobile service from the web browser
    and then log in using the Samsung account credentials registered on the device,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap on the Lock My Screen option located on the left side.:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bf2591e-f260-40e7-8fb0-50ff9711e467.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, enter any temporary PIN and then tap on the Lock button. (You may also
    see the unlock my screen option for some devices, which also serves the same purpose). The
    phone can now be unlocked with the temporary PIN that was set earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's take a look at a smudge attack.
  prefs: []
  type: TYPE_NORMAL
- en: Smudge attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In rare cases, a smudge attack may be used to deduce the password of a touchscreen
    mobile device. This attack relies on identifying the smudges left behind by the
    user's fingers. While this may present a bypass method, it must be said that a
    smudge attack is unlikely to work since most Android devices are touchscreen and
    smudges will also be present from using the device; however, it has been demonstrated
    that, under proper lighting, the smudges that are left behind can be easily detected,
    as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'By analyzing the smudge marks, we can discern the pattern that is used to unlock
    the screen. This attack is more likely to work while discerning the pattern lock
    on the Android device. In some cases, PIN codes can also be recovered depending
    upon the cleanliness of the screen. So, during a forensic investigation, care
    should be taken when the device is first handled to make sure that the screen
    is not touched:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53acfd74-b095-4bf7-a99d-10bac648fb6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Smudges visible on a device under proper lighting
  prefs: []
  type: TYPE_NORMAL
- en: We will now be looking at the next method, which is the forgot password option.
  prefs: []
  type: TYPE_NORMAL
- en: Using the forgot password/forgot pattern option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you know the username and password of the primary Gmail address that is
    configured on the device, you can change the PIN, password, or swipe on the device.
    After making a certain number of failed attempts to unlock the screen, Android
    provides an option called Forgot pattern? or Forgot password?, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43b264a2-7044-445f-9ae5-40705fd65345.png)'
  prefs: []
  type: TYPE_IMG
- en: Forgot pattern option on an Android device
  prefs: []
  type: TYPE_NORMAL
- en: Tap on that link and sign in using the Gmail username and password. This will
    allow you to create a new pattern lock or passcode for the device.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this works only on devices running Android 4.4 or earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing third-party lock screens by booting into safe mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the screen lock is a third-party app, rather than the in-built lock, it
    can be bypassed by booting into safe mode and disabling it. To boot into safe
    mode on an Android device 4.1 or later, press and hold the *Power* button until
    the Power options menu appears. Then, press and hold the *Power* button and you''ll
    be prompted to reboot your Android device into safe mode. Tap the OK button, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45d280e4-f582-47e0-bd32-d10c8af469f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Safe mode in Android
  prefs: []
  type: TYPE_NORMAL
- en: Once you're in safe mode, you can disable the third-party lock screen app or
    uninstall it completely. After this, reboot the device and you should be able
    to access it without any lock screen.
  prefs: []
  type: TYPE_NORMAL
- en: Secure USB debugging bypass using ADB keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, while using USB debugging, if the Always allow from this
    computer option is checked, the device will not prompt for authorization in the
    future. This is done by storing certain keys, namely `adbkey` and `adbkey.pub`,
    on the computer. Any attempt to connect to `adb` from an untrusted computer is
    denied. In this case, the `adbkey` and the `adbkey.pub` files can be pulled from
    the suspect's computer and copied to the investigator's workstation. The device
    will then assume that it is communicating with a known, authorized computer. The
    `adbkey` and `adbkey.pub` files can be found at `C:Users<username>.android` on
    Windows machines.
  prefs: []
  type: TYPE_NORMAL
- en: Secure USB debugging bypass in Android 4.4.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As explained in earlier sections, the secure USB debugging feature introduced
    in Android 4.4.2 allows only authorized workstations to connect to the device;
    however, there''s a bug in this feature, as reported at [https://labs.mwrinfosecurity.com/](https://labs.mwrinfosecurity.com/),
    which allows a user to bypass the Secure USB debugging feature and connect the
    device to any workstation. Here are the steps to follow to bypass Secure USB debugging
    on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: On an unlocked device, attempt to use `adb`. An error message will be shown
    by the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, navigate to either the emergency dialer or the lock-screen camera and
    execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The confirmation dialog will be triggered and the workstation can now be authorized
    without unlocking the device. The confirmation dialog box will be displayed on
    the emergency dialer, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1ae9227-03b0-4a25-b965-ae68de0b7608.png)'
  prefs: []
  type: TYPE_IMG
- en: Secure USB debugging in Android 4.2.2
  prefs: []
  type: TYPE_NORMAL
- en: 'Once connected to the device through `adb`, try to bypass the lock screen using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's see how to bypass the screen lock by crashing the lock screen.
  prefs: []
  type: TYPE_NORMAL
- en: Crashing the lock screen UI in Android 5.x
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On devices running Android 5.0 to 5.1.1, the password lock screen (not the
    PIN or pattern locks) can be bypassed by crashing the screen UI. This can be accomplished
    by performing the following steps, as explained at [https://android.gadgethacks.com/](https://android.gadgethacks.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Emergency Call option on the lock screen and then enter any random
    input (for example, 10 asterisks) on the dialer screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-tap the field to highlight the entered text, as shown in the following
    screenshot, and select Copy. Now, paste it into the same field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/efbd2799-8164-4768-8b11-fc83fec2cc35.png)'
  prefs: []
  type: TYPE_IMG
- en: Crashing lock screen UI
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this process to add more characters. Do this until the field no longer
    highlights the characters on double-tapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the lock screen and open the camera shortcut. Now, pull down the
    notifications screen and tap the Settings icon. You will then be prompted to enter
    a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press and hold the input field and select Paste, repeat this process multiple
    times. Once enough characters are pasted into the field, the lock screen will
    crash, allowing you to access the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's look at some more techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Other techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the aforementioned techniques and available commercial tools are useful
    to any forensic examiner, like you, trying to get access to the data on an Android
    device; however, there could be situations where none of these techniques work.
    To obtain a complete physical image of the device, techniques such as chip-off
    and JTAG may be required when commercial and open source solutions fail. A short
    description of these techniques is included here.
  prefs: []
  type: TYPE_NORMAL
- en: While the chip-off technique removes the memory chip from a circuit and tries
    to read it, the JTAG technique involves probing the JTAG **test access ports**
    (**TAPs**) and soldering connectors to the JTAG ports in order to read data from
    the device memory. The chip-off technique is more destructive because, once the
    chip is removed from a device, it is difficult to restore the device to its original
    functional state. Also, expertise is needed to carefully remove the chip from
    the device by desoldering the chip from the circuit board. The heat required to
    remove the chip can also damage or destroy the data stored on that chip, which
    means that this technique should be used only when the data is not retrievable
    by open source or commercial tools or the device is damaged beyond repair. When
    using the JTAG technique, JTAG ports help you to access the memory chip to retrieve
    a physical image of the data without needing to remove the chip. To turn off screen
    lock on a device, you can identify where the lock code is stored in the physical
    memory dump, turn off the locking, and copy that data back to the device. Commercial
    tools, such as Cellebrite Physical Analyzer, can accept `.bin` files from chip-off
    and JTAG acquisitions and crack the lock code for you. Once the code is either
    manually removed or cracked, you can analyze the device using normal techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Both the chip-off and JTAG techniques require extensive research and experience
    to be attempted on a real device. A great resource for JTAG and chip-off on devices
    can be found at [https://forensicswiki.xyz/page/Main_Page](https://forensicswiki.xyz/page/Main_Page).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked into various ways to bypass a screen lock on Android
    device. We will now learn what Android rooting is all about.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining root access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a mobile device forensic examiner, it is essential for you to know everything
    that relates to twisting and tweaking the device. This will help you to understand
    the internal workings of the device in detail and understand many issues that
    you may face during your investigation. Rooting Android phones has become a common
    phenomenon, and you can expect to encounter rooted phones during forensic examinations.
    Where applicable, you may also need to root the device in order to acquire data
    for forensic examination. This means that it's important to know the ins and outs
    of rooted devices and how they are different from other phones. The following
    sections cover information about Android rooting and other related concepts.
  prefs: []
  type: TYPE_NORMAL
- en: What is rooting?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default administrative account in Unix-like operating systems is called
    **root**. In Linux, the root user has the power to start/stop any system service,
    edit/delete any file, change the privileges of other users, and so on. We have
    already learned that Android uses the Linux kernel, and so most Linux concepts are
    applicable to Android as well; however, most Android phones do not let you log
    in as a root user by default.
  prefs: []
  type: TYPE_NORMAL
- en: Rooting an Android phone is all about gaining access to the device to perform
    actions that are not normally allowed on the device. Manufacturers want devices
    to function in a certain manner for normal users. Rooting a device may void a
    warranty, since using root opens the system to vulnerabilities and provides the
    user with superuser capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a malicious application gaining access to an entire Android system with
    root access. Remember that, in Android, each application is treated as a separate
    user and is issued a UID. This means that applications have access to limited
    resources and the concept of application isolation is enforced. Essentially, rooting
    an Android device allows superuser capabilities and provides open access to the
    Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Superuser capabilities are similar to the admin capability on a Windows machine,
    and give privileged access to perform actions that may not be done by a normal
    user. In mobiles, this superuser access is disabled by design, but rooting a phone
    allows you to gain this privilege.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the rooting process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though hardware manufacturers try to impose enough restrictions to restrict
    access to the root, hackers have always found different ways to get access to
    the root. The process of rooting varies depending on the underlying device manufacturer;
    however, rooting any device usually involves exploiting a security bug in the
    device's firmware, then copying the `su` (superuser) binary to a location in the
    current process's path (`/system/xbin/su`), and granting it executable permissions
    with the `chmod` command.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, imagine that an Android device has three to four
    partitions, which run programs not entirely related to Android (Android being
    one among them).
  prefs: []
  type: TYPE_NORMAL
- en: The boot loader is present in the first partition and is the first program that
    runs when the phone is powered on. The primary job of this boot loader is to boot
    other partitions and load the Android partition, commonly referred to as ROM by
    default. To see the boot loader menu, a specific key combination is required,
    such as holding the power button and pressing the volume up button. This menu
    provides options for you to boot into other partitions, such as the recovery partition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recovery partition deals with installing upgrades to the phone, which are
    written directly to the Android ROM partition. This is the mode that you see when
    you install any official update on the device. Device manufacturers make sure
    that only official updates are installed through the recovery partition. This
    means that bypassing this restriction would allow you to install/flash any unlocked
    Android ROM. Modified recovery programs are those that not only allow an easier
    rooting process, but also provide various options that are not seen in the normal
    recovery mode. The following screenshot shows the normal recovery mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/276340e8-f14d-469a-969a-61d74a747da6.png)'
  prefs: []
  type: TYPE_IMG
- en: Normal Android system recovery mode
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the modified recovery mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2aad127-aa2e-48cd-94df-bc7dab921af8.png)'
  prefs: []
  type: TYPE_IMG
- en: The modified recovery mode
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly used recovery program in the Android world is Clockwork recovery,
    also called **ClockworkMod**. Most rooting methods begin by flashing a modified
    recovery to the recovery partition. After that, you can issue an update, which
    can root the device; however, you don't need to perform all the actions manually,
    as software is available for most models that can root your phone with a single
    click.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Android 7.x, Google started strictly enforcing **verified boot**
    on devices. Verified boot guarantees that the software on the device is not modified
    before booting into the normal mode. This is implemented in such a way that each
    stage verifies the integrity and authenticity of the next stage before executing
    it. If a particular partition or segment is modified, the integrity check fails
    and the mobile may not boot into normal mode. More information about verified
    boot can be found at [https://source.android.com/security/verifiedboot/verified-boot](https://source.android.com/security/verifiedboot/verified-boot).
  prefs: []
  type: TYPE_NORMAL
- en: This also means that rooting such Android devices is going to be extremely difficult
    because rooting involves tweaking the Android OS. Marshmallow was the first Android
    version to provide alerts on system integrity, but since Android 7.x, this has
    been made mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: Rooting an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now look at the different methods available to root an Android device.
    The primary factor that influences your choice of method is whether the underlying
    boot loader is locked or unlocked. Gaining root access on a device with an unlocked
    boot loader is very easy, while gaining root access to a device with a locked
    boot loader is not so straightforward, which means that unlocking your Android
    phone’s bootloader is often the first step to rooting and flashing custom ROMs.
    This can be done either through fastboot mode (discussed in earlier sections)
    or by following a vendor-specific boot loader unlock procedure. Once the device
    bootloader is unlocked, the next step is to copy the `su` binary and grant it
    executable permissions. This can be done in many ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is how to root a Samsung Galaxy S7 (International SM-G930F/FD/X,
    Korean SM-G930K/L/S, and Canadian SM-G930W8 Exynos models):'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure OEM unlock is enabled in the Developer options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download ODIN (available at [https://build.nethunter.com/samsung-tools/Odin_3.12.3.zip](https://build.nethunter.com/samsung-tools/Odin_3.12.3.zip))
    and extract the contents of the archive to the directory of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the TWRP image (available at [https://twrp.me/samsung/samsunggalaxys7.html](https://twrp.me/samsung/samsunggalaxys7.html)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot your device into download mode. To do this, hold the Volume down + Home
    buttons while your device reboots. Once you see the download mode warning screen,
    press Volume up to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Odin and put the TWRP image in the AP slot; don't forget to disable Auto-Reboot.
    Start flashing the recovery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To exit download mode, hold Volume down + Home + Power; when the screen blanks,
    immediately change Volume down to Volume up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow system modifications by swiping right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download SuperSU (available at [https://download.chainfire.eu/supersu](https://download.chainfire.eu/supersu)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transfer the archive with SuperSU to the device via MTP and install it via the
    corresponding TWRP option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rooting is a highly device-specific process and hence the forensic investigator
    needs to be cautious before applying these techniques on any Android device. Rooting
    a device has both advantages and disadvantages associated with it. The following
    are the advantages of rooting:'
  prefs: []
  type: TYPE_NORMAL
- en: Rooting allows modification of the software on the device to the deepest level—for
    example, you can overclock or underclock the device's CPU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows restrictions imposed on the device by carriers, manufacturers, and
    so on, to be bypassed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For extreme customization, new customized ROMs can be downloaded and installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the disadvantages of rooting:'
  prefs: []
  type: TYPE_NORMAL
- en: Rooting a device must be done with extreme care as errors may result in irreparable
    damage to the software on the phone, turning the device into a useless brick.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rooting might void the warranty of a device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rooting results in increased exposure to malware and other attacks. Malware
    with access to the entire Android system can create havoc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the device is rooted, applications such as the **Superuser app** are available
    to provide and deny root privileges. This app helps you to grant and manage superuser
    rights on the device, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7232d9e-6d6f-415a-b11f-fad93ceda817.png)'
  prefs: []
  type: TYPE_IMG
- en: Application requesting root access
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at root access.
  prefs: []
  type: TYPE_NORMAL
- en: Root access - ADB shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A normal Android phone does not allow you to access certain directories and
    files on the device. For example, try to access the `/data/data` folder on an
    Android device that is not rooted. You will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8a87e66-a5db-4249-b65a-61d8702c50f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Permission denial without root access
  prefs: []
  type: TYPE_NORMAL
- en: 'On a rooted phone, you can run the `adb` shell as root by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0139ceda-331a-4745-bbb0-b8658299a245.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful execution of shell command on a rooted device
  prefs: []
  type: TYPE_NORMAL
- en: Thus, rooting a phone enables you to access folders and data that are otherwise
    not accessible. Also note that `#` symbolizes root or superuser access, while
    `$` reflects a normal user, as shown in the preceding command lines.
  prefs: []
  type: TYPE_NORMAL
- en: Android 7.0 (Nougat) and later versions support **file-based encryption** (**FBE**),
    which allows the encryption of different files with different keys. For a forensic
    investigator like you, it is important to note that it is not possible to apply
    a permanent root to an FBE-enabled device for acquisition purposes. Instead, it
    is recommended that you use a custom recovery methodology, because the recovery
    partition runs with root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up a proper forensic workstation before
    conducting investigations on an Android device. Start with a sterile forensic
    workstation that has the necessary basic software and device drivers installed
    on it. If the method of forensic acquisition requires the Android device to be
    unlocked, you need to determine the best method by which to gain access to the
    device. If the device has the USB debugging feature enabled, then bypassing the
    screen-lock is just a cakewalk. We learned about the various screen lock bypass
    techniques and helped you to determine which one to use under different circumstances.
    Depending on the forensic acquisition method and the scope of the investigation,
    rooting the device should provide complete access to the files present on the
    device. We also learned about rooting and how it can be used to gain complete
    access to the device's filesystem and perform actions that are not normally allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the basic concepts of gaining access to an Android device have been
    covered, we will cover acquisition techniques and describe how data is pulled
    using each method in [*Chapter 9*](bf232566-3a17-4914-992b-80674dd379de.xhtml),
    *Android Data Extraction Techniques*.
  prefs: []
  type: TYPE_NORMAL
