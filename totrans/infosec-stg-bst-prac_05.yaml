- en: 'Chapter 3: Designing Secure Information Systems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we talked about how to protect assets with controls
    that have been applied based on risk, but there is so much more that can be done.
    *What more can be done?*, you ask, bursting from sheer excitement. *Well…*, I
    reply, and softly smile to myself: *What if we just designed the systems with
    security in mind from the beginning?* Your face lights up, and the stars create
    tracers as the world whirls around us.'
  prefs: []
  type: TYPE_NORMAL
- en: No—but seriously, we should be designing our systems with security in mind from
    the beginning. That's what this chapter is about. By the way, I don't mean *design*
    the same way a man (who is still standing on a Segway scooter inside the elevator
    of your building with you) says that he *designed it himself*, his sunglasses
    still on even though you're indoors, thinking he's extremely cool. Yes, it's happened
    to me. I mean it in a way where we plan and **threat-model** the implementation
    and ensure that it is fit for purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, as you may already know from studying for your fancy cybersecurity
    certifications, that there are certain **secure design principles** that exist,
    allowing for us to utilize collective knowledge in order to improve the overall
    security posture of the system, without causing additional overhead. By the end
    of this chapter, you should be able to utilize these principles and select the
    appropriate controls to effectively manage secure information systems.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, there are **architectural vulnerabilities** that can be avoided
    or mitigated against with controls, and so we will need to go over the best methods
    for that as well. My goal is for you to be comfortable in determining a system's
    security requirements in order to apply the appropriate controls. Beyond that,
    you will be aware of the available security capabilities for the particular information
    systems you are working with.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there is the practice of selecting the appropriate controls. We
    briefly touched on this topic in [*Chapter 2*](B16611_02_Final_JM_ePub.xhtml#_idTextAnchor037),
    *Protecting Security of Assets*, where I talked about **defense in depth** for
    various aspects of developing and running a web app, but I'll expand and try to
    help you be more comfortable with selecting and implementing controls to manage
    and mitigate against vulnerabilities in web-based systems, mobile systems, and
    embedded devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to summarize, in this chapter, we are looking at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the risks your organization faces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices in assessing and mitigating vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices in designing secure information systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All right—now that we''ve got our bulleted list in the introduction, I ask:
    *Are we ready to start?* Yes, we are ready to start. Let''s begin where we should
    always begin, by trying to understand the risks.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the risks your organization faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus our efforts on getting our heads around key concepts
    in the **threats**, **vulnerabilities**, and **methods** of exploiting **information
    systems**. This includes the types of systems we'll be dealing with, the threats
    that **information security professionals** are hired to protect those systems
    against, and the ways those threats exploit vulnerabilities in those systems.
    Only after we understand these key points can we move on to the protection section
    (that sounds like a *Schoolhouse Rock!* song, but do not worry—I'll keep this
    largely nonmusical).
  prefs: []
  type: TYPE_NORMAL
- en: Something I would like to stress is that when we are designing a new system—whether
    this is web-based, mobile, embedded, or what have you—there are processes in place
    that ensure the security of our systems by design, and then there are mitigation
    controls that provide defense-in-depth in the event of the failure of those processes.
  prefs: []
  type: TYPE_NORMAL
- en: First things first, let's talk about some key concepts around *threats* that
    exist. By understanding the threats that we are facing, we can start to apply
    that knowledge to understand the key concepts in the **security models**. So,
    *"Let's Talk About Threats, Baby"*.
  prefs: []
  type: TYPE_NORMAL
- en: Hey—I said *largely nonmusical*, not *entirely nonmusical*.
  prefs: []
  type: TYPE_NORMAL
- en: Threats, threat actors, and motivations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **threats** against your organization can be varied, and understanding these
    is an extremely interesting topic to study. Most importantly, they are crucial
    to understand in order to fully and effectively protect your organization. Remember,
    we can't have a risk without a **threat** and **threat actor**, along with an
    asset and a vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: As the world is changing to be more and more based in the digital realm, many
    threats to your organization will surface in the form of **cybercrimes**. Cybercrimes
    are no different from non-cyber crimes, in that there are various motivations
    that then lead to acts of crime (providing the threat actor has the capacity to
    have a motivation). The reason I use that stipulation is because there are threats
    that are environmental. No storm has ever had a motivation to destroy a server—that
    I'm fairly certain of.
  prefs: []
  type: TYPE_NORMAL
- en: Now, these human motivations can vary from instance to instance and sometimes
    require some creative thinking and brainstorming to dream up. What I would like
    to do in this section is to stimulate that part of your brain, and get you thinking
    like a malicious actor. I want you to start to imagine how you would exploit your
    organization if you were to target it. What can you imagine people would want
    from it? What could people stand to gain, and who are those people? Which groups
    don't like your organization, and why is that? Maybe you work at the most benevolent
    organization that has ever existed, and nobody in their right mind would ever
    have any motivation to act against it. In that case, you still need to consider
    the insider risks of somebody accidently clicking a link or deleting a database.
    Not malicious, but still a threat actor, and still a threat that already has a
    certain level of access to your estate. **Insider risks** should always be considered
    when threat-modeling your organization, malicious and non-malicious.
  prefs: []
  type: TYPE_NORMAL
- en: As you might imagine, I can't really go into every possible motivation we might
    possibly see, but with that said, I can also throw some ideas your way.
  prefs: []
  type: TYPE_NORMAL
- en: One "group" of motivations your organization may face comprises those that are
    not financial or political in nature. They could include, for example, *thrill-seeking*,
    *joy*, *data hoarding*, or *mastery*. These motivations are essentially based
    on the idea that the malicious actor enjoys the act of hacking, or the "paydirt"
    of the hack itself. Some individuals are more interested in if they can get in,
    or seeing what's inside, rather than how much they can earn by doing so. Maybe
    there are images or videos on a device or server that an attacker has an interest
    in seeing. Maybe your organization has a major security spokesperson with a million
    followers on Twitter who claims your product, a hardware Bitcoin wallet, is "unhackable".
    Researchers around the world are extremely interested in hacking things just to
    hack them, and especially if a major talking head makes a claim such as that.
    They might find your product doesn't wipe the **random-access memory** (**RAM**)
    clear after being rooted, meaning the secret phrase and salt are left in the RAM
    for extraction, and they might post it on Twitter. It brings them joy; it hones
    their craft; it helps them show their mastery while proving that talking head
    wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, there are thrill-seekers who just love the chase. It might seem
    strange, but a survey performed by *Thycotic Software* at *BlackHat USA* in 2014
    found that 51% of the hackers surveyed said they were mostly motivated by fun
    or thrill-seeking. They could focus on your organization, just for the thrill
    of it, and the best you can do is to adequately protect your most important assets
    to the level of risk they pose.
  prefs: []
  type: TYPE_NORMAL
- en: Another group of motivations worth discussing centers on politics and **cyberwarfare**,
    such as *hacktivism*, *propaganda*, and *sabotage*. In an era of online political
    discourse going mainstream, with major issues in current events, including a global
    pandemic, US election, and the UK exiting the EU (and those are just in the final
    couple months of 2020), we're facing a skyrocketing level of this type of motivation.
    *Hacktivism* and *sabotage* can be motivations for individuals or groups, all
    the way up to the **state-sponsored actor** level gaining access to (or destroying)
    accounts, systems, and assets they are at odds with. We've also got *propaganda*
    as a motivation, which can yet again be distributed by **sole actors** or groups,
    all the way to the largest imaginable force, which aims to gain control of legitimate
    channels to either filter or promote certain messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going further into the political sphere, looking at attacks at critical infrastructure
    by outside forces, we can interpret that the motivation for *destruction*, *control*,
    or *intimidation* exists. I am always reminded of the time the Ukrainian government,
    in the midst of a significant cyberattack, tweeted a "this is fine" meme in response,
    as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://twitter.com/Ukraine/status/879706437169147906](https://twitter.com/Ukraine/status/879706437169147906)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the tweet from Ukraine''s government:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – "This Is Fine" tweet from Ukraine''s government'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16611_03_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – "This Is Fine" tweet from Ukraine's government
  prefs: []
  type: TYPE_NORMAL
- en: Why were several governmental agencies and private firms in Ukraine targeted?
    I can't be as confident as others have been to say *who* was targeting them, but
    the nature of the attacks implies the attacks fit into the destruction, control,
    or intimidation motivation group, or the hacktivism, propaganda, and sabotage
    motivation group, and was likely an act of cyberwar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, finally, we can look toward a motivation rooted in *monetary gain*. This
    could range from an individual finding a way to pilfer funds from a cryptocurrency
    exchange, or a mercenary hacking group spending time and effort in a heist situation,
    like an episode of *Mission: Impossible*. Furthermore, you have **corporate espionage**,
    such as what *The Ketchup Company* was starting to threat-model in [*Chapter 1*](B16611_01_Final_JM_ePub.xhtml#_idTextAnchor013),
    *InfoSec and Risk Management*, where a competitor tries to gain access to precious
    **intellectual property** your organization possesses.'
  prefs: []
  type: TYPE_NORMAL
- en: There are other competition-based motivations that could be considered, such
    as attempting to gain research information from nonprofits, for example. Honestly,
    the list could just keep going, but as I previously said, that's not the point
    of this section. My goal was to get your mind reeling and to get you to focus
    on who might target your organization, and why they might do so. In that, I can
    almost feel the gears in your head turning, so I think we're done here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something you might hear about a lot lately is **advanced persistent threats**,
    or **APTs**. According to *NIST SP 800-39*, an APT is a threat actor that is both
    highly capable and highly motivated, with significant amounts of resources. This
    threat gains and maintains access within an organization''s estate in order to
    exfiltrate information or manipulate operations for an extended period of time.
    The **National Institute of Standards and Technology** (**NIST**) says that they
    adapt to changes that are meant to mitigate against it. My point of view on APTs
    is pretty basic, in comparison to some of the things I''ve read on the topic.
    Most organizations are currently having difficulty protecting their assets against
    a sole 12-year-old who has watched some YouTube videos with titles along the lines
    of "*how to hack*", and even in those videos, the instructor will teach the viewer
    how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Gain access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elevate privileges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exfiltrate information or manipulate operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remain undetected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only difference here from the YouTube *script-kiddie* and the APT is expertise,
    and funding. All of the other words NIST have used are just the basic steps any
    malicious outsider would take. I prefer to look at threats in the way we did in
    [*Chapter 1*](B16611_01_Final_JM_ePub.xhtml#_idTextAnchor013), *InfoSec and Risk
    Management*. In the case of APTs, we have malicious outsiders that are either
    **group actors** or **state-sponsored actors**, which means we need to consider
    that their ability to gain access and remain undetected is more sophisticated.
    Depending on your organization and its assets, this means that you might have
    a different level of risk that you will need to mitigate.
  prefs: []
  type: TYPE_NORMAL
- en: 'One final remark that I would like to make is this: *Please* keep your *risk
    register* up to date with the appropriate threats and motivations! This isn''t
    only for fun; this is to appropriately protect your organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking over what we've covered in [*Chapter 1*](B16611_01_Final_JM_ePub.xhtml#_idTextAnchor013),
    *InfoSec and Risk Management*, [*Chapter 2*](B16611_02_Final_JM_ePub.xhtml#_idTextAnchor037),
    *Protecting the Security of Assets*, and so far in this chapter, we can say that
    I keep harping on about how "*You can't have a risk without an asset, a threat
    and threat actor, and a vulnerability*". What *is* a vulnerability, though? Have
    we gone into that? Have I taken for granted that you're a walking encyclopedia
    of InfoSec, a fountain of knowledge on every topic?
  prefs: []
  type: TYPE_NORMAL
- en: The thing is that the list grows and grows when it comes to "types" of vulnerabilities
    if you get down to a granular level. *Meltdown*, *Thunderclap*, and *Spoiler*
    are some examples of recently discovered hardware security vulnerabilities, but
    explaining how those work will eat up my page count on this chapter, and there
    is simply far too much to cover already. Instead, let's take a couple steps up
    the ladder to view vulnerabilities from a higher level. *ISO/IEC 27005* guides
    us to classify vulnerabilities according to the asset class they are related to.
    This asset class could include *hardware, software, network, personnel, physical,
    and organizational* vulnerabilities, or maybe you have a different vision! Don't
    let me or the **International Organization for Standardization** (**ISO**) pigeonhole
    you with their strict Swiss guidelines—go on and fly! With that said, it *is*
    easier to just use their strict Swiss guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: You might be totally drawing a blank. "*What kind of vulnerabilities exist for
    each of these, Joseph?*", you might be asking. The problem is, it's such a tremendous
    topic, and part of the reason I am trying to encourage you to brainstorm and consider
    the possibilities yourself is due to the sheer volume of known vulnerabilities
    in the wild. If I go down the road of listing off vulnerabilities and explaining
    them, this book will end up being 1,500 pages long and less entertaining that
    it already is, which I would never want to inflict on anybody, especially somebody
    who is taking their time to read my ramblings.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, I *suppose* I could delve into a few examples of vulnerabilities
    and how to mitigate them. "*Vulnerabilities*" *is* the title of this section,
    after all.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we''re looking at *hardware* assets, as an example, we can try to consider
    the various vulnerabilities that may exist, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Physical threats** such as humidity or dust; wear and tear causing failure;
    or over-heating all exist. A lack of controls such as ventilation, humidity control,
    cooling, lubrication, or quality control are all vulnerabilities that could all
    be exploited by a threat actor to cause a loss of availability by destroying,
    shutting down, or forcing the powering off of hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: Remember—threat actors don't need to be malicious humans; they can be environmental,
    such as "friction". The effective implementation of the "lubrication" or "cooling"
    controls (combined with testing after implementation to ensure the control is
    effective) would lead to the mitigation of these vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to threats attempting to access storage—either hard drives or
    memory—you're faced with a few options. The lack of *encryption* when it comes
    to hard-drive storage could lead to a threat actor managing to access information
    by gaining physical access to a hard drive. By encrypting the hard drive, you're
    ensuring a level of defense-in-depth by ensuring that even if physical access
    were obtained, further exploitation would be required in order to gain access.
  prefs: []
  type: TYPE_NORMAL
- en: By not protecting a system's memory from being both read and written to, you're
    looking at a risk of loss of confidentiality, integrity, or availability. It's
    a highly utilized attack method, and as a result there are memory-protection controls
    in many modern architectures and operating systems that are occasionally broken
    and need to be mitigated through changes and updates to either the *kernel* or
    the *operating system*.
  prefs: []
  type: TYPE_NORMAL
- en: Threats may attempt to read electrical signals for reverse-engineering or eavesdropping
    purposes. This could lead to a loss of confidentiality or integrity if they manage
    to gain access to protected resources through doing so. When we talk about vulnerabilities
    leading to the eavesdropping of electrical signals, we're starting to get pretty
    intense, and we should consider the likelihood of this type of attack. Which level
    of threat actors is likely to perform these types of attacks? The likelihood may
    be higher with more sophisticated threat actors, such as state-sponsored actors.
    With that said, there are mitigations against leaking emanations, such as shielding
    magnetic fields, filtering conducted signals, and masking space-radiated signals.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, vulnerabilities exist due to the basic function of the hardware and
    must be mitigate, for example, by preventing the possibility of physical access
    to the hardware through a **security perimeter**, although that is admittedly
    lacking defense-in-depth controls.
  prefs: []
  type: TYPE_NORMAL
- en: '*Software* can have vulnerabilities exploited by a threat actor that does the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Finds a way to access more information than they should have access to, either
    through insecure code or a design flaw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is able to use your software as a delivery mechanism for their malware, such
    as the *2020 SolarWinds hack*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploits the lack of an audit trail in your systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of input sanitation can lead to information disclosure or your software
    being used to deliver malware through an **injection attack**. Mitigating this
    vulnerability is generally done through both static and dynamic code analysis,
    as well as automatically fuzzing your software with input that might lead to an
    injection, and also *penetration testing* of your software on a regular basis
    and upon significant change.
  prefs: []
  type: TYPE_NORMAL
- en: The lack of logging in your estate could mean that a threat actor is able to
    maintain access, make changes, and exfiltrate data from your organization without
    being detected. Mitigating this with logging is mostly a *detective control*,
    but with the appropriate **Security Information and Event Management** (**SIEM**)
    configuration, and capable analysts in your **Security Operations Center** (**SOC**),
    you may be able to detect an ongoing attack and react to it in real time. Even
    better is adding automated responses into the mix, which isn't as far-fetched
    and difficult as it sounds, but does require quite a lot of understanding of your
    existing "normal" operation.
  prefs: []
  type: TYPE_NORMAL
- en: '*Networks* can have vulnerabilities exploited by a threat actor that does the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Eavesdrops on insufficiently protected communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gains access through an insecure network architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Causes a loss of availability through a **Single Point of Failure** (**SPF**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a high-level view, *network security* is focused on ensuring the availability
    of network-accessible resources, along with the prevention of non-approved entities
    from access, and monitoring all network activity to ensure any infraction is dealt
    with appropriately. It's a deep topic that will require quite a bit more investigation
    than we currently have here, so I'm going to continue on with that topic in [*Chapter
    4*](B16611_04_Final_JM_ePub.xhtml#_idTextAnchor075), *Designing and Protecting
    Network Security*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Physical* sites are subject to vulnerabilities exploited by a threat actor
    that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Interrupts access, causing a loss of availability for your staff or systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circumvents access control and gains unauthorized access to your physical estate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While you are looking at physical sites and contemplating site security, aside
    from considering access control, turnstiles, mantraps, and biometrics, you should
    also consider the effects of faults in devices or controls. Also, what occurs
    in the event of a power blackout or power sag (as well as brownouts and spikes)?
    Consider the complexity that excessive noise may bring, and ensure you think about
    the requirements around heating, ventilation, humidity control, and cooling. As
    we mentioned in the first chapter, servers and water sources don't mix, but at
    the same time, you might need adequate fire protection.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to *NIST SP 800-30*, *organizational vulnerabilities* exist in the
    following forms:'
  prefs: []
  type: TYPE_NORMAL
- en: Governance structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information security architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Equipment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software development life-cycle processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supply chain activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External service providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essentially, threats may see a logical flaw in the way your organization runs
    things. They might notice that you don't properly *background check* your job
    applicants, or that you use external service providers but don't perform *due
    diligence* on them, and so the threat actors manage to exploit that to become
    embedded as an insider threat themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, and by far the most likely threat in this section, threats may
    see a vulnerability in the lack of *security awareness* at your organization and,
    through manipulating or tricking personnel, manage to either gain access to your
    estate or have the personnel change or delete information for them, or disclose
    it to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m sorry to mention it again, but *Mission: Impossible* is just way too relevant
    to not bring up twice: all of these generic examples I''ve given are fine, but
    I want to encourage you to think outside the box. Pretend you''re a member of
    Ethan Hunt''s *Impossible Missions Force*, and consider what you would look to
    exploit in order to gain access to your own estate, and how you may read or write
    information to achieve your ultimate goal of saving the world. If you haven''t
    seen the films, I have no sympathy for you not getting this reference whatsoever;
    they''re all brilliant (apart from the second one).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To wrap up this section, I would like to say that it''s important to consider
    every aspect of your business, and speak with relevant people who know the recorded
    processes and how real life differs from the documentation. A key question for
    yourself, moving forward, is: "*Do personnel do what they say, and say what they
    do?*". Policies and documented processes are only documentation, and if that documentation
    only exists to please auditors and security staff, then you are facing a huge
    gap between your *perceived security* and *actual security*.'
  prefs: []
  type: TYPE_NORMAL
- en: The brilliant thing is, if you handle things right and show yourself as approachable
    and able to make a positive change, you will encourage an open, transparent, and
    honest working environment where people aim to involve you to ensure they have
    an easy way to follow the rules, and let you know when it's not possible to do
    so. That is an information security professional's dream scenario right there.
  prefs: []
  type: TYPE_NORMAL
- en: System exploitation methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I'd like to look at some of the methods threat actors will use to exploit vulnerabilities
    in your estate. Yet again, there is a long list if we go deep and start picking
    out specific **keyloggers**, for example, so instead I'll go into the "category"
    for each exploitation method, and talk about each of them a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: First, since I just mentioned keyloggers, I'd like to look at types of **malware**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Malware is software used for nefarious purposes. It can include a wealth of
    different types of software, many of which have quite a lot to learn about individually,
    so I will split the malware section up. Something to keep in mind is that malware
    isn''t always taking advantage of security vulnerabilities to be secretly installed
    on your endpoints or in your estate, which is what many definitions I''ve read
    have stated. In the late 1990s or early 2000s, I installed *BonzaiBuddy* by choice,
    which was a little purple gorilla in the bottom right of your screen that would
    sing you a song or search for things on the web. It was a marginally less lame
    version of Microsoft Clippy. It was later labeled by *Consumer Reports Web Watch*
    as `bonzi.com` without permission, which admittedly isn''t very cool, and also
    tracked various information about the user, using that information to serve advertisements.
    All I can really say about that is: they were innovators! Now, almost every software
    does that, and it''s seen as normal.'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking down the malware category into subcategories, we can start to understand
    how they work and what a threat actor might use them for.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viruses** are an interesting concept in terms of cybersecurity. What is a
    virus? Can you name one? Looking through *Wikipedia*, you might see that the page
    for *Computer virus* claims that a virus self-replicates. You might think: "*I
    thought that was a* *worm*." On the *Wikipedia* page for *Malware*, it''s stated
    that viruses are usually "*hidden within another seemingly innocuous program*",
    to which you might ask: "*Isn''t that a* *Trojan Horse?*"'
  prefs: []
  type: TYPE_NORMAL
- en: What on earth is a virus, then? It seems like the community can't fully agree,
    but *Malwarebytes Labs* has attempted to define a computer virus once and for
    all as *"malware attached to another program (such as a document), which can replicate
    and spread after an initial execution on a target system where human interaction
    is required. Many viruses are harmful and can destroy data, slow down system resources,
    and log keystrokes."*
  prefs: []
  type: TYPE_NORMAL
- en: Now, *that* makes sense. A virus requires human interaction and a host program,
    and attaches itself to other files (or replaces files fully with copies of itself).
    A *Trojan Horse* (or *Trojan*) can be a virus; *ransomware* can be a virus; but
    *worms* aren't viruses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Worms** aren''t that different from viruses, but just as I projected that
    you thought to yourself while reading the *Wikipedia* article for *Computer virus*,
    what differentiates a worm from a virus is that a worm does not require human
    interaction to spread across a system, network, estate, and so on. A worm *self-replicates*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The name *Trojan* is a reference to *The Aeneid*, by Virgil. In the poem, Odysseus
    the Greek thinks of a way to get his troops inside Troy, a highly secure walled
    city of the enemy. He says: "*My dudes, let''s construct a gigantic horse sculpture
    out of wood, hide inside it, and leave it at their gate as an indication of surrender.*"
    At no point do any of the other Greeks call him out on it, which makes me feel
    like they were just afraid of what his reaction might be. What I''m saying is:
    I think Odysseus was a bit of a prima donna. Anyway, the Trojans find the sculpture
    at their gate and wheel it into their city, figuring "*Yeah, we could use a gigantic
    wooden horse, and this doesn''t seem suspicious in any way whatsoever.*" It might
    shock you to hear, but that night, Odysseus''s men jumped out from inside the
    horse, overthrowing the entire city.'
  prefs: []
  type: TYPE_NORMAL
- en: I'm sure you're glad that I went into the entire classical backstory for the
    term *Trojan*, because now you can very clearly understand that Trojans are just
    a way of getting malware into the walled city that is your organization's estate.
    When folks get the torrented, cracked version of the latest PC game, and the README
    tells them to turn off their antivirus when running the *keygen*, because it sets
    off *false positives*, and they do it? They might have just got Trojaned. The
    problem with knowing if the `keygen.exe` is an actual Trojan or just a false positive
    is difficult, because both use obfuscation to hide their algorithm and both will
    probably make some changes to your system, which automatically sets off antivirus
    software.
  prefs: []
  type: TYPE_NORMAL
- en: Very similar in nature to the term *Trojan* is the term *backdoor*. Backdoors
    are deliberate (likely undocumented) points of entry into systems. These backdoors
    may allow for the delivery of malware, or other malicious activity by threat actors.
    The thing about backdoors is that they could be implemented into software or hardware
    by the manufacturer or any of their partners or suppliers that have had a part
    of the design and development stages. Potentially, intelligence agencies could
    request that manufacturers implement backdoors to allow for easy investigations
    on their part. Additionally, these backdoors can be created by other types of
    malware, and delivered via a Trojan. Are you still with me? If this section is
    pretty heavy, it's worth it—keep holding on.
  prefs: []
  type: TYPE_NORMAL
- en: Another section of the overarching malware group is **adware**. Adware is often
    packaged with other software you install, but don't mistake it for a Trojan. It's
    not usually hiding; it could potentially show you a dialog in the installation
    process, which you haphazardly skip through like you have absolutely no time to
    do any reading whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of the **Search App by Ask** being bundled with Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Search App by Ask adware installation dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16611_03_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Search App by Ask adware installation dialog
  prefs: []
  type: TYPE_NORMAL
- en: It seems like it's just another innocuous page that you accept, because you
    want to get it over with and install Java already, but it's actually a `Ask.com`.
    The creators make money by serving you ads and gathering marketing data.
  prefs: []
  type: TYPE_NORMAL
- en: OK—fine; your search engine has been changed in your browser—big deal. "*Why
    are we even worried about malware*?", people might ask. I would say the next few
    might change their tune.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ransomware** is a type of malware that prevents access to systems or files.
    It''s an availability attack, usually through cryptography, and often acts as
    a worm, spreading through every compatible device on your network. Organizations
    affected by ransomware usually receive the **payload** in the form of a malicious
    link or an email with a malicious attachment.'
  prefs: []
  type: TYPE_NORMAL
- en: Once infected, a dialog will be shown on the affected computers that attempts
    to shake down the victims. "*We'll give you the decryption key if you send X Bitcoin
    to this address…*", or similar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of the Cryptolocker Bitcoin payment dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – CryptoLocker ransomware with Bitcoin payment option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16611_03_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – CryptoLocker ransomware with Bitcoin payment option
  prefs: []
  type: TYPE_NORMAL
- en: The **Federal Bureau of Investigation** (**FBI**) advises people to never pay
    a ransom, but as with everything in InfoSec, I would say that *it depends on the
    risk*. If you stand to lose more than the equivalent of the ransom value by not
    paying the ransom, then you might be compelled to pay it. The reason the FBI has
    taken that position is because it creates a market, and you can't be sure that
    the assailant will actually give you a decryption key.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, if word got out to other victims that even after payment no
    decryption occurs, it would ruin the revenue model of the campaign because other
    victims wouldn't be as likely to send the cryptocurrency to the perpetrator's
    addresses. As a result, it's in their best interest to decrypt your files when
    their victims pay, and we all know that business is booming. The *Cyber Threat
    Alliance* showed evidence in 2015 that the perpetrators behind a *CryptoWall 3.0*
    ransomware campaign had "*hundreds of thousands of dollars*" worth of Bitcoin
    received into their addresses, and things have only become more serious in the
    years since then. A cybercrime research organization called *Cybersecurity Ventures*
    has predicted that a ransomware attack is expected to affect a business every
    11 seconds by the end of 2021, and that the annual damage will total 20 billion
    dollars.
  prefs: []
  type: TYPE_NORMAL
- en: Ransomware is scary, but **spyware** is creepy. Spyware is essentially a way
    for malicious actors to monitor your computer usage, harvest your passwords or
    payment information, and track what you visit online or the files you download.
    It can lead to identity theft or blackmail, and could have its own book dedicated
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, spyware will end up embedding itself to your operating system and
    might arrive as a Trojan, or even as something you agreed to install, similar
    to what we saw with adware. There's generally not going to be an "uninstall" program
    for spyware, and you likely won't know that it exists on your PC. It may be a
    **keylogger**, which is a system-monitoring solution that can log keystrokes,
    system credentials, and pretty much any other computer activity. Keyloggers can
    grab screenshots and transmit the information to a remote server through a covert
    channel.
  prefs: []
  type: TYPE_NORMAL
- en: These types of malware generally *exploit* **vulnerabilities** in your device's
    software or hardware in order to get **elevated privileges**. New vulnerabilities
    for software and operating systems are found daily, and researchers might reach
    out to the creators of the software or hardware to *responsibly disclose* the
    vulnerability to them, in order to give them time to work on fixing the flaw and
    releasing a **patch** for the users currently affected by the flaw. Sometimes,
    the creator won't do anything or will legally threaten the researcher for that
    disclosure, and as a result the researcher may decide to release the information
    publicly, in order to try to force the hand of the creators. By drawing attention
    to an active vulnerability, and even providing a **Proof of Concept** (**POC**)
    for an **exploit**, it increases the likelihood that the vulnerability will be
    exploited and could result in bad press for the creators or a negative consumer
    response from the users.
  prefs: []
  type: TYPE_NORMAL
- en: The other side of that story is that a researcher might find a new vulnerability
    or explore an existing vulnerability, and craft an exploit that they then sell
    to malicious actors, maybe as a suite of software called an **exploit kit**, which
    allows nontechnical malicious actors to perform their attack and spread malware
    or gain access.
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard of **rootkits**—or, similarly, **bootkits**—which are fancy
    names for malware that either escalates the privilege of an unauthorized user
    (potentially all the way up to that of an *admin* (or "*root*") account) or hides
    the activities of another malware from detection, embedding themselves into the
    operating system of your device. These can help a malicious actor gain full access
    to a computer, allowing for attacks on confidentiality, integrity, and availability,
    or to utilize the compromised computer to perform attacks on other networks, computers,
    systems, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: A computer that is being used this way is called a **zombie**, and oftentimes
    you may find that this zombie is just one part of a much larger **botnet**, or
    collection of internet-connected devices that perform a synchronized attack. These
    botnets are especially useful in **DDoS (Distributed Denial of Service)** attacks,
    where the DoS sources are coming from a wealth of normally harmless **Internet
    Protocol** (**IP**) addresses with no pattern. As a result of their distributed
    nature, these attacks are difficult to create firewall rules for.
  prefs: []
  type: TYPE_NORMAL
- en: '**Logic bombs** are a delivery mechanism that sets off malware activity once
    a set of conditions are met. Imagine, in a typical example, a systems administrator
    sets a *CronJob* that executes daily and asks them to enter a passphrase. Imagine
    the CronJob is set to encrypt all of the files in the network in the event that
    they are not performing their daily passphrase entry for 30 consecutive days,
    implying that they have been removed from the company. There are many other types
    of logic bombs, such as something as simple as: "*If this running process is closed,
    do this.*"'
  prefs: []
  type: TYPE_NORMAL
- en: Something you've definitely read about in the news are **zero days**. These
    are simply vulnerabilities that were completely unknown to all aside from the
    malicious actor who is now exploiting that vulnerability. The term "*zero day*"
    is related to the fact that the vulnerability is being exploited with zero days
    for the developer to react and create a patch.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in theory, we could say the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '"There''s this new virus called "*TokTik*" that is very interesting. It is
    bundled with the latest version of `EssentialProgram` as a **Trojan**, initially
    just as **browser-hijacking** **adware**, but then as **malware** in the form
    of a **keylogger** **spyware** **rootkit** that spreads and executes a **privilege
    escalation** **exploit** to all the other devices on your network like a **worm**,
    adding each device as a **zombie** to their **botnet**, and performing **DDoS**
    attacks on businesses. If the rogue process is closed, another encrypts the hard
    drive and shows a dialog explaining the **ransomware** decryption process. **Patches**
    for operating systems are currently being developed, but many of the exploits
    were unknown and the **vulnerabilities** were never discovered until now, also
    known as **zero days**.'
  prefs: []
  type: TYPE_NORMAL
- en: However, if you *were* to say that, people might not talk to you anymore because
    that would be incredibly odd to hear.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond exploitation that occurs on your devices through viruses such as the
    previously mentioned malware examples, there exist other types of exploitation,
    such as the exploitation of organizational vulnerabilities (such as a lack of
    security consciousness), or exploiting software and web application vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What would this section be without discussing **phishing**? As a reminder, phishing
    is a method of exploitation through electronic communication whereby a malicious
    actor is disguised as a trusted party and *socially engineers* a user to help
    them in their goal by clicking a link, opening an attachment, or handing over
    information and secrets. It's the chosen exploitation mechanism for many threat
    actors because of the fact it doesn't require a technical vulnerability to be
    successful, but rather an organizational vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: By emailing somebody in the company who might not be as *security-conscious*
    as a member of the InfoSec team, creating a little bit of *drama and urgency*,
    and guiding them toward executing a payload, the malicious actor is able to compromise
    your organization's system with ransomware or spyware, or initiate a bank transfer,
    all from their email app. It's cheap, it's fast, and it's effective.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, something worth considering is the evolving landscape of our IT
    systems. For example, understanding cloud service types and deployment models,
    or web application security, are both extremely relevant for the current time.
    You see, as we have moved from on-premises servers and installing programs onto
    endpoints toward the **cloud services** model, software (and our overall estate)
    is increasingly accessed via a **thin client** (which usually means they're run
    in our preferred browsers), transitioning into what are known as **web apps**,
    delivered to users as a **Software-as-a-Service** (**SaaS**). **SaaS** applications
    usually have a monthly fee associated with them—that is, once the users require
    features that are offered beyond the barebones *free* tier.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud service providers**, such as **Amazon Web Services** (**AWS**) or Microsoft
    Azure, offer **Platform-as-a-Service** (**PaaS**) and **Infrastructure-as-a-Service**
    (**IaaS**) in a similar way, allowing for the metered usage of cloud computing
    power for a monthly fee. As time goes on, more and more of our estate is being
    outsourced and moved toward the cloud, either in the form of PaaS or IaaS. PaaS
    is usually offered as a simplified way to install and run an application without
    further configuration, allowing users to *outsource the responsibilities* of maintaining
    infrastructure and regular updates. IaaS, on the other hand, is a part of a server
    that exists in a data center in the region of your choice and, aside from the
    lack of physical interaction, the *responsibilities* for maintenance and updates
    to the system generally remain in the hands of the customer.'
  prefs: []
  type: TYPE_NORMAL
- en: The concept is referred to as the **shared responsibility model**, showing the
    differences in the various cloud solutions, and where separate responsibilities
    lie.
  prefs: []
  type: TYPE_NORMAL
- en: Now, regardless of if you deploy your web app from your own *on-prem* servers,
    or on PaaS or IaaS, what we can see in web apps are certain types of vulnerabilities
    that allow malicious actors to compromise the confidentiality, integrity, or availability
    of your app. The **Open Web Application Security Project Top 10** (**OWASP Top
    10**) is a regularly updated list of the top 10 web application security risks,
    and it does a great job of explaining how each of the risks can be mitigated.
    In order to give **application security** the amount of attention it deserves,
    I will revisit it in [*Chapter 8*](B16611_08_Final_JM_ePub.xhtml#_idTextAnchor150),
    *Improving the Security of Software*. Furthermore, the design, governance, and
    secure operation of your network and assets remain your responsibility, regardless
    of where the servers and computers currently physically "sit". We will explore
    network security in [*Chapter 4*](B16611_04_Final_JM_ePub.xhtml#_idTextAnchor075),
    *Designing and Protecting Network Security*, and continue until [*Chapter 7*](B16611_07_Final_JM_ePub.xhtml#_idTextAnchor123),
    *Owning Security Operations*.
  prefs: []
  type: TYPE_NORMAL
- en: This moves us on to the next step, where we'll look at best practices in assessing
    and mitigating vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices in assessing and mitigating vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For some of the vulnerability concepts we've gone through earlier in this chapter,
    I've included ways to mitigate against those vulnerabilities. None of those mitigations
    takes into consideration your own organization, its threats, the value of the
    assets, or the likelihood of exploitation. I've just essentially listed off ways
    you might have seen other organizations mitigate against those risks, and potentially
    a few good ideas came to you that way.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, I would like to continue in that fashion, but I first want
    to stress how important it is to apply the necessary amount of mitigations in
    order to reduce down to an *acceptable level*. That's the name of the game here!
    Save yourself the money and headaches involved with making a system completely
    risk-proof when it doesn't face any threats or isn't valuable to you or a threat
    actor.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, I can get back into how we can secure our systems and choose
    appropriate controls.
  prefs: []
  type: TYPE_NORMAL
- en: We've already gone into how to protect the different classes of ISO-defined
    information assets, which were hardware, software, networks, physical, and organizational.
    I just want to take a second to briefly revisit each, in case there's more to
    be said.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we were reviewing hardware assets, we talked about ventilation, humidity
    control, cooling, lubrication, or quality-control as mitigations from a loss of
    availability realized through the destruction or powering off of hardware. We
    reviewed that threat actors don't need to be malicious humans; they can be environmental,
    such as "friction". Something I mentioned in that section that I would like to
    bring up again is **testing** after the implementation of a security control,
    in order to ensure the control is effective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout your career as an InfoSec professional, you want to ensure that
    after the appropriate controls are chosen and implemented, you first "test" the
    system for vulnerabilities yourself and patch any holes you find. Then (if the
    asset is valuable enough to justify it, remember) you have an external third party
    "test" it. This is often called **penetration testing** (*pentest*) or **red teaming**,
    depending on the complexity of the assessment. You can also perform automated
    scans, but the effectiveness of those scans have yet to supersede having an actual
    *pentest*, where you pay an expert hacker to actually break into your system.
    It''s a beautiful and heartbreaking method of checking the effectiveness of your
    controls. You will end up thinking to yourself a few things. First, you will think:
    "I can''t believe I missed that!", but then, you''ll think: "Thank goodness I
    paid one of the good guys to find it first."'
  prefs: []
  type: TYPE_NORMAL
- en: You'll take their report, implement the appropriate controls to mitigate against
    their findings, and ask them to retest in order to ensure your new controls are
    effective. It's an integral part of the job and provides major firepower in management-level
    or board-level presentations when you're talking about the likelihood aspect of
    your risks. You now have an example of an actual scenario where somebody broke
    into your system, and you now have the attention of the people who control the
    funds.
  prefs: []
  type: TYPE_NORMAL
- en: We also previously reviewed protecting access to storage, either through hard
    drives or memory. For memory, we talked about memory-protection controls in system
    architectures and operating systems, which are occasionally broken and need to
    be mitigated through changes to either the *kernel* or the *operating system*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data execution prevention** is an operating system protection for memory
    that designates sections of memory as non-executable. Making this distinction
    prevents code from being run from those sections by giving a memory-access-violation
    exception, terminating the process, and preventing from buffer overflows.'
  prefs: []
  type: TYPE_NORMAL
- en: For hard drives, I briefly mentioned that by encrypting the hard drive you're
    ensuring a level of defense-in-depth, by ensuring that even if physical access
    were obtained, further exploitation would be required in order to gain access.
  prefs: []
  type: TYPE_NORMAL
- en: One other aspect of encryption that would be useful to mention in the hardware
    security topic of this section is a **Trusted Platform Module**, or **TPM**. TPMs
    are dedicated microcontrollers that, with integrated cryptographic keys, help
    to secure hardware. They generally include a **random number generator** (**RNG**),
    which is hardware-based; the ability to generate cryptographic keys; and the ability
    to create a **hash** of the configuration and hardware in the system for integrity
    purposes. When you use *BitLocker* to encrypt your Windows 10 laptop, the best
    way to do so is by using the laptop's TPM, which also allows for *integrity checks*
    at boot time.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of a **trusted computing base** or **TCB** has roots in risk management,
    where the TCB is determined as all of the system components that are high-impact
    in terms of security. If a vulnerability is found in the TCB, the risk of compromise
    to the entire system is higher. Determining your TCB may be something you do in
    the risk management process, if you determine that it's important. You can enforce
    that every system in your TCB has a TPM to verify integrity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, operating systems utilize an architectural concept of a **reference
    monitor**, which enforces an access control policy over users and processes attempting
    to read and write to a system. The design paradigm utilizes an acronym of **NEAT**,
    standing for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-bypassable**, which means an attacker can''t get around the reference
    monitor and read/write to a system without permission'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evaluable**, which means the results and performance should be able to be
    analyzed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always invoked**, meaning the mechanism should always be available, and always
    utilized for all security-sensitive operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tamper-proof**, meaning the mechanism cannot be changed to circumvent the
    control'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these ideologies are very valuable in your own decisions, moving forward.
    I don't want you to look at built-in controls as something that are "handled",
    or not relevant to your role. A lot of the controls already available contain
    suggestions regarding how you could design *anything* securely, from your entire
    system down to the most minute function. We talked about evaluation earlier when
    we were talking about penetration testing. We talked about tamper proofing in
    the TPM's integrity checks. Looking at how these paradigms work from a micro and
    macro scale are important in selecting the appropriate controls for protecting
    against attacks on confidentiality, integrity, and availability.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to protecting electrical signals from reverse-engineering and
    eavesdropping. We looked at mitigations against leaking emanations, such as shielding
    magnetic fields, filtering conducted signals, and masking space-radiated signals.
    We also briefly went over the restriction of physical access to the hardware,
    and also how that lacks defense-in-depth.
  prefs: []
  type: TYPE_NORMAL
- en: Software security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We then moved on to software, which can have vulnerabilities such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Giving users access to more information than they should have access to, either
    through insecure code or a design flaw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to act as a delivery mechanism for malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lack of an audit trail, leading to maintained access, exfiltrated data,
    and unseen changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will cover more on these vulnerabilities in [*Chapter 8*](B16611_08_Final_JM_ePub.xhtml#_idTextAnchor150),
    *Improving the Security of Software*, but for right now we can say that mitigating
    these vulnerabilities is generally done through code reviews, separation of duties,
    static and dynamic code analysis tools, and also the *penetration testing* of
    your software on a regular basis, and upon significant change. The lack of an
    audit trail can be mitigated by implementing one! By utilizing logging solutions,
    you are able to track software and network-based activities, such as access, changes,
    and traffic leaving your organization. With SIEM combined with analysts in a SOC,
    organizations detect ongoing attacks in real time and potentially react to them
    manually or automatically. Practicing and testing this control is part of a red
    team, where the defending side acts as the **Blue Team**. Testing the Blue Team
    is highly critical for some organizations and, yet again, it's up to you to decide
    if that's in line with the level of risk your organization faces. I cover more
    on security testing in [*Chapter 6*](B16611_06_Final_JM_ePub.xhtml#_idTextAnchor112),
    *Designing and Managing Security Testing Processes*.
  prefs: []
  type: TYPE_NORMAL
- en: Network security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We then moved on and talked about how *networks* face vulnerabilities that
    are exploited by a threat actor either through eavesdropping on insufficiently
    protected communication or by gaining access through insecure network architecture,
    or by causing a loss of availability. From a very high level, to control those,
    we''re looking at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Encryption to protect communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control to control who has access to what, for how long
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability management to find and patch vulnerabilities in all network architecture,
    along with the other devices in your estate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redundancy to protect against a loss of availability, (hopefully) protecting
    against *single points of failure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to delve deeper into this topic in [*Chapter 4*](B16611_04_Final_JM_ePub.xhtml#_idTextAnchor075),
    *Designing and Protecting Network Security*, so I will save further explanation
    on how to do so for that chapter instead.
  prefs: []
  type: TYPE_NORMAL
- en: Physical security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Physical* sites have vulnerabilities which can lead to either loss of availability
    for your staff or systems, or circumvention of access control. To prevent from
    unauthorized access to your physical estate, we should consider a *defense in
    depth* approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Turnstiles and mantraps are entry controls, mitigating from a threat actor *piggybacking*
    the entry credentials of another person or *tailgating* behind somebody else,
    catching the door.
  prefs: []
  type: TYPE_NORMAL
- en: 'Biometric locks, such as a fingerprint scanner, ensure the authorized person
    is in fact the authorized person, not just somebody with a key or a badge. Sometimes,
    they aren''t effective controls, either because they respond with too many **false
    negatives**, locking legitimate people out, or give out too many **false positives**,
    giving the wrong people access. These are worth considering when selecting this
    control, and questions should be asked for each use case surrounding: "Which is
    worse, the wrong person getting in, or the right person not being able to?"'
  prefs: []
  type: TYPE_NORMAL
- en: On the topic of selecting the appropriate controls for your organization and
    its systems, let's move on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting appropriate controls/defense against the dark arts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we''re starting by discussing the time-based control category, I''m sure
    you''re aware of the difference between **preventative controls** and **detective
    controls**: they''re found in the names. The first helps to prevent attacks from
    being successful in the future, and the second helps to alert systems and personnel
    while an attack is in progress. **Corrective controls** help to restore systems
    and reduce the effects of a *breach*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''re talking about the type of control without time being a factor,
    we''ve already gone into some examples of each: **physical controls**, **procedural
    controls**, and **technical controls**. We mentioned guards, biometrics readers,
    turnstiles, and so on. Additionally, **closed-circuit television** (**CCTV**),
    motion sensors, fences, and so on are also considered physical controls. **Procedural
    controls** (or *administrative controls*) are pretty self-explanatory as well,
    and include processes (or administration) such as training and awareness; risk
    management processes; recruitment policies; disaster recovery plans; and so on.
    You have been given a load of technical control examples in this chapter so far,
    such as encryption, authentication, TPMs, data execution prevention, and so on.
    A couple of examples of **legal and regulatory controls** (also known as *compliance
    controls*) are the various privacy laws and information security standards that
    currently exist, sometimes carrying fines for non-compliance (such as the **General
    Data Protection Regulation** (**GDPR**)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The selection of controls in order to adequately defend your organization''s
    assets against the threats it faces should be based on a combination of the following
    two factors:'
  prefs: []
  type: TYPE_NORMAL
- en: The level of risk that asset faces, based on the likelihood of a threat exploiting
    a vulnerability, and the impact of that exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your knowledge surrounding the effective application of various controls, depending
    on the threat vectors for that asset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to apply the required controls for the required use cases, and ensure
    that we've covering all threat vectors that are relevant to that specific asset
    and threat actor, but not wasting our time on applying controls that aren't relevant.
    If there is no need for a control to exist, then it's important to remember that
    complexity is the enemy of security, and reconsider increasing levels of complexity
    for no benefit in terms of reducing the level of risk.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've covered how to assess and mitigate vulnerabilities in hardware,
    software, network, and physical systems, let's move on to the next topic, and
    focus on designing secure information systems.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices in designing secure information systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With all of this knowledge that we just merely glossed over so far in this
    chapter (and which I''m fairly certain you already had) in regard to all of the
    threats, threat actors, motivations, vulnerabilities, and the methods for system
    exploitation that exist, the clear question that remains unanswered is: *"How
    can I design secure information systems?"*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally! We're going to talk about how to design a secure information system,
    and you're going to learn all of the ins and outs of how to do that in the best
    possible way. I'm really excited, but perhaps not for the reason you might think.
    You see, in learning about the threats, the devices and assets, and the methods,
    I truly believe you've already activated many of the thought processes required
    and have asked yourself many of the questions required to design a more secure
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Many guidelines exist, but since this book is (trying to) focus on the best
    practices, I'm going to go over some issues that we've covered, and simplify the
    process of designing a secure system for you.
  prefs: []
  type: TYPE_NORMAL
- en: Secure design principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we're looking at the appropriate ways to design our systems and the way
    they interact with each other, and users, we want to consider the principles of
    **least privilege** and **Zero Trust**, and the ideologies behind the **secure
    by default** and **secure by design** principles.
  prefs: []
  type: TYPE_NORMAL
- en: The **principle of least privilege** is focused on ensuring that any access
    to a system resource must only be for the intended purposes, for the shortest
    amount of time possible. If a user or asset isn't meant to perform an action then
    it shouldn't ever be given the ability to do so, and so rights can be reduced
    down to the least-possible amount.
  prefs: []
  type: TYPE_NORMAL
- en: For an example, if you have a website being served to the internet via web server
    software that is running as the admin user, compromise of that web server could
    lead to critical or sensitive files in the network being read or deleted by a
    malicious actor. Does that web server asset need the ability to delete files?
    Does it need access to all of the sensitive files? No, so reduce the privileges
    down to the least amount possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'As another example, if a user (or process) needs to read the files in a certain
    system folder, that user (or process) should only be given read privileges, not
    write privileges. Additionally, they should only be able to access the files for
    reading purposes for the period of time in which it is required. This is aided
    by **Just-In-Time access**, a methodology that enforces the least-privilege principle
    in access to your systems. It allows for access to requested resources, by provisioning
    an ephemeral one-time-use account that is deprovisioned immediately after the
    task is complete. This is granted (or not granted) based on risk indicators, such
    as "Is this a normal activity for this user?", or "Does this user have **multi-factor
    authentication** (**MFA**) enabled?", among many other things. Gone are the days
    when users are always "admins". The reason for this is simple: by reducing down
    to least-privilege and leveraging Just-In-Time access, we diminish the impact
    of a compromised account and decrease the likelihood of compromise through elevation
    of privileges.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Zero Trust** is a modern security concept focused on a few ideologies. These
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the principle of least privilege across your system(s) through Just-In-Time
    and Just-Enough access, and encrypting and protecting your data at rest to prevent
    unauthorized access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always verifying all activities, by authenticating and authorizing based on
    all of those datapoints we began to mention when we were talking about risk indicators
    for Just-In-Time access, which include geolocation, device metrics, anomaly detection,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assuming breach, the major idea behind Zero Trust. You restrict any lateral
    movements by segmenting all assets through the methods in the preceding two bullets;
    you prevent any eavesdropping by encrypting end to end; you detect active threats
    through logging and monitoring; and you continually improve by updating, patching,
    and evaluating the implementation of the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero Trust sounds pretty logical at this stage, after understanding the threats,
    vulnerabilities, and methodologies currently seen in the world, but as I said,
    it's a pretty new ideology that is getting more and more traction as time goes
    on, thankfully. Further reading can be found in *NIST SP 800-207*, if you want
    to have a bunch of fun reading a NIST Special Publication.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure by design** is very much the end goal of what we''re trying to achieve
    in all of our systems and is the main topic of this chapter. It''s the principle
    of building systems to be secure from the beginning. When creating a secure-by-design
    system, we must first consider the threats, the assets, and the vulnerabilities
    that are inherently present, and then we must consider all of the security principles
    and controls we''ve gone into, and more!'
  prefs: []
  type: TYPE_NORMAL
- en: I just want to take this moment to harp on at you that there is a ton of further
    investigation and learning to do after this. The continual improvement that we're
    going to be putting our processes and systems through will also be applied to
    you and your knowledge. As threats emerge and change and new technologies are
    developed, new vulnerabilities and mitigation controls will crop up too, and it's
    your responsibility to investigate all of them. I'm sorry that I can't go into
    all of them in this book, but what I hope I have done is help you in analyzing
    controls and ensuring you are selecting the appropriate mitigations for each of
    your risks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting back on track, among these principles and controls, the best choices
    are selected strategically by understanding the risks implemented and enforced
    by the architecture design to ensure confidentiality, integrity, availability,
    and non-repudiation for the entire system. This is always done by avoiding **security
    through obscurity**, which will eventually fail at the hands of an insider risk
    or knowledgeable threat actor. We should be open about the design of the system
    because any knowledge of how the system is designed shouldn't compromise its security,
    because it is designed in a way that is secure and beyond any knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''re looking at hackers, I would like to bring up a few bullet points
    I mentioned earlier when I was talking about the differences between a script-kiddie
    and an APT. I mentioned the following sequence for hacking:'
  prefs: []
  type: TYPE_NORMAL
- en: Gain access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elevate privileges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exfiltrate information or manipulate operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remain undetected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When designing your system, you will want to consider how to prevent each of
    these steps from happening. How can you ensure a malicious actor isn't able to
    gain access? How do malicious actors elevate privileges or move laterally in your
    estate? How are they able to maintain access? Are you able to detect when data
    is exfiltrated or operations are manipulated? Many of the principles we've gone
    into so far are applicable here, and you can bolster your system through implementing
    a set of defense-in-depth controls for each.
  prefs: []
  type: TYPE_NORMAL
- en: Well-known controls and their mitigations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should probably turn the way we are looking at this around, and start talking
    about well-known controls and which risks they might mitigate. That could help
    things click, and help us analyze our existing systems.
  prefs: []
  type: TYPE_NORMAL
- en: For example, **backups** prevent availability and integrity risks. If your systems
    have been affected by ransomware, providing you have a recent backup that hasn't
    been affected, then you can always restore your systems with that data, causing
    a minimized amount of disruption and loss. Backups aren't the only control for
    **ransomware**, of course. We said that ransomware often spreads as a worm and
    uses elevated privileges to encrypt the data in your estate, so by following the
    **principle of least privilege**, you reduce the likelihood that a compromised
    account is able to modify the data. By updating your systems, you reduce the likelihood
    that a piece of **malware** is able to exploit a known vulnerability in your systems.
    By having **antivirus** or **advanced threat-protection** software installed on
    all of your compatible systems, you apply a *detective control* to prevent the
    spread of that malware, and mitigate against the loss.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing privileges can also help protect against **logic bombs** and insider
    threats from exfiltrating data such as intellectual property.
  prefs: []
  type: TYPE_NORMAL
- en: '**Antivirus software** helps protect against known threats, usually through
    signature-based detection, and can help detect and remove the threats I mentioned
    earlier under the malware category, such as **spyware**, **adware**, **rootkits**,
    and **bootkits**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerability management** and **patching** can ensure that various known
    exploits aren''t able to be used in your estate, because the manufacturer of the
    product has released an update to mitigate or remove the risk of compromise. There
    are always articles and news stories about **zero days**, but in reality, most
    organizations are running outdated software with publicly available exploits.
    The "Kiss principle" is relevant here. Focus on risk, and with a high likelihood
    (such as if the exploit is currently available on GitHub) comes elevated risk.
    I will delve deeper into vulnerability management and patching in [*Chapter 7*](B16611_07_Final_JM_ePub.xhtml#_idTextAnchor123),
    *Owning Security Operations*.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to physical security, we can mention **uninterruptable power supplies**
    (**UPS**) for availability during blackouts, brownouts, and power sag. We can
    consider **surge protection** for spikes.
  prefs: []
  type: TYPE_NORMAL
- en: We already mentioned **heating**, **ventilation**, **humidity control**, and
    **cooling** as mitigation tactics from physical threats, as well as avoiding the
    combination of water sources and your information systems. **Fire protection**
    is also a topic for concern. Human life is the most important consideration (although
    from what I've seen, I'm not sure 100% of organizations agree!). Fire protection
    is a way to protect employees from harm and is potentially a compliance requirement,
    depending on your region or operations.
  prefs: []
  type: TYPE_NORMAL
- en: The main thing I'd like to raise when considering physical security is **outsourcing**.
    Many of the physical security requirements we've covered are as a result of having
    servers and information systems in an office location, and by outsourcing as many
    of those systems possible by utilizing the cloud and **shared responsibility model**,
    you are able to transfer the risk for physical security to a company such as Microsoft
    or Amazon, who have data centers with incredible physical security controls, appropriate
    for various levels of industrial, military, and governmental activities.
  prefs: []
  type: TYPE_NORMAL
- en: '**Background checks** and **due diligence** for new hires and third-party vendors
    are preventative controls that protect from threats exploiting a gap in your organizational
    processes. Furthermore, we could look at **security awareness training** and **phishing
    exercises** as mitigation against organizational threats. By training your employees
    and creating an environment of *security-consciousness*, you are able to reduce
    the risk of a successful phishing attack or negligent practices negatively affecting
    your organization''s operations.'
  prefs: []
  type: TYPE_NORMAL
- en: By utilizing appropriate **hardware and software firewalls**, **network topologies**,
    and **cloud services**, you are able to reduce the likelihood of a DoS attack
    (or even a DDoS attack) from taking your business offline, or increasing your
    monthly cloud service bill to a point where it can't be paid for.
  prefs: []
  type: TYPE_NORMAL
- en: By performing active testing on all of your assets, including performing **web
    application testing** against your web apps, taking into consideration the **OWASP
    Top 10**, you are able to get visibility on present vulnerabilities, as well as
    prevent from new vulnerabilities being added to your existing apps and software
    solutions. By allowing a third-party **penetration test** on your environment,
    you allow for the good guys to find holes that the bad guys would have found eventually,
    ultimately a **preventative control** for your organization. Did your systems
    notice the pentest? If not, then you don't have the appropriate level of detective
    controls such as **logging** combined with **SIEM** and a **SOC**, which is another
    control that can be outsourced to specialty firms with the ability to perform
    the appropriate analysis on the activity in your estate.
  prefs: []
  type: TYPE_NORMAL
- en: Considering alternative devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to alternative devices such as mobile, **Internet of Things**
    (**IoT**), or **supervisory control and data acquisition** (**SCADA**), different
    aspects will need to be considered, because of the nature of each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with **mobile**—or, specifically, *mobile phones*—let''s consider
    what we''re looking at here: We have a device that people take with them everywhere.
    These devices may store your organization''s sensitive data, or have access to
    your estate… and something that people do on occasion is forget them somewhere.
    You''ve given up **physical access**, so what is it exactly you need to do to
    ensure you''re only paying to replace the phone, and haven''t (for instance) given
    up your intellectual property to a competitor? Well, earlier in this chapter,
    we already covered the idea of encrypting your hard drives to prevent physical
    access leading to compromise, and once you encrypt your device, you probably will
    have put a lock screen on that is password-protected… but as this device moves
    around, and you might not know the last place you left it, you might want to consider
    the additional feature of the **Global Positioning System** (**GPS**) **Find My
    Phone** or **Remote** **wipe** functions. Additionally, if this device is owned
    by the user but still accesses your resources, you can have a security baseline
    that is checked before it is given access your estate. This checks if the latest
    patches have been applied, and usually requires some sort of virus-protection
    solution.'
  prefs: []
  type: TYPE_NORMAL
- en: When we're talking about IoT or we're looking at devices that usually have access
    to the outside world through the internet, which may be created by a manufacturer
    who doesn't specialize in making hardware or software, but rather lightbulbs or
    stereo systems or vacuum cleaners or security cameras, and might not regularly
    patch reported vulnerabilities. It sounds like a bit of a nightmare for your estate,
    but don't worry—there are solutions to that. First, create an IoT network for
    all that stuff. Anything falling under the IoT device category gets put in that
    segregated sandbox, mitigating against the impact of a vulnerability that is exploitable
    over the web and allows access into the network (also known as **remote-access
    vulnerabilities**). Yes, it's happened… IoT lightbulbs have given remote access
    into corporate networks. It actually happened all the time, and it's pretty embarrassing.
  prefs: []
  type: TYPE_NORMAL
- en: Other mitigations for defense-in-depth purposes include selecting IoT products
    that have a good track record for releasing patches, applying the latest said
    patches, restricting privileges down to the least amount possible while retaining
    functionality (the **least-privilege** principle), and changing default passwords
    that are easily guessable or (because they're the same for every device) are found
    online.
  prefs: []
  type: TYPE_NORMAL
- en: '`Shodan.io`, the search engine for IoT. If you haven''t looked at *Shodan.io*,
    you definitely should do that (as soon as you finish the *Mission: Impossible*
    films); it''s legitimately cool. You get a world map view, with red dots on the
    map that show various internet-connected devices, their IP addresses and open
    ports, and even a screenshot of the web page that you would see if you followed
    the rabbit hole and accessed the device over the internet in your browser. Awesome,
    right? Except, sometimes, there''s a *wind turbine* or *electricity plant* that
    is exposed to the internet with no mitigations. A malicious actor could just turn
    everything off, or on, or do pretty much anything an authorized user could do!'
  prefs: []
  type: TYPE_NORMAL
- en: In order to mitigate against the risk of high-impact functionality combined
    with outdated and insecure protocols, weak (or lack of) authentication, and ineffective
    security-through-obscurity controls, you should consider a few things. The first
    thing that you need to do is to find all of the connections and create a diagram
    of your SCADA networks. Then, if you can, **airgap** as many of these devices
    as possible. No internet access; separate network; no connection to the outside
    world. That doesn't really protect you from all of the threats, however. Strengthen
    the remaining connections in the network with authentication and authorization
    controls; install updates if they exist; disable unnecessary services that increase
    your **attack surface**; perform **penetration tests** and **red teams**; and
    make sure to always consider SCADA in your risk management processes.
  prefs: []
  type: TYPE_NORMAL
- en: The thing is, ideally, this is how you should be treating everything in your
    estate! Most of the best practices for securing your devices, network, and organization
    apply to any of these "alternative devices", as well as the typical devices. We
    care about risk, and we mitigate against those risks when we design and improve
    our information systems.
  prefs: []
  type: TYPE_NORMAL
- en: When you read about a new control, consider what risk they are actually solving
    (and not just what the marketing material says). When you're designing new systems
    or evaluating your existing ones, consider your controls and whether there's a
    gap that could allow for exploitation, and if that gap should be filled, depending
    on if the level of risk is unacceptable according to your risk management policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'One other point I would like to raise in regard to designing secure systems
    is this: in your design for your system, please ensure you are able to keep the
    system up to date with the latest updates and patches! So many of the issues we
    see today are still because systems weren''t designed in a way that allows for
    updates, be it due to legacy software not being compatible with new operating
    systems, or because of a limited access to the internet as a result of **air-gapping**.
    Design a process that allows for the updating of all of your assets, regardless
    of if they need to be air-gapped or not, and create a plan to ensure that your
    systems work on the most up-to-date versions possible. Keep track of whether your
    systems are running the latest versions through your asset register or configuration
    management tool (which I''ll talk about in [*Chapter 7*](B16611_07_Final_JM_ePub.xhtml#_idTextAnchor123),
    *Owning Security Operations*), and update your risk register if a known vulnerability
    exists in an operating system or software version that is being used in your estate.
    If you''re able to preemptively anticipate this and include these plans and processes
    in your design and implementation consideration, it''s going to be a huge leap
    forward for your organization''s security in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered an incredibly vast amount of information, and I
    must reiterate like a broken record that each and every one of these key terms
    in this chapter could have an entire book (or series) devoted to a deep dive into
    them. The purpose of this book is more focused on reacquainting you with the key
    points, helping you look at each of these in the right way, and applying high-level
    principles to your knowledge to increase your effectiveness at your organization.
  prefs: []
  type: TYPE_NORMAL
- en: From assets and their vulnerabilities, to threat actors and their motivations,
    to the methodologies that those threat actors use to exploit the vulnerabilities
    in our assets, we leapt across several major issues in information security, both
    from strategic and operational standpoints, in order to properly understand the
    landscape.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding the landscape, we moved into applying our risk management principles
    and knowledge surrounding the impact and likelihood of a threat exploiting a vulnerability,
    to mitigate and control against various risks. After looking at how to choose
    the appropriate controls for each risk, how the controls are categorized, and
    how many of them work, we looked at how to design systems with these risks in
    mind from the beginning, to ensure a more secure design by default and see how
    we might contribute to improve our own organization's systems the next time there's
    a discussion around their design.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're done with this chapter, let's move on to the next one, which
    I've alluded to a few times already.
  prefs: []
  type: TYPE_NORMAL
