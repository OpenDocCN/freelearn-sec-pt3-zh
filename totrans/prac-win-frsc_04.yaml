- en: Chapter 4. Nonvolatile Data Acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the acquisition of **Hard Disk Drives** or
    **HDD**. Data acquisition is critical because performing analysis on the original
    hard drive may cause failure on the only hard drive that contains the data or
    you may write to that original hard drive by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: So, creating a forensics image from the hard drive must be performed prior to
    the analysis. The acquisition of the HDD can be either conducted at the incident
    scene or in the analysis lab, on a live or a powered off system, and over network
    or locally, as we will see in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Forensic image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incident response CDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live imaging of a hard drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux for the imaging of a hard drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization in data acquisition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evidence integrity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk wiping in Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forensic image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imaging of a hard drive is the process of creating an exact forensic image
    of the victim or the suspect hard drive in order to conduct the analysis on the
    imaged hard drive instead of the original one. To create an exact copy of the
    hard drive, there are two options that can be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Duplication**: This is where the destination of this process is the whole
    hard drive. In some references, this step can be addressed as cloning when the
    destination hard drive has the same brand, model, and size of the source hard
    drive. Duplication can be conducted using what are called **forensic hardware
    duplicators**. These are hardware devices, which basically have two interfaces
    for the source and the destination hard drives. Once they start operating, they
    will just copy blocks of data from the source to the destination regardless of
    the structure of the filesystem that is used in the source hard drive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, hardware duplication is faster than other software tools as it operates
    in wire speed. Some duplicators have special capabilities, such as performing
    some search operations during acquisition, or they can create up to eight duplicates
    in the same period of time. Duplication can also be performed with software tools,
    such as `dd` if the destination of the tool is a complete hard drive, not a file.
    This will be discussed later in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Imaging**: This is where the destination of the hard drive is a container
    file or image file. This image may have different formats, which will also be
    discussed later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, some techniques and tools—which include both software
    duplication and imaging—will be illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: Incident Response CDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the needed speed in the **Incident Response** (**IR**) process, the usage
    of incident response CDs can save precious time. IR CDs usually are Linux distributions.
    These distributions contain many incident response and digital forensic tools,
    which aim to boot mainly from the target system to acquire different types of
    possible evidence without the need to disconnect the hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: This is designed to leave the least traces on the target system, so it boots
    with write protection enabled by default to all the connected hard drives. This
    gives the user the ability to grant the write access to the destination hard drive
    only. It is better to not connect to the destination hard drive until the system
    boots from the incident response CD. Of course, booting from the IR CD means that
    the system under investigation is down, and you will start the machine and boot
    from the CD. No running system memory is available in this case.
  prefs: []
  type: TYPE_NORMAL
- en: IR CDs also have the ability to acquire the memory and the hard drive of a live
    system. You need to insert the CD and run the imaging program to acquire the memory
    and the hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will discuss some examples of the available IR
    CDs.
  prefs: []
  type: TYPE_NORMAL
- en: DEFT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Digital Evidence and Forensics Toolkit** (**DEFT**) contains many acquisition
    and analysis tools that can be used in the on-scene analysis approach when the
    investigator boots the machine from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DEFT](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A booted DEFT CD
  prefs: []
  type: TYPE_NORMAL
- en: 'DEFT also comes with **Digital Advanced Response Toolkit** (**DART**). DART
    can run in the Windows live system, and it has a good and different collection
    of tools in each part of the incident response steps. Using DART you can perform
    the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Acquire the Windows memory and hard drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform live data recovery when needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct some forensics analysis on some Windows artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect information about the running system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor the system networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can view the DART interface in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DEFT](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Incident response tool DART
  prefs: []
  type: TYPE_NORMAL
- en: Helix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Helix is an IR CD that has both free and commercial versions. It can work with
    three operating systems: **Windows**, **Linux**, and **Mac** in live acquisition.
    This is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Helix](img/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A: Different OS support in Helix in live acquisition'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like DEFT, you can boot from the Helix CD in case of a powered off system.
    In this case, you can clone the hard drive to another hard drive and perform the
    same function of the hard drive duplicators. Go to **Applications** | **Acquisition
    and Analysis** | **Helix pro**. In the opened window, you can duplicate the hard
    drive or image up to four images either from the system memory or the system hard
    drive. Helix can also calculate the images'' hash functions: MD5, SHA1, SHA256,
    or SHA512, or altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Helix](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Booting from the Helix IR CD
  prefs: []
  type: TYPE_NORMAL
- en: Live imaging of a hard drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In case of a live system, you will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Image the volatile data, such as system memory first as discussed earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power the system down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disconnect the hard drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image the hard drive separately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, in some situations, you will also need to image the hard drive without
    switching the system off. An example is in case the system is a server that is
    hosting a critical service that cannot be taken down, or there is an encryption
    present in the system, which will be reactivated if the system is powered off.
    This is why live acquisition is the preferred choice all the time.
  prefs: []
  type: TYPE_NORMAL
- en: FTK imager in live hard drive acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use the FTK imager in imaging the hard drive of the
    live target machine. We will use the FTK image lite ( [http://accessdata.com/product-download/digital-forensics/ftk-imager-lite-version-3.1.1](http://accessdata.com/product-download/digital-forensics/ftk-imager-lite-version-3.1.1)
    ), which doesn't require any installation, to leave least traces in the live system.
    Navigate to **File** | **Create Disk Image**.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the pop-up window, select one of the following source evidence types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Physical disk**: This is the whole hard drive, starting from the MBR to the
    last sector of the hard drive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logical disk**: This is one partition from the hard drive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image file**: This is if you need to convert an image from one format to
    another, that is, from the E01 format to a raw format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we will select the whole physical hard drive. You now need to
    select the source hard drive, and make sure that you select the right hard drive
    of the target machine. After this, you will have the option of selecting the type
    of image that you want. The three most important options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raw image format**: This is simply a bit-to-bit copy of the hard drive without
    leaving or adding any single bit. This image format is usually accompanied by
    a separate file, containing meta information about the image file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E01**: This is the **EnCase evidence file**. It contains information that
    is related to the acquisition process, such as the investigator name, the timestamp,
    and the typed notes during the acquisition. It calculates the checksum for every
    32 KB of data, and at the end of the image file, it adds the MD5 hash for the
    whole bit stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AFF**: This is the **Advanced Forensics Format**, and it is used to store
    disk images and forensics images'' metadata. This is not a proprietary but open
    format, which can be used with any tool for analysis and won''t exclusively work
    with a single tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can still transfer the image from one format to another after the original
    imaging process. So, we can always select the raw format and then convert to any
    other format that we will need during the analysis phase. You now need to add
    the destination information, taking in to consideration that you are working on
    a live system and have no write protection enabled. Be careful and select the
    destination folder in the externally attached storage or shared folder over the
    network.
  prefs: []
  type: TYPE_NORMAL
- en: There is an option to divide the image into multifiles. You can provide the
    size of the single file. This option will be very helpful in case you don't have
    enough storage on a single hard drive and need to divide the image between different
    hard drives. This will also be useful in case you have a FAT32 formatted volume
    that can't handle files more than 4 GB in size.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can create more than one image in the same process, which will save
    some time if you have a case with more than one investigator working on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may choose to verify the image after its creation by calculating the hash
    function to the image and comparing the result to the hash function''s result
    of the hard drive. In case of a match, the image hasn''t been altered. The hash
    function will be discussed later in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![FTK imager in live hard drive acquisition](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FTK—selection of the image destination
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FTK Imager images the hard drive bit-to-bit to a single file image. You can't
    image the hard drive to another one like you can do with duplicators.
  prefs: []
  type: TYPE_NORMAL
- en: Imaging over the network with FTK imager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations, you can't connect to the target system with a USB to run
    your tools and connect your storage. In this case, you can acquire the system
    over the network.
  prefs: []
  type: TYPE_NORMAL
- en: What you need to do is connect your machine to the same network with the target
    system and make sure the target system can reach your machine using the ping command.
    From your machine, verify that enough space is available. Now, create a new folder
    and share this folder with suitable read/write privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the shared folder name is `Share` and this is located in `C:\`.
    The handler''s machine and has been assigned an IP of 192.168.57.128 and the source/target
    machine is Windows 7:'
  prefs: []
  type: TYPE_NORMAL
- en: To test the shared folder availability, run the `\\192.168.57.128` command from
    the source machine in the **Run** window shown as follows:![Imaging over the network
    with FTK imager](img/image_04_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Opening the shared folder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An authentication window must pop up. Enter the machine IP, the username, and
    the user password:![Imaging over the network with FTK imager](img/image_04_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shared folder authentication
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If everything went well, you will see a folder named **Share**. Right-click
    on this folder and select **Map Network Drive**. You can select any drive letter,
    in our case, we selected the letter `Z`:![Imaging over the network with FTK imager](img/image_04_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mapping the shared folder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now from the source machine, run the FTK Lite program, and then open **Create
    Disk image** from **File**. Follow the same steps and for the location of the
    image, browse to the mapped network drive; it may ask you to authenticate again:![Imaging
    over the network with FTK imager](img/image_04_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving the image to the shared folder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking on the **Finish** button, you will notice a progress status bar
    that represents the already captured data from the overall hard drive size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the handler's machine, you will find a file named `image.raw`, which is created
    under the Share shared folder, and you can notice the increase of the file size
    until it reaches the maximum size of the target machine's hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: Incident response CDs in live acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed earlier, the incident response CDs come with built-in and easy-to-access
    tools to perform different jobs. One of these jobs is the imaging of the hard
    drive of the live system, as in the DART tool set and Helix.
  prefs: []
  type: TYPE_NORMAL
- en: With Helix, if it didn't start automatically in the live system, you can open
    the program from the suitable operating system folder (*Figure A* in the *Helix*
    section). The program will work with the same interface, but in case of working
    from a live system, you won't be able to duplicate the hard drive. The clone option
    won't be available in the list because the hard drive isn't in a steady state
    and is constantly changing as a result of the operating system's actions. A verification
    process takes place after the imaging process. It calculates the hash of the resulting
    image and compares the value to the hash of the bit stream during the imaging
    process. If there is a match, it means that there are no errors in the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'To acquire the image over the network, Helix has a built-in capability to do
    so with the same server/client concept. In the destination machine, which is the
    handler machine, you need to run the network listener from the same `receiver.exe`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incident response CDs in live acquisition](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Helix network listener
  prefs: []
  type: TYPE_NORMAL
- en: After providing full information to the listener, start listening to any network
    connection requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the source machine, select the destination as the Helix receiver. Then to
    set up the connection, enter the listener IP, the same port, and the password
    if any:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incident response CDs in live acquisition](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After starting the acquisition process, a new connection will start in the listener,
    and a new image file can be found at the specified location on the destination
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Linux for the imaging of a hard drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose that you already have a dead system and you need to take the machine's
    hard drive out in order to image it. What you need to do first is make sure that
    you are connecting the hard drive to your preferred Linux machine via write blocker
    to prevent any accidental writing to the hard drive, which could change the evidence
    and make it inadmissible.
  prefs: []
  type: TYPE_NORMAL
- en: The dd tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Linux operating system, there is a built-in tool called `dd`. The `dd`
    tool is considered to be a forensically sound tool, as it copies blocks of data,
    regardless of its structure. There are a lot of suggestions of what `dd` stands
    for, but we can say that `dd` stands for **duplicate disk** or **duplicate data**,
    and if someone used it in wrong way it can be **disk destroyer** or **delete data**.
    This tool can convert and copy files and hard drives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose the suspicious hard drive, which is the source and is connected by
    a write blocker, is mounted as `/dev/sda` and the destination hard drive is mounted
    as `sdb`. We have the following two options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image the hard drive to a single file, which is useful in space management,
    transferring the image file between different investigators in the same case,
    and for case archiving, as mentioned earlier. In this case, you will use the `dd`
    tool with the following using root privileges:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From here, we can see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`conv = sync, noerror`: This pads the block with nulls to the left if, for
    some reason, the block couldn''t be read; `dd` will continue to execute and won''t
    step due to some error.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bs`: This is each block size of the transferred data. Considering a big block
    size may be faster, but choosing the smaller block size is more efficient. Suppose
    you select `bs` to be 4 MB, so if an error occurred in the first sector of 4 MB,
    it will ignore all the rest of the block which may cause you some important data
    loss during the imaging process.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if`: This is an input file, either a whole hard disk or single partition.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Of`: This is an output file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/media/Elements`: This is the mount point of the destination hard drive.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, the cursor will be silent until the imaging ends.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, there is a way to see the progress of the imaging process, which will
    help in troubleshooting and detecting any problems that occurred during the acquisition,
    by pipelining the `dd` command with the `pv` as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, you will see the moving progress bar, which means that the process is
    still running the imaged size and the imaging speed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The dd tool](img/image_04_013.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: dd with the progress status
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: dd over the network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You also can use `dd` over the network using the `nc` netcat. To perform this
    action, on the destination machine with IP `192.168.57.128`, open a listener on
    port 3333 and pipeline the received data to `dd` with the desired location and
    output file name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can just direct the output to the desired file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![dd over the network](img/image_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: dd over the network using netcat (at destination)
  prefs: []
  type: TYPE_NORMAL
- en: 'On the target machine, start the `dd` by pipelining the output to the `nc`
    client, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![dd over the network](img/image_04_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: dd over the network using netcat (at source)
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the whole hard drive to another hard drive. In this case, you can
    use all the previous steps, but instead of mentioning the destination file path,
    you need to mention the hard drive's driver assigned location under `/dev`. So,`/media/Elements/HD_image/image.dd`
    will be replaced with`/dev/sdb` in the first example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `dd` tool, you can restore an image to a hard drive. You just need
    to change the input file to the image and the output file to the hard drive, such
    as`/dev/sda`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Virtualization in data acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtualization offers great benefits to digital forensics science. In virtualization,
    everything is a file, including the guest memory and the guest hard drive. What
    the handler needs to do is to identify the right file of the source that they
    need to acquire and copy this file to the external storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The snapshot concept that can be found in most of the virtualization programs
    offers the investigator more images of the machine at different times. This can,
    if acquired and analyzed, view the timeline behavior of the machine, that is,
    before and after the malware infection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualization in data acquisition](img/image_04_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Windows memory files in the virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: In the previous image, we can see the `vmem` files of the VMware program. VMware
    is one of the virtualization programs. This image contains the current memory
    file and two `vmem` files for two snapshots taken on two different dates. The
    size of the files are all the same because this is like the memory dump process,
    it copies the entire machine's memory.
  prefs: []
  type: TYPE_NORMAL
- en: Evidence integrity (the hash function)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What can we do to prove that the evidence hasn't been altered or changed? This
    step is very important to prove in court, if required, that you didn't add, remove,
    or edit the evidence during imaging or analysis. Most of the imaging tools come
    with many hash function implementations, such as MD5, SHA1, and SHA256\. The hash
    function is a mathematical implementation, which is an irreversible or one-way
    function. This means that if you have input data A and hash function F, you will
    get *F(A) = H*. However, it's been proved that *F'(H) != A*, where *F* is the
    hash function and *F'* is any mathematical function. We can't get *A*, the original
    data, from *H*, the hash digest.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we have different strings applied to the same hash function,
    the hash function must map each string to different hashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Evidence integrity (the hash function)](img/image_04_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The hash function
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding diagram, each text resulted in a different hash after
    applying all the texts to the same hash function. Even if the change is a single
    character, such as **Handling** and **Handlin** in the preceding figure, the output
    must be very different. If slight changes in the input bring out slight changes
    in the hashes, the hash function is considered less perfect.
  prefs: []
  type: TYPE_NORMAL
- en: Hash collision occurs when two different inputs create the same hash when applied
    to the same hash function. So, it is better to use more than one hash function,
    such as MD5 and SHA512.
  prefs: []
  type: TYPE_NORMAL
- en: 'The length of the hash digest doesn''t depend on the input length. Whatever
    the input length, the hash length will be the same. This is a matter of time and
    the available processing power and resources. The following table contains some
    of the famous hash functions with their digest length:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Hash algorithm** | **Digest length** |'
  prefs: []
  type: TYPE_TB
- en: '| MD5 | 128 bit |'
  prefs: []
  type: TYPE_TB
- en: '| SHA-1 | 160 bit |'
  prefs: []
  type: TYPE_TB
- en: '| SHA-256 | 256 bit |'
  prefs: []
  type: TYPE_TB
- en: '| SHA-512 | 512 bit |'
  prefs: []
  type: TYPE_TB
- en: '*The hash length for different hash algorithms*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'With FTK Imager, you can select and image to verify them after they are created.
    This will run the created image against various hash functions and compare the
    results with the digests created during the imaging process of the source. This
    will create a small report showing the digest values and whether this is a match
    or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Evidence integrity (the hash function)](img/image_04_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The hash verification in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: You can prove that you didn't alter the evidence by writing the digest of the
    received evidence in the chain of custody records.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Linux operating system, there is a built-in function called **md5sum**
    where you can apply your image to it, and it will calculate the MD5 hash for you.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that the content of the file is the only factor that
    affects the hash function, neither the metadata nor the filename affect the hash
    digest.
  prefs: []
  type: TYPE_NORMAL
- en: During live disk acquisition, the imaging is running in a specific point of
    time. No integrity can be preserved in the original disk as the operating system
    uses it and changes it all the time. However, the evidence integrity can be preserved
    starting from the first created image of the system disk.
  prefs: []
  type: TYPE_NORMAL
- en: Disk wiping in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The investigator can't use the same hard drive for two different hard drives
    if they are using the duplication way to image the hard drive. This could overlap
    different files from different cases and will result in unreliable and untrue
    findings. After completing work on the duplicate hard drive, you must wipe it
    and prepare it for another case or hard drive. Don't wait until another case is
    assigned to you; wiping takes a long time.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process is equivalent to the imaging process but the source file is a
    file full of zeros. In the Linux operating system there is a `/dev/zero` file.
    You need to use this file as your input file to the `dd` tool, and your output
    file will be the hard drive that needs to be wiped. Another file that can be used
    in this process as well is`/dev/null`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some IRCDs and discussed the live acquisition using
    IRCDs and FTK Imager and imaging over the network using IRCDs and the `dd` tool.
    We also viewed how to preserve evidence integrity and how to wipe a disk for forensic
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to create a timeline of the system
    activities and why it is important from a digital forensics prospective.
  prefs: []
  type: TYPE_NORMAL
