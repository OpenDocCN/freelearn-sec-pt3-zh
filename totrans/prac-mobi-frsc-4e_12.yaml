- en: Android Data Analysis and Recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered various logical and physical extraction
    techniques. In physical extraction, a bit-by-bit image of the Android device is
    obtained, which contains valuable information. In this chapter, we will learn
    how to analyze and extract relevant data, such as call logs and text messages,
    from an image file. While the data extraction and analysis techniques provide
    information about various details, not all techniques can provide information
    about the deleted data. Data recovery is a crucial aspect of mobile forensics,
    as it helps to unearth the deleted items.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter aims at covering various techniques, that can be used by a forensic
    analyst to recover the data from an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following two major topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing and extracting data from Android image files using the Autopsy tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding techniques to recover deleted files from an SD card and the internal
    memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing and extracting data from Android image files using the Autopsy tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **Android image** refers to the physical image (also called a forensic
    image or raw image) that is obtained by performing any of the physical data extraction
    techniques. Using the techniques explained in [Chapter 9](bf232566-3a17-4914-992b-80674dd379de.xhtml),
    *Android Data Extraction Techniques*, you can image the entire `/data/data` block
    or any particular block that is of relevance to the investigation. Once the image
    is obtained, an investigator like you can manually go through the contents of
    the file or take advantage of the available tools to parse through the contents.
    Commercial tools, such as Cellebrite and XRY, can drill into the data and present
    a comprehensive picture of the contents. Autopsy is one of the very widely used
    open source tools in the forensics world that performs an excellent job of analyzing
    an Android image.
  prefs: []
  type: TYPE_NORMAL
- en: The Autopsy platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autopsy is a forensic platform and acts as a GUI for the Sleuth Kit. It is available
    for free; you can download it at [http://www.sleuthkit.org/](http://www.sleuthkit.org/).
    The Sleuth Kit is a collection of Unix and Windows-based tools and utilities,
    which are used to perform forensic analysis. Autopsy displays the results by forensically
    analyzing a given volume, and thereby helps investigators to focus on relevant
    sections of the data. Autopsy is free and extensible and has several modules that
    can be plugged in. Autopsy can be used to load and analyze an Android image that
    is obtained after physical extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an image to Autopsy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have downloaded and installed Autopsy, follow these steps to add an
    image to Autopsy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Autopsy tool and select the Create New Case option, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7bcd8c15-85e4-473c-b9b5-a5d2ba2da1de.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new case in Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter all of the necessary case details, including the name of the case, the
    location where data needs to be stored, and so on, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56ad49d1-b9fc-41b8-bb2f-15104f4a7417.png)'
  prefs: []
  type: TYPE_IMG
- en: Entering case information in Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: Enter the case number and examiner details, and click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on the Add Data Source button, add the image file to be analyzed,
    and click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19d316c7-1514-472b-b0ba-d2068d1843a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Entering data source information in Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, you can configure what modules have to be run on the images,
    as shown in the following screenshot. It is recommended to select the Recent Activity,
    Exif Parser, Keyword Search, and Android Analyzer modules. In the next step, click
    on Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74334196-b009-4843-9e35-183edf3011f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring modules in Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, the tool usually takes a few minutes to parse through the
    image depending on its size. During this time, you might see some errors or warning
    messages if any are encountered by the tool. However, Autopsy provides the fastest
    access to the artifacts and the filesystem when compared to other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing an image using Autopsy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the image is loaded, expand the file present under Data Sources to see
    data present in the image. For example, the following screenshot shows the contents
    of the `/data/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f59c327a-baa5-44f9-9d76-2411f1a28b8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing an image in Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, only the `/data` portion of the device has been imaged.
    If the entire device had been imaged, then the tool would show more volumes. Depending
    on the underlying details of the investigation, relevant portions need to be analyzed.
    In the following example, by examining the folders present under `com.android.browser`,
    we can extract the list of various sites visited by the user along with their
    access dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c32ae2e2-df40-4ebd-a120-e66c47f35afc.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing browsing details in Autopsy
  prefs: []
  type: TYPE_NORMAL
- en: Valuable data, such as text messages, browsing history, chats, call history,
    pictures, videos, and location details, could be unearthed by analyzing the data
    present under various sections. In the next section, we shall look into data recovery
    from an SD card and the internal memory.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding techniques to recover deleted files from the SD card and the internal
    memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data recovery is one of the most significant and powerful aspects of forensic
    analysis. The ability to recover deleted data can be crucial to crack many civil
    and criminal cases. From a normal user's point of view, recovering data that has
    been deleted would usually refer to the operating system's built-in solutions,
    such as the Recycle Bin in Windows. While it's true that data can be recovered
    from these locations, due to an increase in user awareness, these options don't
    often work. For instance, on a desktop computer, people now use *Shift* + *Delete*
    as a way to delete a file completely from their desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data recovery is the process of retrieving deleted data from a device when
    it cannot be accessed normally. Consider the scenario where a mobile phone has
    been seized from a terrorist. Wouldn''t it be of the greatest importance to know
    which items were deleted by the terrorist? Access to any deleted SMS messages,
    pictures, dialed numbers, application data, and more can be of critical importance,
    as they often reveal sensitive information. With Android, it is possible to recover
    most of the deleted data if the device files are properly acquired. However, if
    proper care is not taken while handling the device, the deleted data could be
    lost forever. To ensure that the deleted data is not overwritten, it is recommended
    to keep the following points in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not use the phone for any activity after seizing it. The deleted data exists
    on the device until space is needed by some other incoming data. Hence, the phone
    must not be used for any sort of activity to prevent the data from being overwritten.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even when the phone is not used, without any intervention from our end, data
    can be overwritten. For instance, an incoming SMS would automatically occupy space,
    which could overwrite the data marked for deletion. To prevent the occurrence
    of such events, you should follow the forensic handling methods described in the
    previous chapters. The easiest solution is to place the device in airplane mode
    or disable all connectivity options on the device. This prevents the delivery
    of any new messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All Android filesystems have metadata that contains information about the hierarchy
    of files, filenames, and so on. Deletion will not really erase this data but remove
    the filesystem metadata. When text messages or any other files are deleted from
    the device, they are just made invisible to the user, but the files are still
    present on the device. Essentially, the files are simply marked for deletion,
    but they reside on the filesystem until being overwritten. Recovering deleted
    data from an Android device involves two scenarios: recovering data that is deleted
    from the SD card, such as pictures, videos, application data, and more, and recovering
    data that is deleted from the internal memory of the device. The following sections
    cover the techniques that can be used to recover deleted data from both the SD
    card and the internal memory of the Android device.'
  prefs: []
  type: TYPE_NORMAL
- en: Recovering deleted data from an external SD card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data present on SD cards can reveal a lot of information to forensic investigators.
    SD cards are capable of storing pictures and videos taken by the phone's camera,
    voice recordings, application data, cached files, and more. Essentially, anything
    that can be stored on a computer hard drive can be stored on an SD card as much
    as the available space allows.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering the deleted data from an external SD card is a straightforward process.
    SD cards can be mounted as an external mass storage device and forensically acquired
    using standard digital forensic methods, as discussed in [Chapter 9](bf232566-3a17-4914-992b-80674dd379de.xhtml),
    *Android Data Extraction Techniques*. As mentioned in the previous chapters, SD
    cards in Android devices often use the FAT32 filesystem. The main reason for this
    is that the FAT32 filesystem is widely supported in most operating systems, including
    Windows, Linux, and macOS X. The maximum file size on a FAT32 formatted drive
    is around 4 GB. With increasingly high-resolution formats now available, this
    limit is commonly reached. Apart from this, FAT32 can only be used on partitions
    that are less than 32 GB in size. Hence, the exFAT filesystem, which overcomes
    these problems, is now being used in some of the devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recovering the deleted data from an external SD card can be easily accomplished
    if it can be mounted as a drive. Hence, if the SD card is removable, connect it
    to a workstation using a write blocker for acquisition. However, the latest Android
    devices do not usually mount as a mass storage. This is because these devices
    use the **Media Transfer Protocol** (**MTP**) or **Picture Transfer Protocol**
    (**PTP**) protocols instead of USB mass storage. The problem with USB mass storage
    is that the computer would need exclusive access to the storage. In other words,
    the external storage needs to be completely disconnected from the Android OS when
    it is connected to a workstation. This has led to several other complications
    for mobile apps. When an Android device uses MTP, it appears to the computer as
    a media device and not as Removable Storage, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cc751b4-0dd5-42dd-8374-9e338934d118.png)'
  prefs: []
  type: TYPE_IMG
- en: Android device connection using MTP
  prefs: []
  type: TYPE_NORMAL
- en: But the normal data recovery tools would need a mount drive to perform a scan.
    Hence, most of the latest devices that use MTP/PTP are not treated as a mount
    drive, and so the traditional data recovery tools that work for computers do not
    work on them.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, when the device uses MTP/PTP and is not mounted as a drive,
    the recovery can be done by certain Android-specific data recovery tools that
    need the USB debugging option to be turned on. Almost all Android data recovery
    tools in the market need you to enable USB debugging so that your device and the
    SD card can be recognized before starting Android data recovery.
  prefs: []
  type: TYPE_NORMAL
- en: You must understand that Android devices might use space on the SD card to cache
    application data; therefore, it is important to make sure that as much data as
    possible is obtained from the device prior to removing the SD card. Some older
    devices automatically mount the device as a drive when connected through USB.
    It is a sound forensic practice to not work directly on the device for data extraction,
    data recovery, and so on. Hence, a physical image of the SD card needs to be taken
    and all required analysis is performed on the image itself. It is recommended
    to acquire the SD card through the device as well as separately to ensure that
    all data is obtained. To achieve the SD card image, `dd` through `adb` can be
    used while the device is running to obtain an image of the SD card of the device
    if the device cannot be powered off due to possible evidence running in the memory.
    If the SD card is removed and connected to the workstation through a card reader,
    it appears as external mass storage, which can then be imaged using the standard
    forensic techniques described in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Once the image is obtained, it can be analyzed using any standard forensic tools,
    such as FTK Imager. FTK Imager is a simple tool that can be used to create and
    analyze disk images. It is available for download at [https://accessdata.com/product-download/ftk-imager-version-3.2.0](https://accessdata.com/product-download/ftk-imager-version-3.2.0).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a step-by-step process to recover the deleted files from an
    SD card image using FTK Imager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start FTK Imager and click on File, then click on Add Evidence Item... in the
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9157927-aeda-4160-b896-13aacb1227cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding evidence in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Image File as the evidence type in the Select Source dialog, and click
    on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88ef8592-2aa5-49c6-8fcc-a64e4c705149.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting file type in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Select File dialog, go to the location where the `SDCARD.dd` SD card
    image file is present, select it, and click on Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55fd1ac0-095a-4d90-8013-82442a372936.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the image file for analysis in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the SD card image are then shown in the View pane. You can
    browse through the folders by clicking on the + sign. When a folder is highlighted,
    the contents are shown on the right pane. When a file is selected, its contents
    can be seen in the bottom pane. As shown in the following screenshot, the deleted
    files are also shown with a red cross mark over the icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7b02a85-49af-428f-9f32-64b7a357eb48.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleted files shown with a red cross over the icons in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the deleted files to the workstation, right-click on the marked file
    and select Export Files..., as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d7afc47-f079-44d2-aa77-778c938e6ec8.png)'
  prefs: []
  type: TYPE_IMG
- en: Recovering deleted images in FTK Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also recommended to check whether the device has any backup applications
    or files installed. The initial release of Android did not include a mechanism
    for users to back up their personal data. Hence, several backup applications were
    used extensively by users. Using these apps, users can back up their data either
    to the SD card or to the cloud. For example, the **Super Backup** app contains
    the options to back up call logs, contacts, SMS, and more, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3613f886-2579-4196-8738-221a53c6ba08.png)'
  prefs: []
  type: TYPE_IMG
- en: The Super Backup Android app
  prefs: []
  type: TYPE_NORMAL
- en: Upon detection of a backup application, you must attempt to determine where
    the data is stored. Usually, the backup folder path is the internal SD card. The
    folder path is also present in the backup app's settings. The data saved in a
    backup may contain important information, and hence, looking for any third-party
    backup app on the device would be very helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering data deleted from the internal memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recovering files that are deleted from an Android device''s internal memory
    (such as SMS, contacts, and app data) is not supported by all analytical tools
    and may require manual carving. Unlike some media containing common filesystems,
    such as SD cards, the filesystem may not be recognized and mounted by forensic
    tools. Also, you cannot get access to the raw partitions of the internal memory
    of an Android phone unless the phone is rooted. It is recommended to image the
    device before and after the rooting process happens. The following are some of
    the other issues that you may face when attempting to recover data from the internal
    memory on Android devices:'
  prefs: []
  type: TYPE_NORMAL
- en: To get access to the internal memory, you can try to root the phone. However,
    the rooting process might involve writing some data to the `/data` partition,
    and this process could overwrite the data of value on the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike SD cards, the internal filesystem here is not FAT32 (which is widely
    supported by forensic tools). The internal filesystem could be YAFFS2 (on older
    devices), EXT3, EXT4, RFS, or something proprietary built to run on Android. Therefore,
    many of the recovery tools designed for use with Windows filesystems won't work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data on Android devices is commonly stored in the SQLite format.
    While most forensic tools provide access to the database files, they may have
    to be exported and viewed in a native browser. You must examine the raw data to
    ensure that the deleted data is not overlooked by the forensic tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The discussed reasons make it difficult, but not impossible, to recover the
    deleted data from the internal memory. The internal memory of Android devices
    holds the bulk of the user data and the possible keys to your investigation. As
    previously mentioned, the device must be rooted to access the raw partitions.
    Most of the Android recovery tools on the market do not highlight the fact that
    they only work on rooted phones. Let's now take a look at how we can recover deleted
    data from an Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering deleted files by parsing SQLite files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android uses SQLite files to store most data. Data related to text messages,
    emails, and certain app data is stored in SQLite files. SQLite databases can store
    deleted data within the database itself. Files marked for deletion by the user
    no longer appear in the active SQLite database files. Therefore, it is possible
    to recover the deleted data, such as text messages and contacts. There are two
    areas within a SQLite page that can contain deleted data—unallocated blocks and
    free blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the commercial tools that recover deleted data scan the unallocated
    blocks and free blocks of the SQLite pages. Parsing the deleted data can be done
    using the available forensic tools, such as **Oxygen Forensics SQLite Viewer**.
    The trial version of the SQLite Viewer can be used for this purpose; however,
    there are certain limitations on the amount of data that you can recover. You
    can write your own script to parse the files for deleted content, and for this,
    you need to have a good understanding of the SQLite file format. The [http://www.sqlite.org/fileformat.html](http://www.sqlite.org/fileformat.html) page is
    a good place to start. If you do not want to reinvent the wheel and want to reuse
    the existing scripts, you can try the available open source Python scripts ([http://az4n6.blogspot.in/2013/11/python-parser-to-recover-deleted-sqlite.html](http://az4n6.blogspot.in/2013/11/python-parser-to-recover-deleted-sqlite.html))
    to parse the SQLite files for deleted records.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, we will recover deleted SMSes from an Android device. Recovering
    deleted SMSs from an Android phone is quite often requested as part of the forensic
    analysis of a device, mainly because text messages contain data, which can reveal
    a lot of information. There are different ways to recover deleted text messages
    on an Android device. First, we need to understand where the messages are being
    stored on the device. In [Chapter 9](bf232566-3a17-4914-992b-80674dd379de.xhtml),
    *Android Data Extraction Techniques*, we explained the important locations on
    the Android device where user data is stored. Here is a quick recap of this:'
  prefs: []
  type: TYPE_NORMAL
- en: Every application stores its data under the `/data/data` folder (again, this
    requires root access to acquire data).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The files under the location, `/data/data/com.android.providers.telephony/databases`,
    contain details about the SMS/MMS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under the mentioned locations, text messages are stored in an SQLite database
    file, which is named `mmssms.db`. Deleted text messages can be recovered by examining
    this file. Here are the steps to recover deleted SMSes using the `mmssms.db` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Android device, enable the USB debugging mode and connect the device
    to the forensic workstation. Using the `adb` command-line tool, extract the databases
    folder present at `/data/data/` by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0fa3c4a-cf09-4b3f-a49d-bfc7153176a6.png)'
  prefs: []
  type: TYPE_IMG
- en: ADB pull command
  prefs: []
  type: TYPE_NORMAL
- en: Once the files are extracted to the local machine, use the Oxygen Forensics
    SQLite Viewer tool to open the `mmssms.db` file.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the table named `sms` and observe the current message under the Tables
    data tab in the tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One way to view the deleted data is by clicking on the Blocks containing deleted
    data tab, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd09b6cc-c32f-4012-927d-7a1a21324e42.png)'
  prefs: []
  type: TYPE_IMG
- en: Recovering deleted SMS messages
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, other data residing on Android devices that is stored in SQLite files
    can be recovered by parsing for deleted content. When the preceding method doesn't
    provide access to the deleted data, you should look at the file in raw hex file
    for data marked as deleted, which can be manually carved and reported.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering files using file-carving techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File carving is an extremely useful method in forensics because it allows data
    that has been deleted or hidden to be recovered for analysis. In simple terms,
    file carving is the process of reassembling computer files from fragments in the
    absence of filesystem metadata. In file carving, specified file types are searched
    for and extracted across the binary data to create a forensic image of a partition
    or an entire disk. File carving recovers files from the unallocated space in a
    drive based merely on file structure and content without any matching filesystem
    metadata. Unallocated space refers to the part of the drive that no longer holds
    any file information indicated by the filesystem structures, such as the file
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Files can be recovered or reconstructed by scanning the raw bytes of the disk
    and reassembling them. This can be done by examining the header (the first few
    bytes) and footer (the last few bytes) of a file.
  prefs: []
  type: TYPE_NORMAL
- en: File-carving methods are categorized based on the underlying technique in use.
    The header-footer carving method relies on recovering the files based on their
    header and footer information. For instance, for JPEG files, these start with
    `0xffd8` and end with `0xffd9`.
  prefs: []
  type: TYPE_NORMAL
- en: The locations of the header and footer are identified and everything between
    those two endpoints is carved. Similarly, the carving method based on the file
    structure uses the internal layout of a file to reconstruct the file. However,
    the traditional file-carving techniques, such as the ones that we've already explained,
    may not work if the data is fragmented. To overcome this, new techniques, such
    as smart carving, use the fragmentation characteristics of several popular filesystems
    to recover the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the phone is imaged, it can be analyzed using tools such as **Scalpel**.
    Scalpel is a powerful open source utility to carve files. This tool analyzes the
    block database storage, identifies the deleted files, and recovers them. Scalpel
    is filesystem-independent and is known to work on various filesystems, including
    FAT, NTFS, EXT2, EXT3, HFS, and more. More details about Scalpel can be found
    at [https://github.com/sleuthkit/scalpel](https://github.com/sleuthkit/scalpel).
    The following steps explain how to use Scalpel on an Ubuntu workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Scalpel on the Ubuntu workstation using the `sudo apt-get install scalpel`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `scalpel.conf` file present under the `/etc/scalpel` directory contains
    information about the supported file types, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4de510a-e735-4e48-9f5f-cb550289245a.png)'
  prefs: []
  type: TYPE_IMG
- en: The scalpel configuration file
  prefs: []
  type: TYPE_NORMAL
- en: This file needs to be modified to mention the files that are related to Android.
    A sample `scalpel.conf` file can be downloaded from [https://www.nowsecure.com/tools-and-trainings/#viaforensics](https://www.nowsecure.com/tools-and-trainings/#viaforensics).
    You can also uncomment the files and save the `conf` file to select file types
    of your choice. Once this is done, replace the original `conf` file with the one
    that is downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scalpel needs to be run along with the preceding configuration file on the
    `dd` image being examined. You can run the tool using the following command by
    inputting the configuration file and the `dd` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command is run, the tool starts to carve the files and build them
    accordingly as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16e1d626-b359-4783-975b-f0a94337a8c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the Scalpel tool on a dd file
  prefs: []
  type: TYPE_NORMAL
- en: 'The `output` folder that was specified in the preceding command now contains
    lists of folders that are based on the file types, as shown in the following screenshot.
    Each of these folders contains data that is based on the folder name. For instance,
    `jpg 2-0` contains files related to the `.jpg` extension that have been recovered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b0debf76-fb4c-4bbd-aacb-61d273c26730.png)'
  prefs: []
  type: TYPE_IMG
- en: Output folder after running the Scalpel tool
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, each folder contains recovered data from
    the Android device, such as images, PDF files, ZIP files, and more. While some
    pictures are recovered completely, some are not recovered fully, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/478b1fcc-46d1-4250-8609-a88ece1a76b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Recovered data using the Scalpel tool
  prefs: []
  type: TYPE_NORMAL
- en: Applications such as **DiskDigger** can be installed on Android devices to recover
    different types of files from both the internal memory and SD cards. DiskDigger
    includes support for JPG files, MP3 and WAV audio, MP4 and 3GP video, raw camera
    formats, Microsoft Office files (DOC, XLS, and PPT), and more. However, as mentioned
    earlier, the application requires root privileges on the Android device to recover
    the content from the internal memory. These changes should be clearly documented
    by you. The DiskDigger Android app operates in two different modes, basic scan
    mode and full scan mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full scan mode works only on rooted devices, whereas the basic scan mode
    works on any device. As shown in the following screenshot, on a rooted phone,
    the app automatically locates and displays the available partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbc0b996-23c3-4b2e-8733-34ff4a2ba878.png)'
  prefs: []
  type: TYPE_IMG
- en: The DiskDigger app
  prefs: []
  type: TYPE_NORMAL
- en: 'After you select the memory partition, the tool now prompts you to select the
    types of files that you would like to recover. Proceed by selecting the file types
    of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ea75d5e-d4be-4683-a3a5-611fc544acb1.png)'
  prefs: []
  type: TYPE_IMG
- en: The DiskDigger app file selection screen
  prefs: []
  type: TYPE_NORMAL
- en: Once the scanning begins, the DiskDigger app will automatically show you the
    files that are available for recovery. The recovered files can be either saved
    to the app or to the device directly. Hence, file-carving techniques play a very
    important role in recovering important deleted files from the device's internal
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: Recovering contacts using your Google account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also restore the contacts on the device using the Contacts app through
    the Google account that is configured on the device. This would work if the user
    of the device has previously synced their contacts using the Sync Settings option
    available in Android. This option synchronizes the contacts and other details
    and stores them in the cloud. A forensic examiner like you with legal authority
    or proper consent can restore the deleted contacts if you can get access to the
    Google account configured on the device. Once the account is accessed, perform
    the following steps to restore the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Google Contacts app on the Android device using the configured
    Google account. The following example is attempt on a OnePlus 5 device running
    the Android Pie version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Settings and then look for Restore, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ca9b41a-46bc-4948-ba14-50d7b4c9b11b.png)'
  prefs: []
  type: TYPE_IMG
- en: The Restore menu in the Contacts app
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Restore, and the following screen will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76745b73-595a-4ca2-b80a-7924728abe8e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Restore contacts dialog box
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, you can restore the contact list to a previous state when the
    backup was taken at various points in time. You can also use the Undo changes
    option under the Settings menu to restore the contacts to any state in the past
    30 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e817a2aa-d067-4158-b2ec-ae006e0bafb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Restore deleted contacts in Google account
  prefs: []
  type: TYPE_NORMAL
- en: Hence, using any one of the preceding techniques, a forensic examiner like you
    can attempt to easily recover deleted data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned various techniques to recover deleted data from
    an Android device. This process depends on various factors, which heavily rely
    on access to the data residing in the internal memory and SD card. We saw various
    techniques to recover deleted data from both SD card as well as internal memory.
    While the recovery of deleted items from external storage, such as an SD card,
    is easy, the recovery of deleted items from the internal memory takes considerable
    effort. We have also learned SQLite file-parsing and file-carving techniques,
    using which deleted data can be extracted from an Android device. With this knowledge,
    you can now perform data recovery during a forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter discusses the forensic analysis of Android apps and malware
    and the reverse engineering of Android apps.
  prefs: []
  type: TYPE_NORMAL
